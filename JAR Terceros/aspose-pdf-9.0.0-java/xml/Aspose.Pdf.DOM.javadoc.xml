<?xml version="1.0" encoding="UTF-8"?>

<doc>
  <assembly>
    <name>Aspose.Pdf</name>
  </assembly>
  <members>
    <member name="T:com.aspose.pdf.ActionCollection">
       
        <p>Collection of actions</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ActionCollection.size">
       
        <p>Count of actions on the collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ActionCollection.isSynchronized">
       
        <p>Returns true if object is synchronized.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ActionCollection.getSyncRoot">
       
        <p>Gets synchronization object.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ActionCollection.add(PdfAction)">
       
        <p>Adds new action into colleciton.</p> @param action
      
      <param name="PdfAction"/>
    </member>
    <member name="M:com.aspose.pdf.ActionCollection.delete(int)">
       
        <p>Removes action from collection by index.</p> @param index Index of action to remove.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.ActionCollection.delete">
       
        <p>Delete all actions.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ActionCollection.iterator">
       
        <p>Returns enumerator for collection.</p> @return Collection enumerator.
      
    </member>
    <member name="M:com.aspose.pdf.ActionCollection.get_Item(int)">
       
        <p>Gets action by its index.</p> @return Retreived action. @param index Index of action.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.ActionCollection.copyTo(Array,int)">
       
        <p>Copies actions array into collection.</p> @param array Array of actions which must be copied into collection. @param index Index starting from which array will be copied.
      
      <param name="Array"/>
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.Annotation">
       
        <p>Class representing annotation object.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Annotation.initialize(IDocument)">
      <param name="IDocument"/>
    </member>
    <member name="M:com.aspose.pdf.Annotation.getEngineObj"/>
    <member name="M:com.aspose.pdf.Annotation.getEngineDict"/>
    <member name="M:com.aspose.pdf.Annotation.getNormalAppearance">
       
        <p>Gets normal appearance.</p> @return
      
    </member>
    <member name="M:com.aspose.pdf.Annotation.getFlags">
       
        <p>Optional</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Annotation.setFlags(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Annotation.getPage">
       
        <p>Gets the page object with which this annotation is associated.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Annotation.getWidth">
       
        <p>Gets or sets width of the annotation.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Annotation.setWidth(double)">
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Annotation.getHeight">
       
        <p>Gets or sets height of the annotation.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Annotation.setHeight(double)">
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Annotation.getRect">
       
        <p>Gets or sets annotation rectangle.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Annotation.setRect(Rectangle)">
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.Annotation.getContents">
       
        <p>Gets or sets annotation text.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Annotation.setContents(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Annotation.getName">
       
        <p>Gets or sets annotation name on the page.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Annotation.setName(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Annotation.getModifiedInternal">
       
        <p>Gets date and time when annotation was recently modified.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Annotation.getModified"/>
    <member name="M:com.aspose.pdf.Annotation.setModifiedInternal(Object)">
       
        <p>Sets date and time when annotation was recently modified.</p> 
      
      <param name="Object"/>
    </member>
    <member name="M:com.aspose.pdf.Annotation.setModified(java.util.Date)">
      <param name="java.util.Date"/>
    </member>
    <member name="M:com.aspose.pdf.Annotation.getColor">
       
        <p>Gets annotation color.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Annotation.setColor(Color)">
       
        <p>Sets annotation color.</p> 
      
      <param name="Color"/>
    </member>
    <member name="M:com.aspose.pdf.Annotation.getBorder">
       
        <p>Gets annotation border characteristics. {@code Border}</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Annotation.setBorder(Border)">
       
        <p>Sets annotation border characteristics. {@code Border}</p> 
      
      <param name="Border"/>
    </member>
    <member name="M:com.aspose.pdf.Annotation.getActiveState">
       
        <p>Gets current annotation appearance state.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Annotation.setActiveState(String)">
       
        <p>Sets current annotation appearance state.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Annotation.getCharacteristics">
       
        <p>Gets annotation characteristics.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Annotation.getStates">
       
        <p>Gets appearance dictionary of annotation.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Annotation.getAlignment">
       
        <p>Gets or sets text alignmennt for annotation.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Annotation.setAlignment(int)">
       
        <p>Sets text alignmennt for annotation.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Annotation.getHorizontalAlignment_Annotation_New">
       
        <p>Gets or sets text alignmennt for annotation.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Annotation.setHorizontalAlignment_Annotation_New(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Annotation.accept(AnnotationSelector)">
       
        <p>Accepts visitor for annotation processing.</p> @param visitor
      
      <param name="AnnotationSelector"/>
    </member>
    <member name="M:com.aspose.pdf.Annotation.flatten">
       
        <p>Places annotation contents directly on the page, annotation object will be removed.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Annotation.getFullName">
       
        <p>Gets full qualified name of the annotation.</p> @return
      
    </member>
    <member name="M:com.aspose.pdf.Annotation.getAppearance">
       
        <p>Gets appearance dictionary of the annotation.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Annotation.getPageIndex">
       
        <p>Gets index of page which contains annotation.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Annotation.getPageIndex(Annotation)">
      <param name="Annotation"/>
    </member>
    <member name="F:com.aspose.pdf.Annotation._disableUpdateAppearance"/>
    <member name="T:com.aspose.pdf.AnnotationActionCollection">
       
        <p>Represents the collection of annotation actions.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.AnnotationActionCollection.getOnEnter">
       
        <p>Gets an action to be performed when the cursor enters the annotation�s active area.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.AnnotationActionCollection.setOnEnter(PdfAction)">
       
        <p>Sets an action to be performed when the cursor enters the annotation�s active area.</p> 
      
      <param name="PdfAction"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationActionCollection.getOnExit">
       
        <p>Gets an action to be performed when the cursor exits the annotation�s active area.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.AnnotationActionCollection.setOnExit(PdfAction)">
       
        <p>Sets an action to be performed when the cursor exits the annotation�s active area.</p> 
      
      <param name="PdfAction"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationActionCollection.getOnPressMouseBtn">
       
        <p>Gets an action to be performed when the mouse button is pressed inside the annotation�s active area.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.AnnotationActionCollection.setOnPressMouseBtn(PdfAction)">
       
        <p>Sets an action to be performed when the mouse button is pressed inside the annotation�s active area.</p> 
      
      <param name="PdfAction"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationActionCollection.getOnReleaseMouseBtn">
       
        <p>Gets an action to be performed when the mouse button is released inside the annotation�s active area.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.AnnotationActionCollection.setOnReleaseMouseBtn(PdfAction)">
       
        <p>Sets an action to be performed when the mouse button is released inside the annotation�s active area.</p> 
      
      <param name="PdfAction"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationActionCollection.getOnReceiveFocus">
       
        <p>Gets an action to be performed when the annotation receives the input focus.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.AnnotationActionCollection.setOnReceiveFocus(PdfAction)">
       
        <p>Sets an action to be performed when the annotation receives the input focus.</p> 
      
      <param name="PdfAction"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationActionCollection.getOnOpenPage">
       
        <p>Gets an action to be performed when the page containing the annotation is opened.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.AnnotationActionCollection.setOnOpenPage(PdfAction)">
       
        <p>Sets an action to be performed when the page containing the annotation is opened.</p> 
      
      <param name="PdfAction"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationActionCollection.getOnClosePage">
       
        <p>Gets an action to be performed when the page containing the annotation is closed.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.AnnotationActionCollection.setOnClosePage(PdfAction)">
       
        <p>Sets an action to be performed when the page containing the annotation is closed.</p> 
      
      <param name="PdfAction"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationActionCollection.getOnShowPage">
       
        <p>Get an action to be performed when the page containing the annotation becomes visible in the viewer application�s user interface.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.AnnotationActionCollection.setOnShowPage(PdfAction)">
       
        <p>Sets an action to be performed when the page containing the annotation becomes visible in the viewer application�s user interface.</p> 
      
      <param name="PdfAction"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationActionCollection.getOnHidePage">
       
        <p>Gets an action to be performed when the page containing the annotation is no longer visible in the viewer application�s user interface.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.AnnotationActionCollection.setOnHidePage(PdfAction)">
       
        <p>Sets an action to be performed when the page containing the annotation is no longer visible in the viewer application�s user interface.</p> 
      
      <param name="PdfAction"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationActionCollection.getOnLostFocus">
       
        <p>Gets an action to be performed when the annotation loses the input focus.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.AnnotationActionCollection.setOnLostFocus(PdfAction)">
       
        <p>Sets an action to be performed when the annotation loses the input focus.</p> 
      
      <param name="PdfAction"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationActionCollection.getOnModifyCharacter">
       
        <p>Gets or sets an action to be performed when user modifies character of the field.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.AnnotationActionCollection.setOnModifyCharacter(PdfAction)">
      <param name="PdfAction"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationActionCollection.getOnValidate">
       
        <p>Gets or sets an action to be performed when user changes contents of the field.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.AnnotationActionCollection.setOnValidate(PdfAction)">
      <param name="PdfAction"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationActionCollection.getOnFormat">
       
        <p>Gets or sets an action to be performed to format field value.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.AnnotationActionCollection.setOnFormat(PdfAction)">
      <param name="PdfAction"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationActionCollection.getOnCalculate">
       
        <p>Gets or sets an action to calculate field value.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.AnnotationActionCollection.setOnCalculate(PdfAction)">
      <param name="PdfAction"/>
    </member>
    <member name="T:com.aspose.pdf.AnnotationCollection">
       
        <p>Class representing annotation collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.AnnotationCollection.isSynchronized">
       
        <p>Gets a value indicating whether access to the com.aspose.pdf.AnnotationCollection is synchronized (thread safe).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.AnnotationCollection.getSyncRoot">
       
        <p>Gets an object that can be used to synchronize access to com.aspose.pdf.AnnotationCollection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.AnnotationCollection.size">
       
        <p>Gets count of annotations in collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.AnnotationCollection.add(Annotation)">
       
        <p>Adds annotation in the collection.</p> @param annotation Annotation which shall be added.
      
      <param name="Annotation"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationCollection.delete(int)">
       
        <p>Deletes annotation from the collection by index.</p> @param index Index of annotation which shall be deleted.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationCollection.delete">
       
        <p>Deletes all annotations from the collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.AnnotationCollection.copyTo(Array,int)">
       
        <p>Copies array of annotations into collection.</p> @param array Array to copy into collection. @param index Starting index where colleciton wil lbe copied.
      
      <param name="Array"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationCollection.iterator">
       
        <p>Returns collection enumerator.</p> @return Enumerator object
      
    </member>
    <member name="M:com.aspose.pdf.AnnotationCollection.accept(AnnotationSelector)">
       
        <p>Accepts visitor to process annotation.</p> @param visitor
      
      <param name="AnnotationSelector"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationCollection.delete(Annotation)">
       
        <p>Deletes specified annotation from the collection.</p> @param annotation Annotation which shall be deleted.
      
      <param name="Annotation"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationCollection.get_Item(int)">
       
        <p>The index of the element to get.</p> @return Annotation object @param index The index value started from one.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationCollection.#ctor(Page)">
       
        <p>Constructor of AnnotationCollection. Creates annotation collection for annotations on the given page.</p> @param page Parent page of annotations.
      
      <param name="Page"/>
    </member>
    <member name="T:com.aspose.pdf.AnnotationFlags">
       
        <p>A set of flags specifying various characteristics of the annotation.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationFlags.Default">
       
        <p>Default value.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationFlags.Invisible">
       
        <p>If set, do not display the annotation if it does not belong to one of the standard annotation types and no annotation handler is available. If clear, display such an unknown annotation using an appearance stream specified by its appearance dictionary, if any.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationFlags.Hidden">
       
        <p>If set, do not display or print the annotation or allow it to interact with the user, regardless of its annotation type or whether an annotation handler is available. In cases where screen space is limited, the ability to hide and show annotations selectively can be used in combination with appearance streams to display auxiliary pop-up information similar in function to online help systems.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationFlags.Print">
       
        <p>If set, print the annotation when the page is printed. If clear, never print the annotation, regardless of whether it is displayed on the screen. This can be useful, for example, for annotations representing interactive pushbuttons, which would serve no meaningful purpose on the printed page.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationFlags.NoZoom">
       
        <p>If set, do not scale the annotation�s appearance to match the magnification of the page. The location of the annotation on the page (defined by the upper-left corner of its annotation rectangle) remains fixed, regardless of the page magnification.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationFlags.NoRotate">
       
        <p>If set, do not rotate the annotation�s appearance to match the rotation of the page. The upper-left corner of the annotation rectangle remains in a fixed location on the page, regardless of the page rotation.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationFlags.NoView">
       
        <p>If set, do not display the annotation on the screen or allow it to interact with the user. The annotation may be printed (depending on the setting of the Print flag) but should be considered hidden for purposes of on-screen display and user interaction.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationFlags.ReadOnly">
       
        <p>If set, do not allow the annotation to interact with the user. The annotation may be displayed or printed (depending on the settings of the NoView and Print flags) but should not respond to mouse clicks or change its appearance in response to mouse motions. This flag is ignored for widget annotations; its function is subsumed by the ReadOnly flag of the associated form field.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationFlags.Locked">
       
        <p>If set, do not allow the annotation to be deleted or its properties (including position and size) to be modified by the user. However, this flag does not restrict changes to the annotation�s contents, such as the value of a form field.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationFlags.ToggleNoView">
       
        <p>If set, invert the interpretation of the NoView flag for certain events. A typical use is to have an annotation that appears only when a mouse cursor is held over it.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationFlags.LockedContents">
       
        <p>If set, do not allow the contents of the annotation to be modified by the user. This flag does not restrict deletion of the annotation or changes to other annotation properties, such as position and size.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.AnnotationSelector">
       
        <p>This class is used for selecting annotations using Visitor template idea.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.AnnotationSelector.visit(LinkAnnotation)">
       
        <p>Select link annotation if AnnotationSelector was initialized with LinkAnnotation object.</p> @param link LinkAnnotation object for selecting.
      
      <param name="LinkAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationSelector.visit(FileAttachmentAnnotation)">
       
        <p>Select attachment annotation if AnnotationSelector was initialized with FileAttachmentAnnotation object.</p> @param attachment FileAttachmentAnnotation object for selecting.
      
      <param name="FileAttachmentAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationSelector.visit(TextAnnotation)">
       
        <p>Select text annotation if AnnotationSelector was initialized with TextAnnotation object.</p> @param text TextAnnotation object for selecting.
      
      <param name="TextAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationSelector.visit(FreeTextAnnotation)">
       
        <p>Select freetext annotation if AnnotationSelector was initialized with FreeTextAnnotation object.</p> @param freetext FreeTextAnnotation object for selecting.
      
      <param name="FreeTextAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationSelector.visit(HighlightAnnotation)">
       
        <p>Select attachment annotation if AnnotationSelector was initialized with FreeTextAnnotation object.</p> @param highlight HighlightAnnotation object for selecting.
      
      <param name="HighlightAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationSelector.visit(UnderlineAnnotation)">
       
        <p>Select underline annotation if AnnotationSelector was initialized with UnderlineAnnotation object.</p> @param underline UnderlineAnnotation object for selecting.
      
      <param name="UnderlineAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationSelector.visit(StrikeOutAnnotation)">
       
        <p>Select strikeOut annotation if AnnotationSelector was initialized with StrikeOutAnnotation object.</p> @param strikeOut StrikeOutAnnotation object for selecting.
      
      <param name="StrikeOutAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationSelector.visit(SquigglyAnnotation)">
       
        <p>Select squiggly annotation if AnnotationSelector was initialized with SquigglyAnnotation object.</p> @param squiggly SquigglyAnnotation object for selecting.
      
      <param name="SquigglyAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationSelector.visit(PopupAnnotation)">
       
        <p>Select popup annotation if AnnotationSelector was initialized with PopupAnnotation object.</p> @param popup PopupAnnotation object for selecting.
      
      <param name="PopupAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationSelector.visit(LineAnnotation)">
       
        <p>Select line annotation if AnnotationSelector was initialized with LineAnnotation object.</p> @param line LineAnnotation object for selecting.
      
      <param name="LineAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationSelector.visit(CircleAnnotation)">
       
        <p>Select circle annotation if AnnotationSelector was initialized with CircleAnnotation object.</p> @param circle CircleAnnotation object for selecting.
      
      <param name="CircleAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationSelector.visit(SquareAnnotation)">
       
        <p>Select square annotation if AnnotationSelector was initialized with SquareAnnotation object.</p> @param square SquareAnnotation object for selecting.
      
      <param name="SquareAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationSelector.visit(InkAnnotation)">
       
        <p>Select ink annotation if AnnotationSelector was initialized with InkAnnotation object.</p> @param ink InkAnnotation object for selecting.
      
      <param name="InkAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationSelector.visit(PolylineAnnotation)">
       
        <p>Select polyline annotation if AnnotationSelector was initialized with PolylineAnnotation object.</p> @param polyline PolylineAnnotation object for selecting.
      
      <param name="PolylineAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationSelector.visit(PolygonAnnotation)">
       
        <p>Select polygon annotation if AnnotationSelector was initialized with PolygonAnnotation object.</p> @param polygon PolygonAnnotation object for selecting.
      
      <param name="PolygonAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationSelector.visit(CaretAnnotation)">
       
        <p>Select caret annotation if AnnotationSelector was initialized with CaretAnnotation object.</p> @param caret CaretAnnotation object for selecting.
      
      <param name="CaretAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationSelector.visit(StampAnnotation)">
       
        <p>Select stamp annotation if AnnotationSelector was initialized with StampAnnotation object.</p> @param stamp StampAnnotation object for selecting.
      
      <param name="StampAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationSelector.visit(WidgetAnnotation)">
       
        <p>Select widget annotation if AnnotationSelector was initialized with WidgetAnnotation object.</p> @param widget WidgetAnnotation object for selecting.
      
      <param name="WidgetAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationSelector.visit(MovieAnnotation)">
       
        <p>Select movie annotation if AnnotationSelector was initialized with MovieAnnotation object.</p> @param movie MovieAnnotation object for selecting.
      
      <param name="MovieAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationSelector.visit(ScreenAnnotation)">
       
        <p>Select screen annotation if AnnotationSelector was initialized with ScreenAnnotation object.</p> @param screen ScreenAnnotation object for selecting.
      
      <param name="ScreenAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.AnnotationSelector.#ctor(Annotation)">
       
        <p>Initializes new {@code AnnotationSelector} object.</p> @param annotation Annotation to be selected. This object only describes some characteristics we want found annotations to have, e.g. the type of annotation.
      
      <param name="Annotation"/>
    </member>
    <member name="T:com.aspose.pdf.AnnotationState">
       
        <p>The enumeration of states to which the original annotation can be set.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationState.Undefined">
       
        <p>Not defined state.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationState.Marked">
       
        <p>The annotation has been marked by the user.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationState.Unmarked">
       
        <p>The annotation has not been marked by the user.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationState.Accepted">
       
        <p>The user agrees with the change.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationState.Rejected">
       
        <p>The user disagrees with the change.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationState.Cancelled">
       
        <p>The change has been cancelled.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationState.Completed">
       
        <p>The change has been completed.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationState.None">
       
        <p>The user has indicated nothing about the change.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.AnnotationStateModel">
       
        <p>The state model corresponding to state of annotation.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationStateModel.Undefined">
       
        <p>Not defined state model.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationStateModel.Marked">
       
        <p>The annotation has been marked (or unmarked) by the user.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationStateModel.Review">
       
        <p>The annotation has been reviewed (accepted, rejected, cancelled, completed, none) by the user.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.AnnotationType">
       
        <p>Enumeration of annotation types.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationType.Text">
       
        <p>Text annotation type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationType.Circle">
       
        <p>Circle annotation type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationType.Polygon">
       
        <p>Polygon annotation type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationType.PolyLine">
       
        <p>Polyline annotation type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationType.Line">
       
        <p>Line annotation type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationType.Square">
       
        <p>Square annotatotion type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationType.FreeText">
       
        <p>Free text annotation type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationType.Highlight">
       
        <p>Highlight annotation type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationType.Underline">
       
        <p>Underline annotation type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationType.Squiggly">
       
        <p>Squiggle annotation type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationType.StrikeOut">
       
        <p>Strikeout annotation type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationType.Caret">
       
        <p>Caret annotation type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationType.Ink">
       
        <p>Ink annotation type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationType.Link">
       
        <p>Link annotation type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationType.Popup">
       
        <p>Popup annotation type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationType.FileAttachment">
       
        <p>File attachment annotation type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationType.Sound">
       
        <p>Sound annotation type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationType.Movie">
       
        <p>Movie annotation type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationType.Screen">
       
        <p>Screen annotation type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationType.Widget">
       
        <p>Widget annotation type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationType.Watermark">
       
        <p>Watermark annotation type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationType.TrapNet">
       
        <p>Trap network annotation type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationType.PrinterMark">
       
        <p>Printer mark annotation type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AnnotationType.Stamp">
       
        <p>Rubber stamp annotation type.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.AppearanceDictionary">
       
        <p>Annotation appearance dictionary specifying how the annotation shall be presented visually on the page.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.AppearanceDictionary.getDict"/>
    <member name="M:com.aspose.pdf.AppearanceDictionary.isReadOnly">
       
        <p>Gets a value indicating whether dictionary is read-only.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.AppearanceDictionary.isFixedSize">
       
        <p>Gets a value indicating whether dictionary has a fixed size.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.AppearanceDictionary.getKeys">
       
        <p>Gets keys of the dictionary. If appearance dictionary has subditionaries, then {@code Keys} contains (N|R|D).state values, where N - normal appearance, R - rollover appearance, D - down appearance and state - the name of the state (e.g. On, Off for checkboxes).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.AppearanceDictionary.getValues">
       
        <p>Gets the list of the dictionary values. Result collection contains the list of XForm objects.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.AppearanceDictionary.isSynchronized">
       
        <p>Gets a value indicating whether access to the dictionary is synchronized (thread safe).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.AppearanceDictionary.getSyncRoot">
       
        <p>Gets an object that can be used to synchronize access to the dictionary.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.AppearanceDictionary.size">
       
        <p>Gets the number of elements contained in the dictionary.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.AppearanceDictionary.contains(Object)">
       
        <p>Determines whether dictionary contains an element with the specified key.</p> 
      
      <param name="Object"/>
    </member>
    <member name="M:com.aspose.pdf.AppearanceDictionary.removeItem(Object)">
       
        <p>Removes the element with the specified key.</p> 
      
      <param name="Object"/>
    </member>
    <member name="M:com.aspose.pdf.AppearanceDictionary.clear">
       
        <p>Removes all elements from the dictionary.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.AppearanceDictionary.addItem(Object,Object)">
       
        <p>Adds an element with the provided key and value.</p> @param key Element key. @param value Element value.
      
      <param name="Object"/>
      <param name="Object"/>
    </member>
    <member name="M:com.aspose.pdf.AppearanceDictionary.iterator">
       
        <p>Returns an IDictionaryEnumerator object for the dictionary.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.AppearanceDictionary.copyTo(Array,int)">
       
        <p>Copies the elements of the dictionary to an Array, starting at a particular Array index.</p> 
      
      <param name="Array"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.AppearanceDictionary.get_Item_internal(Object)">
      <param name="Object"/>
    </member>
    <member name="M:com.aspose.pdf.AppearanceDictionary.set_Item(Object,Object)">
      <param name="Object"/>
      <param name="Object"/>
    </member>
    <member name="M:com.aspose.pdf.AppearanceDictionary.get_Item(Object)">
       
        <p>Represents convenient form for getting appearance streams.</p> @return XForm object (appearance stream) which corresponds to the given key. @param key Represents path to appearance stream. If appearance dictionary has subdictionaries, then path must contain 2 parts ({@code Keys}), else path has only one part.
      
      <param name="Object"/>
    </member>
    <member name="M:com.aspose.pdf.AppearanceDictionary.set_Item(Object,XForm)">
      <param name="Object"/>
      <param name="XForm"/>
    </member>
    <member name="M:com.aspose.pdf.AppearanceDictionary.iterator_Rename_Namesake"/>
    <member name="T:com.aspose.pdf.Artifact"/>
    <member name="M:com.aspose.pdf.Artifact.getCustomType">
      Gets name of artifact type. May be used if artifact type is non standard. @return
    </member>
    <member name="M:com.aspose.pdf.Artifact.setCustomType(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Artifact.getCustomSubtype">
      Gets name of artifact subtype. May be used if artifact subtype is not standard subtype. @return
    </member>
    <member name="M:com.aspose.pdf.Artifact.setCustomSubtype(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Artifact.getType">
      Gets artifact type. @return
    </member>
    <member name="M:com.aspose.pdf.Artifact.setType(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Artifact.getSubtype">
      Gets artifact subtype. If artifact has non-standard subtype, name of the subtype may be read via CustomSubtype. @return
    </member>
    <member name="M:com.aspose.pdf.Artifact.setSubtype(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Artifact.getContentsInternal">
      Gets collection of artifact internal operators. @return
    </member>
    <member name="M:com.aspose.pdf.Artifact.getForm">
      Gets XForm of the artifact (if XForm is used). @return
    </member>
    <member name="M:com.aspose.pdf.Artifact.getRectangle">
      Gets rectangle of the artifact. @return
    </member>
    <member name="M:com.aspose.pdf.Artifact.getPosition">
      Gets or sets artifact position. If this property is specified, then margins and alignments are ignored. @return
    </member>
    <member name="M:com.aspose.pdf.Artifact.setPosition(Point)">
      <param name="Point"/>
    </member>
    <member name="M:com.aspose.pdf.Artifact.getRightMargin">
      Right margin of artifact. If position is specified explicitly (in Position property) this value is ignored. @return
    </member>
    <member name="M:com.aspose.pdf.Artifact.setRightMargin(double)">
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Artifact.getLeftMargin">
      Left margin of artifact. If position is specified explicitly (in Position property) this value is ignored. @return
    </member>
    <member name="M:com.aspose.pdf.Artifact.setLeftMargin(double)">
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Artifact.getTopMargin">
      Top margin of artifact. If position is specified explicitly (in Position property) this value is ignored.
    </member>
    <member name="M:com.aspose.pdf.Artifact.setTopMargin(double)">
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Artifact.getBottomMargin">
      Bottom margin of artifact. If position is specified explicitly (in Position property) this value is ignored.
    </member>
    <member name="M:com.aspose.pdf.Artifact.setBottomMargin(double)">
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Artifact.getArtifactHorizontalAlignment">
      Horizontal alignment of artifact. If position is specified explicitly (in Position property) this value is ignored. @return
    </member>
    <member name="M:com.aspose.pdf.Artifact.setArtifactHorizontalAlignment(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Artifact.getArtifactVerticalAlignment">
      Vertical alignment of artifact. If position is specified explicitly (in Position property) this value is ignored. @return
    </member>
    <member name="M:com.aspose.pdf.Artifact.setArtifactVerticalAlignment(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Artifact.getRotation">
      Gets or sets articat rotatin angle. @return
    </member>
    <member name="M:com.aspose.pdf.Artifact.setRotation(double)">
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Artifact.getText">
      Gets text of the artifact. @return
    </member>
    <member name="M:com.aspose.pdf.Artifact.setText(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Artifact.getImage">
      Gets image of the artifact (if presents). @return
    </member>
    <member name="M:com.aspose.pdf.Artifact.getOpacity">
      Gets or sets opacity of the artifact. Possible values are in range 0..1. @return
    </member>
    <member name="M:com.aspose.pdf.Artifact.setOpacity(double)">
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Artifact.setText(FormattedText)">
      Sets text of the artifact. @param formattedText FormattedText object which contains artifact text.
      <param name="FormattedText"/>
    </member>
    <member name="M:com.aspose.pdf.Artifact.setImage(Stream)">
      Sets image of the artifact. @param imageStream Stream which contains image data.
      <param name="Stream"/>
    </member>
    <member name="M:com.aspose.pdf.Artifact.setImage(String)">
      Sets image of the artifact. @param imageName Name of image file.
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Artifact.setPdfPage(Page)">
      Sets PDF page which is placed on the document page as artifact. @param page
      <param name="Page"/>
    </member>
    <member name="M:com.aspose.pdf.Artifact.dispose"/>
    <member name="M:com.aspose.pdf.Artifact.getValue(String)">
      Gets custom value of artifact. @param name Name of value. @return Value, or null if value does not exists.
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Artifact.setValue(String,String)">
      Sets custom value of artifact. @param name Name of custom value. @param value
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Artifact.removeValue(String)">
      Remove custom value from the artifact. @param name Name of custom value to be removed.
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Artifact.beginUpdates">
      Start delated updates. Use this feature if you need make several changes to the same artifact to improve performance. Usually artifact operators are changed anytime when artifact property was changed. This causes changing of page contents everytime when artifact was changed. To avoid this effect put all artifact updates between StartUpdates/SaveUpdates calls. This allows to change page contents only once. 
        <example> 
          <code>Artifact art = doc.getPages().get_Item(1).getArtifacts().get_Item(1); art.beginUpdates(); art.setOpacity ( 0.3f); art.setPosition ( new Point(10,10)); art.setRotation (30); art.saveUpdates();</code> 
        </example> 
      
    </member>
    <member name="M:com.aspose.pdf.Artifact.saveUpdates">
      Saves all updates in artifact which were made after BeginUpdates() call.
    </member>
    <member name="M:com.aspose.pdf.Artifact.#ctor(ArtifactCollection,Resources,Matrix,ArrayList,IPdfDictionary)">
      This constructor is used when artifact is read from the page. ARtifactCollection passes page resources, initial matrix, operators of the artifact ("contents") and properties dictionary. @param owner @param resources @param matrix @param _contents @param _properties
      <param name="ArtifactCollection"/>
      <param name="Resources"/>
      <param name="Matrix"/>
      <param name="ArrayList"/>
      <param name="IPdfDictionary"/>
    </member>
    <member name="M:com.aspose.pdf.Artifact.#ctor(String,String)">
      Constructor of artifact with specified type and subtype @param type Name of artifact type. @param subType NAme of artifact subtype.
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Artifact.#ctor(int,int)">
      Constructor of artifact with specified type and subtype @param type Artifact type. @param subType Artifact subtype.
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.Artifact.ArtifactType">
      Enumeration of possuble artifact types.
    </member>
    <member name="F:com.aspose.pdf.Artifact.ArtifactType.Pagination">
      Pagination artifacts. Ancillary page features such as running heads and folios (page numbers).
    </member>
    <member name="F:com.aspose.pdf.Artifact.ArtifactType.Layout">
      Layout artifacts. Purely cosmetic typographical or design elements such as footnote rules or background screens.
    </member>
    <member name="F:com.aspose.pdf.Artifact.ArtifactType.Page">
      Page artifacts. Production aids extraneous to the document itself, such as cut marks and colour bars.
    </member>
    <member name="F:com.aspose.pdf.Artifact.ArtifactType.Background">
      Background artifacts. Images, patterns or coloured blocks.
    </member>
    <member name="F:com.aspose.pdf.Artifact.ArtifactType.Undefined">
      Artifact type is not defined or unknown.
    </member>
    <member name="T:com.aspose.pdf.Artifact.ArtifactSubtype">
      Enumeration of possible artifacts subtype.
    </member>
    <member name="F:com.aspose.pdf.Artifact.ArtifactSubtype.Header">
      Header artifact.
    </member>
    <member name="F:com.aspose.pdf.Artifact.ArtifactSubtype.Footer">
      Footer artifact.
    </member>
    <member name="F:com.aspose.pdf.Artifact.ArtifactSubtype.Watermark">
      Watermark artifact.
    </member>
    <member name="F:com.aspose.pdf.Artifact.ArtifactSubtype.Background">
      Background artifact.
    </member>
    <member name="F:com.aspose.pdf.Artifact.ArtifactSubtype.Undefined">
      Artifact subtype is not defined or unknown.
    </member>
    <member name="T:com.aspose.pdf.Artifact.HorizontalAlignment">
      Descibes horizontal alignment of artifact on the page.
    </member>
    <member name="F:com.aspose.pdf.Artifact.HorizontalAlignment.Left">
      Header artifact.
    </member>
    <member name="F:com.aspose.pdf.Artifact.HorizontalAlignment.Center">
      Center alignemnt.
    </member>
    <member name="F:com.aspose.pdf.Artifact.HorizontalAlignment.Right">
      Right alignment.
    </member>
    <member name="T:com.aspose.pdf.Artifact.VerticalAlignment">
      Descibes horizontal alignment of artifact on the page.
    </member>
    <member name="F:com.aspose.pdf.Artifact.VerticalAlignment.Top">
      Top alignment.
    </member>
    <member name="F:com.aspose.pdf.Artifact.VerticalAlignment.Center">
      Center alignemnt.
    </member>
    <member name="F:com.aspose.pdf.Artifact.VerticalAlignment.Bottom">
      Bottom alignment.
    </member>
    <member name="T:com.aspose.pdf.ArtifactCollection">
      Class represents artifact collection.
    </member>
    <member name="M:com.aspose.pdf.ArtifactCollection.isSynchronized"/>
    <member name="M:com.aspose.pdf.ArtifactCollection.size">
      Gets count of artifacts in collection.
    </member>
    <member name="M:com.aspose.pdf.ArtifactCollection.getSyncRoot">
      Gets synchronization object of the collection.
    </member>
    <member name="M:com.aspose.pdf.ArtifactCollection.copyTo(Array,int)">
      Copies colection into an array.
      <param name="Array"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.ArtifactCollection.iterator">
      Gets enumerator for the collection.
    </member>
    <member name="M:com.aspose.pdf.ArtifactCollection.getItem(int)">
      Gets artifact by index. Index is started from 1. @param index Index of the artifact. @return Artifact on the page.
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.ArtifactCollection.add(Artifact)">
      Adds artifacts to the collection. @param artifact Artifact which sould be added to collection.
      <param name="Artifact"/>
    </member>
    <member name="M:com.aspose.pdf.ArtifactCollection.findByValue(String,String)">
       
        <p>Finds artifacts by custom value.</p> @return @param name Name of custom value. @param expectedValue Value to find.
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.ArtifactCollection.delete(Artifact)">
      Deletes specified artifact. @param artifact
      <param name="Artifact"/>
    </member>
    <member name="M:com.aspose.pdf.ArtifactCollection.update(Artifact)">
      <param name="Artifact"/>
    </member>
    <member name="M:com.aspose.pdf.ArtifactCollection.delete(int)">
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.AssemblyConstants">
       
        <p>Defines the constants that participate in the license check for the component. These used to be defined directly as assembly attributes.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AssemblyConstants.PRODUCT">
       
        <p>This is used by Aspose licensing code to verify the license is for the correct product.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AssemblyConstants.VERSION">
       
        <p>The version of the assembly.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.AssemblyConstants.Producer">
       
        <p>The producer of the Pdf file.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.BackgroundArtifact">
      Class descibes background artifact. This artifact allows to set background of the page.
    </member>
    <member name="M:com.aspose.pdf.BackgroundArtifact.getBackgroundColor">
      Gets bacground color of background artifact @return
    </member>
    <member name="M:com.aspose.pdf.BackgroundArtifact.setBackgroundColor(java.awt.Color)">
      Sets bacground color of background artifact @return
      <param name="java.awt.Color"/>
    </member>
    <member name="M:com.aspose.pdf.BackgroundArtifact.getBackgroundImage">
      Gets bacground image of background artifact @return
    </member>
    <member name="M:com.aspose.pdf.BackgroundArtifact.getBackgroundImage(Stream)">
      Gets bacground image of background artifact @return
      <param name="Stream"/>
    </member>
    <member name="M:com.aspose.pdf.BackgroundArtifact.setBackgroundImage(InputStream)">
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.BackgroundArtifact.#ctor"/>
    <member name="T:com.aspose.pdf.BarcodeField">
       
        <p>Class represents barcode field.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.BarcodeField.getResolution">
       
        <p>Gets the resolution, in dots-per-inch (dpi), at which the barcode object is rendered.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.BarcodeField.getCaption">
       
        <p>Gets the caption of the barcode object.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.BarcodeField.getSymbology">
       
        <p>Specifies which barcode or glyph technology is to be used on this annotation, see {@code Symbology} for details.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.BarcodeField.getXSymWidth">
       
        <p>Gets The horizontal distance, in pixels, between two barcode modules.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.BarcodeField.getXSymHeight">
       
        <p>Gets the the vertical distance between two barcode modules, measured in pixels. The ratio XSymHeight/XSymWidth shall be an integer value. For PDF417, the acceptable ratio range is from 1 to 4. For QRCode and DataMatrix, this ratio shall always be 1</p> 
      
    </member>
    <member name="M:com.aspose.pdf.BarcodeField.getECC">
       
        <p>Gets an integer value representing the error correction coefficient. For PDF417, shall be from 0 to 8. For QRCode, shall be from 0 to 3 (0 for �L�, 1 for �M�, 2 for �Q�, and 3 for �H�).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.BarcodeField.#ctor(Page,Rectangle)">
       
        <p>Initializes new instance of the {@code BarcodeField} class.</p> @param page The page where to place new barcode. @param rect Barcode sizes given in rectangle.
      
      <param name="Page"/>
      <param name="Rectangle"/>
    </member>
    <member name="T:com.aspose.pdf.BaseActionCollection">
      Class incapsulates basic actions wuth page/annotation/field interactive actions
    </member>
    <member name="M:com.aspose.pdf.BaseActionCollection.removeActions">
      Removes all actions of the annotation.
    </member>
    <member name="T:com.aspose.pdf.BaseParagraph">
      Represents a abstract base object can be added to the page(doc.Paragraphs.Add()).
    </member>
    <member name="M:com.aspose.pdf.BaseParagraph.setVerticalAlignment(int)">
      Sets a vertical alignment of paragraph @return
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.BaseParagraph.getHorizontalAlignment">
      Gets a horizontal alignment of paragraph @return
    </member>
    <member name="M:com.aspose.pdf.BaseParagraph.setHorizontalAlignment(int)">
      Sets a horizontal alignment of paragraph @return
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.BaseParagraph.getMargin">
      Gets a outer margin for paragraph (for pdf generation) @return
    </member>
    <member name="M:com.aspose.pdf.BaseParagraph.setMargin(MarginInfo)">
      Sets a outer margin for paragraph (for pdf generation) @return
      <param name="MarginInfo"/>
    </member>
    <member name="M:com.aspose.pdf.BaseParagraph.isKeptWithNext">
      Gets a bool value that indicates whether current paragraph remains in the same page along with next paragraph. Default is false.(for pdf generation) @return
    </member>
    <member name="M:com.aspose.pdf.BaseParagraph.isKeptWithNext(boolean)">
      Sets a bool value that indicates whether current paragraph remains in the same page along with next paragraph. Default is false.(for pdf generation) @return
      <param name="boolean"/>
    </member>
    <member name="T:com.aspose.pdf.BlendMode">
       
        <p>The blend modes enumeration.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BlendMode.Normal">
       
        <p>Normal blend mode.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BlendMode.Multiply">
       
        <p>Multiply blend mode.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BlendMode.Screen">
       
        <p>Screen blend mode.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BlendMode.Overlay">
       
        <p>Overlay blend mode.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BlendMode.Darken">
       
        <p>Darken blend mode.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BlendMode.Lighten">
       
        <p>Lighten blend mode.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BlendMode.ColorDodge">
       
        <p>ColorDodge blend mode.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BlendMode.ColorBurn">
       
        <p>ColorBurn blend mode.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BlendMode.HardLight">
       
        <p>HardLight blend mode.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BlendMode.SoftLight">
       
        <p>SoftLight blend mode.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BlendMode.Difference">
       
        <p>Difference blend mode.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BlendMode.Exclusion">
       
        <p>Exclusion blend mode.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BlendMode.Hue">
       
        <p>Hue blend mode.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BlendMode.Saturation">
       
        <p>Saturation blend mode.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BlendMode.Color">
       
        <p>Color blend mode.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BlendMode.Luminosity">
       
        <p>Luminosity blend mode.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.Border">
       
        <p>Class representing characteristics of annotation border.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Border.getHCornerRadius">
       
        <p>Gets horizontal corner radius.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Border.setHCornerRadius(int)">
       
        <p>Sets horizontal corner radius.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Border.getVCornerRaduis">
       
        <p>Gets or sets vertical corner radius.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Border.setVCornerRaduis(int)">
       
        <p>Sets vertical corner radius.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Border.getWidth">
       
        <p>Gets border width.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Border.setWidth(int)">
       
        <p>Sets border width.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Border.getEffectIntensity">
       
        <p>Gets effect intencity. Valid range of value is [0..2].</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Border.setEffectIntensity(int)">
       
        <p>Sets effect intencity. Valid range of value is [0..2].</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Border.getStyle">
       
        <p>Gets border style.</p>{@code BorderStyle}
      
    </member>
    <member name="M:com.aspose.pdf.Border.setStyle(int)">
       
        <p>Sets border style.</p>{@code BorderStyle}
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Border.getEffect">
       
        <p>Gets border effect.</p>{@code BorderEffect}
      
    </member>
    <member name="M:com.aspose.pdf.Border.setEffect(int)">
       
        <p>Sets border effect.</p>{@code BorderEffect}
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Border.getDash">
       
        <p>Gets dash pattern.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Border.setDash(Dash)">
       
        <p>Sets dash pattern.</p> 
      
      <param name="Dash"/>
    </member>
    <member name="M:com.aspose.pdf.Border.#ctor(Annotation)">
       
        <p>Constructor for border object.</p> @param parent Parent annotation.
      
      <param name="Annotation"/>
    </member>
    <member name="T:com.aspose.pdf.BorderCornerStyle">
       
        <p>Enumerates the border corner styles for border.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BorderCornerStyle.None">
       
        <p>None border style.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BorderCornerStyle.Round">
       
        <p>Round border style.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.BorderEffect">
       
        <p>Describes effect which should be applied to the border of the annotations.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BorderEffect.None">
       
        <p>No effect.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BorderEffect.Cloudy">
       
        <p>The border will appear "cloudly".</p> 
      
    </member>
    <member name="T:com.aspose.pdf.BorderInfo"/>
    <member name="M:com.aspose.pdf.BorderInfo.getLeft">
       
        <p>Gets or sets a {@code GraphInfo} object that indicates left of the border.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.BorderInfo.setLeft(GraphInfo)">
      <param name="GraphInfo"/>
    </member>
    <member name="M:com.aspose.pdf.BorderInfo.getRight">
       
        <p>Gets or sets a {@code GraphInfo} object that indicates right of the border.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.BorderInfo.setRight(GraphInfo)">
      <param name="GraphInfo"/>
    </member>
    <member name="M:com.aspose.pdf.BorderInfo.getTop">
       
        <p>Gets or sets a {@code GraphInfo} object that indicates the top border.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.BorderInfo.setTop(GraphInfo)">
      <param name="GraphInfo"/>
    </member>
    <member name="M:com.aspose.pdf.BorderInfo.getBottom">
       
        <p>Gets or sets a object that indicates bottom of the border.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.BorderInfo.setBottom(GraphInfo)">
      <param name="GraphInfo"/>
    </member>
    <member name="M:com.aspose.pdf.BorderInfo.getRoundedBorderRadius">
       
        <p>Gets or sets a rouded border radius</p> 
      
    </member>
    <member name="M:com.aspose.pdf.BorderInfo.setRoundedBorderRadius(double)">
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.BorderInfo.deepClone">
       
        <p>Clones a new BorderInfo object.</p> @return The new BorderInfo object.
      
    </member>
    <member name="M:com.aspose.pdf.BorderInfo.#ctor(int,Color)">
       
        <p>Initializes a new instance of the {@code BorderInfo} class.</p> @param borderSide Indicates the border sides info. For example: (int)(BorderSide.Left | BorderSide.Top). @param borderColor The border color.
      
      <param name="int"/>
      <param name="Color"/>
    </member>
    <member name="M:com.aspose.pdf.BorderInfo.#ctor">
       
        <p>Initializes a new instance of the {@code BorderInfo} class.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.BorderInfo.#ctor(int)">
       
        <p>Initializes a new instance of the {@code BorderInfo} class.</p> @param borderSide Indicates the border sides info. For example: (BorderSide.Left | BorderSide.Top).
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.BorderInfo.#ctor(int,float)">
       
        <p>Initializes a new instance of the {@code BorderInfo} class.</p> @param borderSide Indicates the border sides info. For example: (BorderSide.Left | BorderSide.Top). @param borderWidth The width of the border.
      
      <param name="int"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.BorderInfo.#ctor(int,float,Color)">
       
        <p>Initializes a new instance of the {@code BorderInfo} class.</p> @param borderSide Indicates the border sides info. For example: (BorderSide.Left | BorderSide.Top). @param borderWidth The width of the border. @param borderColor The border color.
      
      <param name="int"/>
      <param name="float"/>
      <param name="Color"/>
    </member>
    <member name="M:com.aspose.pdf.BorderInfo.#ctor(int,GraphInfo)">
       
        <p>Initializes a new instance of the {@code BorderInfo} class.</p> @param borderSide Indicates the border sides info. For example: (BorderSide.Left | BorderSide.Top). @param borderStyle The border format info.
      
      <param name="int"/>
      <param name="GraphInfo"/>
    </member>
    <member name="T:com.aspose.pdf.BorderSide">
       
        <p>Enumerates the border sides.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BorderSide.None">
       
        <p>No border.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BorderSide.Left">
       
        <p>Left border.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BorderSide.Top">
       
        <p>Top border.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BorderSide.Right">
       
        <p>Right border.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BorderSide.Bottom">
       
        <p>Bottom border.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BorderSide.All">
       
        <p>All sides borders.It has the same meaning when useing "Box" and will be replaced by "Box" one year later. So, please use "Box" if possible.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BorderSide.Box">
       
        <p>Four sides borders.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.BorderStyle">
       
        <p>Describes style of the annotation border.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BorderStyle.Solid">
       
        <p>Solid border.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BorderStyle.Dashed">
       
        <p>Dashed border.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BorderStyle.Beveled">
       
        <p>Bevelled border.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BorderStyle.Inset">
       
        <p>Inset border.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BorderStyle.Underline">
       
        <p>Underlined border.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.BorderStyleConverter"/>
    <member name="M:com.aspose.pdf.BorderStyleConverter.toString(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.BorderStyleConverter.toXfdfString(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.BorderStyleConverter.toEnum(String)">
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.BoxStyle">
       
        <p>Represents styles of check box</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BoxStyle.Circle">
       
        <p>Circle style.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BoxStyle.Check">
       
        <p>Check style.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BoxStyle.Cross">
       
        <p>Cross style.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BoxStyle.Diamond">
       
        <p>Diamond style.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BoxStyle.Square">
       
        <p>Square style.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BoxStyle.Star">
       
        <p>Star style.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.BuildVersionInfo">
       
        <p>This class provides information about current product build.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BuildVersionInfo.AssemblyVersion">
       
        <p>Assembly Version</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BuildVersionInfo.ASSEMBLY_VERSION"/>
    <member name="F:com.aspose.pdf.BuildVersionInfo.Product">
       
        <p>Product Name</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BuildVersionInfo.PRODUCT"/>
    <member name="F:com.aspose.pdf.BuildVersionInfo.FileVersion">
       
        <p>File Version</p> 
      
    </member>
    <member name="F:com.aspose.pdf.BuildVersionInfo.FILE_VERSION"/>
    <member name="T:com.aspose.pdf.ButtonField">
       
        <p>Class represnets push button field.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ButtonField.getNormalCaption">
       
        <p>Gets normal caption.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ButtonField.setNormalCaption(String)">
       
        <p>Sets normal caption.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.ButtonField.getRolloverCaption">
       
        <p>Gets rollover caption of button which shall be displayed when the user rolls the cursor into its active area without pressing the mouse button.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ButtonField.setRolloverCaption(String)">
       
        <p>Sets rollover caption of button which shall be displayed when the user rolls the cursor into its active area without pressing the mouse button.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.ButtonField.getAlternateCaption">
       
        <p>Gets alternate caption of the button which shall be displayed when the mouse button is pressed within its active area.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ButtonField.setAlternateCaption(String)">
       
        <p>Sets alternate caption of the button which shall be displayed when the mouse button is pressed within its active area.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.ButtonField.getNormalIcon">
       
        <p>Gets normal icon of the button which shall be displayed when it is not interacting with the user.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ButtonField.setNormalIcon(XForm)">
       
        <p>Sets normal icon of the button which shall be displayed when it is not interacting with the user.</p> 
      
      <param name="XForm"/>
    </member>
    <member name="M:com.aspose.pdf.ButtonField.getRolloverIcon">
       
        <p>Gets rollover icon of the button which shall be displayed when the user rolls the cursor into its active area without pressing the mouse button.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ButtonField.setRolloverIcon(XForm)">
       
        <p>Sets rollover icon of the button which shall be displayed when the user rolls the cursor into its active area without pressing the mouse button.</p> 
      
      <param name="XForm"/>
    </member>
    <member name="M:com.aspose.pdf.ButtonField.getAlternateIcon">
       
        <p>Gets alternate icon which shall be displayed when the mouse button is pressed within its active area.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ButtonField.setAlternateIcon(XForm)">
       
        <p>Sets alternate icon which shall be displayed when the mouse button is pressed within its active area.</p> 
      
      <param name="XForm"/>
    </member>
    <member name="M:com.aspose.pdf.ButtonField.getIconFit">
       
        <p>Gets icon fit object specifying how the widget annotation's icon shall be displayed within its annotation rectangle.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ButtonField.getICPosition">
       
        <p>Gets or sets icon caption position.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ButtonField.setICPosition(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.ButtonField.addImage(BufferedImage)">
       
        <p>Adds image into the field resources an draws it.</p> @param image Image ot add into text field.
      
      <param name="BufferedImage"/>
    </member>
    <member name="M:com.aspose.pdf.ButtonField.addImage(BufferedImage,boolean)">
      <param name="BufferedImage"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.ButtonField.#ctor">
       
        <p>Button field constructor for Generator.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ButtonField.#ctor(Page,Rectangle)">
       
        <p>ButtonField constructor.</p> @param page Page where button will be placed. @param rect Rectangle where button is placed on the page.
      
      <param name="Page"/>
      <param name="Rectangle"/>
    </member>
    <member name="T:com.aspose.pdf.CaptionPosition">
       
        <p>Enumeration of the annotation�s caption positioning.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.CaptionPosition.Inline">
       
        <p>The caption will be centered inside the line (default value).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.CaptionPosition.Top">
       
        <p>The caption will be on top of the line.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.CaretAnnotation">
       
        <p>Class representing Caret annotation.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.CaretAnnotation.getFrame">
       
        <p>Gets or sets caret rectangle.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.CaretAnnotation.setFrame(Rectangle)">
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.CaretAnnotation.getSymbol">
       
        <p>Gets symbol associated with caret.</p>{@code CaretSymbol}
      
    </member>
    <member name="M:com.aspose.pdf.CaretAnnotation.setSymbol(int)">
       
        <p>Sets output page size for import.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.CaretAnnotation.accept(AnnotationSelector)">
       
        <p>Accepts visitor object to process the annotation.</p> @param visitor Visitor object.
      
      <param name="AnnotationSelector"/>
    </member>
    <member name="M:com.aspose.pdf.CaretAnnotation.#ctor(Page,Rectangle)">
       
        <p>Creates new Caret annotation on the specified page.</p> @param page Document's page where annotation should be created. @param rect Required rectangle that sets annotation's border.
      
      <param name="Page"/>
      <param name="Rectangle"/>
    </member>
    <member name="T:com.aspose.pdf.CaretSymbol">
       
        <p>A symbol to be associated with the caret.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.CaretSymbol.None">
       
        <p>No symbol should be associated with the caret.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.CaretSymbol.Paragraph">
       
        <p>A new paragraph symbol (�) should be associated with the caret.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.CaretSymbolConverter"/>
    <member name="M:com.aspose.pdf.CaretSymbolConverter.toString(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.CaretSymbolConverter.toXfdfString(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.CaretSymbolConverter.toEnum(String)">
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.Cell">
       
        <p>Represents a cell of the table's row.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Cell.isNoBorder">
       
        <p>Gets or sets the cell have border.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Cell.isNoBorder(boolean)">
       
        <p>Gets or sets the cell have border.</p> 
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Cell.getMargin">
       
        <p>Gets or sets the padding.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Cell.setMargin(MarginInfo)">
       
        <p>Gets or sets the padding.</p> 
      
      <param name="MarginInfo"/>
    </member>
    <member name="M:com.aspose.pdf.Cell.getBorder">
       
        <p>Gets or sets the border.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Cell.setBorder(BorderInfo)">
       
        <p>Gets or sets the border.</p> 
      
      <param name="BorderInfo"/>
    </member>
    <member name="M:com.aspose.pdf.Cell.getBackgroundColor">
       
        <p>Gets or sets the background color.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Cell.setBackgroundColor(Color)">
       
        <p>Gets or sets the background color.</p> 
      
      <param name="Color"/>
    </member>
    <member name="M:com.aspose.pdf.Cell.getBackgroundImageFile">
       
        <p>Gets or sets the background image file.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Cell.setBackgroundImageFile(String)">
       
        <p>Gets or sets the background image file.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Cell.getAlignment">
       
        <p>Gets or sets the alignment.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Cell.setAlignment(int)">
       
        <p>Gets or sets the alignment.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Cell.getDefaultCellTextState">
       
        <p>Gets or sets the default cell text state.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Cell.setDefaultCellTextState(TextState)">
       
        <p>Gets or sets the default cell text state.</p> 
      
      <param name="TextState"/>
    </member>
    <member name="M:com.aspose.pdf.Cell.getParagraphs">
       
        <p>Gets or sets the cell's formatted text.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Cell.setParagraphs(Paragraphs)">
       
        <p>Gets or sets the cell's formatted text.</p> 
      
      <param name="Paragraphs"/>
    </member>
    <member name="M:com.aspose.pdf.Cell.isWordWrapped">
       
        <p>Gets or sets the cell's text word wrapped.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Cell.isWordWrapped(boolean)">
       
        <p>Gets or sets the cell's text word wrapped.</p> 
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Cell.getVerticalAlignment">
       
        <p>Gets or sets the vertical alignment.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Cell.setVerticalAlignment(int)">
       
        <p>Gets or sets the vertical alignment.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Cell.getColSpan">
       
        <p>Gets or sets the column span.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Cell.setColSpan(int)">
       
        <p>Gets or sets the column span.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Cell.getRowSpan">
       
        <p>Gets or sets the row span.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Cell.setRowSpan(int)">
       
        <p>Gets or sets the row span.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Cell.setWidth(double)">
       
        <p>Gets or sets the column width(processed internally).</p> 
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Cell.deepClone">
       
        <p>Clone the cell.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Cell.#ctor(Rectangle)">
       
        <p>Initializes a new instance of the Cell class.</p> @param rect The rectangle of the cell in page's coordinates.
      
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.Cell.#ctor">
       
        <p>Initializes a new instance of the Cell class.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.Cells">
       
        <p>Represents a cells collection of row.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Cells.add">
       
        <p>Add cell to collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Cells.add(String,TextState)">
       
        <p>Add cell to collection.</p> @param text The text. @param ts The text state.
      
      <param name="String"/>
      <param name="TextState"/>
    </member>
    <member name="M:com.aspose.pdf.Cells.add(String)">
       
        <p>Add cell to collection.</p> @param text The text.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Cells.add(Cell)">
       
        <p>Add cell to collection.</p> @param cell The cell.
      
      <param name="Cell"/>
    </member>
    <member name="M:com.aspose.pdf.Cells.removeRange(int,int)">
       
        <p>Remove cell set from collection.</p> @param index The collection index. @param count The rows count.
      
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Cells.remove(Object)">
       
        <p>Remove cell set from collection.</p> @param obj The object.
      
      <param name="Object"/>
    </member>
    <member name="M:com.aspose.pdf.Cells.insert(int,Cell)">
       
        <p>Insert cell to collection.</p> 
      
      <param name="int"/>
      <param name="Cell"/>
    </member>
    <member name="M:com.aspose.pdf.Cells.iterator"/>
    <member name="M:com.aspose.pdf.Cells.getCount">
       
        <p>The items count.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Cells.get_Item(int)">
       
        <p>Returns cell.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Cells.set_Item(int,Cell)">
      <param name="int"/>
      <param name="Cell"/>
    </member>
    <member name="T:com.aspose.pdf.CgmImportOptions">
       
        <p>Import option for import from Computer Graphics Metafile(CGM) format.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.CgmImportOptions.getPageSizeInternal">
       
        <p>Gets or sets output page size for import. Default page size - A4 300dpi 2480 X 3508.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.CgmImportOptions.getPageSize">
       
        <p>Gets output page size for import. Default page size - A4 300dpi 2480 X 3508.</p> @return
      
    </member>
    <member name="M:com.aspose.pdf.CgmImportOptions.setPageSize(java.awt.geom.Point2D.Float)">
       
        <p>Sets output page size for import.</p> @param value
      
      <param name="java.awt.geom.Point2D.Float"/>
    </member>
    <member name="M:com.aspose.pdf.CgmImportOptions.#ctor">
       
        <p>Constructor</p> 
      
    </member>
    <member name="T:com.aspose.pdf.CgmLoadOptions">
       
        <p>Contains options for loading/importing CGM file into pdf document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.CgmLoadOptions.getPageSize">
       
        <p>Gets output page size for import.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.CgmLoadOptions.#ctor">
       
        <p>Creates default load options for converting CGM file into pdf document. Default pdf page size - A4 300dpi 2480 X 3508.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.CgmLoadOptions.#ctor(java.awt.geom.Point2D.Float)">
      <param name="java.awt.geom.Point2D.Float"/>
    </member>
    <member name="T:com.aspose.pdf.Characteristics">
       
        <p>Represents annotation characteristics</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Characteristics.getBackground">
       
        <p>Gets color of the background</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Characteristics.setBackground(Object)">
       
        <p>Sets color of the background</p> 
      
      <param name="Object"/>
    </member>
    <member name="M:com.aspose.pdf.Characteristics.getBorder">
       
        <p>Gets color of the border.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Characteristics.setBorder(Object)">
       
        <p>Sets color of the border.</p> 
      
      <param name="Object"/>
    </member>
    <member name="M:com.aspose.pdf.Characteristics.getRotate">
      /##: * 
        <p>/##: * Sets color of the border. /##: *</p> /##:
      
    </member>
    <member name="M:com.aspose.pdf.Characteristics.setRotate(int)">
       
        <p>Sets rotation of the annotation.</p> 
      
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.CharInfo">
      Represents a character info object. Provides character positioning information.
    </member>
    <member name="M:com.aspose.pdf.CharInfo.getPosition">
      Gets position of the character. @return
    </member>
    <member name="M:com.aspose.pdf.CharInfo.getRectangle">
      Gets rectangle of the character. @return
    </member>
    <member name="T:com.aspose.pdf.CharInfoCollection">&lt;p&gt; Represents CharInfo objects collection. &lt;/p&gt;&lt;p&gt;&lt;hr&gt;&lt;blockquote&gt;&lt;pre&gt; The example demonstrates how to iterate throught all the characters and retrieve the charact &lt;pre lang="Java"&gt; //open document Document pdfDocument = new Document(inFile); //create TextFragmentAbsorber object to collect all the text objects of the page TextFragmentAbsorber textFragmentAbsorber = new TextFragmentAbsorber(); //accept the absorber for all the pages pdfDocument.getPages().get_Item(1).accept(textFragmentAbsorber); //get the extracted text fragments TextFragmentCollection textFragmentCollection = textFragmentAbsorber.getTextFragments(); //loop through the fragments for (TextFragment textFragment : (Iterable&lt;TextFragment&gt;)textFragmentCollection) { //loop through the segments for (TextSegment textSegment : (Iterable&lt;TextSegment&gt;) textFragment.getSegments()) { //loop through the characters for (int i = 1; i &lt;= textSegment.getText().length(); i++) { CharInfo charInfo = textSegment.getCharacters().get_Item(i); // print character position and rectangle info System.out.println("XIndent : " + charInfo.getPosition().getXIndent()); System.out.println("YIndent : " + charInfo.getPosition().getYIndent()); System.out.println("Width : " + charInfo.getRectangle().getWidth()); System.out.println("Height : " + charInfo.getRectangle().getHeight()); } } } &lt;/pre&gt; &lt;/pre&gt;&lt;/blockquote&gt;&lt;/hr&gt;&lt;/p&gt;&lt;p&gt;&lt;hr&gt; Provides access to positioning information of text segment characters. &lt;/hr&gt;&lt;/p&gt;</member>
    <member name="M:com.aspose.pdf.CharInfoCollection.size">
       
        <p>Gets the number of {@code CharInfo} object elements actually contained in the collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.CharInfoCollection.getSyncRoot">
       
        <p>Gets an object that can be used to synchronize access to the collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.CharInfoCollection.isSynchronized">
       
        <p>Gets a value indicating whether access to the collection is synchronized (thread safe).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.CharInfoCollection.iterator">
       
        <p>Returns an enumerator for the entire collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.CharInfoCollection.copyTo(Array,int)">
       
        <p>Copies the entire collection to a compatible one-dimensional Array, starting at the specified index of the target array</p> 
      
      <param name="Array"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.CharInfoCollection.get_Item(int)">
       
        <p>Gets the CharInfo element at the specified index.</p> @param index
      
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.CheckboxField">
       
        <p>Class representing checkbox field</p> 
      
    </member>
    <member name="M:com.aspose.pdf.CheckboxField.getAllowedStates">
       
        <p>Returns list of allowed states.</p> @return
      
    </member>
    <member name="M:com.aspose.pdf.CheckboxField.getOnState">
       
        <p>Returns name of state which is "Checked" state of checkbox. This is "Yes" if presents or any other value other then "Off" and "No";</p> @return
      
    </member>
    <member name="M:com.aspose.pdf.CheckboxField.getStyle">
       
        <p>Gets or sets style of check box.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.CheckboxField.setStyle(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.CheckboxField.getActiveState">
       
        <p>Gets current annotation appearance state.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.CheckboxField.setActiveState(String)">
       
        <p>Sets current annotation appearance state.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.CheckboxField.getChecked">
       
        <p>Gets state of check box.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.CheckboxField.setChecked(boolean)">
       
        <p>Sets state of check box.</p> 
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.CheckboxField.getNormalCaption">
       
        <p>Gets normal caption of the field.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.CheckboxField.getValue">
       
        <p>Gets value of check box field.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.CheckboxField.setValue(String)">
       
        <p>Sets value of check box field.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.CheckboxField.#ctor(Page,Rectangle)">
       
        <p>Constructor for CheckboxField class.</p> @param page Page where check box will be placed. @param rect Position and size of the check box.
      
      <param name="Page"/>
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.CheckboxField.#ctor">
       
        <p>Create instance of CheckboxField.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.ChoiceField">
       
        <p>Represents base class for choice fields.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ChoiceField.getCommitImmediately">
       
        <p>Gets commit on selection change flag.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ChoiceField.setCommitImmediately(boolean)">
       
        <p>Sets commit on selection change flag.</p> 
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.ChoiceField.getMultiSelect">
       
        <p>Gets multiselection flag.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ChoiceField.setMultiSelect(boolean)">
       
        <p>Sets multiselection flag.</p> 
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.ChoiceField.getSelected">
       
        <p>Gets index of selected option. This property allows to change selection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ChoiceField.setSelected(int)">
       
        <p>Sets index of selected option. This property allows to change selection.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.ChoiceField.getSelectedItems">
       
        <p>Sets array of selected items. For multiselect list array contains more then one item. For single selection list it contains single item.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ChoiceField.setSelectedItems(int[])">
       
        <p>Sets array of selected items. For multiselect list array contains more then one item. For single selection list it contains single item.</p> 
      
      <param name="int[]"/>
    </member>
    <member name="M:com.aspose.pdf.ChoiceField.getOptions">
       
        <p>Gets collection of choice options.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ChoiceField.addOption(String)">
       
        <p>Adds new option with specified name.</p> @param optionName Name of the new option.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.ChoiceField.addOption(String,String)">
       
        <p>Adds new option with specified export value and name.</p> @param export Export value. @param name Name of the new option.
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.ChoiceField.deleteOption(String)">
       
        <p>Deletes option by its name.</p> @param optionName Name of the option which must be deleted.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.ChoiceField.getValue">
       
        <p>Gets value of the field.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ChoiceField.setValue(String)">
       
        <p>Sets value of the field.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.ChoiceField.#ctor(Page,Rectangle)">
       
        <p>Constructor for ChoiceField.</p> 
      
      <param name="Page"/>
      <param name="Rectangle"/>
    </member>
    <member name="T:com.aspose.pdf.CircleAnnotation">
       
        <p>Class representing Circle annotation.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.CircleAnnotation.accept(AnnotationSelector)">
       
        <p>Accepts visitor object to process the annotation.</p> @param visitor Visitor object.
      
      <param name="AnnotationSelector"/>
    </member>
    <member name="M:com.aspose.pdf.CircleAnnotation.#ctor(Page,Rectangle)">
       
        <p>Creates new Circle annotation on the specified page.</p> @param page Document's page where annotation should be created. @param rect Required rectangle that sets annotation's border.
      
      <param name="Page"/>
      <param name="Rectangle"/>
    </member>
    <member name="T:com.aspose.pdf.Collection">
       
        <p>Represents class for Collection(12.3.5 Collections).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Collection.#ctor"/>
    <member name="T:com.aspose.pdf.Color">
       
        <p>Represents class for color value which can be expressed in different color space.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Color.getData">
       
        <p>Color value.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Color.getColorSpace">
      Gets color space that the color represents.
    </member>
    <member name="M:com.aspose.pdf.Color.parse(String)">
       
        <p>Extracts color components from the string.</p> @return Color object. @param value String value with color component values.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Color.toString">
       
        <p>Converts to string.</p> @return String representation of the Color object.
      
    </member>
    <member name="M:com.aspose.pdf.Color.toRgb">
       
        <p>Converts color into rgb.</p> @return Rgb color value.
      
    </member>
    <member name="M:com.aspose.pdf.Color.fromRgb(java.awt.Color)">
       
        <p>Gets valid pdf Color object from java.awt.Color value.</p> @return Color object with each component value in [0..1] range. @param color System.Drawing.Color value.
      
      <param name="java.awt.Color"/>
    </member>
    <member name="M:com.aspose.pdf.Color.fromArgb(int,int,int)">
       
        <p>Gets valid pdf Color object from RGB color components.</p> @return Color object with each component value in [0..255] range. @param r The Red color component (value 0 - 255). @param g The Green color component (value 0 - 255). @param b The Blue color component (value 0 - 255).
      
      <param name="int"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Color.fromRgb(double,double,double)">
       
        <p>Gets valid pdf Color object from RGB color components.</p> @return Color object with each component value in [0..1] range. @param r The Red color component (value 0 - 1). @param g The Green color component (value 0 - 1). @param b The Blue color component (value 0 - 1).
      
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Color.fromGray(double)">
       
        <p>Gets valid pdf Color object from Gray color component.</p> @return Color object with each component value in [0..1] range. @param g The Gray color component (value 0 - 1).
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Color.fromCmyk(double,double,double,double)">
       
        <p>Gets valid pdf Color object from RGB color components.</p> @return Color object with each component value in [0..1] range. @param c The Cyan color component (value 0 - 1). @param m The Magenta color component (value 0 - 1). @param y The Yellow color component (value 0 - 1). @param k The Key color component (value 0 - 1).
      
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Color.equals(Object)">
       
        <p>Returns true if two Colors are equal.</p> 
      
      <param name="Object"/>
    </member>
    <member name="M:com.aspose.pdf.Color.op_Equality(Color,Color)">
       
        <p>Returns true if two Colors are equal.</p> 
      
      <param name="Color"/>
      <param name="Color"/>
    </member>
    <member name="M:com.aspose.pdf.Color.op_Inequality(Color,Color)">
       
        <p>Returns true if two Colors are not equal.</p> 
      
      <param name="Color"/>
      <param name="Color"/>
    </member>
    <member name="M:com.aspose.pdf.Color.getTransparent">
       
        <p>Gets a system-defined color.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getAliceBlue">
       
        <p>Gets a system-defined color that has an ARGB value of #FFF0F8FF.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getAntiqueWhite">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFAEBD7.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getAqua">
       
        <p>Gets a system-defined color that has an ARGB value of #FF00FFFF.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getAquamarine">
       
        <p>Gets a system-defined color that has an ARGB value of #FF7FFFD4.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getAzure">
       
        <p>Gets a system-defined color that has an ARGB value of #FFF0FFFF.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getBeige">
       
        <p>Gets a system-defined color that has an ARGB value of #FFF5F5DC.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getBisque">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFFE4C4.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getBlack">
       
        <p>Gets a system-defined color that has an ARGB value of #FF000000.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getBlanchedAlmond">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFFEBCD.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getBlue">
       
        <p>Gets a system-defined color that has an ARGB value of #FF0000FF.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getBlueViolet">
       
        <p>Gets a system-defined color that has an ARGB value of #FF8A2BE2.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getBrown">
       
        <p>Gets a system-defined color that has an ARGB value of #FFA52A2A.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getBurlyWood">
       
        <p>Gets a system-defined color that has an ARGB value of #FFDEB887.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getCadetBlue">
       
        <p>Gets a system-defined color that has an ARGB value of #FF5F9EA0.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getChartreuse">
       
        <p>Gets a system-defined color that has an ARGB value of #FF7FFF00.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getChocolate">
       
        <p>Gets a system-defined color that has an ARGB value of #FFD2691E.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getCoral">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFF7F50.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getCornflowerBlue">
       
        <p>Gets a system-defined color that has an ARGB value of #FF6495ED.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getCornsilk">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFFF8DC.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getCrimson">
       
        <p>Gets a system-defined color that has an ARGB value of #FFDC143C.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getCyan">
       
        <p>Gets a system-defined color that has an ARGB value of #FF00FFFF.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getDarkBlue">
       
        <p>Gets a system-defined color that has an ARGB value of #FF00008B.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getDarkCyan">
       
        <p>Gets a system-defined color that has an ARGB value of #FF008B8B.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getDarkGoldenrod">
       
        <p>Gets a system-defined color that has an ARGB value of #FFB8860B.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getDarkGray">
       
        <p>Gets a system-defined color that has an ARGB value of #FFA9A9A9.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getDarkGreen">
       
        <p>Gets a system-defined color that has an ARGB value of #FF006400.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getDarkKhaki">
       
        <p>Gets a system-defined color that has an ARGB value of #FFBDB76B.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getDarkMagenta">
       
        <p>Gets a system-defined color that has an ARGB value of #FF8B008B.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getDarkOliveGreen">
       
        <p>Gets a system-defined color that has an ARGB value of #FF556B2F.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getDarkOrange">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFF8C00.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getDarkOrchid">
       
        <p>Gets a system-defined color that has an ARGB value of #FF9932CC.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getDarkRed">
       
        <p>Gets a system-defined color that has an ARGB value of #FF8B0000.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getDarkSalmon">
       
        <p>Gets a system-defined color that has an ARGB value of #FFE9967A.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getDarkSeaGreen">
       
        <p>Gets a system-defined color that has an ARGB value of #FF8FBC8F.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getDarkSlateBlue">
       
        <p>Gets a system-defined color that has an ARGB value of #FF483D8B.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getDarkSlateGray">
       
        <p>Gets a system-defined color that has an ARGB value of #FF2F4F4F.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getDarkTurquoise">
       
        <p>Gets a system-defined color that has an ARGB value of #FF00CED1.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getDarkViolet">
       
        <p>Gets a system-defined color that has an ARGB value of #FF9400D3.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getDeepPink">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFF1493.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getDeepSkyBlue">
       
        <p>Gets a system-defined color that has an ARGB value of #FF00BFFF.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getDimGray">
       
        <p>Gets a system-defined color that has an ARGB value of #FF696969.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getDodgerBlue">
       
        <p>Gets a system-defined color that has an ARGB value of #FF1E90FF.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getFirebrick">
       
        <p>Gets a system-defined color that has an ARGB value of #FFB22222.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getFloralWhite">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFFFAF0.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getForestGreen">
       
        <p>Gets a system-defined color that has an ARGB value of #FF228B22.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getFuchsia">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFF00FF.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getGainsboro">
       
        <p>Gets a system-defined color that has an ARGB value of #FFDCDCDC.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getGhostWhite">
       
        <p>Gets a system-defined color that has an ARGB value of #FFF8F8FF.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getGold">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFFD700.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getGoldenrod">
       
        <p>Gets a system-defined color that has an ARGB value of #FFDAA520.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getGray">
       
        <p>Gets a system-defined color that has an ARGB value of #FF808080.</p> @return A strcture representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getGreen">
       
        <p>Gets a system-defined color that has an ARGB value of #FF008000.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getGreenYellow">
       
        <p>Gets a system-defined color that has an ARGB value of #FFADFF2F.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getHoneydew">
       
        <p>Gets a system-defined color that has an ARGB value of #FFF0FFF0.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getHotPink">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFF69B4.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getIndianRed">
       
        <p>Gets a system-defined color that has an ARGB value of #FFCD5C5C.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getIndigo">
       
        <p>Gets a system-defined color that has an ARGB value of #FF4B0082.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getIvory">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFFFFF0.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getKhaki">
       
        <p>Gets a system-defined color that has an ARGB value of #FFF0E68C.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getLavender">
       
        <p>Gets a system-defined color that has an ARGB value of #FFE6E6FA.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getLavenderBlush">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFFF0F5.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getLawnGreen">
       
        <p>Gets a system-defined color that has an ARGB value of #FF7CFC00.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getLemonChiffon">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFFFACD.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getLightBlue">
       
        <p>Gets a system-defined color that has an ARGB value of #FFADD8E6.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getLightCoral">
       
        <p>Gets a system-defined color that has an ARGB value of #FFF08080.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getLightCyan">
       
        <p>Gets a system-defined color that has an ARGB value of #FFE0FFFF.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getLightGoldenrodYellow">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFAFAD2.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getLightGreen">
       
        <p>Gets a system-defined color that has an ARGB value of #FF90EE90.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getLightGray">
       
        <p>Gets a system-defined color that has an ARGB value of #FFD3D3D3.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getLightPink">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFFB6C1.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getLightSalmon">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFFA07A.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getLightSeaGreen">
       
        <p>Gets a system-defined color that has an ARGB value of #FF20B2AA.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getLightSkyBlue">
       
        <p>Gets a system-defined color that has an ARGB value of #FF87CEFA.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getLightSlateGray">
       
        <p>Gets a system-defined color that has an ARGB value of #FF778899.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getLightSteelBlue">
       
        <p>Gets a system-defined color that has an ARGB value of #FFB0C4DE.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getLightYellow">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFFFFE0.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getLime">
       
        <p>Gets a system-defined color that has an ARGB value of #FF00FF00.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getLimeGreen">
       
        <p>Gets a system-defined color that has an ARGB value of #FF32CD32.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getLinen">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFAF0E6.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getMagenta">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFF00FF.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getMaroon">
       
        <p>Gets a system-defined color that has an ARGB value of #FF800000.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getMediumAquamarine">
       
        <p>Gets a system-defined color that has an ARGB value of #FF66CDAA.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getMediumBlue">
       
        <p>Gets a system-defined color that has an ARGB value of #FF0000CD.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getMediumOrchid">
       
        <p>Gets a system-defined color that has an ARGB value of #FFBA55D3.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getMediumPurple">
       
        <p>Gets a system-defined color that has an ARGB value of #FF9370DB.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getMediumSeaGreen">
       
        <p>Gets a system-defined color that has an ARGB value of #FF3CB371.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getMediumSlateBlue">
       
        <p>Gets a system-defined color that has an ARGB value of #FF7B68EE.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getMediumSpringGreen">
       
        <p>Gets a system-defined color that has an ARGB value of #FF00FA9A.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getMediumTurquoise">
       
        <p>Gets a system-defined color that has an ARGB value of #FF48D1CC.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getMediumVioletRed">
       
        <p>Gets a system-defined color that has an ARGB value of #FFC71585.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getMidnightBlue">
       
        <p>Gets a system-defined color that has an ARGB value of #FF191970.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getMintCream">
       
        <p>Gets a system-defined color that has an ARGB value of #FFF5FFFA.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getMistyRose">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFFE4E1.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getMoccasin">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFFE4B5.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getNavajoWhite">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFFDEAD.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getNavy">
       
        <p>Gets a system-defined color that has an ARGB value of #FF000080.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getOldLace">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFDF5E6.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getOlive">
       
        <p>Gets a system-defined color that has an ARGB value of #FF808000.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getOliveDrab">
       
        <p>Gets a system-defined color that has an ARGB value of #FF6B8E23.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getOrange">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFFA500.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getOrangeRed">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFF4500.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getOrchid">
       
        <p>Gets a system-defined color that has an ARGB value of #FFDA70D6.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getPaleGoldenrod">
       
        <p>Gets a system-defined color that has an ARGB value of #FFEEE8AA.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getPaleGreen">
       
        <p>Gets a system-defined color that has an ARGB value of #FF98FB98.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getPaleTurquoise">
       
        <p>Gets a system-defined color that has an ARGB value of #FFAFEEEE.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getPaleVioletRed">
       
        <p>Gets a system-defined color that has an ARGB value of #FFDB7093.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getPapayaWhip">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFFEFD5.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getPeachPuff">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFFDAB9.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getPeru">
       
        <p>Gets a system-defined color that has an ARGB value of #FFCD853F.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getPink">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFFC0CB.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getPlum">
       
        <p>Gets a system-defined color that has an ARGB value of #FFDDA0DD.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getPowderBlue">
       
        <p>Gets a system-defined color that has an ARGB value of #FFB0E0E6.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getPurple">
       
        <p>Gets a system-defined color that has an ARGB value of #FF800080.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getRed">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFF0000.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getRosyBrown">
       
        <p>Gets a system-defined color that has an ARGB value of #FFBC8F8F.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getRoyalBlue">
       
        <p>Gets a system-defined color that has an ARGB value of #FF4169E1.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getSaddleBrown">
       
        <p>Gets a system-defined color that has an ARGB value of #FF8B4513.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getSalmon">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFA8072.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getSandyBrown">
       
        <p>Gets a system-defined color that has an ARGB value of #FFF4A460.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getSeaGreen">
       
        <p>Gets a system-defined color that has an ARGB value of #FF2E8B57.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getSeaShell">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFFF5EE.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getSienna">
       
        <p>Gets a system-defined color that has an ARGB value of #FFA0522D.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getSilver">
       
        <p>Gets a system-defined color that has an ARGB value of #FFC0C0C0.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getSkyBlue">
       
        <p>Gets a system-defined color that has an ARGB value of #FF87CEEB.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getSlateBlue">
       
        <p>Gets a system-defined color that has an ARGB value of #FF6A5ACD.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getSlateGray">
       
        <p>Gets a system-defined color that has an ARGB value of #FF708090.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getSnow">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFFFAFA.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getSpringGreen">
       
        <p>Gets a system-defined color that has an ARGB value of #FF00FF7F.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getSteelBlue">
       
        <p>Gets a system-defined color that has an ARGB value of #FF4682B4.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getTan">
       
        <p>Gets a system-defined color that has an ARGB value of #FFD2B48C.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getTeal">
       
        <p>Gets a system-defined color that has an ARGB value of #FF008080.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getThistle">
       
        <p>Gets a system-defined color that has an ARGB value of #FFD8BFD8.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getTomato">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFF6347.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getTurquoise">
       
        <p>Gets a system-defined color that has an ARGB value of #FF40E0D0.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getViolet">
       
        <p>Gets a system-defined color that has an ARGB value of #FFEE82EE.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getWheat">
       
        <p>Gets a system-defined color that has an ARGB value of #FFF5DEB3.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getWhite">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFFFFFF.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getWhiteSmoke">
       
        <p>Gets a system-defined color that has an ARGB value of #FFF5F5F5.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getYellow">
       
        <p>Gets a system-defined color that has an ARGB value of #FFFFFF00.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.getYellowGreen">
       
        <p>Gets a system-defined color that has an ARGB value of #FF9ACD32.</p> @return A representing a system-defined color.
      
    </member>
    <member name="M:com.aspose.pdf.Color.#ctor(double[])">
      <param name="double[]"/>
    </member>
    <member name="F:com.aspose.pdf.Color.Empty">
      Represents empty color.
    </member>
    <member name="T:com.aspose.pdf.ColorSpace">
       
        <p>The color spaces enumeration.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ColorSpace.DeviceRGB">
       
        <p>The device-dependent RGB color space.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ColorSpace.DeviceCMYK">
       
        <p>The device-dependent CMYK color space.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ColorSpace.DeviceGray">
       
        <p>The device-dependent gray color space.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.ColorType">
       
        <p>Specifies color type of elements on page.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ColorType.Rgb"/>
    <member name="F:com.aspose.pdf.ColorType.Grayscale"/>
    <member name="F:com.aspose.pdf.ColorType.BlackAndWhite"/>
    <member name="F:com.aspose.pdf.ColorType.Undefined"/>
    <member name="T:com.aspose.pdf.ComboBoxField">
       
        <p>Class representing Combobox field of the form.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ComboBoxField.getEditable">
       
        <p>Gets editable status of the field.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ComboBoxField.setEditable(boolean)">
       
        <p>Sets editable status of the field.</p> 
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.ComboBoxField.getSpellCheck">
       
        <p>Sets spellchaeck activiity status.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ComboBoxField.setSpellCheck(boolean)">
       
        <p>Sets spellchaeck activiity status.</p> 
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.ComboBoxField.setSelected(int)">
       
        <p>Sets index of currently selected item in combo box list.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.ComboBoxField.#ctor">
       
        <p>Constructor for ComboBoxField to be used in Generator.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ComboBoxField.#ctor(Page,Rectangle)">
      <param name="Page"/>
      <param name="Rectangle"/>
    </member>
    <member name="T:com.aspose.pdf.CommonFigureAnnotation">
       
        <p>Abstract class representing common figure annotation.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.CommonFigureAnnotation.getInteriorColor">
       
        <p>Interior color with which to fill the annotation�s rectangle or ellipse.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.CommonFigureAnnotation.setInteriorColor(Color)">
      <param name="Color"/>
    </member>
    <member name="M:com.aspose.pdf.CommonFigureAnnotation.getFrame">
       
        <p>The rectangle describing the numerical differences between two rectangles: the Rect entry of the annotation and the actual boundaries of the underlying square or circle.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.CommonFigureAnnotation.setFrame(Rectangle)">
      <param name="Rectangle"/>
    </member>
    <member name="T:com.aspose.pdf.CompositingParameters">
       
        <p>Represents an object containing graphics compositing parameters of current graphics state.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.CompositingParameters.getBlendMode">
       
        <p>Gets blend mode of current graphics state.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.CompositingParameters.#ctor(int)">
       
        <p>Initializes new instance of the {@code CompositingParameters} object.</p> @param blendMode Blend mode of current graphics state.
      
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.ContentDisposition"/>
    <member name="F:com.aspose.pdf.ContentDisposition.Inline"/>
    <member name="F:com.aspose.pdf.ContentDisposition.Attachment"/>
    <member name="T:com.aspose.pdf.ContentsAppender">
       
        <p>Performs contents modifications in APPEND mode only. this mode allows to avoid unneeded and heavy contents parsing before some change is made to the contents. It only appends new operators to the end or to the begin of the contents</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ContentsAppender.getBeginOperators">
       
        <p>returns begin operators</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ContentsAppender.getBeginCode">
      String containing opertors to insert into start of page. @return
    </member>
    <member name="M:com.aspose.pdf.ContentsAppender.setBeginCode(String)">
      String containing opertors to insert into start of page. @param value
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.ContentsAppender.getEndCode">
      Stirng containing operators to append to the end of page. @return
    </member>
    <member name="M:com.aspose.pdf.ContentsAppender.setEndCode(String)">
      String containing opertors to insert into start of page. @param value
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.ContentsAppender.getEndOperators">
       
        <p>returns end operators</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ContentsAppender.appendToEnd(Operator)">
       
        <p>Appends operator to the begin of the contents</p> 
      
      <param name="Operator"/>
    </member>
    <member name="M:com.aspose.pdf.ContentsAppender.appendToEnd(Operator[])">
       
        <p>Appends operators to the begin of the contents</p> 
      
      <param name="Operator[]"/>
    </member>
    <member name="M:com.aspose.pdf.ContentsAppender.appendToEnd(IList)">
       
        <p>Appends operators to the begin of the contents</p> 
      
      <param name="IList"/>
    </member>
    <member name="M:com.aspose.pdf.ContentsAppender.appendToBegin(Operator)">
       
        <p>Appends operator to the end of the contents</p> 
      
      <param name="Operator"/>
    </member>
    <member name="M:com.aspose.pdf.ContentsAppender.appendToBegin(Operator[])">
       
        <p>Appends operators to the end of the contents</p> 
      
      <param name="Operator[]"/>
    </member>
    <member name="M:com.aspose.pdf.ContentsAppender.appendToBegin(IList)">
       
        <p>Appends operators to the end of the contents</p> 
      
      <param name="IList"/>
    </member>
    <member name="M:com.aspose.pdf.ContentsAppender.suppressUpdate">
      Suppresses update contents data The contents is not updated until ResumeUpdate is called
    </member>
    <member name="M:com.aspose.pdf.ContentsAppender.resumeUpdate">
      resumes document update
    </member>
    <member name="M:com.aspose.pdf.ContentsAppender.updateData">
      / * 
        <p>/ * Must be called to apply the changes / *</p> /
      
    </member>
    <member name="M:com.aspose.pdf.ContentsAppender.#ctor(Page)">
       
        <p>Initializez new instance of the contents appender with page attached</p> 
      
      <param name="Page"/>
    </member>
    <member name="T:com.aspose.pdf.ConvertErrorAction"/>
    <member name="F:com.aspose.pdf.ConvertErrorAction.Delete"/>
    <member name="F:com.aspose.pdf.ConvertErrorAction.None"/>
    <member name="T:com.aspose.pdf.Copier">
       
        <p>Class for coping object</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Copier.getIgnoreCorruptedObjects"/>
    <member name="M:com.aspose.pdf.Copier.setIgnoreCorruptedObjects(boolean)">
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Copier.getReuseStreams"/>
    <member name="M:com.aspose.pdf.Copier.setReuseStreams(boolean)">
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Copier.getUseStubs"/>
    <member name="M:com.aspose.pdf.Copier.setUseStubs(boolean)">
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Copier.getRestrictedKeys"/>
    <member name="M:com.aspose.pdf.Copier.setRestrictedKeys(String[])">
      <param name="String[]"/>
    </member>
    <member name="M:com.aspose.pdf.Copier.duplicate(IPdfPrimitive)">
      <param name="IPdfPrimitive"/>
    </member>
    <member name="M:com.aspose.pdf.Copier.duplicate(IPdfPrimitive,boolean)">
       
        <p>Creates copy of object with all dependent object. The object may be from part of other document (e.g. coping pages between documents, etc.)</p> @return @param src
      
      <param name="IPdfPrimitive"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Copier.#ctor(ITrailerable)">
      <param name="ITrailerable"/>
    </member>
    <member name="T:com.aspose.pdf.CryptoAlgorithm">
      Represent type of cryptographic algorithm that used in encryption/decryption routines.
    </member>
    <member name="F:com.aspose.pdf.CryptoAlgorithm.RC4x40">
       
        <p>RC4 with key length 40.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.CryptoAlgorithm.RC4x128">
       
        <p>RC4 with key length 128.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.CryptoAlgorithm.AESx128">
       
        <p>AES with key length 128.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.CryptoAlgorithm.AESx256">
       
        <p>AES with key length 256.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.Dash">
       
        <p>Class representing line dash pattern.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Dash.getOn">
       
        <p>Gets or sets length of dash.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Dash.setOn(int)">
       
        <p>Sets length of dash.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Dash.getOff">
       
        <p>Gets length of gap between dashes.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Dash.setOff(int)">
       
        <p>Sets length of gap between dashes.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Dash.#ctor(int,int)">
       
        <p>Constructor for Dash.</p> @param on Length of the dash. @param off Length of the gap.
      
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.debug.Timer"/>
    <member name="M:com.aspose.pdf.debug.Timer.start(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.debug.Timer.stop(String)">
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.DefaultAppearance">
       
        <p>Describes default appearance of field (font, text size and color).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.DefaultAppearance.getFontSize">
       
        <p>Gets font size in default apperance.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.DefaultAppearance.setFontSize(double)">
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.DefaultAppearance.getTextColor">
       
        <p>Gets color of text in the default appearance.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.DefaultAppearance.setTextColor(java.awt.Color)">
      <param name="java.awt.Color"/>
    </member>
    <member name="M:com.aspose.pdf.DefaultAppearance.getFontName">
       
        <p>Gets font name in the default appearance.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.DefaultAppearance.setFontName(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.DefaultAppearance.getFont">
       
        <p>Gets font specified as default for text.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.DefaultAppearance.getText">
       
        <p>Gets the list of pdf operators which represent appearence.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.DefaultAppearance.#ctor">
       
        <p>Constructor of DefaultAppearance.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.DefaultAppearance.#ctor(IPdfDictionary)">
      <param name="IPdfDictionary"/>
    </member>
    <member name="M:com.aspose.pdf.DefaultAppearance.#ctor(IPdfPrimitive)">
      <param name="IPdfPrimitive"/>
    </member>
    <member name="M:com.aspose.pdf.DefaultAppearance.#ctor(String,double,java.awt.Color)">
       
        <p>Constructor of DefaultAppearance.</p> @param fontName Font name. @param fontSize Font size. @param textColor Color of text.
      
      <param name="String"/>
      <param name="double"/>
      <param name="java.awt.Color"/>
    </member>
    <member name="M:com.aspose.pdf.DefaultAppearance.#ctor(com.aspose.pdf.Font,double,java.awt.Color)">
       
        <p>Constructor of DefaultAppearance.</p> @param font Font which will be used as default. @param fontSize Font size. @param textColor Color of text.
      
      <param name="com.aspose.pdf.Font"/>
      <param name="double"/>
      <param name="java.awt.Color"/>
    </member>
    <member name="T:com.aspose.pdf.DestinationCollection">
       
        <p>Class represents the collection of all destinations (a name tree mapping name strings to destinations (see 12.3.2.3, "Named Destinations") and (see 7.7.4, "Name Dictionary")) in the pdf document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.DestinationCollection.get_Item(int)">
       
        <p>Gets the destination object by index.</p> @return Destination. @param index The index of destination to get.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.DestinationCollection.getPageNumber(String,boolean)">
       
        <p>Returns the page number of destination by the name.</p> @return The page number if destination was found; otherwise, -1. @param destinameName The name of destination. @param useCache Determines whether cached version of collection is used or not.
      
      <param name="String"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.DestinationCollection.iterator">
       
        <p>Returns the enumerator.</p> @return The enumerator.
      
    </member>
    <member name="M:com.aspose.pdf.DestinationCollection.indexOf(Object)">
       
        <p>Returns the index of destination in collection.</p> @return The index of destination in collection. @param value The value to find.
      
      <param name="Object"/>
    </member>
    <member name="M:com.aspose.pdf.DestinationCollection.contains(Object)">
       
        <p>Determines whether a destination is in collection or not.</p> @return True if a destination is in collection; otherwise, false. @param value The value to find.
      
      <param name="Object"/>
    </member>
    <member name="M:com.aspose.pdf.DestinationCollection.size"/>
    <member name="T:com.aspose.pdf.devices.BmpDevice">
       
        <p>Represents image device that helps to save pdf document pages into bmp.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.BmpDevice.processInternal(Page,Stream)">
       
        <p>Converts the page into bmp and saves it in the output stream.</p> @param page The page to convert. @param output Output stream with bmp image.
      
      <param name="Page"/>
      <param name="Stream"/>
    </member>
    <member name="M:com.aspose.pdf.devices.BmpDevice.process(Page,OutputStream)">
      <param name="Page"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.devices.BmpDevice.process(Page,com.aspose.ms.System.Drawing.Graphics)">
       
        <p>renders page on the graphics</p> @param page @param gr
      
      <param name="Page"/>
      <param name="com.aspose.ms.System.Drawing.Graphics"/>
    </member>
    <member name="M:com.aspose.pdf.devices.BmpDevice.#ctor">
       
        <p>Initializes a new instance of the {@code BmpDevice} class with default resolution.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.BmpDevice.#ctor(Resolution)">
       
        <p>Initializes a new instance of the {@code BmpDevice} class.</p> @param resolution Resolution for the result image file, see {@code Resolution} class.
      
      <param name="Resolution"/>
    </member>
    <member name="M:com.aspose.pdf.devices.BmpDevice.#ctor(int,int,Resolution)">
       
        <p>Initializes a new instance of the {@code BmpDevice} class with provided image dimensions and resolution.</p> @param width Image output width. @param height Image output height. @param resolution Resolution for the result image file, see {@code Resolution} class.
      
      <param name="int"/>
      <param name="int"/>
      <param name="Resolution"/>
    </member>
    <member name="M:com.aspose.pdf.devices.BmpDevice.#ctor(PageSize,Resolution)">
       
        <p>Initializes a new instance of the {@code BmpDevice} class with provided page size and resolution.</p> @param pageSize Page size of the output image. @param resolution Resolution for the result image file, see {@code Resolution} class.
      
      <param name="PageSize"/>
      <param name="Resolution"/>
    </member>
    <member name="M:com.aspose.pdf.devices.BmpDevice.#ctor(int,int)">
       
        <p>Initializes a new instance of the {@code BmpDevice} class with provided image dimensions, default resolution (=150).</p> @param width Image output width. @param height Image output height.
      
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.devices.BmpDevice.#ctor(PageSize)">
       
        <p>Initializes a new instance of the {@code BmpDevice} class with provided page size, default resolution (=150).</p> @param pageSize Page size of the output image.
      
      <param name="PageSize"/>
    </member>
    <member name="T:com.aspose.pdf.devices.ColorDepth">
       
        <p>Used to specify the parameter value passed to a Tiff image device.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.devices.ColorDepth.Default">
       
        <p>Default color depth</p> 
      
    </member>
    <member name="F:com.aspose.pdf.devices.ColorDepth.Format8bpp">
       
        <p>8 bits per pixel. Equal {@code PixelFormat.Format8bppIndexed}</p> 
      
    </member>
    <member name="F:com.aspose.pdf.devices.ColorDepth.Format4bpp">
       
        <p>4 bits per pixel. Equal {@code PixelFormat.Format4bppIndexed}</p> 
      
    </member>
    <member name="F:com.aspose.pdf.devices.ColorDepth.Format1bpp">
       
        <p>1 bit per pixel. Equal {@code PixelFormat.Format32bppRgb}</p> 
      
    </member>
    <member name="T:com.aspose.pdf.devices.CompressionType">
       
        <p>Used to specify the parameter value passed to a Tiff image device.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.devices.CompressionType.LZW">
       
        <p>Specifies the LZW compression scheme. Can be passed to the Tiff encoder as a parameter that belongs to the Compression category.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.devices.CompressionType.CCITT4">
       
        <p>Specifies the CCITT4 compression scheme. Can be passed to the CCITT4 encoder as a parameter that belongs to the Compression category.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.devices.CompressionType.CCITT3">
       
        <p>Specifies the CCITT3 compression scheme. Can be passed to the CCITT3 encoder as a parameter that belongs to the Compression category.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.devices.CompressionType.RLE">
       
        <p>Specifies the RLE compression scheme. Can be passed to the RLE encoder as a parameter that belongs to the Compression category.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.devices.CompressionType.None">
       
        <p>Specifies no compression. Can be passed to the Tiff encoder as a parameter that belongs to the compression category.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.devices.Device">
       
        <p>Abstract class for all types of devices. Device is used to represent pdf document in some format. For example, document page can be represented as image or text.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.devices.DocumentDevice">
       
        <p>Abstract class for all devices which is used to process the whole pdf document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.DocumentDevice.processInternal(IDocument,int,int,Stream)">
       
        <p>Each device represents some operation on the document, e.g. we can convert pdf document into another format.</p> @param document The document to process. @param fromPage Defines the page from which to start processing. @param toPage Defines the last page to process. @param output Defines stream where the results of processing are stored.
      
      <param name="IDocument"/>
      <param name="int"/>
      <param name="int"/>
      <param name="Stream"/>
    </member>
    <member name="M:com.aspose.pdf.devices.DocumentDevice.process(IDocument,int,int,OutputStream)">
      <param name="IDocument"/>
      <param name="int"/>
      <param name="int"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.devices.DocumentDevice.process(IDocument,int,int,Stream)">
      <param name="IDocument"/>
      <param name="int"/>
      <param name="int"/>
      <param name="Stream"/>
    </member>
    <member name="M:com.aspose.pdf.devices.DocumentDevice.processInternal(IDocument,Stream)">
       
        <p>Processes the whole document and saves results into stream.</p> @param document The document to process. @param output Defines stream where the results of processing are stored.
      
      <param name="IDocument"/>
      <param name="Stream"/>
    </member>
    <member name="M:com.aspose.pdf.devices.DocumentDevice.process(IDocument,OutputStream)">
      <param name="IDocument"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.devices.DocumentDevice.process(IDocument,String)">
       
        <p>Processes the whole document and saves results into file.</p> @param document The document to process. @param outputFileName Defines file where the results of processing are stored.
      
      <param name="IDocument"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.devices.DocumentDevice.process(IDocument,int,int,String)">
       
        <p>Processes certain pages of the document and saves results into file.</p> @param document The document to process. @param fromPage The first page to start processing. @param toPage The last page of processing. @param outputFileName Defines file where the results of processing are stored.
      
      <param name="IDocument"/>
      <param name="int"/>
      <param name="int"/>
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.devices.EmfDevice">
       
        <p>Represents image device that helps to save pdf document pages into emf.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.EmfDevice.processInternal(Page,Stream)">
       
        <p>Converts the page into emf and saves it in the output stream.</p> @param page The page to convert. @param output Output stream with emf image.
      
      <param name="Page"/>
      <param name="Stream"/>
    </member>
    <member name="M:com.aspose.pdf.devices.EmfDevice.process(Page,OutputStream)">
      <param name="Page"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.devices.EmfDevice.#ctor">
       
        <p>Initializes a new instance of the {@code EmfDevice} class with default resolution of raster image written to emf.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.EmfDevice.#ctor(Resolution)">
       
        <p>Initializes a new instance of the {@code EmfDevice} class.</p> @param resolution Resolution for the raster image written to emf, see {@code Resolution} class.
      
      <param name="Resolution"/>
    </member>
    <member name="M:com.aspose.pdf.devices.EmfDevice.#ctor(int,int)">
       
        <p>Initializes a new instance of the {@code EmfDevice} class with provided image dimensions, and default resolution for the raster image written to emf (=150)</p> @param width Image output width. @param height Image output height.
      
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.devices.EmfDevice.#ctor(PageSize)">
       
        <p>Initializes a new instance of the {@code EmfDevice} class with provided page size, and default resolution for the raster image written to emf (=150)</p> @param pageSize Page size of the output image.
      
      <param name="PageSize"/>
    </member>
    <member name="M:com.aspose.pdf.devices.EmfDevice.#ctor(int,int,Resolution)">
       
        <p>Initializes a new instance of the {@code JpegDevice} class with provided image dimensions, and resolution for the raster image written to emf.</p> @param width Image output width. @param height Image output height. @param resolution Resolution for the for the raster image written to emf, see {@code Resolution} class.
      
      <param name="int"/>
      <param name="int"/>
      <param name="Resolution"/>
    </member>
    <member name="M:com.aspose.pdf.devices.EmfDevice.#ctor(PageSize,Resolution)">
       
        <p>Initializes a new instance of the {@code JpegDevice} class with provided page size, and resolution for the raster image written to emf.</p> @param pageSize Page size of the output image. @param resolution Resolution for the for the raster image written to emf, see {@code Resolution} class.
      
      <param name="PageSize"/>
      <param name="Resolution"/>
    </member>
    <member name="T:com.aspose.pdf.devices.FormPresentationMode">
       
        <p>Used to specify the form presentation mode when printing or converting to image pdf documents.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.devices.FormPresentationMode.Production">
       
        <p>Specifies Production form presentation mode (used by default).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.devices.FormPresentationMode.Editor">
       
        <p>Specifies Editor form presentation mode.</p>
        <p>
          <hr>The Editor mode is used by some products to display forms. In Editor mode some form elements are displayed as they are shown in form designer.</hr>
        </p> 
      
    </member>
    <member name="T:com.aspose.pdf.devices.GifDevice">
       
        <p>Represents image device that helps to save pdf document pages into gif.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.GifDevice.processInternal(Page,Stream)">
       
        <p>Converts the page into gif and saves it in the output stream.</p> @param page The page to convert. @param output Output stream with gif image.
      
      <param name="Page"/>
      <param name="Stream"/>
    </member>
    <member name="M:com.aspose.pdf.devices.GifDevice.process(Page,OutputStream)">
      <param name="Page"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.devices.GifDevice.#ctor">
       
        <p>Initializes a new instance of the {@code GifDevice} class with default resolution.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.GifDevice.#ctor(Resolution)">
       
        <p>Initializes a new instance of the {@code GifDevice} class.</p> @param resolution Resolution for the result image file, see {@code Resolution} class.
      
      <param name="Resolution"/>
    </member>
    <member name="M:com.aspose.pdf.devices.GifDevice.#ctor(int,int,Resolution)">
       
        <p>Initializes a new instance of the {@code GifDevice} class with provided image dimensions and resolution.</p> @param width Image output width. @param height Image output height. @param resolution Resolution for the result image file, see {@code Resolution} class.
      
      <param name="int"/>
      <param name="int"/>
      <param name="Resolution"/>
    </member>
    <member name="M:com.aspose.pdf.devices.GifDevice.#ctor(PageSize,Resolution)">
       
        <p>Initializes a new instance of the {@code GifDevice} class with provided page size and resolution.</p> @param pageSize Page size of the output image. @param resolution Resolution for the result image file, see {@code Resolution} class.
      
      <param name="PageSize"/>
      <param name="Resolution"/>
    </member>
    <member name="M:com.aspose.pdf.devices.GifDevice.#ctor(int,int)">
       
        <p>Initializes a new instance of the {@code GifDevice} class with provided image dimensions, default resolution (=150).</p> @param width Image output width. @param height Image output height.
      
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.devices.GifDevice.#ctor(PageSize)">
       
        <p>Initializes a new instance of the {@code GifDevice} class with provided page size, default resolution (=150).</p> @param pageSize Page size of the output image.
      
      <param name="PageSize"/>
    </member>
    <member name="T:com.aspose.pdf.devices.GraphicsDevice">
       
        <p>Represents image device that helps to render pdf document pages into graphics.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.GraphicsDevice.process(Page,Stream)">
       
        <p>Perfoms some operation on the given page, e.g. converts page into graphic image.</p> @param page The page to process. @param output This stream contains the results of processing.
      
      <param name="Page"/>
      <param name="Stream"/>
    </member>
    <member name="M:com.aspose.pdf.devices.GraphicsDevice.process(Page,com.aspose.ms.System.Drawing.Graphics)">
       
        <p>renders page on the graphics</p> @param page @param gr
      
      <param name="Page"/>
      <param name="com.aspose.ms.System.Drawing.Graphics"/>
    </member>
    <member name="M:com.aspose.pdf.devices.GraphicsDevice.processInternal(Page,Stream)">
      <param name="Page"/>
      <param name="Stream"/>
    </member>
    <member name="M:com.aspose.pdf.devices.GraphicsDevice.#ctor(Point,int,int,com.aspose.ms.System.Drawing.Rectangle,float,Resolution,int,boolean,int,int,boolean)">
       
        <p>Initializes a new instance of the {@code GraphicsDevice} class with provided image dimensions and resolution.</p> @param origin Top Left image coordinate @param width Image output width. @param height Image output height. @param paperWidth Width that the image is auto-sized to @param paperHeight Height that the image is auto-sized to @param scaleFactor Scale factor of the outpot image. @param resolution Resolution for the result image file, see {@code Resolution} class. @param rotateDegrees degrees
      
      <param name="Point"/>
      <param name="int"/>
      <param name="int"/>
      <param name="com.aspose.ms.System.Drawing.Rectangle"/>
      <param name="float"/>
      <param name="Resolution"/>
      <param name="int"/>
      <param name="boolean"/>
      <param name="int"/>
      <param name="int"/>
      <param name="boolean"/>
    </member>
    <member name="T:com.aspose.pdf.devices.ImageDevice">
       
        <p>An abstract class for image devices.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.ImageDevice.getCoordinateType">
       
        <p>Gets or sets the page coordinate type (Media/Crop boxes). CropBox value is used by default.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.ImageDevice.setCoordinateType(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.devices.ImageDevice.getRenderingOptions">
       
        <p>Gets or sets rendering options.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.ImageDevice.setRenderingOptions(RenderingOptions)">
      <param name="RenderingOptions"/>
    </member>
    <member name="M:com.aspose.pdf.devices.ImageDevice.getFormPresentationMode">
       
        <p>Gets or sets form presentation mode.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.ImageDevice.setFormPresentationMode(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.devices.ImageDevice.getResolution">
       
        <p>Gets image resolution.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.ImageDevice.getWidth">
       
        <p>Gets image output width.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.ImageDevice.getHeight">
       
        <p>Gets image output height.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.ImageDevice.setConvertFontsToUnicodeTTF(boolean)">
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.devices.ImageDevice.#ctor">
       
        <p>Abstract initializer for {@code ImageDevice} descendants, set resolution to 150x150.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.ImageDevice.#ctor(Resolution)">
       
        <p>Abstract initializer for {@code ImageDevice} descendants.</p> @param resolution Resolution for the result image file, see {@code Resolution} class.
      
      <param name="Resolution"/>
    </member>
    <member name="M:com.aspose.pdf.devices.ImageDevice.#ctor(int,int)">
       
        <p>Initializes a new instance of the {@code JpegDevice} class with provided image dimensions and default resolution (=150).</p> @param width Image output width. @param height Image output height.
      
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.devices.ImageDevice.#ctor(PageSize)">
       
        <p>Initializes a new instance of the {@code JpegDevice} class with provided image dimensions and default resolution (=150).</p> @param pageSize Page size of the output image.
      
      <param name="PageSize"/>
    </member>
    <member name="M:com.aspose.pdf.devices.ImageDevice.#ctor(int,int,Resolution)">
       
        <p>Initializes a new instance of the {@code JpegDevice} class with provided image dimensions and resolution.</p> @param width Image output width. @param height Image output height. @param resolution Resolution for the result image file, see {@code Resolution} class.
      
      <param name="int"/>
      <param name="int"/>
      <param name="Resolution"/>
    </member>
    <member name="M:com.aspose.pdf.devices.ImageDevice.#ctor(PageSize,Resolution)">
       
        <p>Initializes a new instance of the {@code JpegDevice} class with provided image dimensions and resolution.</p> @param pageSize Page size of the output image. @param resolution Resolution for the result image file, see {@code Resolution} class.
      
      <param name="PageSize"/>
      <param name="Resolution"/>
    </member>
    <member name="T:com.aspose.pdf.devices.JpegDevice">
       
        <p>Represents image device that helps to save pdf document pages into jpeg.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.JpegDevice.processInternal(Page,Stream)">
       
        <p>Converts the page into jpeg and saves it in the output stream.</p> @param page The page to convert. @param output Output stream with jpeg image.
      
      <param name="Page"/>
      <param name="Stream"/>
    </member>
    <member name="M:com.aspose.pdf.devices.JpegDevice.process(Page,OutputStream)">
      <param name="Page"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.devices.JpegDevice.#ctor">
       
        <p>Initializes a new instance of the {@code JpegDevice} class with default resolution and maximum quality.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.JpegDevice.#ctor(Resolution)">
       
        <p>Initializes a new instance of the {@code JpegDevice} class.</p> @param resolution Resolution for the result image file, see {@code Resolution} class.
      
      <param name="Resolution"/>
    </member>
    <member name="M:com.aspose.pdf.devices.JpegDevice.#ctor(int)">
       
        <p>Initializes a new instance of the {@code JpegDevice} class.</p> @param quality Specifies the level of compression for an image. The range of useful values for the quality is from 0 to 100. The lower the number specified, the higher the compression and therefore the lower the quality of the image. Zero would give you the lowest quality image and 100 the highest.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.devices.JpegDevice.#ctor(Resolution,int)">
       
        <p>Initializes a new instance of the {@code JpegDevice} class.</p> @param resolution Resolution for the result image file, see {@code Resolution} class. @param quality Specifies the level of compression for an image. The range of useful values for the quality is from 0 to 100. The lower the number specified, the higher the compression and therefore the lower the quality of the image. Zero would give you the lowest quality image and 100 the highest.
      
      <param name="Resolution"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.devices.JpegDevice.#ctor(int,int)">
       
        <p>Initializes a new instance of the {@code JpegDevice} class with provided image dimensions, default resolution (=150) and maximum quality.</p> @param width Image output width. @param height Image output height.
      
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.devices.JpegDevice.#ctor(PageSize)">
       
        <p>Initializes a new instance of the {@code JpegDevice} class with provided page size, default resolution (=150) and maximum quality.</p> @param pageSize Page size of the output image.
      
      <param name="PageSize"/>
    </member>
    <member name="M:com.aspose.pdf.devices.JpegDevice.#ctor(int,int,Resolution)">
       
        <p>Initializes a new instance of the {@code JpegDevice} class with provided image dimensions, resolution and maximum quality.</p> @param width Image output width. @param height Image output height. @param resolution Resolution for the result image file, see {@code Resolution} class.
      
      <param name="int"/>
      <param name="int"/>
      <param name="Resolution"/>
    </member>
    <member name="M:com.aspose.pdf.devices.JpegDevice.#ctor(PageSize,Resolution)">
       
        <p>Initializes a new instance of the {@code JpegDevice} class with provided page size, resolution and maximum quality.</p> @param pageSize Page size of the output image. @param resolution Resolution for the result image file, see {@code Resolution} class.
      
      <param name="PageSize"/>
      <param name="Resolution"/>
    </member>
    <member name="M:com.aspose.pdf.devices.JpegDevice.#ctor(int,int,Resolution,int)">
       
        <p>Initializes a new instance of the {@code JpegDevice} class with provided image dimensions, resolution and quality.</p> @param width Image output width. @param height Image output height. @param resolution Resolution for the result image file, see {@code Resolution} class. @param quality Specifies the level of compression for an image. The range of useful values for the quality is from 0 to 100. The lower the number specified, the higher the compression and therefore the lower the quality of the image. Zero would give you the lowest quality image and 100 the highest.
      
      <param name="int"/>
      <param name="int"/>
      <param name="Resolution"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.devices.JpegDevice.#ctor(PageSize,Resolution,int)">
       
        <p>Initializes a new instance of the {@code JpegDevice} class with provided page size, resolution and quality.</p> @param pageSize Page size of the output image. @param resolution Resolution for the result image file, see {@code Resolution} class. @param quality Specifies the level of compression for an image. The range of useful values for the quality is from 0 to 100. The lower the number specified, the higher the compression and therefore the lower the quality of the image. Zero would give you the lowest quality image and 100 the highest.
      
      <param name="PageSize"/>
      <param name="Resolution"/>
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.devices.Margins">
       
        <p>This class represents margins of an image.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.Margins.getLeft">
       
        <p>Gets the left.</p>Value: The left.
      
    </member>
    <member name="M:com.aspose.pdf.devices.Margins.setLeft(int)">
       
        <p>Sets the left.</p>Value: The left.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.devices.Margins.getRight">
       
        <p>Gets the right.</p>Value: The right.
      
    </member>
    <member name="M:com.aspose.pdf.devices.Margins.setRight(int)">
       
        <p>Sets the right.</p>Value: The right.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.devices.Margins.getTop">
       
        <p>Gets the top.</p>Value: The top.
      
    </member>
    <member name="M:com.aspose.pdf.devices.Margins.setTop(int)">
       
        <p>Sets the top.</p>Value: The top.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.devices.Margins.getBottom">
       
        <p>Gets the bottom.</p>Value: The bottom.
      
    </member>
    <member name="M:com.aspose.pdf.devices.Margins.setBottom(int)">
       
        <p>Sets the bottom.</p>Value: The bottom.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.devices.Margins.#ctor(int,int,int,int)">
       
        <p>Initializes a new instance of the {@code Margins} class.</p> @param left The left. @param right The right. @param top The top. @param bottom The bottom.
      
      <param name="int"/>
      <param name="int"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.devices.Margins.#ctor">
       
        <p>Initializes a new instance of the {@code Margins} class.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.devices.PageDevice">
       
        <p>Abstract class for all devices which is used to process certain page the pdf document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.PageDevice.processInternal(Page,Stream)">
       
        <p>Perfoms some operation on the given page, e.g. converts page into graphic image.</p> @param page The page to process. @param output This stream contains the results of processing.
      
      <param name="Page"/>
      <param name="Stream"/>
    </member>
    <member name="M:com.aspose.pdf.devices.PageDevice.process(Page,OutputStream)">
      <param name="Page"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.devices.PageDevice.process(Page,String)">
       
        <p>Perfoms some operation on the given page and saves results into the file.</p> @param page The page to process. @param outputFileName This file contains the results of processing.
      
      <param name="Page"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.devices.PageDevice.process(Page,Graphics)">
       
        <p>renders page on the graphics</p> @param page @param gr
      
      <param name="Page"/>
      <param name="Graphics"/>
    </member>
    <member name="T:com.aspose.pdf.devices.PngDevice">
       
        <p>Represents image device that helps to save pdf document pages into png.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.PngDevice.processInternal(Page,Stream)">
       
        <p>Converts the page into png and saves it in the output stream.</p> @param page The page to convert. @param output Output stream with png image.
      
      <param name="Page"/>
      <param name="Stream"/>
    </member>
    <member name="M:com.aspose.pdf.devices.PngDevice.process(Page,OutputStream)">
      <param name="Page"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.devices.PngDevice.#ctor">
       
        <p>Initializes a new instance of the {@code PngDevice} class with default resolution.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.PngDevice.#ctor(Resolution)">
       
        <p>Initializes a new instance of the {@code PngDevice} class.</p> @param resolution Resolution for the result image file, see {@code Resolution} class.
      
      <param name="Resolution"/>
    </member>
    <member name="M:com.aspose.pdf.devices.PngDevice.#ctor(int,int,Resolution)">
       
        <p>Initializes a new instance of the {@code PngDevice} class with provided image dimensions and resolution.</p> @param width Image output width. @param height Image output height. @param resolution Resolution for the result image file, see {@code Resolution} class.
      
      <param name="int"/>
      <param name="int"/>
      <param name="Resolution"/>
    </member>
    <member name="M:com.aspose.pdf.devices.PngDevice.#ctor(PageSize,Resolution)">
       
        <p>Initializes a new instance of the {@code PngDevice} class with provided page size and resolution.</p> @param pageSize Page size of the output image. @param resolution Resolution for the result image file, see {@code Resolution} class.
      
      <param name="PageSize"/>
      <param name="Resolution"/>
    </member>
    <member name="M:com.aspose.pdf.devices.PngDevice.#ctor(int,int)">
       
        <p>Initializes a new instance of the {@code PngDevice} class with provided image dimensions, default resolution (=150).</p> @param width Image output width. @param height Image output height.
      
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.devices.PngDevice.#ctor(PageSize)">
       
        <p>Initializes a new instance of the {@code PngDevice} class with provided page size, default resolution (=150).</p> @param pageSize Page size of the output image.
      
      <param name="PageSize"/>
    </member>
    <member name="T:com.aspose.pdf.devices.Resolution">
       
        <p>Represents class for holding image resolution.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.Resolution.getX">
       
        <p>Gets horizontal image resolution.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.Resolution.setX(int)">
       
        <p>Sets horizontal image resolution.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.devices.Resolution.getY">
       
        <p>Gets vertical image resolution.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.Resolution.setY(int)">
       
        <p>Sets vertical image resolution.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.devices.Resolution.#ctor(int)">
       
        <p>Initializes a new instance of the {@code Resolution} class.</p> @param value Value which represents the horizontal and vertical resolution.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.devices.Resolution.#ctor(int,int)">
       
        <p>Initializes a new instance of the {@code Resolution} class.</p> @param valueX Horizontal resolution. @param valueY Vertical resolution.
      
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.devices.ShapeType">
       
        <p>This enum represents shape type for the extracted images.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.devices.ShapeType.None">
       
        <p>As it is.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.devices.ShapeType.Landscape">
       
        <p>Landscape Shape.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.devices.ShapeType.Portait">
       
        <p>Portrait Shape.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.devices.TextDevice">
       
        <p>Represents class for converting pdf document pages into text.</p>
        <p>
          <hr>
            <blockquote>
              <pre>The example demonstrates how to extract text on the first PDF document page. 
                <pre lang="Java">Document doc = new Document(inFile); String extractedText; ByteArrayOutputStream ms = new ByteArrayOutputStream(); try { // create text device TextDevice device = new TextDevice(); // convert the page and save text to the stream device.process(doc.getPages().get_Item(1), ms); // use the extracted text extractedText = Encoding.getUnicode().getString(ms.toByteArray()); ms.close(); } catch (IOException e) { e.printStackTrace(); }</pre> 
              </pre>
            </blockquote>
          </hr>
        </p>
        <p>
          <hr>The {@code TextDevice} object is basically used to extract text from pdf page.</hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.TextDevice.getExtractionOptions">
       
        <p>Gets or sets text extraction options.</p>
        <p>
          <hr>
            <blockquote>
              <pre>The example demonstrates how to extracted text in raw order. 
                <pre lang="Java">Document doc = new Document(inFile); String extractedText; // create text device TextDevice device = new TextDevice(new TextExtractionOptions(TextExtractionOptions.TextFormattingMode.Raw)); // convert the page and save text to the stream device.process(doc.getPages().get_Item(1), outFile);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.TextDevice.setExtractionOptions(TextExtractionOptions)">
      <param name="TextExtractionOptions"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TextDevice.getEncodingInternal">
       
        <p>Gets or sets encoding of extracted text.</p>
        <p>
          <hr>
            <blockquote>
              <pre>The example demonstrates how to represent extracted text in UTF-8 encoding. 
                <pre lang="Java">Document doc = new Document(inFile); String extractedText; // create text device TextDevice device = new TextDevice(java.nio.charset.Charset.forName("UTF-8")); // convert the page and save text to the stream device.process(doc.getPages().get_Item(1), outFile);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.TextDevice.getEncoding">
       
        <p>Gets encoding of extracted text.</p>
        <p>
          <hr>
            <blockquote>
              <pre>The example demonstrates how to represent extracted text in UTF-8 encoding. 
                <pre lang="Java">Document doc = new Document(inFile); String extractedText; // create text device TextDevice device = new TextDevice(java.nio.charset.Charset.forName("UTF-8")); // convert the page and save text to the stream device.process(doc.getPages().get_Item(1), outFile);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.TextDevice.setEncodingInternal(Encoding)">
      <param name="Encoding"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TextDevice.setEncoding(java.nio.charset.Charset)">
       
        <p>Sets encoding of extracted text.</p>
        <p>
          <hr>
            <blockquote>
              <pre>The example demonstrates how to represent extracted text in UTF-8 encoding. 
                <pre lang="Java">Document doc = new Document(inFile); String extractedText; // create text device TextDevice device = new TextDevice(java.nio.charset.Charset.forName("UTF-8")); // convert the page and save text to the stream device.process(doc.getPages().get_Item(1), outFile);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
      <param name="java.nio.charset.Charset"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TextDevice.processInternal(Page,Stream)">
       
        <p>Convert page and save it as text stream.</p>
        <p>
          <hr>
            <blockquote>
              <pre>The example demonstrates how to extract text on the first PDF document page. 
                <pre lang="Java">Document doc = new Document(inFile); String extractedText; ByteArrayOutputStream ms = new ByteArrayOutputStream(); // create text device TextDevice device = new TextDevice(); // convert the page and save text to the stream device.process(doc.getPages().get_Item(1), ms); // use the extracted text extractedText = Encoding.getUnicode().getString(ms.toByteArray()); ms.close();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param page The page to convert. @param output Result stream.
      
      <param name="Page"/>
      <param name="Stream"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TextDevice.process(Page,OutputStream)">
       
        <p>Convert page and save it as text stream.</p>
        <p>
          <hr>
            <blockquote>
              <pre>The example demonstrates how to extract text on the first PDF document page. 
                <pre lang="Java">Document doc = new Document(inFile); String extractedText; ByteArrayOutputStream ms = new ByteArrayOutputStream(); // create text device TextDevice device = new TextDevice(); // convert the page and save text to the stream device.process(doc.getPages().get_Item(1), ms); // use the extracted text extractedText = Encoding.getUnicode().getString(ms.toByteArray()); ms.close();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param page The page to convert. @param output Result stream.
      
      <param name="Page"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TextDevice.#ctor(TextExtractionOptions)">
       
        <p>Initializes a new instance of the {@code TextDevice} with text extraction options.</p> @param extractionOptions Text extraction options.
      
      <param name="TextExtractionOptions"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TextDevice.#ctor">
       
        <p>Initializes a new instance of the {@code TextDevice} with the Raw text formatting mode and Unicode text encoding.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.TextDevice.#ctor(Encoding)">
       
        <p>Initializes a new instance of the {@code TextDevice} for the specified encoding.</p> @param encoding Encoding of extracted text
      
      <param name="Encoding"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TextDevice.#ctor(java.nio.charset.Charset)">
      <param name="java.nio.charset.Charset"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TextDevice.#ctor(TextExtractionOptions,Encoding)">
       
        <p>Initializes a new instance of the {@code TextDevice} for the specified encoding with text extraction options.</p> @param extractionOptions Text extraction options. @param encoding Encoding of extracted text.
      
      <param name="TextExtractionOptions"/>
      <param name="Encoding"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TextDevice.#ctor(TextExtractionOptions,java.nio.charset.Charset)">
      <param name="TextExtractionOptions"/>
      <param name="java.nio.charset.Charset"/>
    </member>
    <member name="T:com.aspose.pdf.devices.TiffDevice">
       
        <p>This class helps to save pdf document page by page into the one tiff image.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.TiffDevice.getRenderingOptions">
       
        <p>Gets or sets rendering options.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.TiffDevice.setRenderingOptions(RenderingOptions)">
      <param name="RenderingOptions"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TiffDevice.getFormPresentationMode">
       
        <p>Gets or sets form presentation mode.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.TiffDevice.setFormPresentationMode(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TiffDevice.getSettings">
       
        <p>Gets settings for mapping pdf into tiff image.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.TiffDevice.getResolution">
       
        <p>Gets image resolution.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.TiffDevice.processInternal(IDocument,int,int,Stream)">
       
        <p>Converts certain document pages into tiff and save it in the output stream.</p> @param document The document to convert. @param fromPage Defines page number from which converting will start. @param toPage Defines page number which will end the converting. @param output Output stream with tiff image.
      
      <param name="IDocument"/>
      <param name="int"/>
      <param name="int"/>
      <param name="Stream"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TiffDevice.process(IDocument,int,int,OutputStream)">
      <param name="IDocument"/>
      <param name="int"/>
      <param name="int"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TiffDevice.getWidth">
       
        <p>Gets image output width.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.TiffDevice.getHeight">
       
        <p>Gets image output height.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.TiffDevice.#ctor(Resolution)">
       
        <p>Initializes a new instance of the {@code TiffDevice} class.</p> @param resolution Resolution for the result image file.
      
      <param name="Resolution"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TiffDevice.#ctor(Resolution,TiffSettings)">
       
        <p>Initializes a new instance of the {@code TiffDevice} class.</p> @param resolution Resolution for the output image. @param settings Tiff settings, see {@code TiffSettings} class.
      
      <param name="Resolution"/>
      <param name="TiffSettings"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TiffDevice.#ctor(Resolution,TiffSettings,IIndexBitmapConverter)">
       
        <p>Initializes a new instance of the {@code TiffDevice} class.</p> @param resolution Resolution for the output image. @param settings Tiff settings, see {@code TiffSettings} class. @param converter External converter
      
      <param name="Resolution"/>
      <param name="TiffSettings"/>
      <param name="IIndexBitmapConverter"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TiffDevice.#ctor(TiffSettings)">
       
        <p>Initializes a new instance of the {@code TiffDevice} class.</p> @param settings Tiff settings, see {@code TiffSettings} class.
      
      <param name="TiffSettings"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TiffDevice.#ctor(TiffSettings,IIndexBitmapConverter)">
       
        <p>Initializes a new instance of the {@code TiffDevice} class.</p> @param settings Tiff settings, see {@code TiffSettings} class. @param converter External converter
      
      <param name="TiffSettings"/>
      <param name="IIndexBitmapConverter"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TiffDevice.#ctor">
       
        <p>Initializes a new instance of the {@code TiffDevice} class with default settings.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.TiffDevice.#ctor(int,int,Resolution,TiffSettings)">
       
        <p>Initializes a new instance of the {@code TiffDevice} class.</p> @param width Image output width. @param height Image output height. @param resolution Resolution for the output image. @param settings Tiff settings, see {@code TiffSettings} class.
      
      <param name="int"/>
      <param name="int"/>
      <param name="Resolution"/>
      <param name="TiffSettings"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TiffDevice.#ctor(int,int,Resolution,TiffSettings,IIndexBitmapConverter)">
       
        <p>Initializes a new instance of the {@code TiffDevice} class.</p> @param width Image output width. @param height Image output height. @param resolution Resolution for the output image. @param settings Tiff settings, see {@code TiffSettings} class. @param converter External converter
      
      <param name="int"/>
      <param name="int"/>
      <param name="Resolution"/>
      <param name="TiffSettings"/>
      <param name="IIndexBitmapConverter"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TiffDevice.#ctor(PageSize,Resolution,TiffSettings)">
       
        <p>Initializes a new instance of the {@code TiffDevice} class.</p> @param pageSize Page size of the output image. @param resolution Resolution for the output image. @param settings Tiff settings, see {@code TiffSettings} class.
      
      <param name="PageSize"/>
      <param name="Resolution"/>
      <param name="TiffSettings"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TiffDevice.#ctor(PageSize,Resolution,TiffSettings,IIndexBitmapConverter)">
       
        <p>Initializes a new instance of the {@code TiffDevice} class.</p> @param pageSize Page size of the output image. @param resolution Resolution for the output image. @param settings Tiff settings, see {@code TiffSettings} class. @param converter External converter
      
      <param name="PageSize"/>
      <param name="Resolution"/>
      <param name="TiffSettings"/>
      <param name="IIndexBitmapConverter"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TiffDevice.#ctor(int,int,Resolution)">
       
        <p>Initializes a new instance of the {@code TiffDevice} class.</p> @param width Image output width. @param height Image output height. @param resolution Resolution for the output image.
      
      <param name="int"/>
      <param name="int"/>
      <param name="Resolution"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TiffDevice.#ctor(PageSize,Resolution)">
       
        <p>Initializes a new instance of the {@code TiffDevice} class.</p> @param pageSize Page size of the output image. @param resolution Resolution for the output image.
      
      <param name="PageSize"/>
      <param name="Resolution"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TiffDevice.#ctor(int,int,TiffSettings)">
       
        <p>Initializes a new instance of the {@code TiffDevice} class.</p> @param width Image output width. @param height Image output height. @param settings Tiff settings, see {@code TiffSettings} class.
      
      <param name="int"/>
      <param name="int"/>
      <param name="TiffSettings"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TiffDevice.#ctor(int,int,TiffSettings,IIndexBitmapConverter)">
       
        <p>Initializes a new instance of the {@code TiffDevice} class.</p> @param width Image output width. @param height Image output height. @param settings Tiff settings, see {@code TiffSettings} class. @param converter External converter
      
      <param name="int"/>
      <param name="int"/>
      <param name="TiffSettings"/>
      <param name="IIndexBitmapConverter"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TiffDevice.#ctor(PageSize,TiffSettings,IIndexBitmapConverter)">
       
        <p>Initializes a new instance of the {@code TiffDevice} class.</p> @param pageSize Page size of the output image. @param settings Tiff settings, see {@code TiffSettings} class. @param converter External converter
      
      <param name="PageSize"/>
      <param name="TiffSettings"/>
      <param name="IIndexBitmapConverter"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TiffDevice.#ctor(PageSize,TiffSettings)">
       
        <p>Initializes a new instance of the {@code TiffDevice} class.</p> @param pageSize Page size of the output image. @param settings Tiff settings, see {@code TiffSettings} class.
      
      <param name="PageSize"/>
      <param name="TiffSettings"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TiffDevice.#ctor(int,int)">
       
        <p>Initializes a new instance of the {@code TiffDevice} class.</p> @param width Image output width. @param height Image output height.
      
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TiffDevice.#ctor(PageSize)">
       
        <p>Initializes a new instance of the {@code TiffDevice} class.</p> @param pageSize Page size of the output image.
      
      <param name="PageSize"/>
    </member>
    <member name="T:com.aspose.pdf.devices.TiffSettings">
       
        <p>This class represents settings for importing pdf to Tiff.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.TiffSettings.getMargins">
       
        <p>Gets the margins.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.TiffSettings.getSkipBlankPages">
       
        <p>Gets a value indicating whether to skip blank pages.</p>Value: {@code true} if need to skip blank pages; otherwise, {@code false}.
        <p>
          <hr>Default value is false</hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.TiffSettings.setSkipBlankPages(boolean)">
       
        <p>Sets a value indicating whether to skip blank pages.</p>Value: {@code true} if need to skip blank pages; otherwise, {@code false}.
        <p>
          <hr>Default value is false</hr>
        </p> 
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TiffSettings.getCompression">
       
        <p>Gets the type of the compression.</p>Value: The type of the compression.
        <p>
          <hr>Default value is CompressionType.LZW</hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.TiffSettings.setCompression(int)">
       
        <p>Sets the type of the compression.</p>Value: The type of the compression.
        <p>
          <hr>Default value is CompressionType.LZW</hr>
        </p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TiffSettings.getDepth">
       
        <p>Gets the color depth.</p>Value: The color depth.
        <p>
          <hr>Default value is ColorDepth.Default</hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.TiffSettings.setDepth(int)">
       
        <p>Gets the color depth.</p>Value: The color depth.
        <p>
          <hr>Default value is ColorDepth.Default</hr>
        </p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TiffSettings.getShape">
       
        <p>Gets the type of the shape.</p>Value: The type of the shape.
        <p>
          <hr>Default value is ShapeType.None</hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.TiffSettings.setShape(int)">
       
        <p>Sets the type of the shape.</p>Value: The type of the shape.
        <p>
          <hr>Default value is ShapeType.None</hr>
        </p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TiffSettings.getBrightness">
       
        <p>Get value boundary of the transformation of colors in white and black. This parameter can be applied with EncoderValue.CompressionCCITT4, EncoderValue.CompressionCCITT3, EncoderValue.CompressionRle or ColorDepth.Format1bpp == 1</p>Value: Value of brightness should be in the range from 0 to 1. By default value is equal to 0.33f
      
    </member>
    <member name="M:com.aspose.pdf.devices.TiffSettings.setBrightness(float)">
       
        <p>Set value boundary of the transformation of colors in white and black. This parameter can be applied with EncoderValue.CompressionCCITT4, EncoderValue.CompressionCCITT3, EncoderValue.CompressionRle or ColorDepth.Format1bpp == 1</p>Value: Value of brightness should be in the range from 0 to 1. By default value is equal to 0.33f
      
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TiffSettings.getCoordinateType">
       
        <p>Get or sets the page coordinate type (Media/Crop boxes). CropBox value is used by default.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.TiffSettings.setCoordinateType(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TiffSettings.#ctor">
       
        <p>Initializes a new instance of the {@code TiffSettings} class.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.devices.TiffSettings.#ctor(int)">
      / * 
        <p>/ * Initializes a new instance of the {@code TiffSettings} class. / *</p> / * @param shapeType Type of the shape. /
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TiffSettings.#ctor(Margins)">
      / * 
        <p>/ * Initializes a new instance of the {@code TiffSettings} class. / *</p> / * @param colorDepth The color depth. /
      
      <param name="Margins"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TiffSettings.#ctor(int,int,Margins)">
       
        <p>Initializes a new instance of the {@code TiffSettings} class.</p> @param compressionType Type of the compression. @param colorDepth The color depth. @param margins The margins.
      
      <param name="int"/>
      <param name="int"/>
      <param name="Margins"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TiffSettings.#ctor(int,int,Margins,boolean)">
       
        <p>Initializes a new instance of the {@code TiffSettings} class.</p> @param compressionType Type of the compression. @param colorDepth The color depth. @param margins The margins. @param skipBlankPages if set to {@code true} need to skip blank pages.
      
      <param name="int"/>
      <param name="int"/>
      <param name="Margins"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TiffSettings.#ctor(int,int,Margins,boolean,int)">
       
        <p>Initializes a new instance of the {@code TiffSettings} class.</p> @param compressionType Type of the compression. @param colorDepth The color depth. @param margins The margins. @param skipBlankPages if set to {@code true} need to skip blank pages. @param shapeType Type of the shape.
      
      <param name="int"/>
      <param name="int"/>
      <param name="Margins"/>
      <param name="boolean"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.devices.TiffSettings.#ctor(boolean)">
       
        <p>Initializes a new instance of the {@code TiffSettings} class.</p> @param skipBlankPages if set to {@code true} [skip blank pages].
      
      <param name="boolean"/>
    </member>
    <member name="T:com.aspose.pdf.Direction">
       
        <p>Text direction.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.Direction.L2R">
       
        <p>Left to right direction.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.Direction.R2L">
       
        <p>Right to left direction.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.DocSaveOptions">
       
        <p>Save options for export to Doc format</p> 
      
    </member>
    <member name="M:com.aspose.pdf.DocSaveOptions.getMode">
       
        <p>Recognition mode.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.DocSaveOptions.setMode(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.DocSaveOptions.getRelativeHorizontalProximity">
       
        <p>Relative proximity between textual elements means that distance is normed by the font size. Bigger fonts may have bigger distances between syllables and still may be looked at as single whole. Specified in hundreds of percent of the font size. E.g. 1 = 100% meaning that two chars of 12pt are placed 12 pt apart are proximal.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.DocSaveOptions.setRelativeHorizontalProximity(float)">
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.DocSaveOptions.getRecognizeBullets">
       
        <p>Switch on the recognition of bullets</p> 
      
    </member>
    <member name="M:com.aspose.pdf.DocSaveOptions.setRecognizeBullets(boolean)">
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.DocSaveOptions.getFormat">
       
        <p>Output format</p> 
      
    </member>
    <member name="M:com.aspose.pdf.DocSaveOptions.setFormat(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.DocSaveOptions.#ctor">
       
        <p>Constructor</p> 
      
    </member>
    <member name="T:com.aspose.pdf.DocSaveOptions.RecognitionMode">
       
        <p>Allows to control how a PDF document is converted into a word processing document.</p>
        <p>
          <hr> 
            <p>Use the {@code RecognitionMode.Textbox} mode when the resulting document is not goining to be heavily edited futher. Textboxes are easy to modify when there is not a lot to do.</p>  
            <p>Use the {@code RecognitionMode.Flow} mode when the output document needs further editing. Paragraphs and texlines in the flow mode allow easy modification of text, but unupported formatting objects will look worse than in the {@code RecognitionMode.Textbox} mode.</p> 
          </hr>
        </p> 
      
    </member>
    <member name="F:com.aspose.pdf.DocSaveOptions.RecognitionMode.Textbox">
       
        <p> 
          <p>This mode is fast and good for maximally preserving original look of the PDF file, but editability of the resulting document could be limited.</p>  
          <p>Every visually grouped block of text int the original PDF file is converted into a textbox in the resulting document. This achieves maximal resemblance of the output document to the original PDF file. The output document will look good, but it will consist entirely of textboxes and it could makes further editing of the document in Microsoft Word quite hard.</p>  
          <p>This is the default mode.</p> 
        </p> 
      
    </member>
    <member name="F:com.aspose.pdf.DocSaveOptions.RecognitionMode.Flow">
       
        <p>Full recognition mode, the engine performs grouping and multi-level analysis to restore the original document author's intent and produce a maximally editable document. The downside is that the output document might look different from the original PDF file.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.DocSaveOptions.DocFormat">
       
        <p>Allows to specify .doc or .docx file format.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.DocSaveOptions.DocFormat.Doc">
       
        <p>[MS-DOC]: Word (.doc) Binary File Format</p> 
      
    </member>
    <member name="F:com.aspose.pdf.DocSaveOptions.DocFormat.DocX">
       
        <p>Office Open XML (.docx) File Format</p> 
      
    </member>
    <member name="T:com.aspose.pdf.Document">
       
        <p>Class representing PDF document</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Document.getLocalFontPaths">
      List for standard font directories in different OS @return list of String
    </member>
    <member name="M:com.aspose.pdf.Document.addLocalFontPath(String)">
      Add one more path to fonts @param path
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Document.setLocalFontPaths(List)">
      Sets user list with font paths @param path
      <param name="List"/>
    </member>
    <member name="M:com.aspose.pdf.Document.restoreLocalFontPath">
      Restores list for standard font directories by default.
    </member>
    <member name="M:com.aspose.pdf.Document.getPageInfo">
      Gets the page info.(for generator only) @return The page info.
    </member>
    <member name="M:com.aspose.pdf.Document.setPageInfo(PageInfo)">
      Sets the page info.(for generator only)
      <param name="PageInfo"/>
    </member>
    <member name="M:com.aspose.pdf.Document.getFontReplaceBehavior">
      Gets the TextEditOptions.FontReplace
    </member>
    <member name="M:com.aspose.pdf.Document.setFontReplaceBehavior(int)">
      Sets the TextEditOptions.FontReplace
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Document.getDestinations">
       
        <p>Gets the collection of destinations.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Document.getCollection">
       
        <p>Gets collection of document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Document.setCollection(Collection)">
       
        <p>Sets collection of document.</p> 
      
      <param name="Collection"/>
    </member>
    <member name="M:com.aspose.pdf.Document.getEngineDoc">
       
        <p>Instance of IPdfDocument used to access to internal document structure.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Document.getVersion">
       
        <p>Gets a version of Pdf from Pdf file header.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Document.getOpenAction">
       
        <p>Gets action performed at document opening.</p>
        <p>
          <hr>
            <blockquote>
              <pre>Example demonstrates how to get CenterWindow flag: 
                <pre lang="Java">Document document = new Document("sample.pdf"); IAppointment value = document.getOpenAction();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.Document.setOpenAction(IAppointment)">&lt;p&gt; Sets action performed at document opening. &lt;p&gt; 
      <param name="IAppointment"/>
    </member>
    <member name="M:com.aspose.pdf.Document.getHideToolBar">
       
        <p>Gets flag specifying whether toolbar should be hidden when document is active.</p>
        <p>
          <hr>
            <blockquote>
              <pre>Example demonstrates how to get HideToolBar flag: 
                <pre lang="Java">Document document = new Document("sample.pdf"); boolean value = document.getHideToolBar();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.Document.setHideToolBar(boolean)">
       
        <p>Set flag specifying whether toolbar should be hidden when document is active.</p> 
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Document.getHideMenubar">
       
        <p>Gets flag specifying whether menu bar should be hidden when document is active.</p>
        <p>
          <hr>
            <blockquote>
              <pre>Example demonstrates how to get HideMenubar flag: 
                <pre lang="Java">Document document = new Document("sample.pdf"); boolean value = document.getHideMenubar();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.Document.setHideMenubar(boolean)">
       
        <p>Sets flag specifying whether menu bar should be hidden when document is active.</p> 
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Document.getHideWindowUI">
       
        <p>Gets or sets flag specifying whether user interface elements should be hidden when document is active.</p>
        <p>
          <hr>
            <blockquote>
              <pre>Example demonstrates how to get HideWindowUI flag: 
                <pre lang="Java">Document document = new Document("sample.pdf"); boolean value = document.getHideWindowUI();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.Document.setHideWindowUI(boolean)">
       
        <p>Sets flag specifying whether user interface elements should be hidden when document is active.</p> 
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Document.getFitWindow">
       
        <p>Gets flag specifying whether document window must be resized to fit the first displayed page.</p>
        <p>
          <hr>
            <blockquote>
              <pre>Example demonstrates how to get FitWindow flag: 
                <pre lang="Java">Document document = new Document("sample.pdf"); boolean value = document.getFitWindow();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.Document.setFitWindow(boolean)">
       
        <p>Sets flag specifying whether document window must be resized to fit the first displayed page.</p> 
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Document.getCenterWindow">
       
        <p>Gets flag specifying whether position of the document's window will be centerd on the screen.</p>
        <p>
          <hr>
            <blockquote>
              <pre>Example demonstrates how to get CenterWindow flag: 
                <pre lang="Java">Document document = new Document("sample.pdf"); boolean value = document.getCenterWindow();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.Document.setCenterWindow(boolean)">
       
        <p>Sets flag specifying whether position of the document's window will be centerd on the screen.</p> 
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Document.getDisplayDocTitle">
       
        <p>Gets flag specifying whether document's window title bar should display document title.</p>
        <p>
          <hr>
            <blockquote>
              <pre>Example demonstrates how to get DisplayDocTitle flag: 
                <pre lang="Java">Document document = new Document("sample.pdf"); boolean value = document.getDisplayDocTitle();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.Document.setDisplayDocTitle(boolean)">
       
        <p>Sets flag specifying whether document's window title bar should display document title.</p> 
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Document.getPages">
       
        <p>Gets collection of document pages. Note that pages are numbered from 1 in collection.</p>
        <p>
          <hr>
            <blockquote>
              <pre>Example below demonstrates how to operate with the document pages: How to obtain number of pages and how to obtain rectangle of starting page of the document. 
                <pre lang="Java">Document document = new Document("sample.pdf"); PageCollection pages = document.getPages(); System.out.println("Document contains " + pages.size()); Page page = pages.get_Item(1); Rectangle rect = page.getRect();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.Document.getOutlines">
       
        <p>Gets document outlines.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Document.getActions">
       
        <p>Gets document actions. This property is instance of DocumentActions class which allows to get/set BeforClosing, BeforSaving, etc. actions.</p>
        <p>
          <hr>
            <blockquote>
              <pre>This example demonstrates how to obtain after open action of the document: 
                <pre lang="Java">Document document = new Document("PdfWithOpenAction.pdf"); DocumentActionCollection actions = document.getActions(); PdfAction afterSavingAction = actions.getAfterSaving();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.Document.getForm">
       
        <p>Gets Acro Form of the document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Document.getEmbeddedFiles">
       
        <p>Gets collection of files embedded to document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Document.getDirection">
       
        <p>Gets reading order of text: L2R (left to right) or R2L (right to left).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Document.setDirection(int)">
       
        <p>Sets reading order of text: L2R (left to right) or R2L (right to left).</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Document.getPageMode">
       
        <p>Gets page mode, specifying how document should be displayed when opened.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Document.setPageMode(int)">
       
        <p>Sets page mode, specifying how document should be displayed when opened.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Document.getNonFullScreenPageMode">
       
        <p>Gets page mode, specifying how to display the document on exiting full-screen mode.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Document.setNonFullScreenPageMode(int)">
       
        <p>Sets page mode, specifying how to display the document on exiting full-screen mode.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Document.getPageLayout">
       
        <p>Gets page layout which shall be used when the document is opened.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Document.setPageLayout(int)">
       
        <p>Sets page layout which shall be used when the document is opened.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Document.getFileName">
       
        <p>Name of the PDF file that caused this document</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Document.getInfo">
       
        <p>Gets document info.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Document.getMetadata">
       
        <p>Document metadata. (A PDF document may include general information, such as the document�s title, author, and creation and modification dates. Such global information about the document (as opposed to its content or structure) is called metadata and is intended to assist in cataloguing and searching for documents in external databases.)</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Document.getLogicalStructure">
       
        <p>Gets logical structure of the document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Document.saveInternal(Stream)">
       
        <p>Stores document into stream.</p> @param output Stream where document shell be stored.
      
      <param name="Stream"/>
    </member>
    <member name="M:com.aspose.pdf.Document.save(OutputStream)">
       
        <p>Stores document into stream.</p> @param output Stream where document shell be stored.
      
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.Document.save(String)">
       
        <p>Saves document into the specified file.</p> @param outputFileName Path to file where the document will be stored.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Document.exportAnnotationsToXfdf(String)">
       
        <p>Exports all document annotations to XFDF file</p> @param fileName XFDF file name
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Document.sendTo(DocumentDevice,OutputStream)">
       
        <p>Sends the whole document to the document device for processing.</p> @param device Document device which is used to process the document. @param output Output stream contains the results of the document processing with given device.
      
      <param name="DocumentDevice"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.Document.sendTo(DocumentDevice,int,int,OutputStream)">
       
        <p>Sends the certain pages of the document to the document device for processing.</p> @param device Document device which is used to process the document. @param fromPage The first page for processing. @param toPage The last page for processing. @param output Output stream contains the results of the document pages processing with given device.
      
      <param name="DocumentDevice"/>
      <param name="int"/>
      <param name="int"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.Document.sendTo(DocumentDevice,String)">
       
        <p>Sends the whole document to the document device for processing.</p> @param device Document device which is used to process the document. @param outputFileName Output file name with the results of processing.
      
      <param name="DocumentDevice"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Document.sendTo(DocumentDevice,int,int,String)">
       
        <p>Sends the whole document to the document device for processing.</p> @param device Document device which is used to process the document. @param fromPage The first page for processing. @param toPage The last page for processing. @param outputFileName Output file name with the results of processing.
      
      <param name="DocumentDevice"/>
      <param name="int"/>
      <param name="int"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Document.removeMetadata">
       
        <p>Removes metadata from the document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Document.importAnnotationsFromXfdf(String)">
       
        <p>Imports annotations from XFDF file to document.</p> @param fileName XFDF file name
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Document.validate(String,int)">
       
        <p>Validate document into the specified file.</p> @param outputLogFileName Path to file where the comments will be stored. @param format Pdf format. @throws Exception
      
      <param name="String"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Document.convert(String,int,int)">
       
        <p>Convert document and save errors into the specified file.</p> @param outputLogFileName Path to file where the comments will be stored. @param format Pdf format. @param action Action for objects that can not be converted
      
      <param name="String"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Document.convert(CallBackGetHocr)">
      Convert document and save errors into the specified file. @param callback Action for objects that can not be converted @return
      <param name="CallBackGetHocr"/>
    </member>
    <member name="M:com.aspose.pdf.Document.convertInternal(Stream,int,int)">
       
        <p>Convert document and save errors into the specified stream.</p> @param outputLogStream Stream where the comments will be stored. @param format Pdf format. @param action Action for objects that can not be converted @throws Exception
      
      <param name="Stream"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Document.convert(OutputStream,int,int)">
       
        <p>Convert document and save errors into the specified stream.</p> @param outputLogStream Stream where the comments will be stored. @param format Pdf format. @param action Action for objects that can not be converted @throws Exception
      
      <param name="OutputStream"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Document.convert(XmlTextWriter,int,boolean,int)">
      Convert the PDF Document and log results. @param xml The log. @param format Pdf format. @param onlyValidation Only document validation. @param action Action for objects that can not be converted @return @throws Exception
      <param name="XmlTextWriter"/>
      <param name="int"/>
      <param name="boolean"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Document.flatten">
       
        <p>Removes all fields from the document and place their values instead.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Document.getCryptoAlgorithm">
       
        <p>Gets security settings if document is encrypted. If document is not encrypted then corresponding exception will be raised in .net 1.1 or CryptoAlgorithm will be null for other .net versions.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Document.encrypt(String,String,DocumentPrivilege,int,boolean)">
       
        <p>Encrypts the document. Call then Save to get encrypted version of the document.</p> @param userPassword User password. @param ownerPassword Owner password. @param privileges Document permissions, see {@code Permissions} for details. @param cryptoAlgorithm Cryptographic algorithm, see {@code CryptoAlgorithm} for details. @param usePdf20 Support for revision 6 (Extension 8).
      
      <param name="String"/>
      <param name="String"/>
      <param name="DocumentPrivilege"/>
      <param name="int"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Document.encrypt(String,String,int,int)">
       
        <p>Encrypts the document. Call then Save to get encrypted version of the document.</p> @param userPassword User password. @param ownerPassword Owner password. @param permissions Document permissions, see {@code Permissions} for details. @param cryptoAlgorithm Cryptographic algorithm, see {@code CryptoAlgorithm} for details.
      
      <param name="String"/>
      <param name="String"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Document.encrypt(String,String,int,int,boolean)">
       
        <p>Encrypts the document. Call then Save to get encrypted version of the document.</p> @param userPassword User password. @param ownerPassword Owner password. @param permissions Document permissions, see {@code Permissions} for details. @param cryptoAlgorithm Cryptographic algorithm, see {@code CryptoAlgorithm} for details. @param usePdf20 Support for revision 6 (Extension 8).
      
      <param name="String"/>
      <param name="String"/>
      <param name="int"/>
      <param name="int"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Document.changePasswords(String,String,String)">
       
        <p>Changes document passwords. This action can be done only using owner password/&gt;.</p> @param ownerPassword Owner password. @param newUserPassword New user password. @param newOwnerPassword New owner password.
      
      <param name="String"/>
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Document.loadFromLegacyXML(String,DocumentPrivilege[],int[])">
       
        <p>Loads internals of instance {@code Document} class with legacy XML compatible with old generator.</p> @param xmlFileName Legacy XML file name.
      
      <param name="String"/>
      <param name="DocumentPrivilege[]"/>
      <param name="int[]"/>
    </member>
    <member name="M:com.aspose.pdf.Document.isLinearized">
       
        <p>Gets a value indicating whether document is linearized.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Document.isLinearized(boolean)">
       
        <p>Sets a value indicating whether document is linearized.</p> 
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Document.decrypt">
       
        <p>Decrypts the document. Call then Save to obtain decrypted version of the document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Document.getPermissions">
       
        <p>Gets permissions of the document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Document.isEncrypted">
       
        <p>Gets encrypted status of the document. True if document is encrypted.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Document.optimize">
       
        <p>Linearize document in order to - open the first page as quickly as possible; - display next page or follow by link to the next page as quickly as possible; - display the page incrementally as it arrives when data for a page is delivered over a slow channel (display the most useful data first); - permit user interaction, such as following a link, to be performed even before the entire page has been received and displayed. Invoking this method doesn't actually saves the document. On the contrary the document only is prepared to have optimized structure, call then Save to get optimized document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Document.save">
       
        <p>Save document incrementally (i.e. using incremental update technque).</p>
        <p>
          <hr>In order to save document incremetally we should open the document file for writing. Therefore Document must be initialized with writable stream like in the next code snippet: Document doc = new Document(new FileStream("document.pdf", FileMode.Open, FileAccess.ReadWrite)); // make some changes and save the document incrementally doc.Save();</hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.Document.save(String,int)">
       
        <p>Saves the document with a new name along with a file format.</p> @param outputFileName Path to file where the document will be stored. @param format Format options.
      
      <param name="String"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Document.save(OutputStream,int)">
       
        <p>Saves the document with a new name along with a file format.</p> @exception ArgumentException {@code ArgumentException} when {@code HtmlSaveOptions} is passed to a method. Save a document to the html stream is not supported. Please use method save to the file. @param outputStream Stream where the document will be stored. @param format Format options.
      
      <param name="OutputStream"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Document.save(String,SaveOptions)">
       
        <p>Saves the document with a new name setting its save options.</p> @param outputFileName Path to file where the document will be stored. @param options Save options.
      
      <param name="String"/>
      <param name="SaveOptions"/>
    </member>
    <member name="M:com.aspose.pdf.Document.save(OutputStream,SaveOptions)">
       
        <p>Saves the document to a stream with a save options.</p> @exception ArgumentException {@code ArgumentException} when {@code HtmlSaveOptions} is passed to a method. Save a document to the html stream is not supported. Please use method save to the file. @param outputStream Stream where the document will be stored. @param options Save options.
      
      <param name="OutputStream"/>
      <param name="SaveOptions"/>
    </member>
    <member name="M:com.aspose.pdf.Document.getId">
       
        <p>Gets the ID.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Document.getMetadataStream">
       
        <p>Returns raw metadata stream</p> @return
      
    </member>
    <member name="M:com.aspose.pdf.Document.suppressUpdate">
      Suppresses update contents data for all pages The contents is not updated until ResumeUpdate is called
    </member>
    <member name="M:com.aspose.pdf.Document.resumeUpdate">
      resumes document update
    </member>
    <member name="M:com.aspose.pdf.Document.dispose">
       
        <p>Closes all resources used by this document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Document.getBackground">
       
        <p>Gets the background color of the document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Document.setBackground(java.awt.Color)">
       
        <p>Sets the background color of the document.</p> 
      
      <param name="java.awt.Color"/>
    </member>
    <member name="M:com.aspose.pdf.Document.optimizeResources">
       
        <p>Optimize resources in the document: 1. Resources which are not used on the document pages are removed; 2. Equal resources are joined into one object; 3. Unused objects are deleted.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Document.optimizeResources(Document.OptimizationOptions)">
       
        <p>Optimize resources in the document according to defined optimization strategy.</p> @param strategy Optimization strategy.
      
      <param name="Document.OptimizationOptions"/>
    </member>
    <member name="M:com.aspose.pdf.Document.getOptimizeSize">
      Gets optimization flag. When pages are added to document, equal resource streams in resultant file are merged into one PDF object if this flag set. This allows to decrease resultant file size but may cause slower execution and larger memory requirements. Default value: false. @return
    </member>
    <member name="M:com.aspose.pdf.Document.setOptimizeSize(boolean)">
      Sets optimization flag. When pages are added to document, equal resource streams in resultant file are merged into one PDF object if this flag set. This allows to decrease resultant file size but may cause slower execution and larger memory requirements. Default value: false. @return
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Document.getIgnoreCorruptedObjects">
      Gets or sets flag of ignoring errors in source files. When pages from source document copied into destination document, copying process is stopped with exception if some objects in source files are corrupted when this flag is false. example: dest.Pages.Add(src.Pages); If this flag is set to true then corrupted objects will be replaced with empty values. By default: true. @return
    </member>
    <member name="M:com.aspose.pdf.Document.setIgnoreCorruptedObjects(boolean)">
      Gets or sets flag of ignoring errors in source files. When pages from source document copied into destination document, copying process is stopped with exception if some objects in source files are corrupted when this flag is false. example: dest.Pages.Add(src.Pages); If this flag is set to true then corrupted objects will be replaced with empty values. By default: true. @return
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Document.getPageLabels">
      Gets page labels in the document.
    </member>
    <member name="M:com.aspose.pdf.Document.freeMemory">
       
        <p>Clears memory</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Document.#ctor">
       
        <p>Initializes empty document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Document.#ctor(InputStream)">
       
        <p>Initialize new Document instance from the {@code input} stream.</p> @param input Stream with pdf document.
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.Document.#ctor(InputStream,String)">
      This metod will be implemented in the next release. @param input @param password
      <param name="InputStream"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Document.#ctor(Stream)">
       
        <p>Initialize new Document instance from the {@code input} stream.</p> @param input Stream with pdf document.
      
      <param name="Stream"/>
    </member>
    <member name="M:com.aspose.pdf.Document.#ctor(InputStream,String,boolean)">
       
        <p>Initialize new Document instance from the {@code input} stream.</p> @param input Stream with pdf document. @param password User or owner password. @param isManagedStream if set to {@code true} inner stream is closed before exit; otherwise, is not.
      
      <param name="InputStream"/>
      <param name="String"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Document.#ctor(InputStream,boolean)">
       
        <p>Initialize new Document instance from the {@code input} stream.</p> @param input Stream with pdf document. @param isManagedStream if set to {@code true} inner stream is closed before exit; otherwise, is not.
      
      <param name="InputStream"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Document.#ctor(InputStream,com.aspose.pdf.LoadOptions)">
       
        <p>Opens an existing document from a stream providing necessary converting to get pdf document.</p> @param input Input stream to convert into pdf document. @param options Represents properties for converting {@code input} into pdf document.
      
      <param name="InputStream"/>
      <param name="com.aspose.pdf.LoadOptions"/>
    </member>
    <member name="M:com.aspose.pdf.Document.#ctor(String,LoadOptions)">
       
        <p>Opens an existing document from a file providing necessary converting to get pdf document.</p> @param filename Input file to convert into pdf document. @param options Represents properties for converting {@code filename} into pdf document.
      
      <param name="String"/>
      <param name="LoadOptions"/>
    </member>
    <member name="M:com.aspose.pdf.Document.#ctor(Stream,String)">
      <param name="Stream"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Document.#ctor(String)">
       
        <p>Just init Document using {@code filename}. The same as {@code Document(Stream)}.</p> @param filename The name of the pdf document file.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Document.#ctor(String,String)">
       
        <p>Initializes new instance of the {@code Document} class for working with encrypted document.</p> @param filename Document file name. @param password User or owner password.
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Document.#ctor(aspose.pdf.Pdf)">
       
        <p>Initialize new Document instance from the {@code pdf} stream.</p> @param pdf Pdf document which came from Aspose.Pdf.Generator.
      
      <param name="aspose.pdf.Pdf"/>
    </member>
    <member name="M:com.aspose.pdf.Document.#ctor(String,String,boolean)">
       
        <p>Initializes new instance of the {@code Document} class for working with encrypted document.</p> @param filename Document file name. @param password User or owner password. @param isManagedStream if set to {@code true} inner stream is closed before exit; otherwise, is not.
      
      <param name="String"/>
      <param name="String"/>
      <param name="boolean"/>
    </member>
    <member name="T:com.aspose.pdf.Document.CallBackGetHocr"/>
    <member name="T:com.aspose.pdf.Document.OptimizationOptions">
      Class which describes document optimization algorithm. Instance of this class may be used as parameter of OptimizeResources() method. @author User
    </member>
    <member name="M:com.aspose.pdf.Document.OptimizationOptions.getLinkDuplcateStreams">
      If this flag is set to true, Resource streams will be analyzed. If duplicate streams are found (i.e. if stream contents is equal), then thes streams will be stored as one object. This allows to decrease document size in some cases (for example, when same document was concatenedted multiple times). @return
    </member>
    <member name="M:com.aspose.pdf.Document.OptimizationOptions.setLinkDuplcateStreams(boolean)">
      If this flag is set to true, Resource streams will be analyzed. If duplicate streams are found (i.e. if stream contents is equal), then thes streams will be stored as one object. This allows to decrease document size in some cases (for example, when same document was concatenedted multiple times).
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Document.OptimizationOptions.getRemoveUnusedStreams">
      If this flag set to true, every resource is checked on it's usage. If resource is never used, then resources is removed. This may decrease document size for example when pages were extracted from document. @return
    </member>
    <member name="M:com.aspose.pdf.Document.OptimizationOptions.setRemoveUnusedStreams(boolean)">
      If this flag set to true, every resource is checked on it's usage. If resource is never used, then resources is removed. This may decrease document size for example when pages were extracted from document. @return
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Document.OptimizationOptions.getRemoveUnusedObjects">
      If this flag is set to true, all document objects will be checked and unused objects (i.e. objects which does not have any reference) are removed from document. @return
    </member>
    <member name="M:com.aspose.pdf.Document.OptimizationOptions.setRemoveUnusedObjects(boolean)">
      If this flag is set to true, all document objects will be checked and unused objects (i.e. objects which does not have any reference) are removed from document. @return
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Document.OptimizationOptions.all">
      Creates optimization strategy will all options activated. @return
    </member>
    <member name="T:com.aspose.pdf.DocumentActionCollection">
       
        <p>Class describes actions performed on some actions with document</p> 
      
    </member>
    <member name="M:com.aspose.pdf.DocumentActionCollection.getBeforeSaving">
       
        <p>Gets action performed before document saving.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.DocumentActionCollection.setBeforeSaving(PdfAction)">
       
        <p>Sets action performed before document saving.</p> 
      
      <param name="PdfAction"/>
    </member>
    <member name="M:com.aspose.pdf.DocumentActionCollection.getBeforeClosing">
       
        <p>Gets action that will be performed before documetn closing.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.DocumentActionCollection.setBeforeClosing(PdfAction)">
       
        <p>Sets action that will be performed before documetn closing.</p> 
      
      <param name="PdfAction"/>
    </member>
    <member name="M:com.aspose.pdf.DocumentActionCollection.getAfterSaving">
       
        <p>Gets action that will be performed after document saving.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.DocumentActionCollection.setAfterSaving(PdfAction)">
       
        <p>Sets action that will be performed after document saving.</p> 
      
      <param name="PdfAction"/>
    </member>
    <member name="M:com.aspose.pdf.DocumentActionCollection.getBeforePrinting">
       
        <p>Action that will be performed before document printing.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.DocumentActionCollection.setBeforePrinting(PdfAction)">
      <param name="PdfAction"/>
    </member>
    <member name="M:com.aspose.pdf.DocumentActionCollection.getAfterPrinting">
       
        <p>Action that will be performed after document printing.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.DocumentActionCollection.setAfterPrinting(PdfAction)">
      <param name="PdfAction"/>
    </member>
    <member name="M:com.aspose.pdf.DocumentActionCollection.#ctor(IDocument)">
       
        <p>Constructor for DocumentActionCollection. Constructs DocumentActionCollection objects from Pdf.Kit.Engine Document object.</p> @param document
      
      <param name="IDocument"/>
    </member>
    <member name="T:com.aspose.pdf.DocumentInfo">
       
        <p>Represents meta information of PDF document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.DocumentInfo.getTitle">
       
        <p>Gets document title.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.DocumentInfo.setTitle(String)">
       
        <p>Sets document title.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.DocumentInfo.getCreator">
       
        <p>Gets document creator.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.DocumentInfo.setCreator(String)">
       
        <p>Sets document creator.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.DocumentInfo.getAuthor">
       
        <p>Gets document author.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.DocumentInfo.setAuthor(String)">
       
        <p>Sets document author.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.DocumentInfo.getSubject">
       
        <p>Gets the subject of the document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.DocumentInfo.setSubject(String)">
       
        <p>Sets the subject of the document.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.DocumentInfo.getKeywords">
       
        <p>Gets the keywords of the document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.DocumentInfo.setKeywords(String)">
       
        <p>Set the keywords of the document.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.DocumentInfo.getProducer">
       
        <p>Gets the document producer.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.DocumentInfo.setProducer(String)">
       
        <p>Sets the document producer.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.DocumentInfo.getCreationDate">
       
        <p>Gets the date of document creation.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.DocumentInfo.setCreationDate(java.util.Date)">
       
        <p>Sets the date of document creation.</p> 
      
      <param name="java.util.Date"/>
    </member>
    <member name="M:com.aspose.pdf.DocumentInfo.getModDate"/>
    <member name="M:com.aspose.pdf.DocumentInfo.setModDate(java.util.Date)">
      <param name="java.util.Date"/>
    </member>
    <member name="M:com.aspose.pdf.DocumentInfo.getTrapped">
       
        <p>Gets the trapped flag.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.DocumentInfo.setTrapped(String)">
       
        <p>Sets the trapped flag.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.DocumentInfo.clear">
       
        <p>Clears the document info.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.DocumentInfo.addItem(Object,Object)">
       
        <p>Adds an element with the specified key and value into the collection.</p> @param key The key of the element to add. @param value The value of the element to add. The value can be null.
      
      <param name="Object"/>
      <param name="Object"/>
    </member>
    <member name="M:com.aspose.pdf.DocumentInfo.removeItem(Object)">
       
        <p>Removes the element with the specified key from the collection.</p> @param key The key of the element to remove.
      
      <param name="Object"/>
    </member>
    <member name="M:com.aspose.pdf.DocumentInfo.get_Item(Object)">
       
        <p>Gets or sets the value associated with the specified key.</p> @return @param key The key whose value to get or set.
      
      <param name="Object"/>
    </member>
    <member name="M:com.aspose.pdf.DocumentInfo.set_Item(Object,Object)">
      <param name="Object"/>
      <param name="Object"/>
    </member>
    <member name="M:com.aspose.pdf.DocumentInfo.clearCustomData">
       
        <p>Clears custom data only, leaves all other predefined values (Title, Author, etc.).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.DocumentInfo.isPredefinedKey(String)">
       
        <p>Determines if the key is predefined (Title, Author, etc.), not custom.</p> @return @param key
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.DocumentInfo.#ctor(IDocument)">
       
        <p>Initialize DocumentInfo instance.</p> @param document The info of this document will be used for initialization.
      
      <param name="IDocument"/>
    </member>
    <member name="T:com.aspose.pdf.DocumentWeb"/>
    <member name="M:com.aspose.pdf.DocumentWeb.save(HttpServletResponse,String,int,SaveOptions)">
       
        <p>Saves the document to a response stream with a save options.</p> @param response Encapsulates HTTP-response information. @param outputFileName Simple file name, i.e. without path. @param disposition Represents a MIME protocol Content-Disposition header. @param options Save options.
      
      <param name="HttpServletResponse"/>
      <param name="String"/>
      <param name="int"/>
      <param name="SaveOptions"/>
    </member>
    <member name="M:com.aspose.pdf.DocumentWeb.#ctor">
       
        <p>Initializes empty DocumentWeb.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.DocumentWeb.#ctor(InputStream)">
       
        <p>Initialize new DocumentWeb instance from the {@code input} stream.</p> @param input Stream with pdf DocumentWeb.
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.DocumentWeb.#ctor(InputStream,String)">
      <param name="InputStream"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.DocumentWeb.#ctor(Stream)">
       
        <p>Initialize new DocumentWeb instance from the {@code input} stream.</p> @param input Stream with pdf DocumentWeb.
      
      <param name="Stream"/>
    </member>
    <member name="M:com.aspose.pdf.DocumentWeb.#ctor(InputStream,com.aspose.pdf.LoadOptions)">
       
        <p>Opens an existing DocumentWeb from a stream providing necessary converting to get pdf DocumentWeb.</p> @param input Input stream to convert into pdf DocumentWeb. @param options Represents properties for converting {@code input} into pdf DocumentWeb.
      
      <param name="InputStream"/>
      <param name="com.aspose.pdf.LoadOptions"/>
    </member>
    <member name="M:com.aspose.pdf.DocumentWeb.#ctor(String,LoadOptions)">
      <param name="String"/>
      <param name="LoadOptions"/>
    </member>
    <member name="M:com.aspose.pdf.DocumentWeb.#ctor(Stream,String)">
      <param name="Stream"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.DocumentWeb.#ctor(String)">
       
        <p>Just init DocumentWeb using {@code filename}. The same as {@code DocumentWeb(Stream)}.</p> @param filename The name of the pdf DocumentWeb file.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.DocumentWeb.#ctor(String,String)">
       
        <p>Initializes new instance of the {@code DocumentWeb} class for working with encrypted DocumentWeb.</p> @param filename DocumentWeb file name. @param password User or owner password.
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.DocumentWeb.#ctor(aspose.pdf.Pdf)">
       
        <p>Initialize new DocumentWeb instance from the {@code pdf} stream.</p> @param pdf Pdf DocumentWeb which came from Aspose.Pdf.Generator.
      
      <param name="aspose.pdf.Pdf"/>
    </member>
    <member name="T:com.aspose.pdf.drawing.Arc">
       
        <p>Represents arc.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Arc.getPosX">
       
        <p>Gets or sets a float value that indicates the x-coordinate of the center of the arc.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Arc.setPosX(float)">
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.drawing.Arc.getPosY">
       
        <p>Gets or sets a float value that indicates the y-coordinate of the center of the arc.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Arc.setPosY(float)">
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.drawing.Arc.getRadius">
       
        <p>Gets or sets a float value that indicates the radius of the arc.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Arc.setRadius(float)">
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.drawing.Arc.getAlpha">
       
        <p>Gets or sets a float value that indicates the beginning angle degree of the arc.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Arc.setAlpha(float)">
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.drawing.Arc.getBeta">
       
        <p>Gets or sets a float value that indicates the ending angle degree of the arc.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Arc.setBeta(float)">
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.drawing.Arc.#ctor(float,float,float,float,float)">
       
        <p>Initializes a new instance of the {@code Arc} class.</p> @param xPosition The x-coordinate of the center point of the arc. @param yPosition The y-coordinate of the center point of the arc. @param radius The radius value of the arc. @param alpha The beginning angle value of the arc. @param beta The end angle value of the arc.
      
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="T:com.aspose.pdf.drawing.Circle">
       
        <p>Represents circle.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Circle.getPosX">
       
        <p>Gets or sets a float value that indicates the x-coordinate of the center of the circle.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Circle.setPosX(float)">
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.drawing.Circle.getPosY">
       
        <p>Gets or sets a float value that indicates the y-coordinate of the center of the circle.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Circle.setPosY(float)">
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.drawing.Circle.getRadius">
       
        <p>Gets or sets a float value that indicates the radius of the circle.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Circle.setRadius(float)">
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.drawing.Circle.#ctor(float,float,float)">
       
        <p>Initializes a new instance of the {@code Circle} class.</p> @param posX The x-coordinate of the center of the circle. @param posY The y-coordinate of the center of the circle. @param radius The radius of the circle.
        <p>
          <hr>This constructor can inherit common property values from the specified {@code Graph} object.</hr>
        </p> 
      
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="T:com.aspose.pdf.drawing.Curve">
       
        <p>Represents bezier curve.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Curve.getPosition1X">
       
        <p>Gets or sets a float value that indicates the x-coordinate of the control point 1 of the curve.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Curve.setPosition1X(float)">
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.drawing.Curve.getPosition1Y">
       
        <p>Gets or sets a float value that indicates the y-coordinate of the control point 1 of the curve.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Curve.setPosition1Y(float)">
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.drawing.Curve.getPosition2X">
       
        <p>Gets or sets a float value that indicates the x-coordinate of the control point 2 of the curve.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Curve.setPosition2X(float)">
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.drawing.Curve.getPosition2Y">
       
        <p>Gets or sets a float value that indicates the y-coordinate of the control point 2 of the curve.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Curve.setPosition2Y(float)">
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.drawing.Curve.getPosition3X">
       
        <p>Gets or sets a float value that indicates the x-coordinate of the control point 3 of the curve.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Curve.setPosition3X(float)">
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.drawing.Curve.getPosition3Y">
       
        <p>Gets or sets a float value that indicates the y-coordinate of the control point 3 of the curve.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Curve.setPosition3Y(float)">
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.drawing.Curve.getPosition4X">
       
        <p>Gets or sets a float value that indicates the x-coordinate of the control point 4 of the curve.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Curve.setPosition4X(float)">
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.drawing.Curve.getPosition4Y">
       
        <p>Gets or sets a float value that indicates the y-coordinate of the control point 4 of the curve.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Curve.setPosition4Y(float)">
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.drawing.Curve.#ctor(float[])">
       
        <p>Initializes a new instance of the {@code Curve} class.</p> @param positionArr The position array of the control points of the curve.There should be four control points,so the length of the array should be eight.
      
      <param name="float[]"/>
    </member>
    <member name="T:com.aspose.pdf.drawing.Graph">
       
        <p>Represents graph - graphics generator paragraph.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Graph.getGraphInfo">
       
        <p>Gets or sets a {@code GraphInfo} object that indicates the graph info.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Graph.setGraphInfo(GraphInfo)">
      <param name="GraphInfo"/>
    </member>
    <member name="M:com.aspose.pdf.drawing.Graph.getShapes"/>
    <member name="M:com.aspose.pdf.drawing.Graph.setShapes(java.util.List)">
      <param name="java.util.List"/>
    </member>
    <member name="M:com.aspose.pdf.drawing.Graph.getTitle">
       
        <p>Gets or sets a string value that indicates the title of the graph.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Graph.setTitle(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.drawing.Graph.getWidth">
       
        <p>Gets or sets a float value that indicates the graph width. The unit is point. In XML,the default unit is point,but cm and inch are also supported. For example,GraphWidth="10cm" or GraphWidth="5inch".</p> 
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Graph.setWidth(float)">
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.drawing.Graph.getHeight">
       
        <p>Gets or sets a float value that indicates the graph height. The unit is point. In XML,the default unit is point,but cm and inch are also supported. For example,GraphHeight="10cm" or GraphHeight="5inch".</p> 
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Graph.setHeight(float)">
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.drawing.Graph.process(double[],double[],ArrayList)">
      <param name="double[]"/>
      <param name="double[]"/>
      <param name="ArrayList"/>
    </member>
    <member name="M:com.aspose.pdf.drawing.Graph.#ctor(float,float)">
       
        <p>Initializes a new instance of the {@code Graph} class.</p> @param width The width of the graph. @param height The height of the graph.
      
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="T:com.aspose.pdf.drawing.Line">
       
        <p>Represents line.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Line.getPositionArray">
       
        <p>Gets or sets a {@code PositionArray} object that indicates the position array.The array is composed by coordinates of each control point of the line. directly.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Line.setPositionArray(float[])">
      <param name="float[]"/>
    </member>
    <member name="M:com.aspose.pdf.drawing.Line.#ctor(float[])">
       
        <p>Initializes a new instance of the {@code Line} class.</p> @param positionArray The line position array.
      
      <param name="float[]"/>
    </member>
    <member name="T:com.aspose.pdf.drawing.Rectangle">
       
        <p>Represents rectangle.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Rectangle.getLeft">
       
        <p>Gets or sets a float value that indicates the left position of the rectangle.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Rectangle.setLeft(float)">
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.drawing.Rectangle.getBottom">
       
        <p>Gets or sets a float value that indicates the bottom position of the rectangle.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Rectangle.setBottom(float)">
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.drawing.Rectangle.getWidth">
       
        <p>Gets or sets a float value that indicates the width of the rectangle.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Rectangle.setWidth(float)">
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.drawing.Rectangle.getHeight">
       
        <p>Gets or sets a float value that indicates the height of the rectangle.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Rectangle.setHeight(float)">
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.drawing.Rectangle.#ctor(float,float,float,float)">
       
        <p>Initializes a new instance of the {@code Rectangle} class.</p> @param left The left position of the rectangle. @param bottom The bottom position of the rectangle. @param height The height of the rectangle. @param width The width of the rectangle.
      
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="T:com.aspose.pdf.drawing.Shape">
       
        <p>Represents shape - the base graphics object.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Shape.getGraphInfo">
       
        <p>Gets or sets a {@code GraphInfo} object that indicates the graph info,such as color, line width,etc.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.drawing.Shape.setGraphInfo(GraphInfo)">
      <param name="GraphInfo"/>
    </member>
    <member name="T:com.aspose.pdf.Element">
       
        <p>Class representing base element of logical structure.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Element.getChildren">
       
        <p>Gets child elements collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Element.getLang">
       
        <p>(Optional; PDF 1.4) A language specifying the natural language for all text in the structure element except where overridden by language specifications for nested structure elements or marked content.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Element.setLang(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Element.getActualText">
       
        <p>(Optional; PDF 1.4) Text that is an exact replacement for the structure element and its children. This replacement text (which should apply to as small a piece of content as possible) is useful when extracting the document’s contents in support of accessibility to users with disabilities or for other purposes.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Element.setActualText(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Element.getAlt">
       
        <p>(Optional) An alternate description of the structure element and its children in human-readableform, which is useful when extracting the document’s contents in support of accessibility to users with disabilities or for other purposes.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Element.setAlt(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Element.getE">
       
        <p>(Optional; PDF 1.5) The expanded form of an abbreviation.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Element.setE(String)">
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.EmbeddedFileCollection">
       
        <p>Class representing embedded files collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.EmbeddedFileCollection.isSynchronized">
       
        <p>Gets a value indicating whether access to this collection is synchronized (thread safe).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.EmbeddedFileCollection.getSyncRoot">
       
        <p>Gets an object that can be used to synchronize access to this collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.EmbeddedFileCollection.size">
       
        <p>Gets number of embedded files in collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.EmbeddedFileCollection.copyTo(Array,int)">
       
        <p>Copies array of FileSpecification object into colleciton.</p> @param array Array of objects which will be copied. @param index Starting index from which copying will be started.
      
      <param name="Array"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.EmbeddedFileCollection.iterator">
       
        <p>Returns colleciton enumerator.</p> @return Enumerator of colleciton.
      
    </member>
    <member name="M:com.aspose.pdf.EmbeddedFileCollection.add(FileSpecification)">
       
        <p>Adds embedded file specification into collection.</p> @param file FileSpecification which should be added into colleciton.
      
      <param name="FileSpecification"/>
    </member>
    <member name="M:com.aspose.pdf.EmbeddedFileCollection.delete(String)">
       
        <p>Delete embedded file by name.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.EmbeddedFileCollection.delete">
       
        <p>Remove all embedded files from document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.EmbeddedFileCollection.get_Item(int)">
       
        <p>Gets embedded file by its index.</p> @return Retreived embedded file specification @param index Index of embedded file. Numbering is started from 1.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.EmbeddedFileCollection.get_Item(String)">
       
        <p>Gets embedded file by its name.</p> @return Retreived embedded file specification. @param name Embedded file name.
      
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.ExcelSaveOptions">
       
        <p>Save options for export to Excel format</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ExcelSaveOptions.#ctor">
       
        <p>Constructor</p> 
      
    </member>
    <member name="T:com.aspose.pdf.exceptions.FontNotFoundException">
       
        <p>The exception that is thrown when a font is not found.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.exceptions.FontNotFoundException.#ctor(String)">
       
        <p>Initializes a new instance of the {@code FontNotFoundException} class.</p> @param message The message.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.exceptions.FontNotFoundException.#ctor(String,Exception)">
       
        <p>Initializes a new instance of the {@code FontNotFoundException} class with a specified error message and a reference to the inner exception that is the cause of this exception.</p> @param message The error message that explains the reason for the exception. @param innerException The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.
      
      <param name="String"/>
      <param name="Exception"/>
    </member>
    <member name="M:com.aspose.pdf.exceptions.FontNotFoundException.#ctor(Exception)">
       
        <p>Initializes a new instance of the {@code FontNotFoundException} class with a specified error message and a reference to the inner exception that is the cause of this exception.</p> @param innerException The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.
      
      <param name="Exception"/>
    </member>
    <member name="T:com.aspose.pdf.exceptions.IncorrectFontUsageException">
       
        <p>The exception that is thrown when font usage is incorrect.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.exceptions.IncorrectFontUsageException.#ctor(String)">
       
        <p>Initializes a new instance of the {@code IncorrectFontUsageException} class.</p> @param message The message.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.exceptions.IncorrectFontUsageException.#ctor(String,Exception)">
       
        <p>Initializes a new instance of the {@code IncorrectFontUsageException} class with a specified error message and a reference to the inner exception that is the cause of this exception.</p> @param message The error message that explains the reason for the exception. @param innerException The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.
      
      <param name="String"/>
      <param name="Exception"/>
    </member>
    <member name="M:com.aspose.pdf.exceptions.IncorrectFontUsageException.#ctor(Exception)">
       
        <p>Initializes a new instance of the {@code IncorrectFontUsageException} class with a specified error message and a reference to the inner exception that is the cause of this exception.</p> @param innerException The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.
      
      <param name="Exception"/>
    </member>
    <member name="T:com.aspose.pdf.exceptions.InvalidFileFormatException">
       
        <p>The exception that is thrown when a file is invalid.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.exceptions.InvalidFileFormatException.#ctor(String)">
       
        <p>Initializes a new instance of the {@code InvalidFileFormatException} class.</p> @param message The message.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.exceptions.InvalidFileFormatException.#ctor(String,Exception)">
       
        <p>Initializes a new instance of the {@code InvalidFileFormatException} class with a specified error message and a reference to the inner exception that is the cause of this exception.</p> @param message The error message that explains the reason for the exception. @param innerException The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.
      
      <param name="String"/>
      <param name="Exception"/>
    </member>
    <member name="M:com.aspose.pdf.exceptions.InvalidFileFormatException.#ctor(Exception)">
       
        <p>Initializes a new instance of the {@code InvalidFileFormatException} class with a specified error message and a reference to the inner exception that is the cause of this exception.</p> @param innerException The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.
      
      <param name="Exception"/>
    </member>
    <member name="T:com.aspose.pdf.exceptions.InvalidPdfFileFormatException">
       
        <p>The exception that is thrown when a pdf file is invalid.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.exceptions.InvalidPdfFileFormatException.#ctor(String)">
       
        <p>Initializes a new instance of the {@code InvalidPdfFileFormatException} class.</p> @param message The message.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.exceptions.InvalidPdfFileFormatException.#ctor(String,Exception)">
       
        <p>Initializes a new instance of the {@code InvalidPdfFileFormatException} class with a specified error message and a reference to the inner exception that is the cause of this exception.</p> @param message The error message that explains the reason for the exception. @param innerException The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.
      
      <param name="String"/>
      <param name="Exception"/>
    </member>
    <member name="M:com.aspose.pdf.exceptions.InvalidPdfFileFormatException.#ctor(Exception)">
       
        <p>Initializes a new instance of the {@code InvalidPdfFileFormatException} class with a specified error message and a reference to the inner exception that is the cause of this exception.</p> @param innerException The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.
      
      <param name="Exception"/>
    </member>
    <member name="T:com.aspose.pdf.exceptions.PdfException">
       
        <p>Represents errors that occur during PDF application execution.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.exceptions.PdfException.#ctor(String)">
       
        <p>Initializes a new instance of the {@code PdfException} class.</p> @param message The message.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.exceptions.PdfException.#ctor(String,Exception)">
       
        <p>Initializes a new instance of the {@code PdfException} class with a specified error message and a reference to the inner exception that is the cause of this exception.</p> @param message The error message that explains the reason for the exception. @param innerException The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.
      
      <param name="String"/>
      <param name="Exception"/>
    </member>
    <member name="M:com.aspose.pdf.exceptions.PdfException.#ctor(Exception)">
       
        <p>Initializes a new instance of the {@code PdfException} class with a specified error message and a reference to the inner exception that is the cause of this exception.</p> @param innerException The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.
      
      <param name="Exception"/>
    </member>
    <member name="T:com.aspose.pdf.ExplicitDestination">
       
        <p>Represents the base class for explicit destinations in PDF document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ExplicitDestination.getPage">
       
        <p>Gets the destination page object</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ExplicitDestination.getPageNumber">
       
        <p>Gets the destination page number</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ExplicitDestination.createDestination(IPdfArray)">
       
        <p>Creates instances of ExplicitDestination descendant classes.</p> @return DOM explicit destination object. @param engineDest Engine destination object.
      
      <param name="IPdfArray"/>
    </member>
    <member name="M:com.aspose.pdf.ExplicitDestination.createDestination(Page,int,double)">
       
        <p>Creates instances of ExplicitDestination descendant classes.</p> @return The explicit destination object. @param page The object of destination page. @param type The type of explicit destination. @param values Array of double values.
      
      <param name="Page"/>
      <param name="int"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.ExplicitDestination.createDestination(Document,int,int,double)">
       
        <p></p> @return @param doc @param pageNumber @param type @param values
      
      <param name="Document"/>
      <param name="int"/>
      <param name="int"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.ExplicitDestination.createDestination(int,int,double)">
       
        <p>Creates instances of ExplicitDestination descendant classes.</p> @return The explicit destination object. @param pageNumber The destination page number. @param type The type of explicit destination. @param values Array of double values.
      
      <param name="int"/>
      <param name="int"/>
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.ExplicitDestinationType">
       
        <p>Enumerates the types of explicit destinations.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ExplicitDestinationType.XYZ">
       
        <p>Display the page with the coordinates (left,�top) positioned at the upper-left corner of the window and the contents of the page magnified by the factor zoom. A null value for any of the parameters left, top, or zoom specifies that the current value of that parameter is to be retained unchanged. A zoom value of 0 has the same meaning as a null value.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ExplicitDestinationType.Fit">
       
        <p>Display the page with its contents magnified just enough to fit the entire page within the window both horizontally and vertically. If the required horizontal and vertical magnification factors are different, use the smaller of the two, centering the page within the window in the other dimension.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ExplicitDestinationType.FitH">
       
        <p>Display the page with the vertical coordinate top positioned at the top edge of the window and the contents of the page magnified just enough to fit the entire width of the page within the window. A null value for top specifies that the current value of that parameter is to be retained unchanged.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ExplicitDestinationType.FitV">
       
        <p>Display the page with the horizontal coordinate left positioned at the left edge of the window and the contents of the page magnified just enough to fit the entire height of the page within the window. A null value for left specifies that the current value of that parameter is to be retained unchanged.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ExplicitDestinationType.FitR">
       
        <p>Display the page with its contents magnified just enough to fit the rectangle specified by the coordinates left, bottom, right, and topentirely within the window both horizontally and vertically. If the required horizontal and vertical magnification factors are different, use the smaller of the two, centering the rectangle within the window in the other dimension. A null value for any of the parameters may result in unpredictable behavior.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ExplicitDestinationType.FitB">
       
        <p>Display the page with its contents magnified just enough to fit its bounding box entirely within the window both horizontally and vertically. If the required horizontal and vertical magnification factors are different, use the smaller of the two, centering the bounding box within the window in the other dimension.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ExplicitDestinationType.FitBH">
       
        <p>Display the page with the vertical coordinate top positioned at the top edge of the window and the contents of the page magnified just enough to fit the entire width of its bounding box within the window. A null value for top specifies that the current value of that parameter is to be retained unchanged.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ExplicitDestinationType.FitBV">
       
        <p>Display the page with the horizontal coordinate left positioned at the left edge of the window and the contents of the page magnified just enough to fit the entire height of its bounding box within the window. A null value for left specifies that the current value of that parameter is to be retained unchanged.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.ExtendedBoolean">
      Represents boolean type that supports Undefined value.
    </member>
    <member name="F:com.aspose.pdf.ExtendedBoolean.Undefined">
       
        <p>Undefined.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ExtendedBoolean.False">
       
        <p>False.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ExtendedBoolean.True">
       
        <p>True.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.ExtractImageMode">
       
        <p>Defines different modes which can be used while extracting images from documents.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ExtractImageMode.DefinedInResources">
       
        <p>Defines image extraction mode in which all images defined in resources for particular page are extracted.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ExtractImageMode.ActuallyUsed">
       
        <p>Defines image extraction mode in which only those images are extracted that are actually shown on a page.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.Algorithm">
       
        <p>Represents algorithms which can be used to encrypt pdf document.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.Algorithm.RC4">
       
        <p>RC4 algorithm.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.Algorithm.AES">
       
        <p>AES algorithm.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.AlignmentType">
       
        <p>Class contains possibly alignment types.
          <br/> Use HorizontalAlignment instead
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.AlignmentType.toString">
       
        <p>Returns string representation.</p> @return Name value.
      
    </member>
    <member name="M:com.aspose.pdf.facades.AlignmentType.#ctor(String)">
       
        <p>Constructor of AlignmentType.</p> @param name
      
      <param name="String"/>
    </member>
    <member name="F:com.aspose.pdf.facades.AlignmentType.Center">
       
        <p>Center alignment.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.AlignmentType.Left">
       
        <p>Left alignment.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.AlignmentType.Right">
       
        <p>Right alignment.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.AutoFiller">
       
        <p>Represents a class to receive data from database or other datasource, fills them into the designed fields of the template pdf and at last generates new pdf file or stream. It has two template file input modes:input as a stream or a pdf file. It has four types of output modes:one merged stream, one merged file, many small streams, many small files. It can recieve literal data contained in a System.Data.DataTable.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>//Note: mail.pdf is a template pdf which has seven text fields. NorthWind.mdb is the microsoft access db. ////Common part: Get the data from the database NorthWind.mdb fill it into the DataTable. OleDbCommand mQueryCommand; OleDbDataAdapter mDbDataAdapter; OleDbConnection mDbConnection; //Construct the data table. DataTable mDataTable = new DataTable("MailMerge"); DataColumnCollection columns = mDataTable.Columns; columns.add("CompanyName",typeof(string)); columns.add("ContactName",typeof(string)); columns.add("Address",typeof(string)); columns.add("PostalCode",typeof(string)); columns.add("City",typeof(string)); columns.add("Country",typeof(string)); columns.add("Heading",typeof(string)); //Connect to the database source and query the data. mDbConnection = new OleDbConnection(); mDbConnection.ConnectionString = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + DbPath + "NorthWind.mdb"; mQueryCommand = new OleDbCommand(); mQueryCommand.Connection = mDbConnection; mDbConnection.Open(); mQueryCommand.CommandText = "select CompanyName, ContactName, Address, PostalCode, City, Country from Customers;"; mDbDataAdapter = new OleDbDataAdapter(mQueryCommand); mDbDataAdapter.Fill(mDataTable); for (int i = 0; i&lt;mDataTable.Rows.Count;i++) { mDataTable.Rows[i][mDataTable.Columns.Count - 1] = "Dear " + mDataTable.Rows[i][0].ToString() + ","; System.Console.WriteLine("postalCode:" + mDataTable.Rows[i][3].ToString()); System.Console.WriteLine("Heading:" + mDataTable.Rows[i][mDataTable.Columns.Count - 1].ToString()); } mDbDataAdapter.Dispose(); mDbConnection.Close(); ////End of Common part. ////case one: ////Input template pdf is a pdf file and output is a big merged stream. AutoFiller autoFiller = new AutoFiller(); autoFiller.InputFileName = "mail.pdf"; autoFiller.OutputStream = Response.OutputStream; autoFiller.ImportDataTable(mDataTable); autoFiller.Save(); ////case two: ////Input template pdf is a pdf file and output is a lot of small files. AutoFiller autoFiller = new AutoFiller(); autoFiller.InputFileName = "mail.pdf"; autoFiller.GeneratingPath = ".\\"; autoFiller.BasicFileName = "outputFile"; autoFiller.ImportDataTable(mDataTable); autoFiller.Save(); [Visual Basic] 'Note: mail.pdf is a template pdf which has seven text fields. NorthWind.mdb is the microsoft access db. 'Common part: Get the data from the database NorthWind.mdb fill it into the DataTable. mQueryCommand As OleDbCommand = Nothing mDbDataAdapter As OleDbDataAdapter = Nothing mDbConnection As OleDbConnection = Nothing mDataTable As DataTable = Nothing mPath As String = Nothing mTemplatePdf As String = Nothing 'Construct the data table. mDataTable = New DataTable("MailMerge") Dim columns As DataColumnCollection = mDataTable.Columns 'Create columns for the datatable. 'Every column's name should be the same as one field's name of the templatePdf. columns.Add("CompanyName", Type.GetType("System.String")) columns.Add("ContactName", Type.GetType("System.String")) columns.Add("Address", Type.GetType("System.String")) columns.Add("PostalCode", Type.GetType("System.String")) columns.Add("City", Type.GetType("System.String")) columns.Add("Country", Type.GetType("System.String")) columns.Add("Heading", Type.GetType("System.String")) 'Connect to the database source and query the data. mDbConnection = New OleDbConnection mDbConnection.ConnectionString = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + DbPath + "NorthWind.mdb" mQueryCommand = New OleDbCommand mQueryCommand.Connection = mDbConnection mDbConnection.Open() 'Query the data and insert into the datatable. mQueryCommand.CommandText = "select CompanyName, ContactName, Address, PostalCode, City, Country from Customers;" mDbDataAdapter = New OleDbDataAdapter(mQueryCommand) mDbDataAdapter.Fill(mDataTable) 'Construct the last column of the Datatable. Dim i As Integer For i = 0 To mDataTable.Rows.Count - 1 Step i + 1 mDataTable.Rows(i)(mDataTable.Columns.Count - 1) = "Dear " + mDataTable.Rows(i)(0).ToString() + "," System.Console.WriteLine("postalCode:" + mDataTable.Rows(i)(3).ToString()) System.Console.WriteLine("Heading:" + mDataTable.Rows(i)(mDataTable.Columns.Count - 1).ToString()) Next mDbDataAdapter.Dispose() mDbConnection.Close() 'End of Common part. 'case one: 'Input template pdf is a pdf file and output is a big merged stream. Dim autoFiller As AutoFiller = New AutoFiller autoFiller.InputFileName = "mail.pdf" autoFiller..OutputStream = Response.OutputStream autoFiller.ImportDataTable(mDataTable) autoFiller.Save() 'case two: 'Input template pdf is a pdf file and output is a lot of small files. Dim autoFiller As AutoFiller = New AutoFiller autoFiller.InputFileName = "mail.pdf" autoFiller.GeneratingPath = ".\"; autoFiller.BasicFileName = "outputFile" autoFiller.ImportDataTable(mDataTable) autoFiller.Save()</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.AutoFiller.setUnFlattenFields(String[])">
       
        <p>Sets the fields which will not be flattened. If this property is not set, all the fields will be flattened.</p> 
      
      <param name="String[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.AutoFiller.getOutputStream">
       
        <p>Gets or sets the OutputStream. One of four output modes. Its classical use case is Response.OutputStream. Please refer to the online demo.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.AutoFiller.setOutputStream(OutputStream)">
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.AutoFiller.getOutputStreams">
       
        <p>Gets or sets the many Output Streams. One of four output modes.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.AutoFiller.setOutputStreams(Stream[])">
      <param name="Stream[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.AutoFiller.getInputStream">
       
        <p>Gets or sets the input template stream. One of two input modes.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.AutoFiller.setInputStream(InputStream)">
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.AutoFiller.getInputFileName">
       
        <p>Gets or sets the input template file. One of two input modes.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.AutoFiller.setInputFileName(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.AutoFiller.getOutputFileName">
       
        <p>Gets or sets the one big merged output file. One of the four output modes.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.AutoFiller.setOutputFileName(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.AutoFiller.getGeneratingPath">
       
        <p>Gets or sets the Generating Path of the small pdf files if many small pdf files to be generated. It works with another property {@code BasicFileName}BasicFileName. One of the four output modes.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.AutoFiller.setGeneratingPath(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.AutoFiller.getBasicFileName">
       
        <p>Gets or sets the basic file name if many small files will be generated. The generated file will be like "BasicFileName0","BasicFileName1",... It works with another property {@code GeneratingPath}GeneratingPath.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.AutoFiller.setBasicFileName(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.AutoFiller.save">
       
        <p>Saves all the pdfs.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.AutoFiller.save(String)">
      / * 
        <p>/ * Imports data of DataTable type. Every column's name of the dataTable must be the same as / * one field name of the template pdf in case sensitive. / *</p> / * @param dataTable The dataTable which contains all the data from database or other data source. /
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.AutoFiller.save(OutputStream)">
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.AutoFiller.bindPdf(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.AutoFiller.bindPdf(InputStream)">
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.AutoFiller.bindPdf(IDocument)">
      <param name="IDocument"/>
    </member>
    <member name="M:com.aspose.pdf.facades.AutoFiller.close"/>
    <member name="M:com.aspose.pdf.facades.AutoFiller.dispose"/>
    <member name="T:com.aspose.pdf.facades.AutoRotateMode">
       
        <p>rotate mode</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.AutoRotateMode.None"/>
    <member name="F:com.aspose.pdf.facades.AutoRotateMode.ClockWise"/>
    <member name="F:com.aspose.pdf.facades.AutoRotateMode.AntiClockWise"/>
    <member name="T:com.aspose.pdf.facades.BlendingColorSpace">
       
        <p>Class represents blending color space.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.BlendingColorSpace.DontChange">
       
        <p>The blending color space is not changed.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.BlendingColorSpace.Auto">
       
        <p>The blending color space is determined automatically.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.BlendingColorSpace.DeviceRGB">
       
        <p>Blending color space is set to DeviceRGB.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.BlendingColorSpace.DeviceCMYK">
       
        <p>Blending color space is set to DeviceCMYK.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.Bookmark">
       
        <p>Represents a bookmark.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.toOutlineItemCollection(IDocument)">
      <param name="IDocument"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.getAction">
       
        <p>Gets the action bound with the bookmark. If PageNumber is presented the action can not be specified. The action type includes: "GoTo", "GoToR", "Launch", "Named".</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.setAction(String)">
       
        <p>Sets the action bound with the bookmark. If PageNumber is presented the action can not be specified. The action type includes: "GoTo", "GoToR", "Launch", "Named".</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.getBoldFlag">
       
        <p>Gets the bold flag of bookmark's title.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.setBoldFlag(boolean)">
       
        <p>Sets the bold flag of bookmark's title.</p> 
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.getChildItem">
       
        <p>Gets bookmark's children.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.setChildItem(Bookmarks)">
       
        <p>Sets bookmark's children.</p> 
      
      <param name="Bookmarks"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.getChildItems">
       
        <p>Gets or sets bookmark's children.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.setChildItems(Bookmarks)">
      <param name="Bookmarks"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.getCustomAcorbatViewerMenuActionName">
       
        <p>Gets the action name corresponding to execute a menu item in Acrobat viewer.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.setCustomAcorbatViewerMenuActionName(Enum[])">
       
        <p>Sets the action name corresponding to execute a menu item in Acrobat viewer.</p> 
      
      <param name="Enum[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.getDestination">
       
        <p>Gets bookmark's destination page. Required if action is set as "".</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.setDestination(String)">
       
        <p>Sets bookmark's destination page. Required if action is set as "".</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.getItalicFlag">
       
        <p>Gets the italic flag of bookmark's title.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.setItalicFlag(boolean)">
       
        <p>Sets the italic flag of bookmark's title.</p> 
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.getLevel">
       
        <p>Gets bookmark's hierarchy level.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.setLevel(int)">
       
        <p>Sets bookmark's hierarchy level.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.getPageDisplay">
       
        <p>Gets the type of display bookmark's destination page.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.setPageDisplay(String)">
       
        <p>Sets the type of display bookmark's destination page.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.getPageDisplay_Bottom">
       
        <p>Gets the bottom coordinate of page display.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.setPageDisplay_Bottom(int)">
       
        <p>Sets the bottom coordinate of page display.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.getPageDisplay_Left">
       
        <p>Gets the left coordinate of page display.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.setPageDisplay_Left(int)">
       
        <p>Sets the left coordinate of page display.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.getPageDisplay_Right">
       
        <p>Gets the right coordinate of page display.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.setPageDisplay_Right(int)">
       
        <p>Sets the right coordinate of page display.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.getPageDisplay_Top">
       
        <p>Gets the top coordinate of page display.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.setPageDisplay_Top(int)">
       
        <p>Sets the top coordinate of page display.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.getPageDisplay_Zoom">
       
        <p>Gets the zoom factor of page display.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.setPageDisplay_Zoom(int)">
       
        <p>Sets the zoom factor of page display.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.getPageNumber">
       
        <p>Gets the number of bookmark's destination page.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.setPageNumber(int)">
       
        <p>Sets the number of bookmark's destination page.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.getRemoteFile">
       
        <p>Gets the file (path) which is required for "GoToR" action of bookmark.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.setRemoteFile(String)">
       
        <p>Sets the file (path) which is required for "GoToR" action of bookmark.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.getTitle">
       
        <p>Gets bookmark's title.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.setTitle(String)">
       
        <p>Sets bookmark's title.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.getTitleColor">
       
        <p>Gets the color of bookmark's title.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.setTitleColor(java.awt.Color)">
       
        <p>Sets the color of bookmark's title.</p> 
      
      <param name="java.awt.Color"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.getOpen"/>
    <member name="M:com.aspose.pdf.facades.Bookmark.setOpen(boolean)">
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmark.#ctor">
       
        <p>Initializes a new instance of the {@code Bookmark} class.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.Bookmarks">
       
        <p>Represents a collection of {@code Bookmark} objects.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmarks.add(Bookmark)">
       
        <p>Adds a new {@code Bookmark} object into the collection.</p> @param bookMark The {@code Bookmark} object to be added.
      
      <param name="Bookmark"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmarks.copyTo(Bookmark[],int)">
       
        <p>Copies the elements to a {@code Bookmark} object array, starting at a specified array index.</p> @param bookMarkArray The Bookmarks array. @param index The start index.
      
      <param name="Bookmark[]"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmarks.remove(Bookmark)">
       
        <p>Removes a {@code Bookmark} object from the collection.</p> @param bookMark The {@code Bookmark} object to be removed.
      
      <param name="Bookmark"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmarks.get_Item(int)">
       
        <p>Gets a {@code Bookmark} object from the collection according to bookmark index.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmarks.set_Item(int,Bookmark)">
       
        <p>Sets a {@code Bookmark} object from the collection according to bookmark index.</p> 
      
      <param name="int"/>
      <param name="Bookmark"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Bookmarks.#ctor">
       
        <p>Initializes a new instance of the {@code Bookmarks} class.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.CgmPdfProducer">
       
        <p>Represents a class to produce PDF from Computer Graphics Metafile(CGM) format.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.CgmPdfProducer.#ctor(ImportOptions)">
      <param name="ImportOptions"/>
    </member>
    <member name="T:com.aspose.pdf.facades.DataType">
       
        <p>Enumerates field types definitions.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.DataType.FDF">
       
        <p>FDF stream.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.DataType.XML">
       
        <p>XML stream.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.DataType.XFDF">
       
        <p>XFDF stream.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.DataType.PDF">
       
        <p>PDF stream.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.DataType.OLEDB">
       
        <p>OLEDB database, such as MS Access.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.DataType.ODBC">
       
        <p>ODBC database, such as MS SQL Server.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.DefaultMetadataProperties">
       
        <p>Enumeration of standard XMP properties.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.DefaultMetadataProperties.Advisory">
       
        <p>xmp:Advisory property. An unordered array specifying properties that were edited outside the authoring application. Each item should contain a single /// namespace and XPath separated by one ASCII space</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.DefaultMetadataProperties.BaseURL">
       
        <p>xmp:BaseURL property. The base URL for relative URLs in the document content. If this document contains Internet links, and those links are relative, /// they are relative to this base URL. This property provides a standard way for embedded relative URLs to be interpreted by tools. /// Web authoring tools should set the value based on their notion of where URLs will be interpreted</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.DefaultMetadataProperties.CreateDate">
       
        <p>xmp:CreateDate property. The date and time the resource was originally created.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.DefaultMetadataProperties.CreatorTool">
       
        <p>xmp:CreatorTool property. The name of the first known tool used to create the resource.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.DefaultMetadataProperties.Identifier">
       
        <p>xmp:Identifier property. An unordered array of text strings that unambiguously identify the resource within a given context</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.DefaultMetadataProperties.MetadataDate">
       
        <p>xmp:MetadataDate property. The date and time that any metadata for this resource was last changed</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.DefaultMetadataProperties.ModifyDate">
       
        <p>xmp:ModifyDate property. The date and time the resource was last modified.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.DefaultMetadataProperties.Nickname">
       
        <p>xmp:Nickname property. A short informal name for the resource.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.DefaultMetadataProperties.Thumbnails">
       
        <p>xmp:Thumbnails property. An alternative array of thumbnail images for a file, which can differ in characteristics such as size or image encoding.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.DocumentPrivilege">
       
        <p>Represents the privileges for accessing Pdf file. Refer to{@code PdfFileSecurity}. There are 4 ways using this class: 1.Using predefined privilege directly. 2.Based on a predefined privilege and change some specifical permissions. 3.Based on a predefined privilege and change some specifical Adobe Professional permissions combination. 4.Mixes the way2 and way3.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>//Way1: Using predefined privilege directly. DocumentPrivilege privilege = DocumentPrivilege.getPrint(); //Way2: Based on a predefined privilege and change some specifical permissions. DocumentPrivilege privilege = DocumentPrivilege.getAllowAll(); privilege.setAllowPrint(false); privilege.setAllowModifyContents(false); //Way3: Based on a predefined privilege and change some specifical Adobe Professional permissions combination. DocumentPrivilege privilege = DocumentPrivilege.getForbidAll(); privilege.setChangeAllowLevel(1); privilege.setPrintAllowLevel(2); //Way4: Mixes the way2 and way3 DocumentPrivilege privilege = DocumentPrivilege.getForbidAll(); privilege.setChangeAllowLevel(1); privilege.setAllowPrint(true);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.DocumentPrivilege.getValue"/>
    <member name="M:com.aspose.pdf.facades.DocumentPrivilege.getAllowPrint">
       
        <p>Sets the permission which allow print or not. true is allow and false is forbidden.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.DocumentPrivilege.setAllowPrint(boolean)">
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.DocumentPrivilege.getAllowDegradedPrinting">
       
        <p>Sets the permission which allow degraded printing or not. true is allow and false is forbidden.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.DocumentPrivilege.setAllowDegradedPrinting(boolean)">
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.DocumentPrivilege.getAllowModifyContents">
       
        <p>Sets the permission which allow modify contents or not. true is allow and false is forbidden.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.DocumentPrivilege.setAllowModifyContents(boolean)">
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.DocumentPrivilege.getAllowCopy">
       
        <p>Sets the permission which allow copy or not. true is allow and false is forbidden.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.DocumentPrivilege.setAllowCopy(boolean)">
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.DocumentPrivilege.getAllowModifyAnnotations">
       
        <p>Sets the permission which allow modify annotations or not. true is allow and false is forbidden.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.DocumentPrivilege.setAllowModifyAnnotations(boolean)">
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.DocumentPrivilege.getAllowFillIn">
       
        <p>Sets the permission which allow fill in forms or not. true is allow and false is forbidden.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.DocumentPrivilege.setAllowFillIn(boolean)">
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.DocumentPrivilege.getAllowScreenReaders">
       
        <p>Sets the permission which allow screen readers or not. true is allow and false is forbidden.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.DocumentPrivilege.setAllowScreenReaders(boolean)">
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.DocumentPrivilege.getAllowAssembly">
       
        <p>Sets the permission which allow assembly or not. true is allow and false is forbidden.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.DocumentPrivilege.setAllowAssembly(boolean)">
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.DocumentPrivilege.setPrintAllowLevel(int)">
       
        <p>Sets the print level of document's privilege. Just as the Adobe Professional's Printing Allowed settings. 0: None. 1: Low Resolution (150 dpi). 2: High Resolution.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.DocumentPrivilege.setChangeAllowLevel(int)">
       
        <p>Sets the change level of document's privilege. Just as the Adobe Professional's Changes Allowed settings. 0: None. 1: Inserting, Deleting and Rotating pages. 2: Filling in form fields and signing existing signature fields. 3: Commenting, filling in form fields, and signing existing signature fields. 4: Any except extracting pages.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.DocumentPrivilege.setCopyAllowLevel(int)">
       
        <p>Sets the copy level of document's privilege. Just as the Adobe Professional's permission settings. 0: None. 1: Enable text access for screen reader devices for the visually impaired. 2: Enable copying of text, images and other content.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.DocumentPrivilege.compareTo(Object)">
       
        <p>Compares two {@code DocumentPrivilege} objects.</p> @param obj The object to compare with.
      
      <param name="Object"/>
    </member>
    <member name="M:com.aspose.pdf.facades.DocumentPrivilege.getDegradedPrinting">
       
        <p>Allows degraded printing.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.DocumentPrivilege.getPrint">
       
        <p>Allows printing file.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.DocumentPrivilege.getModifyContents">
       
        <p>Allows modifying file.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.DocumentPrivilege.getCopy">
       
        <p>Allows copying file.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.DocumentPrivilege.getModifyAnnotations">
       
        <p>Allows modifying annotations of file.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.DocumentPrivilege.getFillIn">
       
        <p>Allows filling forms in file.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.DocumentPrivilege.getScreenReaders">
       
        <p>Allows to reader on screen only.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.DocumentPrivilege.getAssembly">
       
        <p>Allows assemblying file.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.DocumentPrivilege.getAllowAll">
       
        <p>All allowed.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.DocumentPrivilege.getForbidAll">
       
        <p>All Forbidded.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.DocumentPrivilege.#ctor(int)">
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.facades.EncodingType">
       
        <p>Enumerates encoding types of the text using.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.EncodingType.Identity_h">
       
        <p>The Unicode encoding with horizontal writing.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.EncodingType.Identity_v">
       
        <p>The Unicode encoding with vertical writing.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.EncodingType.Cp1250">
       
        <p>A windows text encoding name.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.EncodingType.Cp1252">
       
        <p>A windows text encoding name.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.EncodingType.Cp1257">
       
        <p>A windows text encoding name.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.EncodingType.Winansi">
       
        <p>Windows ansi encoding.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.EncodingType.Macroman">
       
        <p>Mac os standard encoding for Latin text.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.Facade">
       
        <p>Base facade class.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.Facade.getDocument">
       
        <p>Gets the document facade is working on.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.Facade.bindPdf(aspose.pdf.Pdf)">
      Initializes the facade. @param pdf
      <param name="aspose.pdf.Pdf"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Facade.bindPdf(String)">
       
        <p>Initializes the facade.</p> @param srcFile The PDF file.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Facade.bindPdf(InputStream)">
       
        <p>Initializes the facade.</p> @param srcStream The stream of PDF file.
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Facade.bindPdf(IDocument)">
       
        <p>Initializes the facade.</p> @param srcDoc The Aspose.Pdf.Document object.
      
      <param name="IDocument"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Facade.bindPdf(InputStream,String)">
      Initializes the facade. @param srcStream The stream of PDF file. @param password The password of the PDF document.
      <param name="InputStream"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Facade.close">
       
        <p>Disposes Aspose.Pdf.Document bound with a facade.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.Facade.dispose">
       
        <p>Disposes the facade.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.FieldType">
       
        <p>Enumeration of possible field types.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FieldType.Text">
       
        <p>Text field.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FieldType.ComboBox">
       
        <p>Combo box field.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FieldType.ListBox">
       
        <p>List box field.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FieldType.Radio">
       
        <p>Radio button field.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FieldType.CheckBox">
       
        <p>Check box field.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FieldType.PushButton">
       
        <p>Push button field.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FieldType.MultiLineText">
       
        <p>Multiline text field.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FieldType.Barcode">
       
        <p>Barcode field.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FieldType.InvalidNameOrType">
       
        <p>Invalid field type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FieldType.Signature">
       
        <p>Signature field.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FieldType.Image">
       
        <p>Image field.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.FontColor">
       
        <p>Class representing color of the text.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.FontColor.getGreen">
       
        <p>Green component of color.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.FontColor.setGreen(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FontColor.getRed">
       
        <p>Red component of color.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.FontColor.setRed(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FontColor.getBlue">
       
        <p>Blue component of color.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.FontColor.setBlue(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FontColor.#ctor(int,int,int)">
       
        <p>Initializes color with specified color components.</p> @param r Red component. @param g Green component. @param b Blue component.
      
      <param name="int"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FontColor.#ctor">
       
        <p>Initializes color.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.FontStyle">
       
        <p>Enumerates 14 types of font.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FontStyle.Courier">
       
        <p>Courier font.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FontStyle.CourierBold">
       
        <p>Bold Courier font.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FontStyle.CourierOblique">
       
        <p>Oblique Curier font.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FontStyle.CourierBoldOblique">
       
        <p>Bold oblique Courier font.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FontStyle.Helvetica">
       
        <p>Helvetica font.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FontStyle.HelveticaBold">
       
        <p>Bold Helvetica font.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FontStyle.HelveticaOblique">
       
        <p>Oblique Helvetica font.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FontStyle.HelveticaBoldOblique">
       
        <p>Bold oblique Helvetica font.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FontStyle.Symbol">
       
        <p>Symbol font.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FontStyle.TimesRoman">
       
        <p>Times-Roman font.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FontStyle.TimesBold">
       
        <p>Bold Times font.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FontStyle.TimesItalic">
       
        <p>Italic Times font.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FontStyle.TimesBoldItalic">
       
        <p>Bold italic Times font.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FontStyle.ZapfDingbats">
       
        <p>ZapfDingbats font.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FontStyle.Unknown">
       
        <p>Unknown font. Standard font will be used.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FontStyle.CjkFont">
       
        <p>True Type Font for CJK supporting ,default is MS PGothic font.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.Form">
       
        <p>Class representing Acro form object.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.Form.#ctor">
       
        <p>Construtcor of Form without parameters.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">Form form = new com.aspose.pdf.facades.Form(); form.setSrcFileName( "file.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.Form.#ctor(IDocument)">
       
        <p>Initializes new {@code Form} object on base of the {@code document}.</p> @param document Pdf document.
      
      <param name="IDocument"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Form.#ctor(IDocument,OutputStream)">
       
        <p>Initializes new {@code Form} object on base of the {@code document}.</p> @param document Pdf document. @param destStream Destination stream.
      
      <param name="IDocument"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Form.#ctor(IDocument,String)">
       
        <p>Initializes new {@code Form} object on base of the {@code document}.</p> @param document Pdf document. @param destFileName Path of the destination file.
      
      <param name="IDocument"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Form.#ctor(InputStream)">
       
        <p>Constructor for form.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">Form form = new Form(new FileInputStream("PdfForm.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param srcStream source stream.
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Form.#ctor(InputStream,OutputStream)">
       
        <p>Constructor of Form with two stream parameters. Specify same source and destination stream for incremental update.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">Form form = new Form(new FileInputStream("InFile.pdf"), new FileOutputStream("OutFile.pdf"));</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param srcStream Source stream. @param destStream Destination stream.
      
      <param name="InputStream"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Form.#ctor(InputStream,String)">
       
        <p>Constructor of Form</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">Form form = new Form(new FileInputStream("PdfForm.pdf"), "PdfForm_Updated.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param srcStream Source stream. @param destFileName Destination file path.
      
      <param name="InputStream"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Form.#ctor(String)">
       
        <p>Constructor of Form.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">Form form = new Form("PdfForm.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param srcFileName Source file path.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Form.#ctor(String,OutputStream)">
       
        <p>Constructor of Form.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">Form form = new Form("PdfForm.pdf", "PdfForm_Updated.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param srcFileName Source file path. @param destStream Destination file path.
      
      <param name="String"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Form.#ctor(String,String)">
       
        <p>Constructor of Form class. Specify same source file name and destination file name to perform incremental update.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">Form form = new Form("PdfForm.pdf", "PdfForm_Updated.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param srcFileName Path of the source file. @param destFileName Path of the destination file.
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.facades.Form.ImportStatus">
       
        <p>Status of imported field</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.Form.ImportStatus.Success">
       
        <p>Field was successfully imported</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.Form.ImportStatus.FieldNotFound">
       
        <p>Field with this name was not found in the document form.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.FormattedText">
       
        <p>Class which represents formatted text. Contains information about text and its color, size, style.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormattedText.getText"/>
    <member name="M:com.aspose.pdf.facades.FormattedText.getMpCustomLineSpacing"/>
    <member name="M:com.aspose.pdf.facades.FormattedText.getFirstLine">
       
        <p>Gets first line</p> @return
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormattedText.getTextColor">
       
        <p>Gets text color</p> @return
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormattedText.getBackColor">
       
        <p>Gets back color</p> @return
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormattedText.getFont">
       
        <p>Gets font</p> @return
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormattedText.getFontSize">
       
        <p>Gets font size</p> @return
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormattedText.getTextHeight">
       
        <p>Gets height of text.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormattedText.getTextWidth">
       
        <p>Gets width of text.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormattedText.addNewLineText(String)">
       
        <p>Adds a new line to the FormattedText object and sets the newLineText to the next line's text.</p> @param newLineText Text of new added line.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormattedText.addNewLineText(String,float)">
       
        <p>Adds a new line to the FormattedText object and sets the newLineText to the next line's text.</p> @param newLineText Text of new added line. @param lineSpacing Spacing of the line.
      
      <param name="String"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormattedText.#ctor">
       
        <p>Initializes FormattedText.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormattedText.#ctor(String)">
       
        <p>Initializes FormattedText.</p> @param text Text which contained in FormattedText.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormattedText.#ctor(String,FontColor,int,int,boolean,float)">
       
        <p>Initializes FormattedText.</p> @param text Text content of the string. @param fontColor Color of the text. @param fontStyle Style of the text. @param encodingType Encoding type (value of EncodingType enumeration). @param embedded True if the font will be embedded. @param textSize Size of the text.
      
      <param name="String"/>
      <param name="FontColor"/>
      <param name="int"/>
      <param name="int"/>
      <param name="boolean"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormattedText.#ctor(String,FontColor,int,int,boolean,float,float)">
       
        <p>Initialize FormattedText.</p> @param text Text content of the string. @param fontColor Color of the text. @param textFont Font of the text. @param textEncoding Encoding of the text. @param embedded True if text will be embedded. @param textSize Size of the text. @param lineSpacing Additional spacing.
      
      <param name="String"/>
      <param name="FontColor"/>
      <param name="int"/>
      <param name="int"/>
      <param name="boolean"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormattedText.#ctor(String,java.awt.Color,int,int,boolean,float)">
       
        <p>Initializes FormattedText.</p> @param text Text content of the string. @param color @param textFont @param textEncoding @param embedded @param textSize
      
      <param name="String"/>
      <param name="java.awt.Color"/>
      <param name="int"/>
      <param name="int"/>
      <param name="boolean"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormattedText.#ctor(String,java.awt.Color,int,int,boolean,float,float)">
       
        <p>Initializes FormattedText.</p> @param text Text contents of the string. @param textColor Color of the text. @param textFont Font of the text. @param textEncoding Encoding of the text. @param embedded If true font will be embedded. @param textSize Size of the text. @param lineSpacing Additional spacing.
      
      <param name="String"/>
      <param name="java.awt.Color"/>
      <param name="int"/>
      <param name="int"/>
      <param name="boolean"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormattedText.#ctor(String,FontColor,FontColor,int,int,boolean,float)">
       
        <p>Initializes FormattedText.</p> @param text Text content of the string. @param textColor Color of the text. @param backColor Color of background. @param textFont Font of the text. @param textEncoding Encoding of the text. @param embedded If true font will be embedded. @param textSize Size of the text.
      
      <param name="String"/>
      <param name="FontColor"/>
      <param name="FontColor"/>
      <param name="int"/>
      <param name="int"/>
      <param name="boolean"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormattedText.#ctor(String,FontColor,FontColor,int,int,boolean,float,float)">
       
        <p>Initializes FormattedText.</p> @param text Text content. @param textColor Color of the text. @param backColor Color of background. @param textFont Font of the text. @param textEncoding Encoding of the text. @param embedded If true font will be embedded. @param textSize Size of the text. @param lineSpacing Additional spacing.
      
      <param name="String"/>
      <param name="FontColor"/>
      <param name="FontColor"/>
      <param name="int"/>
      <param name="int"/>
      <param name="boolean"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormattedText.#ctor(String,java.awt.Color,java.awt.Color,int,int,boolean,float)">
       
        <p>Initializes FormattedText.</p> @param text Text content of the string. @param textColor Color of the text. @param backColor Color of background. @param textFont Font of the text. @param encoding Encoding of the text. @param embedded True if font will be embedded. @param textSize Size of the text.
      
      <param name="String"/>
      <param name="java.awt.Color"/>
      <param name="java.awt.Color"/>
      <param name="int"/>
      <param name="int"/>
      <param name="boolean"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormattedText.#ctor(String,java.awt.Color,java.awt.Color,int,int,boolean,float,float)">
       
        <p>Initializes FormattedText.</p> @param text Text contents of the string. @param textColor Color of the text. @param backColor Color of the background. @param textFont Font of the text. @param textEncoding Encoding of the text. @param embedded If true font is embedded. @param textSize Size of the text. @param lineSpacing Additional spacing.
      
      <param name="String"/>
      <param name="java.awt.Color"/>
      <param name="java.awt.Color"/>
      <param name="int"/>
      <param name="int"/>
      <param name="boolean"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormattedText.#ctor(String,java.awt.Color,java.awt.Color,String,int,boolean,float)">
       
        <p>Initializes FormattedText.</p> @param text Text content. @param textColor Color of the text. @param backColor Color of background. @param fontName Font of the text. @param textEncoding Encoding of the text. @param embedded If true font will be embedded. @param fontSize Size of the text.
      
      <param name="String"/>
      <param name="java.awt.Color"/>
      <param name="java.awt.Color"/>
      <param name="String"/>
      <param name="int"/>
      <param name="boolean"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormattedText.#ctor(String,java.awt.Color,java.awt.Color)">
       
        <p>Initializes FormattedText.</p> @param text Text content. @param textColor Color of the text. @param backColor Color of background.
      
      <param name="String"/>
      <param name="java.awt.Color"/>
      <param name="java.awt.Color"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormattedText.#ctor(String,java.awt.Color,String,int,boolean,float)">
       
        <p>Initializes FormattedText.</p> @param text Text content. @param textColor Color of the text. @param fontName Font of the text. @param textEncoding Encoding of the text. @param embedded If true font will be embedded. @param fontSize Size of the text.
      
      <param name="String"/>
      <param name="java.awt.Color"/>
      <param name="String"/>
      <param name="int"/>
      <param name="boolean"/>
      <param name="float"/>
    </member>
    <member name="T:com.aspose.pdf.facades.FormEditor">
       
        <p>Class for editing forms (ading/deleting field etc)</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.#ctor">
       
        <p>Constructor for FormEditor.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">FormEditor formEditor = new FormEditor();</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.#ctor(IDocument)">
       
        <p>Initializes new {@code FormEditor} object on base of the {@code document} .</p> @param document Pdf document.
      
      <param name="IDocument"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.#ctor(IDocument,OutputStream)">
       
        <p>Initializes new {@code FormEditor} object on base of the {@code document} .</p> @param document Pdf document. @param destStream Destination stream.
      
      <param name="IDocument"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.#ctor(IDocument,String)">
       
        <p>Initializes new {@code FormEditor} object on base of the {@code document} .</p> @param document Pdf document. @param destFileName Path of the destination file.
      
      <param name="IDocument"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.#ctor(InputStream,OutputStream)">
       
        <p>Constructor for FormEditor.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">FormEditor formEditor = new FormEditor( new FileInputStream("InFile.pdf"), new FileOutputStream("OutFile.pdf"));</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @param srcStream Source stream. @param destStream Destination stream.
      
      <param name="InputStream"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditor.#ctor(String,String)">
       
        <p>Constructor for FormEditor</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">FormEditor formEditor = new FormEditor("InFile.pdf", "OutFile.pdf");</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @param srcFileName Name of source file. @param destFileName Name of destination file.
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.facades.FormEditorWeb"/>
    <member name="M:com.aspose.pdf.facades.FormEditorWeb.getResponse">
       
        <p>Gets Response object where result of operation will be stored.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditorWeb.setResponse(HttpServletResponse)">
       
        <p>Sets Response object where result of operation will be stored.</p> 
      
      <param name="HttpServletResponse"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditorWeb.save"/>
    <member name="M:com.aspose.pdf.facades.FormEditorWeb.#ctor">
       
        <p>Constructor for FormEditorWeb.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">FormEditorWeb FormEditorWeb = new FormEditorWeb();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditorWeb.#ctor(IDocument)">
       
        <p>Initializes new {@code FormEditorWeb} object on base of the {@code document}.</p> @param document Pdf document.
      
      <param name="IDocument"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditorWeb.#ctor(IDocument,OutputStream)">
       
        <p>Initializes new {@code FormEditorWeb} object on base of the {@code document}.</p> @param document Pdf document. @param destStream Destination stream.
      
      <param name="IDocument"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditorWeb.#ctor(IDocument,String)">
       
        <p>Initializes new {@code FormEditorWeb} object on base of the {@code document}.</p> @param document Pdf document. @param destFileName Path of the destination file.
      
      <param name="IDocument"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditorWeb.#ctor(InputStream,HttpServletResponse)">
       
        <p>Creates FormEditorWeb which will save result into HttpResponse object.</p> @param inputStream Source stream. @param response HttpResponse object where result will be saved.
      
      <param name="InputStream"/>
      <param name="HttpServletResponse"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditorWeb.#ctor(InputStream,OutputStream)">
       
        <p>Constructor for FormEditorWeb.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">FormEditorWeb FormEditorWeb = new FormEditorWeb( new FileInputStream("InFile.pdf"), new FileOutputStream("OutFile.pdf"));</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param srcStream Source stream. @param destStream Destination stream.
      
      <param name="InputStream"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditorWeb.#ctor(String,HttpServletResponse)">
       
        <p>Creates FormEditorWeb which will save result into HttpResponse object.</p> @param inputFile Source file name. @param response HttpResponse objects where result be saved.
      
      <param name="String"/>
      <param name="HttpServletResponse"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormEditorWeb.#ctor(String,String)">
       
        <p>Constructor for FormEditorWeb</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">FormEditorWeb FormEditorWeb = new FormEditorWeb("InFile.pdf", "OutFile.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param srcFileName Name of source file. @param destFileName Name of destination file.
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.facades.FormFieldFacade">
       
        <p>Class for representing field properties.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.getBorderColor">
       
        <p>The color of a field border.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.setBorderColor(java.awt.Color)">
      <param name="java.awt.Color"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.getBorderStyle">
       
        <p>The style of a field border.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.setBorderStyle(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.getBorderWidth">
       
        <p>The width of a field border.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.setBorderWidth(float)">
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.getFont">
       
        <p>Gets the font style type of a field text.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.setFont(int)">
       
        <p>Sets the font style type of a field text.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.getCustomFont">
       
        <p>Gets the name of the font when this is non-standart (other then 14 standard fonts).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.setCustomFont(String)">
       
        <p>Sets the name of the font when this is non-standart (other then 14 standard fonts).</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.getFontSize">
       
        <p>Gets the size of a field text.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.setFontSize(float)">
       
        <p>Sets the size of a field text.</p> 
      
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.getTextColor">
       
        <p>Get the color of the field text.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.setTextColor(java.awt.Color)">
       
        <p>Set the color of the field text.</p> 
      
      <param name="java.awt.Color"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.getTextEncoding">
       
        <p>Get the text encoding type of the field text.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.setTextEncoding(int)">
       
        <p>Set the {@link EncodingType} text encoding type of the field text.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.getAlignment">
       
        <p>Get the alignment of a field text, default is left alignment.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.setAlignment(int)">
       
        <p>Set the alignment of a field text, default is left alignment.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.getRotation">
       
        <p>Get the rotation of a field text.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.setRotation(int)">
       
        <p>Set the rotation of a field text.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.getCaption">
       
        <p>Get the normal caption of form field.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.setCaption(String)">
       
        <p>Set the normal caption of form field.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.getButtonStyle">
       
        <p>Get the style of check box or radio box field, defined by FormFieldFacade.CheckBoxStyle*.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.setButtonStyle(int)">
       
        <p>Set the style of check box or radio box field, defined by FormFieldFacade.CheckBoxStyle*.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.getBox">
       
        <p>Get a rectangle object holding field's location.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.setBox(java.awt.Rectangle)">
       
        <p>Set a rectangle object holding field's location.</p> 
      
      <param name="java.awt.Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.getPosition">
       
        <p>Get a rectangle object holding field's location.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.setPosition(float[])">
       
        <p>Set a rectangle object holding field's location.</p> 
      
      <param name="float[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.getPageNumber">
       
        <p>Get an integer value holding the number of page on which field locates.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.setPageNumber(int)">
       
        <p>Set an integer value holding the number of page on which field locates.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.getItems">
       
        <p>Get an array of string, each representing an option of a combo box/list/radio box field.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.setItems(String[])">
       
        <p>Set an array of string, each representing an option of a combo box/list/radio box field.</p> 
      
      <param name="String[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.getExportItems">
       
        <p>Get the options for adding a list/combo/radio box</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.setExportItems(String[][])">
       
        <p>Set the options for adding a list/combo/radio box</p> 
      
      <param name="String[][]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.getBackgroundColor">
       
        <p>Get the color of a field background, default is white.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.setBackgroundColor(java.awt.Color)">
       
        <p>Set the color of a field background, default is white.</p> 
      
      <param name="java.awt.Color"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.reset">
       
        <p>Reset all visual attribtues to empty value.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.getBackgroudColor">
       
        <p>Obsolete property. Use BackgroundColor.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormFieldFacade.setBackgroudColor(java.awt.Color)">
      <param name="java.awt.Color"/>
    </member>
    <member name="F:com.aspose.pdf.facades.FormFieldFacade.BORDER_WIDTH_UNDIFIED">
       
        <p>Undefined border width.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FormFieldFacade.BORDER_WIDTH_UNDEFINED">
       
        <p>Undefined border width.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FormFieldFacade.BORDER_WIDTH_THIN">
       
        <p>Defines a thin border width.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FormFieldFacade.BORDER_WIDTH_MEDIUM">
       
        <p>Defines a medium border width.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FormFieldFacade.BORDER_WIDTH_THICK">
       
        <p>Defines a thick border width.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FormFieldFacade.BORDER_STYLE_SOLID">
       
        <p>Defines a solid border style.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FormFieldFacade.BORDER_STYLE_DASHED">
       
        <p>Defines a dashed border style.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FormFieldFacade.BORDER_STYLE_BEVELED">
       
        <p>Defines a beveled border style.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FormFieldFacade.BORDER_STYLE_INSET">
       
        <p>Defines an inseted border style.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FormFieldFacade.BORDER_STYLE_UNDERLINE">
       
        <p>Defines an underlined border style.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FormFieldFacade.BORDER_STYLE_UNDEFINED">
       
        <p>Undefined border style.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FormFieldFacade.ALIGN_LEFT">
       
        <p>Defines aglignment to left style.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FormFieldFacade.ALIGN_CENTER">
       
        <p>Defines aglignment to center style.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FormFieldFacade.ALIGN_RIGHT">
       
        <p>Defines aglignment to right style.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FormFieldFacade.ALIGN_UNDEFINED">
       
        <p>Undefined aglignment style.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FormFieldFacade.ALIGN_JUSTIFIED">
       
        <p>Defines text justification alignment style.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FormFieldFacade.ALIGN_TOP">
       
        <p>Defines vertical aglignment as top style.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FormFieldFacade.ALIGN_MIDDLE">
       
        <p>Defines vertical aglignment as middle style.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FormFieldFacade.ALIGN_BOTTOM">
       
        <p>Defines vertical aglignment as bottom style.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FormFieldFacade.CHECK_BOX_STYLE_CIRCLE">
       
        <p>Defines a circle check box style.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FormFieldFacade.CHECK_BOX_STYLE_CHECK">
       
        <p>Defines the shape of a check box field when it checked.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FormFieldFacade.CHECK_BOX_STYLE_CROSS">
       
        <p>Defines a cross check box style.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FormFieldFacade.CHECK_BOX_STYLE_DIAMOND">
       
        <p>Defines a diamond check box style.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FormFieldFacade.CHECK_BOX_STYLE_STAR">
       
        <p>Defines a star check box style.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FormFieldFacade.CHECK_BOX_STYLE_SQUARE">
       
        <p>Defines a square check box style.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.FormFieldFacade.CHECK_BOX_STYLE_UNDEFINED">
       
        <p>Defines an undefined check box style.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.FormWeb"/>
    <member name="M:com.aspose.pdf.facades.FormWeb.getResponse">
       
        <p>Gets or sets Response object where result of operation will be stored.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormWeb.setResponse(HttpServletResponse)">
      <param name="HttpServletResponse"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormWeb.save">
       
        <p>Saves the value of the filled fields and close the opened Pdf document.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">Form form = new Form("PdfForm.pdf", "PdfForm_Changed.pdf"); form.fillField("textField", "new value"); form.save();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormWeb.#ctor">
       
        <p>Construtcor of FormWeb without parameters.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">FormWeb FormWeb = new com.aspose.pdf.facades.FormWeb(); FormWeb.setSrcFileName( "file.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.FormWeb.#ctor(IDocument)">
       
        <p>Initializes new {@code FormWeb} object on base of the {@code document}.</p> @param document Pdf document.
      
      <param name="IDocument"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormWeb.#ctor(IDocument,OutputStream)">
       
        <p>Initializes new {@code FormWeb} object on base of the {@code document}.</p> @param document Pdf document. @param destStream Destination stream.
      
      <param name="IDocument"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormWeb.#ctor(IDocument,String)">
       
        <p>Initializes new {@code FormWeb} object on base of the {@code document}.</p> @param document Pdf document. @param destFileName Path of the destination file.
      
      <param name="IDocument"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormWeb.#ctor(InputStream)">
       
        <p>Constructor for FormWeb.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">FormWeb FormWeb = new FormWeb(new FileInputStream("PdfFormWeb.pdf"));</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param srcStream source stream.
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormWeb.#ctor(InputStream,HttpServletResponse)">
       
        <p>Creates FormWeb which will save result into HttpResponse object.</p> @param inputStream Stream containing source document. @param response HttpResponse object where result will be saved.
      
      <param name="InputStream"/>
      <param name="HttpServletResponse"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormWeb.#ctor(InputStream,OutputStream)">
       
        <p>Constructor of FormWeb with two stream parameters. Specify same source and destination stream for incremental update.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">FormWeb FormWeb = new FormWeb( new FileInputStream("InFile.pdf"), new FileOutputStream("OutFile.pdf"));</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param srcStream Source stream. @param destStream Destination stream.
      
      <param name="InputStream"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormWeb.#ctor(InputStream,String)">
       
        <p>Constructor of FormWeb</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">FormWeb FormWeb = new FormWeb(new FileInputStream("PdfFormWeb.pdf"), "PdfFormWeb_Updated.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param srcStream Source stream. @param destFileName Destination file path.
      
      <param name="InputStream"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormWeb.#ctor(String)">
       
        <p>Constructor of FormWeb.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">FormWeb FormWeb = new FormWeb("PdfFormWeb.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param srcFileName Source file path.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormWeb.#ctor(String,HttpServletResponse)">
       
        <p>Creates FormWeb which will save result into HttpResponse object.</p> @param inputFile Name of input file. @param response HttpResponse object where result will be stored.
      
      <param name="String"/>
      <param name="HttpServletResponse"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormWeb.#ctor(String,OutputStream)">
       
        <p>Constructor of FormWeb.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">FormWeb FormWeb = new FormWeb("PdfFormWeb.pdf", "PdfFormWeb_Updated.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param srcFileName Source file path. @param destStream Destination file path.
      
      <param name="String"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.FormWeb.#ctor(String,String)">
       
        <p>Constructor of FormWeb class. Specify same source file name and destination file name to perFormWeb incremental update.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">FormWeb FormWeb = new FormWeb("PdfFormWeb.pdf", "PdfFormWeb_Updated.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param srcFileName Path of the source file. @param destFileName Path of the destination file.
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.facades.IFacade">
      General facade interface that defines common facades methods.
    </member>
    <member name="T:com.aspose.pdf.facades.IForm">
       
        <p>Class representing Acro form object.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.IForm.getSrcFileName">
       
        <p>Gets source file name.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">Form form = new com.aspose.pdf.Form(); form.setSrcFileName("file.pdf");</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.IForm.setSrcFileName(String)">
       
        <p>Sets source file name.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IForm.setConvertTo(int)">
       
        <p>Sets PDF file format. Result file will be saved in specified file format. If this property is not specified then file will be save in default PDF format without conversion.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IForm.getDestFileName">&lt;p&gt; Gets destiination file name.</member>
    <member name="M:com.aspose.pdf.facades.IForm.setDestFileName(String)">
       
        <p>Sets destiination file name.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">Form form = new com.aspose.pdf.Form(); form.setDestFileName("file.pdf");</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IForm.getSrcStream">&lt;p&gt; Gets source stream.</member>
    <member name="M:com.aspose.pdf.facades.IForm.setSrcStream(InputStream)">
       
        <p>Gets source stream.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">Form form = new com.aspose.pdf.Form(); form.setSrcStream (new FileInputStream("source.pdf"));</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> 
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IForm.getDestStream">&lt;p&gt; Gets destination stream.</member>
    <member name="M:com.aspose.pdf.facades.IForm.setDestStream(OutputStream)">
       
        <p>Gets destination stream.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">Form form = new com.aspose.pdf.Form(); form.DestStream = new FileInputStream("file.pdf");</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> 
      
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IForm.getFieldNames">
       
        <p>Gets list of field names on the form.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">Form form = new Form("PdfForm.pdf"); String[] fields = form.getFieldNames(); for (String field : fields) { System.out.println(field); }</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.IForm.getFormSubmitButtonNames">
       
        <p>Gets all form submit button names.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">Form form = new Form("PdfForm.pdf"); String[] submits = form.getFormSubmitButtonNames(); for (String btn : submits) { System.out.println(btn); }</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.IForm.getFieldFacade(String)">
       
        <p>Returns FrofmFieldFacade object containing all appearance attributes.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">com.aspose.pdf.facades.Form form = new com.aspose.pdf.facades.Form("form.pdf")); FormFieldFacade field = form.getFieldFacade("field1"); System.out.println("Color of field border: " + field.BorderColor);</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @return FormFieldFacade object @param fieldName Name of field to read.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IForm.fillField(String,String)">
       
        <p>Fills the field with a valid value according to a fully qualified field name. Before filling the fields, every field's names and its corresponding valid values must be known. Both the fields' name and values are case sensitive. Please note that Aspose.Pdf.Facades supports only full field names and does not work with partial field names in contrast with Aspose.Pdf.Kit; For example if field has full name "Form.Subform.TextField" you should specify full name and not "TextField". You can use FieldNames property to explore existing field names and search required field by its partial name.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">Form form = new Form("PdfForm.pdf"); form.fillField("FirstName", "John"); form.fillField("LastName", "Smith");</pre>  
                <pre lang="Java">// how to search field by its partial name: Form form = new Form("input.pdf", "output.pdf"); for (String fieldName : form.getFieldNames()) { if (fieldName.endsWith("TextField")) { System.out.println("Full name is: " + fieldName); } }</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @param fieldName The field's name to be filled. @param fieldValue The field's value which must be a valid value for some fields.
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IForm.fillField(String,int)">
       
        <p>Fills the radio box field with a valid index value according to a fully qualified field name. Before filling the fields, only field's name must be known. While the value can be specified by its index. Notice: Only be applied to Radio Box, Combo Box and List Box fields. Please note that Aspose.Pdf.Facades supports only full field names and does not work with partial field names in contrast with Aspose.Pdf.Kit; For example if field has full name "Form.Subform.ListBoxField" you should specify full name and not "ListBoxField". You can use FieldNames property to explore existing field names and search required field by its partial name.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">Form form = new Form("PdfForm.pdf"); form.fillField("listboxField", 2); form.fillField("comboboxField", 2); form.fillField("radiobuttonField", 2);</pre>  
                <pre lang="Java">// how to search field by its partial name: Form form = new Form("input.pdf", "output.pdf"); for (String fieldName : form.getFieldNames()) { if (fieldName.endsWith("ListBoxField")) { System.out.println("Full name is: " + fieldName); } }</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @param fieldName The field's name to be filled. @param index The selected box's index in the whole radio box group.
      
      <param name="String"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IForm.fillField(String,boolean)">
       
        <p>Fills the check box field with a boolean value. Notice: Only be applied to Check Box. Please note that Aspose.Pdf.Facades supports only full field names and does not work with partial field names in contrast with Aspose.Pdf.Kit; For example if field has full name "Form.Subform.CheckBoxField" you should specify full name and not "CheckBoxField". You can use FieldNames property to explore existing field names and search required field by its partial name.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">Form form = new Form("PdfForm.pdf"); form.fillField("checkboxField", true);</pre>  
                <pre lang="Java">// how to search field by its partial name: Form form = new Form("input.pdf", "output.pdf"); for (String fieldName : form.getFieldNames()) { if (fieldName.endsWith("CheckBoxField")) { System.out.println("Full name is: " + fieldName); } }</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @param fieldName The field's name to be filled. @param beChecked A boolean flag: true means to check the box, while false to uncheck it..
      
      <param name="String"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IForm.getButtonOptionCurrentValue(String)">
       
        <p>Returns the current value for radio button option fields.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">Form form = new Form("PdfForm.pdf"); System.out.println(form.GetButtonOptionCurrentValue("btnField"));</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @return String value for the current radio group optino. See also {@code GetButtonOptionValues} @param fieldName Field Name
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IForm.getButtonOptionValues(String)">
       
        <p>Gets the radio button option fields and related values based on the field name. This method has meaning for radio button groups.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">Form form = new Form("PdfForm.pdf"); java.util.Map values = form.getButtonOptionValues("Color"); System.out.println(values.get("White").toString()); System.out.println(values.get("Black").toString());</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @return Hash table of option values keyed by form item name @param fieldName Field Name
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IForm.getField(String)">
       
        <p>Gets the field's value according to its field name.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">Form form = new Form("PdfForm.pdf"); System.out.println("Field value = " + form.getField("Field1"));</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @return The field's value. @param fieldName The fully qualified field name.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IForm.getFullFieldName(String)">
       
        <p>Gets the full field name according to its short field name.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="JAva">Form form = new Form("PdfForm.pdf"); System.out.println("Full field name is : " + form.getFullFieldName("textField"));</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @return The full field name. @param fieldName The fully qualified field name.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IForm.getFieldLimit(String)">
       
        <p>Get the limitation of text field.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">Form form = new Form("PdfForm.pdf"); System.out.println(form.getFieldLimit("textfieldBox"));</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @return Return the limitation number of characters a text field can be filled. It not set, return 0. @param fieldName The qualified field name.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IForm.save">
       
        <p>Saves the value of the filled fields and close the opened Pdf document.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">Form form = new Form("PdfForm.pdf", "PdfForm_Changed.pdf"); form.fillField("textField", "new value"); form.save();</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.IForm.close">
       
        <p>Closes opened files without any changes.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.IForm.flattenAllFields">
       
        <p>Flattens all the fields.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">Form form = new Form("PdfForm.pdf"); form.flattenAllFields();</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.IForm.flattenField(String)">
       
        <p>Flattens a specified field with the fully qualified field name. Any other field will remain unchangable. If the fieldName is invalid, all the fields will remain unchangable.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">Form form = new Form("PdfForm.pdf"); form.flattenField("textField");</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @param fieldName The name of the field to be flattened.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IForm.fillBarcodeField(String,String)">
       
        <p>Fill a barcode field according to its fully qualified field name.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">Form form = new Form("PdfForm.pdf"); form.fillBarcodeField("textField", "42207252");</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @return If filling succeed, return true; otherwise, false. @param fieldName The fully qualified field name. @param data The new barcode value.
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IForm.importFdf(InputStream)">
       
        <p>Imports the content of the fields from the fdf file and put them into the new pdf.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">Form form = new Form("PdfForm.pdf", "PdfForm_imported.pdf"); form.importFdf(new FileInputStream("data.fdf")); form.save();</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @param inputFdfStream The input fdf stream.
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IForm.exportFdf(OutputStream)">
       
        <p>Exports the content of the fields of the pdf into the fdf stream.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">Form form = new Form("PdfForm.pdf"); OutputStream stream = new FileOutputStream("export.fdf"); form.exportFdf(stream); stream.close();</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @param outputFdfStream The output fdf stream.
      
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IForm.importXml(InputStream)">
       
        <p>Imports the content of the fields from the xml file and put them into the new pdf.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">Form form = new Form("PdfForm.pdf", "Form_Imported.pdf"); InputStream fs = new FileInputStream("import.xml"); form.importXml(fs); form.save();</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> 
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IForm.exportXml(OutputStream)">
       
        <p>Exports the content of the fields of the pdf into the xml stream. The button field's value will not be exported.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">Form form = new Form("PdfForm.pdf")); OutputStream fs = new FileOutputStream("export.xml"); form.exportXml(fs); fs.close();</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> 
      
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IForm.importXfdf(InputStream)">
       
        <p>Imports the content of the fields from the xfdf(xml) file and put them into the new pdf.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">Form form = new Form("PdfForm.pdf", "Form_ImportXfdf.pdf"); InputStream fs = new FileInputStream("export_old.xfdf"); form.importXfdf(fs); fs.close(); form.save();</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @param inputXfdfStream The input xfdf(xml) stream.
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IForm.exportXfdf(OutputStream)">
       
        <p>Exports the content of the fields of the pdf into the xml stream. The button field's value will not be exported.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">Form form = new Form("PdfForm.pdf"); OutputStream fs = new FileOutputStream("export.xfdf"); form.exportXfdf(fs); fs.close();</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @param outputXfdfStream The output xml stream.
      
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IForm.fillField(String,String[])">
       
        <p>Fill a field with multiple selections.Note: only for AcroForm List Box Field.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">Form form = new com.aspose.pdf.Form("PdfForm.pdf", "Form_Updated.pdf"); form.fillField("ListBox1", new String[] { "Three", "One" }); form.save();</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @param fieldName The fully qualified field name. @param fieldValues A String array which contains several items to be selected.
      
      <param name="String"/>
      <param name="String[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IForm.renameField(String,String)">
       
        <p>Renames a field. Either AcroForm field or XFA field is OK.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">Form form = new Form("PdfForm.pdf", "PdfFormUpdated.pdf"); form.renameField("field", "field1"); form.save();</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @param fieldName the old field name @param newFieldName the new field name
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IForm.getRichText(String)">
       
        <p>Get a Rich Text field's value, including the formattinf information of every character.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">Form form = new Form("PdfForm.pdf"); System.out.println(form.getRichText("txtDescriptionRTF"));</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @return Return a String containing formatting information of the Rich Text field. @param fieldName The fully qualified field name of the Rich Text field.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IForm.getSubmitFlags(String)">
       
        <p>Returns the submit button's submission flags</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">Form form = new Form("PdfForm.pdf"); System.out.println((form.getSubmitFlags("btnSubmit") | SubmitFormFlag.Xfdf != 0) ? " XFDF" : " "); // / System.out.println( ( form.getSubmitFlags("btnSubmit") | SubmitFormFlag.Fdf // != 0) ? " FDF" : " "); System.out.println((form.getSubmitFlags("btnSubmit") | SubmitFormFlag.Pdf != 0) ? " PDF" : " ");</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @param fieldName The qualified field name.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IForm.getFieldType(String)">
       
        <p>Returns type of field.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">Form form = new Form("PdfForm.pdf"); if (form.GetFieldType("textField") == FieldType.Text) { System.out.println("Type of field is text"); }</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @return Element of FileType enumeration corresponding to field type. @param fieldName Field name.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IForm.getFieldFlag(String)">
       
        <p>Returns flags of the field.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">Form form = new Form("PdfForm.pdf"); if (form.getFieldFlag("textField") == ProptyFlag.ReadOnly) { System.out.println("Field is read-only"); }</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @return Property flag (ReadOnly/ Required/NoExport @param fieldName Field name
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IForm.fillImageField(String,String)">
       
        <p>Pastes an image onto the existing button field as its appearance according to its fully qualified field name.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">Form form = new Form("PdfForm.pdf", "PdfForm_filled.pdf"); form.fillImageField("fieldName", "file.jpg"); form.save();</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @param fieldName The fully qualified field name of the image button field. @param imageFileName The path of the image file, relative and absolute are both ok.
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IForm.fillImageField(String,InputStream)">
       
        <p>Overloads function of FillImageField. The input is a image stream.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">Form form = new Form("PdfForm.pdf", "PdfForm_filled.pdf"); form.fillImageField("fieldName", new FileInputStream("file.jpg"));</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @param fieldName The fully qualified field name. @param imageStream The image's stream.
      
      <param name="String"/>
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IForm.getDocument">
       
        <p>Gets the document {@code Form} is working on.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.IForm.importXml(InputStream,boolean)">
       
        <p>Imports the content of the fields from the xml file and put them into the new pdf.</p> @param inputXmlStream The input xml stream. @param IgnoreFormTemplateChanges If this parameter is true then all changes of the XFA form template will not be saved
      
      <param name="InputStream"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IForm.fillField(String,String,boolean)">
       
        <p>FillField</p> @return @param fieldName Name of field @param value New value of the field @param fitFontSize If true, the font size in the edit boxes will be fitted.
      
      <param name="String"/>
      <param name="String"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IForm.getContentDisposition">
       
        <p>Gets or sets how content will be stored when result of operation is stored into HttpResponse object. Possible value: inline / attachment. Default: inline.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.IForm.setContentDisposition(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IForm.getSaveOptions">
       
        <p>Gets or sets save options when result is stored as HttpResponse. Default value: PdfSaveOptions.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.IForm.setSaveOptions(SaveOptions)">
      <param name="SaveOptions"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IForm.getAttachmentName">
       
        <p>Gets or sets name of attachment when result of operation is stored into HttpResponse objects as attachment.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.IForm.setAttachmentName(String)">
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.facades.IFormEditor">
       
        <p>Class for editing forms (ading/deleting field etc)</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.IFormEditor.getSrcFileName">&lt;p&gt; Gets name of source file.</member>
    <member name="M:com.aspose.pdf.facades.IFormEditor.setSrcFileName(String)">
       
        <p>Sets name of source file.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">FormEditor editor = new FormEditor(); editor.setSrcFileName("InputFile.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IFormEditor.getDestFileName">&lt;p&gt; Gets destination file name.</member>
    <member name="M:com.aspose.pdf.facades.IFormEditor.setDestFileName(String)">
       
        <p>Sets destination file name.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="JAva">FormEditor editor = new FormEditor(); editor.setDestFileName("OutFile.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IFormEditor.getSrcStream">&lt;p&gt; Gets source stream.</member>
    <member name="M:com.aspose.pdf.facades.IFormEditor.setSrcStream(InputStream)">
       
        <p>Sets source stream.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">FormEditor editor = new FormEditor(); editor.setSrcStream(new FileInputStream("InFile.pdf"));</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IFormEditor.setConvertTo(int)">
       
        <p>Sets {@link PdfFormat} PDF file format. Result file will be saved in specified file format. If this property is not specified then file will be save in default PDF format without conversion.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IFormEditor.getDestStream">
       
        <p>Gets destination stream.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">FormEditor editor = new FormEditor(); editor.setDestStream ( new FileInputStream("OutFile.pdf"));</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.IFormEditor.setDestStream(OutputStream)">
       
        <p>Sets destination stream.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">FormEditor editor = new FormEditor(); editor.setDestStream ( new FileInputStream("OutFile.pdf"));</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IFormEditor.getItems"/>
    <member name="M:com.aspose.pdf.facades.IFormEditor.setItems(String[])">
       
        <p>Sets items which will be added t onewly created list box or combo box.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">formEditor = new com.aspose.pdf.facadesFormEditor("input.pdf", "output.pdf"); formEditor.setItems ( new String[] { "AAA", "BBB", "CCC" }); formEditor.addField(FieldType.ListBox, "AddedListBoxField", "BBB", 1, 10, 30, 110, 130); formEditor.save();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
      <param name="String[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IFormEditor.getExportItems">&lt;p&gt; Gets options for combo box with export values.&lt;/p&gt;&lt;p&gt;&lt;hr&gt;&lt;blockquote&gt;&lt;pre&gt;</member>
    <member name="M:com.aspose.pdf.facades.IFormEditor.setExportItems(String[][])">
       
        <p>Sets options for combo box with export values.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">FormEditor formEditor = new FormEditor("PdfForm.pdf", "PdfForm_Updated.pdf")); formEditor.setExportItems ( new String[][] { new String[] { "1", "Firs" }, new String[] { "2", "Second" }, new String[] { "3", "Third" } }); formEditor.addField(FieldType.ListBox, "AddedListBoxField", "Second", 1, 10, 30, 110, 130); formEditor.save();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
      <param name="String[][]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IFormEditor.getFacade">&lt;p&gt; Gets visual attributes of the field.</member>
    <member name="M:com.aspose.pdf.facades.IFormEditor.setFacade(FormFieldFacade)">
       
        <p>Sets visual attributes of the field.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">FormEditor fe = new FormEditor("PdfForm.pdf", "PdfForm_DecorateField_text.pdf"); fe.setFacade ( new FormFieldFacade()); fe.getFacade().setBackgroundColor ( Color.red); fe.getFacade().setTextColor ( Color.blue); fe.getFacade().setBorderColor ( Color.green); fe.getFacade().setAlignment ( FormFieldFacade.AlignCenter); fe.setDecorateField("textField"); fe.save();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
      <param name="FormFieldFacade"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IFormEditor.getRadioGap">&lt;p&gt; Get the member to record the gap between two neighboring radio buttons in pixels,default is 50.</member>
    <member name="M:com.aspose.pdf.facades.IFormEditor.setRadioGap(float)">
       
        <p>Set the member to record the gap between two neighboring radio buttons in pixels,default is 50.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">formEditor = new com.aspose.pdf.facades.FormEditor("PdfForm.pdf", "FormEditor_AddField_RadioButton.pdf"); formEditor.setRadioGap ( 4); formEditor.setRadioHoriz ( false); formEditor.setItems ( new String[] { "First", "Second", "Third" }); formEditor.addField(FieldType.Radio, "AddedRadioButtonField", "Second", 1, 10, 30, 110, 130); formEditor.save();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IFormEditor.getRadioHoriz">&lt;p&gt; Get the flag to indicate whether the radios are arranged horizontally or vertically, default value is true.</member>
    <member name="M:com.aspose.pdf.facades.IFormEditor.setRadioHoriz(boolean)">
       
        <p>Set the flag to indicate whether the radios are arranged horizontally or vertically, default value is true.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">formEditor = new com.aspose.pdf.facades.FormEditor("PdfForm.pdf", "FormEditor_AddField_RadioButton.pdf"); formEditor.setRadioGap ( 4); formEditor.setRadioHoriz ( false); formEditor.setItems ( new String[] { "First", "Second", "Third" }); formEditor.addField(FieldType.Radio, "AddedRadioButtonField", "Second", 1, 10, 30, 110, 130); formEditor.save();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IFormEditor.getRadioButtonItemSize">
       
        <p>Gets or sets size of radio button item size (when new radio button field is added). 
          <pre lang="Java">FormEditor formEditor = new com.aspose.pdf.facades.FormEditor("PdfForm.pdf", "FormEditor_AddField_RadioButton.pdf"); formEditor.setRadioGap ( 4); formEditor.setRadioHoriz ( false); formEditor.setRadioButtonItemSize ( 20); formEditor.setItems ( new String[] { "First", "Second", "Third" }); formEditor.addField(com.aspose.pdf.facades.FieldType.Radio, "AddedRadioButtonField", "Second", 1, 10, 30, 110, 130); formEditor.save();</pre> 
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.IFormEditor.setRadioButtonItemSize(double)">
       
        <p>Gets or sets size of radio button item size (when new radio button field is added). 
          <pre lang="Java">FormEditor formEditor = new com.aspose.pdf.facades.FormEditor("PdfForm.pdf", "FormEditor_AddField_RadioButton.pdf"); formEditor.setRadioGap ( 4); formEditor.setRadioHoriz ( false); formEditor.setRadioButtonItemSize ( 20); formEditor.setItems ( new String[] { "First", "Second", "Third" }); formEditor.addField(com.aspose.pdf.facades.FieldType.Radio, "AddedRadioButtonField", "Second", 1, 10, 30, 110, 130); formEditor.save();</pre> 
        </p> 
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IFormEditor.getSubmitFlag">
       
        <p>Get the submit button's submission flags</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.IFormEditor.setSubmitFlag(int)">
       
        <p>Set the submit button's submission flags</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IFormEditor.save">
       
        <p>Saves changes into destination file.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.IFormEditor.setFieldAttribute(String,int)">
       
        <p>Set attributes of field.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">FormEditor formEditor = new FormEditor("PdfForm.pdf", "PdfForm_SetFieldAttribute.pdf"); formEditor.setFieldAttribute("listboxField", PropertyFlag.ReadOnly); formEditor.setFieldAttribute("textField", PropertyFlag.NoExport);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return true if attribute was set successfully. @param fieldName Name of field which attributes should be set. @param flag Flag (NoExport/ReadOnly/Required)
      
      <param name="String"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IFormEditor.setFieldAppearance(String,int)">
       
        <p>Set field flags</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">FormEditor formEditor = new FormEditor("PdfForm1.pdf", "FormEditor_SetFieldAppearance.pdf"); formEditor.setFieldAppearance("Name", AnnotationFlags.Hidden); formEditor.setFieldAppearance("Phone", AnnotationFlags.NoView | AnnotationFlags.Print);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return true if flags were updated successfully. @param fieldName Name of field whose flags should be updated. @param flags Flag of the field.
      
      <param name="String"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IFormEditor.setSubmitFlag(String,int)">
       
        <p>Set submit flag of submit button.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">FormEditor formEditor = new FormEditor("PdfForm.pdf", "FormEditor_SetSubmitFlag.pdf"); formEditor.setSubmitFlag("btnSubmit", SubmitFormFlag.Fdf);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return @param fieldName Name of submit button. @param submitFormFlag Submit flag.
      
      <param name="String"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IFormEditor.setSubmitUrl(String,String)">
       
        <p>Sets URL of the button.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">FormEditor formEditor = new FormEditor("PdfForm.pdf", "FormEditor_SetSubmitUrl.pdf"); formEditor.setSubmitUrl("btnSubmit", "www.mysite.com");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return @param fieldName Submit button name. @param url Fully qualified URL.
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IFormEditor.setFieldLimit(String,int)">
       
        <p>Sets maximum character count of the text field.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">FormEditor formEditor = new FormEditor("PdfForm.pdf", "FormEditor_SetFieldLimit.pdf"); formEditor.setFieldLimit("textField", 15);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return true if field limit was successfully set. @param fieldName Name of the text field. @param fieldLimit New value of limit for the field.
      
      <param name="String"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IFormEditor.setFieldCombNumber(String,int)">
       
        <p>Sets number of combs for a regular single-line text field (the field is automatically divided into as many equally spaced positions, or combs, as the value of combNumber parameter).</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">FormEditor formEditor = new FormEditor("PdfWithAcroForm.pdf", "FormEditor_SetFieldComb.pdf")); formEditor.setFieldCombNumber("textCombField", 5);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return If success, return true;else false. @param fieldName The qualified field name. @param combNumber The number of combs to divide the field into.
      
      <param name="String"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IFormEditor.moveField(String,float,float,float,float)">
       
        <p>Set new position of field.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">FormEditor formEditor = new FormEditor("PdfForm.pdf", "FormEditor_MoveField.pdf"); formEditor.moveField("textField", 20.5f, 20.3f, 120.6f, 40.8f);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return true if field position was changed successfully. @param fieldName Name of field which must be moved. @param llx Abscissa of the lower-left corner of the field. @param lly Ordinate of the lower-left coerner of the field. @param urx Abscissa of the upper-right corner of the field. @param ury Ordinate of the upper-right corner of the field.
      
      <param name="String"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IFormEditor.addField(int,String,int,float,float,float,float)">
       
        <p>Add field of specified type to the form.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">FormEditor formEditor = new com.aspose.pdf.facades.FormEditor("PdfForm.pdf", "FormEditor_AddField_Text.pdf"); formEditor.addField(FieldType.Text, "AddedTextField", 1, 10, 30, 110, 46); formEditor.save();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return true if field was successfully added. @param fieldType Type of the field which must be added. @param fieldName Name of the field whic must be added. @param pageNum Page number where new field must be placed. @param llx Abscissa of the lower-left corner of the field. @param lly Ordinate of the lower-left corner of the field. @param urx Abscissa of the upper-right corner of the field. @param ury Ordinate of the upper-right corner of the field.
      
      <param name="int"/>
      <param name="String"/>
      <param name="int"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IFormEditor.addField(int,String,String,int,float,float,float,float)">
       
        <p>Add field of specified type to the form.</p> @return true if field was successfully added. @param fieldType Type of the field which must be added. @param fieldName Name of the field whic must be added. @param initValue Initial value of the field. @param pageNum Page number where new field must be placed. @param llx Abscissa of the lower-left corner of the field. @param lly Ordinate of the lower-left corner of the field. @param urx Abscissa of the upper-right corner of the field. @param ury Ordinate of the upper-right corner of the field.
      
      <param name="int"/>
      <param name="String"/>
      <param name="String"/>
      <param name="int"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IFormEditor.removeField(String)">
       
        <p>Remove field from the form.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="JAva">FormEditr formEditor = new FormEditor("PdfForm.pdf", "FormEditor_RemoveField.pdf"); formEditor.removeField("listboxField"); formEditor.removeField("textField");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param fieldName Name of the field which must be removed.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IFormEditor.resetFacade">
       
        <p>Reset all visual attribtues to empty value.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.IFormEditor.resetInnerFacade">
       
        <p>Reset all visual attribtues of inner facade to empty value.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.IFormEditor.copyInnerField(String,String,int)">
       
        <p>Copies an existing field to the same position in specified page number. A new document will be produced, which contains everything the source document has except for the newly copied field.</p> @param fieldName
      
      <param name="String"/>
      <param name="String"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IFormEditor.copyInnerField(String,String,int,float,float)">
       
        <p>Copies an existing field to a new position specified by both page number and ordinates. A new document will be produced, which contains everything the source document has except for the newly copied field.</p> @param fieldName
      
      <param name="String"/>
      <param name="String"/>
      <param name="int"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IFormEditor.copyOuterField(String,String)">
       
        <p>Copies an existing field from one PDF document to another document with original page number and ordinates. Notice: Only for AcroForm fields (excluding radio box).</p> @param srcFileName
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IFormEditor.copyOuterField(String,String,int)">
       
        <p>Copies an existing field from one PDF document to another document with specified page number and original ordinates. Notice: Only for AcroForm fields (excluding radio box).</p> @param srcFileName
      
      <param name="String"/>
      <param name="String"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IFormEditor.copyOuterField(String,String,int,float,float)">
       
        <p>Copies an existing field from one PDF document to another document with specified page number and ordinates. Notice: Only for AcroForm fields (excluding radio box).</p> @param srcFileName
      
      <param name="String"/>
      <param name="String"/>
      <param name="int"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IFormEditor.decorateField(String)">
       
        <p>Changes visual attributes of the specified field.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">FormEditor fe = new FormEditor("PdfWithAcroForm.pdf", "FormEditor_DecorateField_text.pdf"); fe.Facade = new FormFieldFacade(); fe.Facade.setBackgroundColor ( Color.Red); fe.Facade.setTextColor ( Color.Blue); fe.Facade.setBorderColor ( Color.Green); fe.Facade.setAlignment ( FormFieldFacade.AlignCenter); fe.decorateField("textField");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param fieldName The fully qualified field name.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IFormEditor.decorateField(int)">
       
        <p>Changes visual attributes of all fields with the specified field type.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">FormEditor fe = new FormEditor("PdfForm.pdf", "FormEditor_DecorateField.pdf"); fe.setFacade ( new FormFieldFacade()); fe.getFacade().setBackgroundColor ( Color.red); fe.getFacade().setTextColor ( Color.blue); fe.getFacade().setBorderColor ( Color.green); fe.getFacade().setAlignment ( FormFieldFacade.AlignRight); //decorate all text fields. fe.decorateField(FieldType.Text);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param fieldType Type of fields which will be decorated.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IFormEditor.decorateField">
       
        <p>Changes visual attributes of all fields in the PDF document.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">FormEditor fe = new FormEditor("PdfForm.pdf", "FormEditor_DecorateField.pdf"); fe.setFacade ( new FormFieldFacade()); fe.getFacade().setBackgroundColor ( Color.red); fe.getFacade().setTextColor ( Color.blue); fe.getFacade().setBorderColor ( Color.Green); fe.getFacade().setAlignment( FormFieldFacade.AlignRight); //decorate all fields. fe.decorateField();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.IFormEditor.renameField(String,String)">
       
        <p>Change name of the field.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">FormEditor formEditor = new FormEditor("PdfForm.pdf", "PdfForm_updated.pdf"); formEditor.renameField("textField", "textField_Renamed");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param fieldName Old name of the field. @param newFieldName New name of the field.
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IFormEditor.removeFieldAction(String)">
       
        <p>Remove submit action of the field.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">FormEditor formEditor = new FormEditor("PdfForm.pdf", "FormEditor_RemoveFieldAction.pdf"); formEditor.removeFieldAction("btnSubmit");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param fieldName Name of the field.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IFormEditor.addSubmitBtn(String,int,String,String,float,float,float,float)">
       
        <p>Add submit button on the form.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">FormEditor formEditor = new FormEditor("PdfForm.pdf", "FormEditor_AddSubmitBtn.pdf"); formEditor.addSubmitBtn("submit", 1, "Submit", "www.check.com", 10, 200, 70, 270);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param fieldName Name of new button. @param page Page where button will be placed. @param label Button caption. @param url URL of the submit button. @param llx Abscissa of the lower-left corner. @param lly Ordinate of the lower-left corner. @param urx Abscissa of the upper-right corner. @param ury Ordinate of the upper-right corner.
      
      <param name="String"/>
      <param name="int"/>
      <param name="String"/>
      <param name="String"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IFormEditor.addListItem(String,String)">
       
        <p>Adds new item to the list box.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">FormEditor formEditor = new FormEditor("PdfForm.pdf", PdfForm_out.pdf"); formEditor.addListItem("listBoxField", "Item 4 (New Item)");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param fieldName Name of the field ot which new item will be added. @param itemName Name if new item.
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IFormEditor.addListItem(String,String[])">
       
        <p>Add a new item with Export value to the existing list box field, only for AcroForm combo box field.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">FormEditor fe = new FormEditor("PdfForm.pdf", "FormEditor_AddListItem2.pdf"); fe.addListItem("listboxField", new String[] { "4", "Item4(Added)" });</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param fieldName Name of field to which items will be added. @param exportName A String array denoting a new list item with Export Value, i.e. (Item Label, Export Value).
      
      <param name="String"/>
      <param name="String[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IFormEditor.delListItem(String,String)">
       
        <p>Delete item from the list field.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">formEditor = new com.aspose.pdf.facades.FormEditor("PdfForm.pdf", "FormEditor_DelListItem.pdf"); formEditor.delListItem("listboxField", "item2");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param fieldName Name of the field. @param itemName Name of the item which must be deleted.
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IFormEditor.setFieldScript(String,String)">
       
        <p>Set JavaScript for a PushButton field. If old JavaScript existed, it will be replaced by the new one.</p> @param fieldName The fully qualified field name. @param script The Java script to be added/placed into a push button field.
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IFormEditor.single2Multiple(String)">
       
        <p>Change a single-lined text field to a multiple-lined one.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">FormEditor formEditor = new FormEditor("PdfForm.pdf", "PdfForm_updated.pdf"); formEditor.single2Multiple("textField");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return If success, return true;else false. @param fieldName The qualified field name.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IFormEditor.setFieldAlignment(String,int)">
       
        <p>Set the alignment style of a text field.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">FormEditor formEditor = new FormEditor("PdfForm.pdf", "FormEditor_updated.pdf")); formEditor.setFieldAlignment(fieldName, FormFieldFacade.AlignCenter);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param fieldName The qualified field name. @param alignment The alignment style definition, including FormFieldFacade.AlignLeft, FormFieldFacade.AlignCenter and FormFieldFacade.AlignRight.
      
      <param name="String"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IFormEditor.setFieldAlignmentV(String,int)">
       
        <p>Set the vertical alignment style of a text field.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">FormEditor fe = new FormEditor("PdfStaticForm.pdf", "VerticalAlign.pdf"); fe.setFieldAlignmentV("form1[0].TextField[0]", FormFieldFacade.AlignBottom);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param fieldName The qualified field name. @param alignment The alignment style definition, including FormFieldFacade.AlignTop, FormFieldFacade.AlignMiddle and FormFieldFacade.AlignRight.
      
      <param name="String"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IFormEditor.getDocument">
       
        <p>Gets the document {@code FormEditor} is working on.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.IFormEditor.getContentDisposition">
       
        <p>Gets how content will be stored when result of operation is stored into HttpResponse object. Possible value: inline / attachment. Default: inline.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.IFormEditor.setContentDisposition(int)">
       
        <p>Sets how content will be stored when result of operation is stored into HttpResponse object. Possible value: inline / attachment. Default: inline.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IFormEditor.getSaveOptions">
       
        <p>Gets save options when result is stored as HttpResponse. Default value: PdfSaveOptions.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.IFormEditor.setSaveOptions(SaveOptions)">
       
        <p>Sets save options when result is stored as HttpResponse. Default value: PdfSaveOptions.</p> 
      
      <param name="SaveOptions"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IFormEditor.getAttachmentName">
       
        <p>Gets name of attachment when result of operation is stored into HttpResponse objects as attachment.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.IFormEditor.setAttachmentName(String)">
       
        <p>Sets name of attachment when result of operation is stored into HttpResponse objects as attachment.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IFormEditor.close"/>
    <member name="M:com.aspose.pdf.facades.IFormEditor.dispose"/>
    <member name="T:com.aspose.pdf.facades.IPdfFileEditor">
       
        <p>Implements operations with PDF file: concatenation, splitting, extracting pages, making booklet, etc.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.getConversionLog">
       
        <p>Gets log of conversion process.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.getMergeDuplicateLayers">
       
        <p>Optional contents of concatentated documents with equal names will be merged into one layer in resulstant document if this property is true. Else, layers with equal names will be save as different layers in resultant document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.setMergeDuplicateLayers(boolean)">
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.getMergeDuplicateOutlines">
       
        <p>If true, duplicate outlines are merged.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.setMergeDuplicateOutlines(boolean)">
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.getPreserveUserRights">
       
        <p>If true, user rights of first document are applied to concatenated document. User rights of all other documents are ignored.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.setPreserveUserRights(boolean)">
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.getIncrementalUpdates">
       
        <p>If true, incremental updates are made during concatenation.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.setIncrementalUpdates(boolean)">
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.getCorruptedFileAction">
       
        <p>This property defines behavior when concatenating process met corrupted file. Possible values are: StopWithError and ConcatenateIgnoringCorrupted.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.setCorruptedFileAction(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.getOwnerPassword">
       
        <p>Gets owner's password if the source input Pdf file is encrypted. This property is not implemented yet.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.setOwnerPassword(String)">
       
        <p>Sets owner's password if the source input Pdf file is encrypted. This property is not implemented yet.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.getAllowConcatenateExceptions"/>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.setAllowConcatenateExceptions(boolean)">
       
        <p>If set to true, exceptions are thrown if error occured. Else excetion are not thrown and methods return false if failed.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); pfe.setAllowConcatenatedException(true);</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> 
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.setConvertTo(int)">
       
        <p>Sets PDF file format. Result file will be saved in specified file format. If this property is not specified then file will be save in default PDF format without conversion.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.getCloseConcatenatedStreams"/>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.setCloseConcatenatedStreams(boolean)">
       
        <p>If set to true, streams are closed after operation.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); pfe.setCloseConcatenatedStreams(true);</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> 
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.getUniqueSuffix">&lt;p&gt; Get format of the suffix which is added to field name to make it unique when forms are concatenated. This string must contain %NUM% substring which will be replaced with numbers. For example if UniqueSuffix = "ABC%NUM%" then for field "fieldName" names will be: fieldNameABC1, fieldNameABC2, fieldNameABC3 etc.</member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.setUniqueSuffix(String)">
       
        <p>Set format of the suffix which is added to field name to make it unique when forms are concatenated. This string must contain %NUM% substring which will be replaced with numbers. For example if UniqueSuffix = "ABC%NUM%" then for field "fieldName" names will be: fieldNameABC1, fieldNameABC2, fieldNameABC3 etc.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileEditor ed = new PdfFileEditor(); ed.setUniqueSuffix("_%NUM%");</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.getKeepFieldsUnique">
       
        <p>If true then field names will be made unique when forms are concatenated. Suffixes will be added to field names, suffix template may be specified in UniqueSuffix property.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.setKeepFieldsUnique(boolean)">
       
        <p>If true then field names will be made unique when forms are concatenated. Suffixes will be added to field names, suffix template may be specified in UniqueSuffix property.</p> 
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.concatenate(String,String,String)">
       
        <p>Concatentates two files.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileEditor fileEditor = new PdfFileEditor(); fileEditor.concatenate("file1.pdf", "file2.pdf", "outfile.pdf");</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @return True if operation was succeeded. @param firstInputFile First file to concatenate. @param secInputFile Second file to concatenate. @param outputFile Output file.
      
      <param name="String"/>
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.concatenate(InputStream,InputStream,OutputStream)">
       
        <p>Concatenates two files.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileEditor fileEditor = new PdfFileEditor(); InputStream stream1 = new FileInputStream("file1.pdf"); InputStream stream2 = new FileInputStream("file2.pdf"); OutputStream outstream = new FileOutputStream("outfile.pdf"); fileEditor.concatenate(stream1, stream2, outstream);</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @return True if operation was succeeded. @return True if operation was succeeded. @param firstInputStream Stream of first file. @param secInputStream Stream of second file. @param outputStream Stream where result file will be stored.
      
      <param name="InputStream"/>
      <param name="InputStream"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.concatenate(Document[],Document)">
       
        <p>Concatenates documents.</p> @return True if concatenation is successful. @param src Array of source documents. @param dest Destination document.
      
      <param name="Document[]"/>
      <param name="Document"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.concatenate(String[],String)">
       
        <p>Concatenates files into one file.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); pfe.concatenate(new string[] { "src1.pdf", "src2.pdf" }, "dest.pdf");</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @return True if operation was succeeded. @param inputFiles Array of files to concatenate. @param outputFile Name of output file.
      
      <param name="String[]"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.concatenate(InputStream[],OutputStream)">
       
        <p>Concatenates files</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileEditor fileEditor = new PdfFileEditor(); InputStream stream1 = new FileInputStream("file1.pdf"); InputStream stream2 = new FileInputStream("file2.pdf"); OutputStream outstream = new FileOutputStream("outfile.pdf"); fileEditor.concatenate(new Stream[] { stream1, stream2 }, outstream);</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @return True if operation was succeeded. @param inputStream Array of streams to be concatenated. @param outputStream Stream where result file will be stored.
      
      <param name="InputStream[]"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.concatenate(String,String,String,String)">
       
        <p>Merges two Pdf documents into a new Pdf document with pages in alternate ways and fill the blank places with blank pages. e.g.: document1 has 5 pages: p1, p2, p3, p4, p5. document2 has 3 pages: p1', p2', p3'. Merging the two Pdf document will produce the result document with pages:p1, p1', p2, p2', p3, p3', p4, blankpage, p5, blankpage.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); pfe.concatenate("src1.pdf", "src2.pdf", "blank.pdf", "dest.pdf");</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @return True if operation was succeeded. @param firstInputFile First file. @param secInputFile Second file. @param blankPageFile PDF file with blank page. @param outputFile Result file.
      
      <param name="String"/>
      <param name="String"/>
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.concatenate(InputStream,InputStream,InputStream,OutputStream)">
       
        <p>Merges two Pdf documents into a new Pdf document with pages in alternate ways and fill the blank places with blank pages. e.g.: document1 has 5 pages: p1, p2, p3, p4, p5. document2 has 3 pages: p1', p2', p3'. Merging the two Pdf document will produce the result document with pages:p1, p1', p2, p2', p3, p3', p4, blankpage, p5, blankpage.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileEditor fileEditor = new PdfFileEditor(); InputStream stream1 = new FileInputStream("file1.pdf"); InputStream stream2 = new FileInputStream("file2.pdf"); InputStream blank = new FileInputStream("blank.pdf"); OutputStream outstream = new FileOutputStream("outfile.pdf"); fileEditor.concatenate(new Stream[] { stream1, stream2, blank }, outstream);</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @return True if operation was succeeded. @param firstInputStream The first Pdf Stream. @param secInputStream The second Pdf Stream. @param blankPageStream The Pdf Stream with blank page @param outputStream Output Pdf Stream.
      
      <param name="InputStream"/>
      <param name="InputStream"/>
      <param name="InputStream"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.append(InputStream,InputStream[],int,int,OutputStream)">
       
        <p>Appends pages, which are chosen from array of documents in portStreams. The result document includes firstInputFile and all portStreams documents pages in the range startPage to endPage.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileEditor fileEditor = new PdfFileEditor(); InputStream instream = new FileInputStream("input.pdf"); InputStream stream1 = new FileInputStream("file1.pdf"); InputStream stream2 = new FileInputStream("file2.pdf"); OutputStream outstream = new FileOutputStream("outfile.pdf"); fileEditor.append(instream, new Stream[] { stream1, stream2 }, 3, 5, outstream);</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @return True for success, or false. @param inputStream Input Pdf stream. @param portStreams Documents to copy pages from. @param startPage Page starts in portStreams documents. @param endPage Page ends in portStreams documents . @param outputStream Output Pdf stream.
      
      <param name="InputStream"/>
      <param name="InputStream[]"/>
      <param name="int"/>
      <param name="int"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.append(String,String[],int,int,String)">
       
        <p>Appends pages, which are chosen from portFiles documents. The result document includes firstInputFile and all portFiles documents pages in the range startPage to endPage.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileEditor fileEditor = new PdfFileEditor(); fileEditor.append("input.pdf", new string[] { "file1.pdf", "file2.pdf" }, 3, 5, "outfile.pdf");</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @return True if operation was succeeded. @param inputFile Input Pdf file. @param portFiles Documents to copy pages from. @param startPage Page starts in portFiles documents. @param endPage Page ends in portFiles documents . @param outputFile Output Pdf document.
      
      <param name="String"/>
      <param name="String[]"/>
      <param name="int"/>
      <param name="int"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.append(String,String,int,int,String)">
       
        <p>Appends pages, which are chosen from portFile within the range from startPage to endPage, in portFile at the end of firstInputFile.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileEditor fileEditor = new PdfFileEditor(); fileEditor.append("input.pdf", "file1.pdf", 3, 5, "outfile.pdf");</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @return True if operation was succeeded. @param inputFile Input Pdf file. @param portFile Pages from Pdf file. @param startPage Page starts in portFile. @param endPage Page ends in portFile. @param outputFile Output Pdf document.
      
      <param name="String"/>
      <param name="String"/>
      <param name="int"/>
      <param name="int"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.append(InputStream,InputStream,int,int,OutputStream)">
       
        <p>Appends pages,which are chosen from portStream within the range from startPage to endPage, in portStream at the end of firstInputStream.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileEditor fileEditor = new PdfFileEditor(); InputStream instream = new FileInputStream("input.pdf"); InputStream stream1 = new FileInputStream("file1.pdf"); OutputStream outstream = new FileOutputStream("outfile.pdf"); fileEditor.append(instream, stream1, 3, 5, outstream);</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @return True for success, or false. @param inputStream Input file Stream. @param portStream Pages from Pdf file Stream. @param startPage Page starts in portFile Stream. @param endPage Page ends in portFile Stream. @param outputStream Output Pdf file Stream.
      
      <param name="InputStream"/>
      <param name="InputStream"/>
      <param name="int"/>
      <param name="int"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.insert(String,int,String,int,int,String)">
       
        <p>Inserts pages from an other file into the Pdf file at a position.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); pfe.insert("file1.pdf", 1, "file2.pdf", 2, 6, "out.pdf");</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @return True for success, or false. @param inputFile Input Pdf file. @param insertLocation Position in input file. @param portFile The porting Pdf file. @param startPage Start position in portFile. @param endPage End position in portFile. @param outputFile Output Pdf file.
      
      <param name="String"/>
      <param name="int"/>
      <param name="String"/>
      <param name="int"/>
      <param name="int"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.insert(InputStream,int,InputStream,int,int,OutputStream)">
       
        <p>Inserts pages from an other file into the input Pdf file.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); InputStream sourceStream = new FileInputStream("file1.pdf"); InputStream insertedStream = new FileInputStream("file2.pdf"); OutputStream outStream = new FileOutputStream("out.pdf"); pfe.insert(sourceStream, 1, insertedStream, 2, 6, outStream);</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @return True for success, or false. @param inputStream Input Stream of Pdf file. @param insertLocation Insert position in input file. @param portStream Stream of Pdf file for pages. @param startPage From which page to start. @param endPage To which page to end. @param outputStream Output Stream.
      
      <param name="InputStream"/>
      <param name="int"/>
      <param name="InputStream"/>
      <param name="int"/>
      <param name="int"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.insert(String,int,String,int[],String)">
       
        <p>Inserts pages from an other file into the input Pdf file.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); pfe.insert("file1.pdf", 1, "out.pdf", 2, 6, "out.pdf");</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @return True for success, or false. @param inputFile Input Pdf file. @param insertLocation Insert position in input file. @param portFile Pages from the Pdf file. @param pageNumber The page number of the ported in portFile. @param outputFile Output Pdf file.
      
      <param name="String"/>
      <param name="int"/>
      <param name="String"/>
      <param name="int[]"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.insert(InputStream,int,InputStream,int[],OutputStream)">
       
        <p>Inserts pages from an other file into the input Pdf file.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); InputStream sourceStream = new FileInputStream("file1.pdf"); InputStream insertedStream = new FileInputStream("file2.pdf"); OutputStream outStream = new FileOutputStream("out.pdf"); pfe.insert(sourceStream, 1, insertedStream, new int[] { 3, 4, 5 }, outStream);</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @return True if operation was succeeded. @param inputStream Input Stream of Pdf file. @param insertLocation Insert position in input file. @param portStream Stream of Pdf file for pages. @param pageNumber The page number of the ported in portFile. @param outputStream Output Stream.
      
      <param name="InputStream"/>
      <param name="int"/>
      <param name="InputStream"/>
      <param name="int[]"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.delete(String,int[],String)">
       
        <p>Deletes pages specified by number array from input file, saves as a new Pdf file.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); pfe.delete("input.pdf", new int[] { 2, 3 }, "out.pdf");</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @return True if operation was succeeded. @param inputFile Input file path. @param pageNumber Index of page out of the input file. @param outputFile Output file path.
      
      <param name="String"/>
      <param name="int[]"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.delete(InputStream,int[],OutputStream)">
       
        <p>Deletes pages specified by number array from input file, saves as a new Pdf file.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); InputStream intputStream = new FileInputStream("input.pdf"); OutputStream outputStream = new FileOutputStream("output.pdf"); pfe.Delete(inputStream, new int[] { 2, 3 }, outputStream);</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @return True for success, or false. @param inputStream Input file Stream. @param pageNumber Index of page out of the input file. @param outputStream Output file stream.
      
      <param name="InputStream"/>
      <param name="int[]"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.extract(String,int,int,String)">
       
        <p>Extracts pages from input file,saves as a new Pdf file.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); pfe.extract("input.pdf", 3, 7, "output.pdf");</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @return True for success, or false. @param inputFile Input Pdf file path. @param startPage Start page number. @param endPage End page number. @param outputFile Output Pdf file path.
      
      <param name="String"/>
      <param name="int"/>
      <param name="int"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.extract(String,int[],String)">
       
        <p>Extracts pages specified by number array, saves as a new PDF file.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); pfe.extract("input.pdf", new int[] { 3, 5, 7 }, "output.pdf");</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @return True if operation was succeeded. @param inputFile Input file path. @param pageNumber Index of page out of the input file. @param outputFile Output file path.
      
      <param name="String"/>
      <param name="int[]"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.extract(InputStream,int,int,OutputStream)">
       
        <p>Extracts pages from input file,saves as a new Pdf file.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); InputStream sourceStream = new FileInputStream("file1.pdf"); OutputStream outStream = new FileOutputStream("out.pdf"); pfe.extract(sourceStream, 1, 3, 6, outStream);</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @return True for success, or false. @param inputStream Input file Stream. @param startPage Start page number. @param endPage End page number. @param outputStream Output Pdf file Stream.
      
      <param name="InputStream"/>
      <param name="int"/>
      <param name="int"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.extract(InputStream,int[],OutputStream)">
       
        <p>Extracts pages specified by number array, saves as a new Pdf file.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); InputStream sourceStream = new FileInputStream("file1.pdf"); OutputStream outStream = new FileOutputStream("out.pdf"); pfe.extract(sourceStream, new int[] { 3, 5, 8 }, outStream);</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @return True for success, or false. @param inputStream Input file Stream. @param pageNumber Index of page out of the input file. @param outputStream Output file stream.
      
      <param name="InputStream"/>
      <param name="int[]"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.splitFromFirst(String,int,String)">
       
        <p>Splits Pdf file from first page to specified location,and saves the front part as a new file.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); pfe.splitFromFirst("input.pdf", 5, "out.pdf");</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @return True for success, or false. @param inputFile Source Pdf file. @param location The splitting point. @param outputFile Output Pdf file.
      
      <param name="String"/>
      <param name="int"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.splitFromFirst(InputStream,int,OutputStream)">
       
        <p>Splits from start to specified location,and saves the front part in output Stream.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); InputStream sourceStream = new FileInputStream("file1.pdf"); OutputStream outStream = new FileOutputStream("out.pdf"); pfe.splitFromFirst(sourceStream, 5, outStream);</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @return True for success, or false. @param inputStream Source Pdf file Stream. @param location The splitting point. @param outputStream Output file Stream.
        <p> 
          <hr>The streams are NOT closed after this operation.</hr> 
        </p> 
      
      <param name="InputStream"/>
      <param name="int"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.splitToEnd(String,int,String)">
       
        <p>Splits from location, and saves the rear part as a new file.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); pfe.splitToEnd("input.pdf", 5, "out.pdf");</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @return True for success, or false. @param inputFile Source Pdf file. @param location The splitting position. @param outputFile Output Pdf file path.
      
      <param name="String"/>
      <param name="int"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.splitToEnd(InputStream,int,OutputStream)">
       
        <p>Splits from specified location, and saves the rear part as a new file Stream.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); InputStream sourceStream = new FileInputStream("file1.pdf"); OutputStream outStream = new FileOutputStream("out.pdf"); pfe.splitToEnd(sourceStream, 5, outStream);</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @return True for success, or false. @param inputStream Source Pdf file Stream. @param location The splitting position. @param outputStream Output Pdf file Stream.
        <p> 
          <hr>The streams are NOT closed after this operation unless CloseConcatedStreams is specified.</hr> 
        </p> 
      
      <param name="InputStream"/>
      <param name="int"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.makeBooklet(String,String)">
       
        <p>Makes booklet from the input file to output file.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); pfe.makeBooklet("input.pdf", "output.pdf");</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @return boolean - True for success, or false. @param inputFile Input pdf file path and name. @param outputFile Output pdf file path and name.
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.makeBooklet(InputStream,OutputStream)">
       
        <p>Makes booklet from the InputStream to outputStream.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); InputStream inputStream = new FileInputStream("input.pdf"); OutputStream outputStream = new FileOutputStream("output.pdf"); pfe.makeBooklet(inputStream, outputStream);</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @return True if operation was succeeded. @param inputStream Input pdf stream. @param outputStream output pdf stream.
      
      <param name="InputStream"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.makeBooklet(String,String,PageSize)">
       
        <p>Makes booklet from the inputFile to outputFile.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="JAva">PdfFileEditor pfe = new PdfFileEditor(); pfe.makeBooklet("input.pdf", "output.pdf", PageSize.A4);</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @return True if operation is succeeded. @param inputFile Input pdf file path and name. @param outputFile Output pdf file path and name. @param pageSize The page size of the output pdf file.
      
      <param name="String"/>
      <param name="String"/>
      <param name="PageSize"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.makeBooklet(InputStream,OutputStream,PageSize)">
       
        <p>Makes booklet from the input stream and save result into output stream.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); InputStream inputStream = new FileInputStream("input.pdf"); OutputStream outputStream = new FileOutputStream("output.pdf"); pfe.makeBooklet(inputStream, outputStream, PageSize.A4);</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @return True if operation was succeeded. @param inputStream Input PDF stream. @param outputStream output pdf stream. @param pageSize The page size of the output pdf file.
      
      <param name="InputStream"/>
      <param name="OutputStream"/>
      <param name="PageSize"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.makeBooklet(String,String,int[],int[])">
       
        <p>Makes customized booklet from the firstInputFile to outputFile.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); pfe.makeBooklet("input.pdf", "output.pdf", new int[] { 2, 4, 6 }, new int[] 1, 3, 5, 7 });</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @return boolean - True for success, or false. @param inputFile The input file. @param outputFile Output pdf file path and name. @param leftPages The left pages of the booklet. @param rightPages The right pages of the booklet.
      
      <param name="String"/>
      <param name="String"/>
      <param name="int[]"/>
      <param name="int[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.makeBooklet(InputStream,OutputStream,int[],int[])">
       
        <p>Makes customized booklet from the firstInputStream to outputStream.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="JAva">PdfFileEditor pfe = new PdfFileEditor(); InputStream inputStream = new FileInputStream("input.pdf"); OutputStream outputStream = new FileOutputStream("output.pdf"); pfe.makeBooklet(inputStream, outputStream, new int[] { 2, 4, 6 }, new int[] 1, 3, 5, 7 });</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @return boolean - True for success, or false. @param inputStream The input stream. @param outputStream output pdf stream. @param leftPages The left pages. @param rightPages The right pages.
      
      <param name="InputStream"/>
      <param name="OutputStream"/>
      <param name="int[]"/>
      <param name="int[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.makeBooklet(String,String,PageSize,int[],int[])">
       
        <p>Makes customized booklet from the firstInputFile to outputFile.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); pfe.makeBooklet("input.pdf", "output.pdf", PageSize.A4, new int[] { 2, 4, 6 }, new int[] 1, 3, 5, 7 });</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @return boolean - True for success, or false. @param inputFile The input file. @param outputFile Output pdf file path and name. @param pageSize The page size of the output pdf file. @param leftPages The left pages. @param rightPages The right pages.
      
      <param name="String"/>
      <param name="String"/>
      <param name="PageSize"/>
      <param name="int[]"/>
      <param name="int[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.makeBooklet(InputStream,OutputStream,PageSize,int[],int[])">
       
        <p>Makes booklet from the firstInputStream to outputStream.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); InputStream inputStream = new FileInputStream("input.pdf"); OutputStream outputStream = new FileOutputStream("output.pdf"); pfe.makeBooklet(inputStream, outputStream, PageSize.A4, new int[] { 2, 4, 6 }, new int[] 1, 3, 5, 7 });</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @return boolean - True for success, or false. @param inputStream The input stream. @param outputStream output pdf stream. @param pageSize The page size of the output pdf file. @param leftPages The left pages. @param rightPages The right pages.
      
      <param name="InputStream"/>
      <param name="OutputStream"/>
      <param name="PageSize"/>
      <param name="int[]"/>
      <param name="int[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.makeNUp(String,String,int,int)">
       
        <p>Makes N-Up document from the firstInputFile to outputFile.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); pfe.makeNUp("input.pdf", "output.pdf", 3, 3);</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @return boolean - True for success, or false. @param inputFile Input pdf file path and name. @param outputFile Output pdf file path and name. @param x Number of columns. @param y Number of rows.
      
      <param name="String"/>
      <param name="String"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.makeNUp(InputStream,OutputStream,int,int)">
       
        <p>Makes N-Up document from the input stream and saves result into output stream.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); InputStream inputStream = new FileInputStream("input.pdf"); OutputStream outputStream = new FileInputStream("output.pdf"); pfe.makeNUp(inputStream, outputStream, 3, 3);</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @return boolean - True for success, or false. @param inputStream Input pdf stream. @param outputStream Output pdf stream. @param x Number of columns. @param y Number of rows.
      
      <param name="InputStream"/>
      <param name="OutputStream"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.makeNUp(InputStream,OutputStream,int,int,PageSize)">
       
        <p>Makes N-Up document from the first input stream to output stream.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); InputStream inputStream = new FileInputStream("input.pdf"); OutputStream outputStream = new FileOutputStream("output.pdf"); pfe.makeNUp(inputStream, outputStream, 3, 3, PageSize.A4);</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @return True if operation was succeeded. @param inputStream Input pdf stream. @param outputStream Output pdf stream. @param x Number of columns. @param y Number of rows. @param pageSize The page size of the output pdf file.
      
      <param name="InputStream"/>
      <param name="OutputStream"/>
      <param name="int"/>
      <param name="int"/>
      <param name="PageSize"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.makeNUp(String,String,String)">
       
        <p>Makes N-Up document from the two input PDF files to outputFile. Each page of outputFile will contain two pages, one page is from the first input file and another is from the second input file. The two pages are piled up horizontally.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); pfe.makeNUp("input1.pdf", "input2.pdf", "output.pdf");</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @return boolean - True for success, or false. @param firstInputFile first input file. @param secondInputFile second input file. @param outputFile Output pdf file path and name.
      
      <param name="String"/>
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.makeNUp(InputStream,InputStream,OutputStream)">
       
        <p>Makes N-Up document from the two input PDF streams to outputStream.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); InputStream input1 = new FileInputStream("input1.pdf"); InputStream input2 = new FileInputStream("input2.pdf"); OutputStream output = new FileOutputStream("output.pdf"); pfe.makeNUp(input1, input2, output);</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @return boolean - True for success, or false. @param firstInputStream first input stream. @param secondInputStream second input stream. @param outputStream Output pdf stream.
      
      <param name="InputStream"/>
      <param name="InputStream"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.makeNUp(String[],String,boolean)">
       
        <p>Makes N-Up document from the multi input PDF files to outputFile. Each page of outputFile will contain multi pages, which are combination with pages in the input files of the same page number. The multi pages piled up horizontally if isSidewise is true and piled up vertically if isSidewise is false.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); pfe.makeNUp(new string[] { "input1.pdf", "input2.pdf", "input3.pdf" }, "output.pdf", false);</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @return boolean - True for success, or false. @param inputFiles Input Pdf files. @param outputFile Output pdf file path and name. @param isSidewise Piled up way, true for horizontally and flase for vertically.
      
      <param name="String[]"/>
      <param name="String"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.makeNUp(InputStream[],OutputStream,boolean)">
       
        <p>Makes N-Up document from the multi input PDF streams to outputStream. Each page of outputStream will contain multi pages, which are combination with pages in the input streams of the same page number. The multi-pages piled up horizontally if isSidewise is true and piled up vertically if isSidewise is false.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); InputStream stream1 = new FileInputStream("input1.pdf"); InputStream stream2 = new FileInputStream("input2.pdf"); InputStream stream3 = new FileInputStream("input3.pdf"); OutputStream output = new FileOutputStream("output.pdf"); pfe.makeNUp(new Stream[] { stream1, stream2, stream3 }, output, false);</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @return boolean - True for success, or false. @param inputStreams Input Pdf streams. @param outputStream Output pdf stream. @param isSidewise Piled up way, true for horizontally and flase for vertically
      
      <param name="InputStream[]"/>
      <param name="OutputStream"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.makeNUp(String,String,int,int,PageSize)">
       
        <p>Makes N-Up document from the input file to outputFile.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); pfe.makeNUp("input.pdf", "output.pdf", 3, 3, PageSize.A4);</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @return boolean - True for success, or false. @param inputFile Input pdf file path and name. @param outputFile Output pdf file path and name. @param x Number of columns. @param y Number of rows. @param pageSize The page size of the output pdf file.
      
      <param name="String"/>
      <param name="String"/>
      <param name="int"/>
      <param name="int"/>
      <param name="PageSize"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.splitToPages(String)">
       
        <p>Splits the PDF file into single-page documents.</p> @return Output PDF streams, each stream buffers a single-page PDF document. @param inputFile Input PDF file name.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.splitToPages(String,String)">
       
        <p>Split the Pdf file into single-page documents and saves it into specified path. Path is specifield by field name temaplate.</p> @param inputFile Input file name. @param fileNameTemplate Template of resultant file name. Must contain %NUM% which is replaced with page number. For example, if c:/dir/page%NUM%.pdf is specified, resultant files will have the following names: c:/dir/page1.pdf, c:/dir/page2.pdf etc.
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.splitToPages(InputStream,String)">
       
        <p>Split the Pdf file into single-page documents and saves it into specified path. Path is specifield by field name temaplate.</p> @param inputStream Stream of the soruce document. @param fileNameTemplate Template of resultant file name. Must contain %NUM% which is replaced with page number. For example, if c:/dir/page%NUM%.pdf is specified, resultant files will have the following names: c:/dir/page1.pdf, c:/dir/page2.pdf etc.
      
      <param name="InputStream"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.splitToPages(InputStream)">
       
        <p>Splits the Pdf file into single-page documents.</p> @param inputStream Input Pdf stream.
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.splitToBulks(String,int[][])">
       
        <p>Splits the Pdf file into several documents.The documents can be single-page or multi-pages.</p> @return Output PDF streams, each stream buffers a PDF document. @param inputFile Input PDF file. @param numberOfPage Array which contains array of double elements, which is start and end pages of document.
      
      <param name="String"/>
      <param name="int[][]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.splitToBulks(InputStream,int[][])">
       
        <p>Splits the Pdf file into several documents.The documents can be single-page or multi-pages.</p> @return Output PDF streams, each stream buffers a PDF document. @param inputStream Input PDF stream. @param numberOfPage The start page and the end page of each document.
      
      <param name="InputStream"/>
      <param name="int[][]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.getLastException">
       
        <p>Gets last occured exception. May be used to check the reason of failure when AllowconcatenateExceptions = false.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); pfe.setAllowConcatenateExceptions (false); if (!pfe.concatenate("", "", "")) { System.out.println(""); if (pfe.getLastException() != null) { System.out.println(pfe.getLastException().getMessage()); if (pfe.getLastException().getCause() != null) System.out.println(pfe.getLastException().getCause().getMessage()); } }</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.resizeContents(InputStream,OutputStream,int[],double,double)">
       
        <p>Resizes contents of document pages. Shrinks contents of page and adds margins. New size of contents is specified in default space units.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileEditor fileEditor = new PdfFileEditor(); InputStream src = new FileInputStream("input.pdf"); OutputStream dest = new FileOutputStream("output.pdf"); fileEditor.resizeContents(src, dest, // resize all pages of document null, // new contents width = 200 200, // new contents height = 300 300); // rest area of page will be empty</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @return True if resize was successful. @param source Stream which contains source document. @param destination Stream where resultant document will be saved. @param pages Array of page indexes. If null then all document pages will be processed. @param newWidth New width of page contents in default space units. @param newHeight New height of page contents in default space units.
      
      <param name="InputStream"/>
      <param name="OutputStream"/>
      <param name="int[]"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.resizeContentsPct(InputStream,OutputStream,int[],double,double)">
       
        <p>Resizes contents of document pages. Shrinks contents of page and adds margins. New contents size is specified in percents.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileEditor fileEditor = new PdfFileEditor(); InputStream src = new FileInputStream("input.pdf"); OutputStream dest = new FileOutputStream("output.pdf"); fileEditor.resizePct(src, dest, // resize all pages of document null, // new contents width = 60% of initial size 60, // new contents height = 60% of initial size 60); // Rest area of page will be empty (page margins). Size of left and right // margins is (100% - 60%) / 2 = 20% // The same for top and bottom margins.</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @return @param source Stream which contains source document. @param destination Stream where resultant document will be saved. @param pages Array of page indexes. If null then all document pages will be processed. @param newWidth New width of page contents in percents. @param newHeight New height of page contents in percetns.
      
      <param name="InputStream"/>
      <param name="OutputStream"/>
      <param name="int[]"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.addMargins(InputStream,OutputStream,int[],double,double,double,double)">
       
        <p>Resizes page contents and add specifed margins. Margins are specified in default space units.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileEditor fileEditor = new PdfFileEditor(); InputStream src = new FileInputStream("input.pdf"); OutputStream dest = new FileOutputStream("output.pdf"); fileEditor.addMargins(src, dest, // process pages 1, 2, 3 new int[] { 1, 2, 3 }, // left margin is 10 units 10, // right margin is 5 units 5, // top margin is 5 units 5, // bottom margin is 5 units 5); dest.Close();</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @return @param source Stream which contains source document. @param destination Stream where resultant document will be saved. @param pages Array of page indexes. If null then all document pages will be processed. @param leftMargin Left margin. @param rightMargin Right margin. @param topMargin Top margin. @param bottomMargin Bottom margin.
      
      <param name="InputStream"/>
      <param name="OutputStream"/>
      <param name="int[]"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.addMarginsPct(InputStream,OutputStream,int[],double,double,double,double)">
       
        <p>Resizes page contents and add specified margins. Margins are specified in percents of intitial page size.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileEditor fileEditor = new PdfFileEditor(); InputStream src = new FileInputStream("input.pdf"); OutputStream dest = new FileOutputStream("output.pdf"); fileEditor.addMarginsPct(src, dest, // process pages 1, 2, 3 new int[] { 1, 2, 3 }, // left margin is 15% of page width 15, // right margin is 10% of page width 10, // top margin is 20% of page width 20, // bottom margin is 5% of page width 5); dest.close();</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @return @param source Stream which contains source document. @param destination Stream where resultant document will be saved. @param pages Array of page indexes. If null then all document pages will be processed. @param leftMargin Left margin in percents of initial page size. @param rightMargin Right margin in percents of initial page size. @param topMargin Top margin in percents of initial page size. @param bottomMargin Bottom margin in percents of initial page size.
      
      <param name="InputStream"/>
      <param name="OutputStream"/>
      <param name="int[]"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.resizeContents(String,String,int[],double,double)">
       
        <p>Resizes contents of document pages. Shrinks contents of page and adds margins. New size of contents is specified in default space units.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileEditor fileEditor = new PdfFileEditor(); fileEditor.resizeContents("input.pdf", "output.pdf", // resize all pages of document null, // new contents width = 200 200, // new contents height = 300 300); // rest area of page will be empty</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @return True if resize was successful. @param source Path to source document. @param destination Path where resultant document will be saved. @param pages Array of page indexes. If null then all document pages will be processed. @param newWidth New width of page contents in default space units. @param newHeight New height of page contents in default space units.
      
      <param name="String"/>
      <param name="String"/>
      <param name="int[]"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.resizeContentsPct(String,String,int[],double,double)">
       
        <p>Resizes contents of document pages. Shrinks contents of page and adds margins. New contents size is specified in percents.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileEditor fileEditor = new PdfFileEditor(); fileEditor.resizeContentsPct("input.pdf", "output.pdf", // resize all pages of document null, // new contents width = 60% of initial size 60, // new contents height = 60% of initial size 60); // Rest area of page will be empty (page margins). Size of left and right // margins is (100% - 60%) / 2 = 20% // The same for top and bottom margins.</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @return true if resize was successful. @param source Path to source document. @param destination Path where resultant document will be saved. @param pages Array of page indexes. If null then all document pages will be processed. @param newWidth New width of page contents in percents. @param newHeight New height of page contents in percetns.
      
      <param name="String"/>
      <param name="String"/>
      <param name="int[]"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.addMargins(String,String,int[],double,double,double,double)">
       
        <p>Resizes page contents and add specifed margins. Margins are specified in default space units.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileEditor fileEditor = new PdfFileEditor(); fileEditor.addMargins("input.pdf", "output.pdf", // process pages 1, 2, 3 new int[] { 1, 2, 3 }, // left margin is 10 units 10, // right margin is 5 units 5, // top margin is 5 units 5, // bottom margin is 5 units 5);</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @return true if resize was successful. @param source Path to source document. @param destination Path where resultant document will be saved. @param pages Array of page indexes. If null then all document pages will be processed. @param leftMargin Left margin. @param rightMargin Right margin. @param topMargin Top margin. @param bottomMargin Bottom margin.
      
      <param name="String"/>
      <param name="String"/>
      <param name="int[]"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.addMarginsPct(String,String,int[],double,double,double,double)">
       
        <p>Resizes page contents and add specified margins. Margins are specified in percents of intitial page size.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileEditor fileEditor = new PdfFileEditor(); fileEditor.addMarginsPct("input.pdf", "output.pdf", // process pages 1, 2, 3 new int[] { 1, 2, 3 }, // left margin is 15% of page width 15, // right margin is 10% of page width 10, // top margin is 20% of page width 20, // bottom margin is 5% of page width 5);</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @return true if resize was successful @param source Path to source document. @param destination Path where resultant document will be saved. @param pages Array of page indexes. If null then all document pages will be processed. @param leftMargin Left margin in percents of initial page size. @param rightMargin Right margin in percents of initial page size. @param topMargin Top margin in percents of initial page size. @param bottomMargin Bottom margin in percents of initial page size.
      
      <param name="String"/>
      <param name="String"/>
      <param name="int[]"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.getContentDisposition">
       
        <p>Resizes pages of document. Blank margins are added around of shrinked page.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileEditor fileEditor = new PdfFileEditor(); Document src = new Document("input.pdf"); Document dest = new Document(); PdfFileEditor.ContentsResizeParameters parameters = new PdfFileEditor.ContentsResizeParameters( // left margin = 10% of page width PdfFileEditor.ContentsResizeValue.percents(10), // new contents width calculated automatically as width - left margin - // right margin (100% - 10% - 10% = 80%) null, // right margin is 10% of page PdfFileEditor.ContentsResizeValue.percents(10), // top margin = 10% of height PdfFileEditor.ContentsResizeValue.percents(10), // new contents height is calculated automatically (similar to width) null, // bottom margin is 10% PdfFileEditor.ContentsResizeValue.percents(10)); fileEditor.resizeContents(src, dest, new int[] { 1, 2, 3 }, parameters); dest.save("output.pdf");</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @return true if resizing was successful. @param source Source document. @param dest Destinalion document. @param pages List of page indexes. @param parameters Resize parameters.
      
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.setContentDisposition(int)">
       
        <p>Sets how content will be stored when result of operation is stored into HttpServletResponse object. Possible value: inline / attachment. Default: inline.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.getSaveOptions">
       
        <p>Gets or sets save options when result is stored as HttpServletResponse. Default value: PdfSaveOptions.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.setSaveOptions(SaveOptions)">
       
        <p>Sets save options when result is stored as HttpServletResponse. Default value: PdfSaveOptions.</p> 
      
      <param name="SaveOptions"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.getAttachmentName">
       
        <p>Gets name of attachment when result of operation is stored into HttpServletResponse objects as attachment.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileEditor.setAttachmentName(String)">
       
        <p>Sets name of attachment when result of operation is stored into HttpServletResponse objects as attachment.</p> 
      
      <param name="String"/>
    </member>
    <member name="F:com.aspose.pdf.facades.IPdfFileEditor.E_EMPTY_PAGE_RANGE"/>
    <member name="F:com.aspose.pdf.facades.IPdfFileEditor.E_SMALL_PAGE_RANGE"/>
    <member name="F:com.aspose.pdf.facades.IPdfFileEditor.E_WRONG_PAGE_RANGE"/>
    <member name="T:com.aspose.pdf.facades.IPdfFileStamp">
       
        <p>interface for adding stamps (watermark or background) to PDF files.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileStamp.getKeepSecurity">
       
        <p>Keeps security if true. (This feature will be implemented in next versions).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileStamp.setKeepSecurity(boolean)">
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileStamp.getInputFile">
       
        <p>Gets name and path of input file.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileStamp.setInputFile(String)">
       
        <p>Sets name and path of input file.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileStamp.getInputStream">
       
        <p>Gets input stream.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileStamp.setInputStream(InputStream)">
       
        <p>Sets input stream.</p> 
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileStamp.getOutputFile">
       
        <p>Gets name and path of output file.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileStamp.setOutputFile(String)">
       
        <p>Sets name and path of output file.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileStamp.getOutputStream">
       
        <p>Gets output stream.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileStamp.setOutputStream(OutputStream)">
       
        <p>Sets or sets output stream.</p> 
      
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileStamp.getPageNumberRotation">
       
        <p>Gets rotation of page number. Rotation is in degrees. Default is 0.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileStamp.setPageNumberRotation(float)">
       
        <p>Sets rotation of page number. Rotation is in degrees. Default is 0.</p> 
      
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileStamp.setConvertTo(int)">
       
        <p>Sets PDF file format. Result file will be saved in specified file format. If this property is not specified then file will be save in default PDF format without conversion.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileStamp.getPageHeight">
       
        <p>Gets height of first page in souorce file.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre code="Java">PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); System.out.println("Height = " + fileStamp.getPageHeight()); fileStamp.close();</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileStamp.getPageWidth">
       
        <p>Gets width of first page in input file.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); System.out.println("Width = " + fileStamp.getPageWidth()); fileStamp.close();</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileStamp.getStartingNumber">
      Gets or sets starting number for first page in input file. Next pages will be numbered starting from this value.
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileStamp.setStartingNumber(int)">
       
        <p>Sets starting number for first page in input file. Next pages will be numbered starting from this value. For example if StartingNumber is set to 100, document pages will have numbers 100, 101, 102...</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); fileStamp.setStartingNumber(100); fileStamp.addPageNumber("Page #"); fileStamp.close();</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileStamp.close">
       
        <p>Closes opened files and saves changes. Warning. If input or output streams are specified they are not closed by Close() method.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileStamp stamp = new PdfFileStamp("input.pdf", "output.pdf"); // do some work... stamp.close();</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileStamp.dispose"/>
    <member name="M:com.aspose.pdf.facades.IPdfFileStamp.addStamp(Stamp)">
       
        <p>Adds stamp to the file.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre code="Java">PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); Stamp stamp = new com.aspose.pdf.facades.Stamp(); stamp.setOrigin(140, 400); stamp.setImageSize(50, 50); stamp.setOpacity(0.8f); stamp.isBackground(true); stamp.bindImage("image.jpg"); fileStamp.addStamp(stamp); fileStamp.close();</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @param stamp Stamp object which.
      
      <param name="Stamp"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileStamp.addPageNumber(String)">
       
        <p>Add page number to file. Page number text may contain # sign which will be replaced with number of the page. Page number is placed in the bottom of the page centered horizontally.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); fileStamp.addPageNumber("Page #"); fileStamp.close();</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @param formatString Text of page number
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileStamp.addPageNumber(FormattedText)">
       
        <p>Adds page number to the page. Page number may contain # sign which will be replaced with page number. Page number is placed in the bottom of the page centered horizontally.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); fileStamp.addPageNumber(new FormattedText("Page #")); fileStamp.close();</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @param formattedText Format string for page number representes as FormattedText.
      
      <param name="FormattedText"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileStamp.addPageNumber(String,int,float,float,float,float)">
       
        <p>Adds page number to the pages of document.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre code="Java">PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); fileStamp.addPageNumber("Page #", PdfFileStamp.PosBottomLeft, 100, 100, 200, 200); fileStamp.close();</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @param formatString Format string for page number. @param position Position where page number will be placed on the page. 0-bottom middle, 1-bottom right, 2-upper right, 3 - sides right, 4 - upper middle,5 - bottom left,6 - sides left,7 - upper left. You can use the following constants: PosBottomMiddle = 0, PosBottomRight = 1, PosUpperRight = 2, PosSidesRight = 3, PosUpperMiddle, PosBottomLeft = 5, PosSidesLeft, PosUpperLeft @param leftMargin Margin on the left edge of the page. @param rightMargin Margin on the right edge of the page. @param topMargin Margin on the top edge of the page. @param bottomMargin Margin on the bottom edge of the page.
      
      <param name="String"/>
      <param name="int"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileStamp.addPageNumber(String,float,float)">
       
        <p>Adds page number at the specified position on the page.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); fileStamp.addPageNumber(new FormattedText("Page #"), 123, 357); fileStamp.close();</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @param formatString Format string. Format string can contain # sign which will be replaced with page number. @param x X coordinate of page number. @param y Y coordinate of page number.
      
      <param name="String"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileStamp.addPageNumber(FormattedText,int,float,float,float,float)">
       
        <p>Adds page number to the pages of document.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); fileStamp.addPageNumber(new FormattedText("Page #"), PdfFileStamp.PosBottomLeft, 100, 100, 200, 200); fileStamp.close();</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @param formattedText FormattedText object which represents page number format and properties iof the text. @param position Position where page number will be placed on the page. 0-bottom middle, 1-bottom right, 2-upper right, 3 - sides right, 4 - upper middle,5 - bottom left,6 - sides left,7 - upper left. You can use the following constants: PosBottomMiddle = 0, PosBottomRight = 1, PosUpperRight = 2, PosSidesRight = 3, PosUpperMiddle, PosBottomLeft = 5, PosSidesLeft, PosUpperLeft @param leftMargin Margin on the left edge of the page. @param rightMargin Margin on the right edge of the page. @param topMargin Margin on the top edge of the page. @param bottomMargin Margin on the bottom edge of the page.
      
      <param name="FormattedText"/>
      <param name="int"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileStamp.addPageNumber(FormattedText,float,float)">
       
        <p>Adds page number at the specified position on the page.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); fileStamp.addPageNumber(new FormattedText("Page #"), 123, 357); fileStamp.close();</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @param formattedText Formatted text which represents page number format and properties of the text. Format string can contain # sign which will be replaced with page number. @param x X coordinate of page number. @param y Y coordinate of page number.
      
      <param name="FormattedText"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileStamp.addHeader(FormattedText,float)">
       
        <p>Adds header to the page.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); fileStamp.addHeader(new FormattedText("Head of the page"), 50); fileStamp.close();</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @param formattedText Text for header and properties of the text. @param topMargin Margin on the top of page.
      
      <param name="FormattedText"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileStamp.addHeader(FormattedText,float,float,float)">
       
        <p>Adds header to the pages of file.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileStamp stamp = new PdfFileStamp("input.pdf", "output.pdf"); stamp.addHeader(new FormattedText("Head of the page"), 10, 50, 50);</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @param formattedText Formatted text object which contains page text and its properties. @param topMargin Margin on the top of the page. @param leftMargin Margin on the left of the page. @param rightMargin Margin on the right of the page.
      
      <param name="FormattedText"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileStamp.addHeader(String,float)">
       
        <p>Adds image as header to the pages of the file.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", output.pdf"); fileStamp.addHeader("image.jpg", 50); fileStamp.close();</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @param imageFile Path to the image file. @param topMargin Margin at top of the page.
      
      <param name="String"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileStamp.addHeader(String,float,float,float)">
       
        <p>Adds image as header on the pages.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", output.pdf"); fileStamp.addHeader("image.jpg", 50, 100, 100); fileStamp.close();</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @param imageFile Path to the image file. @param topMargin Margin at top of the page. @param leftMargin Margin at left side of the page. @param rightMargin Margin at right side of the page.
      
      <param name="String"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileStamp.addHeader(InputStream,float)">
       
        <p>Adds image as header on the pages.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", output.pdf"); fileStamp.addHeader(new FileInputStream("image.jpg"), 50); fileStamp.close();</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @param imageStream Stream of the image. @param topMargin Margin at top of the page.
      
      <param name="InputStream"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileStamp.addHeader(InputStream,float,float,float)">
       
        <p>Adds image at the top of the page.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", output.pdf"); fileStamp.addHeader(new FileInputStream("image.jpg"), 50, 100, 100); fileStamp.close();</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @param inputStream Stream which contains image data. @param topMargin Margin at top of the page. @param leftMargin Margin at left side of the page. @param rightMargin Margin at right side of the page.
      
      <param name="InputStream"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileStamp.addFooter(FormattedText,float)">
       
        <p>Adds footer to the pages of the document.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileStamp stamp = new PdfFileStamp("input.pdf", "output.pdf"); stamp.addFooter(new FormattedText("Foot of the page"), 10);</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @param formattedText FormattedText object which contains text of the footer and text properties. @param bottomMargin Margin at the top of page.
      
      <param name="FormattedText"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileStamp.addFooter(FormattedText,float,float,float)">
       
        <p>Adds footer to the pages of the document.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileStamp stamp = new PdfFileStamp("input.pdf", "output.pdf"); stamp.addFooter(new FormattedText("Foot of the page"), 10, 50, 50);</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @param formattedText FormattedText object which contains footer text and text properties. @param bottomMargin Margin at the bottom of the page. @param leftMargin Margin at the left side of the page. @param rightMargin Margin at the right side of the page.
      
      <param name="FormattedText"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileStamp.addFooter(String,float)">
       
        <p>Adds image as footer to the pages of the document.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", output.pdf"); fileStamp.addFooter("image.jpg", 50); fileStamp.close();</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @param imageFile Image file name and path. @param bottomMargin Margin at the bottom of the page.
      
      <param name="String"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileStamp.addFooter(String,float,float,float)">
       
        <p>Adds image as footer of the pages.</p> @param imageFile Iamge file name and path. @param bottomMargin Margin at the bottom of the page. @param leftMargin Margin at the left side of the page. @param rightMargin Margin at the right side of the page.
      
      <param name="String"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileStamp.addFooter(InputStream,float)">
       
        <p>Adds image as footer of the page.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", output.pdf"); fileStamp.addFooter(new FileInputStream("image.jpg"), 50); fileStamp.close();</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @param imageStream Stream contains image data. @param bottomMargin Margin at the bottom of the page.
      
      <param name="InputStream"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileStamp.addFooter(InputStream,float,float,float)">
       
        <p>Adds image as footer of the page.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", output.pdf"); fileStamp.addFooter(new FileInputStream("image.jpg"), 50, 50, 50); fileStamp.close();</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @param imageStream Stream contains image data. @param bottomMargin Margin at the bottom of the page. @param leftMargin Margin at the left side of the page. @param rightMargin Margin at the right side of the page.
      
      <param name="InputStream"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileStamp.addPageNumber(String,int)">
       
        <p>Adds page number to the pages.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="JAva">PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); fileStamp.addPageNumber("Page #", PdfFileStamp.PosUpperRight); fileStamp.close();</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @param formatString Format of the page number. This text may contain # which will be replaced with page number. @param position Position where page number will be placed on the page. 0-bottom middle, 1-bottom right, 2-upper right, 3 - sides right, 4 - upper middle,5 - bottom left,6 - sides left,7 - upper left. You can use the following constants: PosBottomMiddle = 0, PosBottomRight = 1, PosUpperRight = 2, PosSidesRight = 3, PosUpperMiddle, PosBottomLeft = 5, PosSidesLeft, PosUpperLeft
      
      <param name="String"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileStamp.addPageNumber(FormattedText,int)">
       
        <p>Adds page number to the pages.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre lang="Java">PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); fileStamp.addPageNumber("Page #", PdfFileStamp.PosUpperRight); fileStamp.close();</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @param formattedText FormattedText object which contains format of the page number and text properties. This text may contain # which will be replaced with page number. @param position Position where page number will be placed on the page. 0-bottom middle, 1-bottom right, 2-upper right, 3 - sides right, 4 - upper middle,5 - bottom left,6 - sides left,7 - upper left. You can use the following constants: PosBottomMiddle = 0, PosBottomRight = 1, PosUpperRight = 2, PosSidesRight = 3, PosUpperMiddle, PosBottomLeft = 5, PosSidesLeft, PosUpperLeft
      
      <param name="FormattedText"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileStamp.getDocument">
       
        <p>Gets the document {@code PdfFileStamp} is working on.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileStamp.getContentDisposition">
       
        <p>Gets how content will be stored when result of operation is stored into HttpResponse object. Possible value: inline / attachment. Default: inline.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileStamp.setContentDisposition(int)">
       
        <p>Sets how content will be stored when result of operation is stored into HttpResponse object. Possible value: inline / attachment. Default: inline.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileStamp.getSaveOptions">
       
        <p>Gets save options when result is stored as HttpResponse. Default value: PdfSaveOptions.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileStamp.setSaveOptions(SaveOptions)">
       
        <p>Sets save options when result is stored as HttpResponse. Default value: PdfSaveOptions.</p> 
      
      <param name="SaveOptions"/>
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileStamp.getAttachmentName">
       
        <p>Gets name of attachment when result of operation is stored into HttpResponse objects as attachment.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.IPdfFileStamp.setAttachmentName(String)">
       
        <p>Sets name of attachment when result of operation is stored into HttpResponse objects as attachment.</p> 
      
      <param name="String"/>
    </member>
    <member name="F:com.aspose.pdf.facades.IPdfFileStamp.POS_BOTTOM_MIDDLE">
       
        <p>Bottom middle position.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.IPdfFileStamp.POS_BOTTOM_RIGHT">
       
        <p>Bottom right position.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.IPdfFileStamp.POS_UPPER_RIGHT">
       
        <p>Right upper position.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.IPdfFileStamp.POS_SIDES_RIGHT">
       
        <p>Right position.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.IPdfFileStamp.POS_UPPER_MIDDLE">
       
        <p>Upper middle position.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.IPdfFileStamp.POS_BOTTOM_LEFT">
       
        <p>Bottom left position.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.IPdfFileStamp.POS_SIDES_LEFT">
       
        <p>Left position.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.IPdfFileStamp.POS_UPPER_LEFT">
       
        <p>Upper let position.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.ISaveableFacade">
      Facade interface that defines methods common for all saveable facades.
    </member>
    <member name="T:com.aspose.pdf.facades.KeySize">
       
        <p>Defines different key sizes which can be used to encrypt pdf documents.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.KeySize.x40">
       
        <p>40 bit key. Such key size is used with RC4 algorithm and provides low level of security. Nevertheless old versions of pdf documents can be encrypted only with such keys (v. 1.3 and lower);</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.KeySize.x128">
       
        <p>128 bit key. Both RC4 and AES algorithms can use such key size.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.KeySize.x256">
       
        <p>256 bit key. Such key size can be used only with AES and is recognized with the last Adobe Reader versions (starting from v.9).</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.LineInfo">
       
        <p>Represents the information of line.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.LineInfo.getVerticeCoordinate">
       
        <p>Gets an array of numbers representing the alternating horizontal and vertical,coordinates, respectively, of each vertex.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.LineInfo.setVerticeCoordinate(float[])">
       
        <p>Sets an array of numbers representing the alternating horizontal and vertical,coordinates, respectively, of each vertex.</p> 
      
      <param name="float[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.LineInfo.getLineColor">
       
        <p>Gets the color of a line.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.LineInfo.setLineColor(java.awt.Color)">
       
        <p>Sets the color of a line.</p> 
      
      <param name="java.awt.Color"/>
    </member>
    <member name="M:com.aspose.pdf.facades.LineInfo.getLineWidth">
       
        <p>Gets or sets the width of a line.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.LineInfo.setLineWidth(int)">
       
        <p>Sets the width of a line.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.LineInfo.getVisibility">
       
        <p>Gets the visibility of a line.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.LineInfo.setVisibility(boolean)">
       
        <p>Sets the visibility of a line.</p> 
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.LineInfo.getLineDashPattern">
       
        <p>Gets the dash pattern of a line.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.LineInfo.setLineDashPattern(int[])">
       
        <p>Sets the dash pattern of a line.</p> 
      
      <param name="int[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.LineInfo.getBorderStyle">
       
        <p>Gets the border style of a line, 0 represents solid, 1 represents dashed, 2 represents beleved, 3 represents insert, 4 represents underline.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.LineInfo.setBorderStyle(int)">
       
        <p>Sets the border style of a line, 0 represents solid, 1 represents dashed, 2 represents beleved, 3 represents insert, 4 represents underline.</p> 
      
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.facades.PdfAnnotationEditor">
       
        <p>Represents a class for work with PDF document annotations (comments).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfAnnotationEditor.importAnnotationFromXfdf(String)">
       
        <p>Document instance for PdfAnnotationEditor.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfAnnotationEditor.importAnnotationFromXfdf(String,int[])">
       
        <p>Imports the specified annotations from XFDF file.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfAnnotationEditor editor = new PdfAnnotationEditor(); editor.bindPdf("example.pdf"); int[] annotTypes = {AnnotationType.Highlight, AnnotationType.Text}; editor.importAnnotationFromXfdf("annots.xfdf", annotTypes); editor.save("example_out.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param xfdfFile The input XFDF file. @param annotType The annotations array to be imported.
      
      <param name="String"/>
      <param name="int[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfAnnotationEditor.importAnnotationFromXfdf(InputStream,int[])">
       
        <p>Imports the specified annotations from XFDF data stream.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfAnnotationEditor editor = new PdfAnnotationEditor(); editor.bindPdf("example.pdf"); int[] annotTypes ={ AnnotationType.Highlight, AnnotationType.Line }; editor.importAnnotationFromXfdf(new FileInputStream("annots.xfdf"), annotTypes); editor.save("example_out.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param xfdfSteam The input XFDF data stream. @param annotType The array of annotation types to be imported.
      
      <param name="InputStream"/>
      <param name="int[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfAnnotationEditor.importAnnotationFromXfdf(InputStream)">
       
        <p>Imports all annotations from XFDF data stream.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfAnnotationEditor editor = new PdfAnnotationEditor(); editor.bindPdf("example.pdf"); editor.importAnnotationFromXfdf(new FileInputStream("annots.xfdf")); editor.save("example_out.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param xfdfSteam The input XFDF data stream.
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfAnnotationEditor.importAnnotations(String[],int[])">
       
        <p>Imports the specified annotations into document from array of another PDF documents.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfAnnotationEditor editor = new PdfAnnotationEditor(); editor.bindPdf("example.pdf"); string[] paths = new string[2] {"with_annots1.pdf", "with_annots2.pdf"}; int[] annotTypes = {AnnotationType.Highlight, AnnotationType.Text}; editor.importAnnotations(paths, annotTypes); editor.save("example_out.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param annotFile The array of paths of PDF documents that contain source annotations. @param annotType The array of annotation types to be imported.
      
      <param name="String[]"/>
      <param name="int[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfAnnotationEditor.importAnnotations(String[])">
       
        <p>Imports annotations into document from array of another PDF documents.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfAnnotationEditor editor = new PdfAnnotationEditor(); editor.bindPdf("example.pdf"); string[] paths = new string[2] {"with_annots1.pdf", "with_annots2.pdf"}; editor.importAnnotations(paths); editor.save("example_out.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param annotFile The array of paths of PDF documents that contain source annotations.
      
      <param name="String[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfAnnotationEditor.importAnnotations(InputStream[],int[])">
       
        <p>Imports the specified annotations into document from array of another PDF document streams.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfAnnotationEditor editor = new PdfAnnotationEditor(); editor.bindPdf("example.pdf"); InputStream[] streams = new FileInputStream[2]; streams[0]= new FileInputStream("with_annots1.pdf"); streams[1]= new FileInputStream("with_annots2.pdf"); int[] annotTypes = {AnnotationType.Highlight, AnnotationType.Text}; editor.importAnnotations(streams, annotTypes); editor.save("example_out.pdf"); streams[0].close(); streams[1].close();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param annotFileInputStream The array of streams of PDF documents that contain source annotations. @param annotType The annotation types to be imported.
      
      <param name="InputStream[]"/>
      <param name="int[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfAnnotationEditor.importAnnotations(InputStream[])">
       
        <p>Imports annotations into document from array of another PDF document streams.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfAnnotationEditor editor = new PdfAnnotationEditor(); editor.bindPdf("example.pdf"); InputStream[] streams = new FileInputStream[2]; streams[0]= new FileInputStream("with_annots1.pdf"); streams[1]= new FileInputStream("with_annots2.pdf"); editor.importAnnotations(streams); editor.save("example_out.pdf"); streams[0].Close(); streams[1].Close();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param annotFileInputStream The array of streams of PDF documents that contain source annotations.
      
      <param name="InputStream[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfAnnotationEditor.modifyAnnotations(int,int,int,Annotation)">
      "Use modifyAnnotations(int start, int end, Annotation annotation) instead."
        <p>Modifies the annotations of the specifed type on the specified page range. It supports to modify next annotation properties: Modified, Title, Contents, Color, Subject and Open.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfAnnotationEditor editor = new PdfAnnotationEditor(); editor.bindPdf("example.pdf"); com.aspose.pdf.TextAnnotation annot = new com.aspose.pdf.TextAnnotation(); annot.setModified ( new java.util.Date()); annot.setTitle ( "NEW AUTHOR"); annot.setContents ( "NEW CONTENTS"); annot.setColor (com.aspose.pdf.Color.getRed()); annot.setSubject ( "NEW SUBJECT"); annot.setOpen ( true); editor.modifyAnnotations(1, 2, com.aspose.pdf.AnnotationType.Text, annot); editor.save("example_out.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param start The start page number. @param end The end page number. @param annotType The annotation type. @param annotation The annotation object contains new properties.
      
      <param name="int"/>
      <param name="int"/>
      <param name="int"/>
      <param name="Annotation"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfAnnotationEditor.modifyAnnotationsAuthor(int,int,String,String)">
       
        <p>Modifies the author of annotations on the specified page range.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfAnnotationEditor editor = new PdfAnnotationEditor(); editor.bindPdf("example.pdf"); editor.modifyAnnotationsAuthor(1, 2, "PREV AUTHOR", "NEW AUTHOR"); editor.save("example_out.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param start The start page number. @param end The end page number. @param srcAuthor The author that must be modified. @param desAuthor The new author.
      
      <param name="int"/>
      <param name="int"/>
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfAnnotationEditor.flatteningAnnotations">
       
        <p>Flattens all annotations in the document.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfAnnotationEditor editor = new PdfAnnotationEditor(); editor.bindPdf("example.pdf"); editor.flatteningAnnotations(); editor.save(example_out.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfAnnotationEditor.flatteningAnnotations(int,int,int[])">
       
        <p>Flattens the annotations of the specified types.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="JAva">PdfAnnotationEditor editor = new PdfAnnotationEditor(); editor.bindPdf("example.pdf"); int[] annotTypes ={AnnotationType.Line, AnnotationType.FreeText}; editor.flatteningAnnotations(1, 2, annotTypes); editor.save("example_out.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param start The start page. @param end Then end page. @param annotType The annotation types should be flattened.
      
      <param name="int"/>
      <param name="int"/>
      <param name="int[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfAnnotationEditor.deleteAnnotations">
       
        <p>Deletes all annotations in the document.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfAnnotationEditor editor = new PdfAnnotationEditor(); editor.bindPdf("example.pdf"); editor.deleteAnnotations(); editor.save("example_out.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfAnnotationEditor.deleteAnnotations(String)">
       
        <p>Deletes all annotations of the specified type in the document.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfAnnotationEditor editor = new PdfAnnotationEditor(); editor.bindPdf("example.pdf"); editor.deleteAnnotations("Text"); editor.save("example_out.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param annotType The type of annotation will be deleted.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfAnnotationEditor.deleteAnnotation(String)">
       
        <p>Deletes the annotation with specified annotation name.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfAnnotationEditor editor = new PdfAnnotationEditor(); editor.bindPdf("example.pdf"); editor.deleteAnnotation("4cfa69cd-9bff-49e0-9005-e22a77cebf38"); editor.save("example_out.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param annotName The annotation name
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfAnnotationEditor.exportAnnotationsXfdf(OutputStream,int,int,String[])">
       
        <p>Exports the content of the specified annotation types into XFDF</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfAnnotationEditor editor = new PdfAnnotationEditor(); editor.bindPdf("example.pdf"); String[] annotTypes = new String[] {"Text", "Highlight"}; OutputStream stream = new FileOutputStream("example.xfdf"); editor.exportAnnotationsXfdf(stream, 1, 2, annotTypes); stream.close();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param xmlOutputStream The output XFDF stream. @param start Start page from which the annotations of the document will be exported. @param end End page to which the annotations of the document will be exported. @param annotTypes The array of annotation types need be exported.
      
      <param name="OutputStream"/>
      <param name="int"/>
      <param name="int"/>
      <param name="String[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfAnnotationEditor.exportAnnotationsXfdf(OutputStream,int,int,int[])">
       
        <p>Exports the content of the specified annotation types into XFDF</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfAnnotationEditor editor = new PdfAnnotationEditor(); editor.bindPdf("example.pdf"); int[] annotTypes = new int[] {AnnotationType.Text, AnnotationType.Highlight}; OutputStream stream = new FileOutputStream("example.xfdf"); editor.exportAnnotationsXfdf(stream, 1, 2, annotTypes); stream.close();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param xmlOutputStream The output XFDF stream. @param start Start page from which the annotations of the document will be exported. @param end End page to which the annotations of the document will be exported. @param annotTypes The array of annotation types need be exported.
      
      <param name="OutputStream"/>
      <param name="int"/>
      <param name="int"/>
      <param name="int[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfAnnotationEditor.extractAnnotations(int,int,String[])">
       
        <p>Gets the list of annotations of the specified types.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfAnnotationEditor editor = new PdfAnnotationEditor(); editor.bindPdf("example.pdf"); String[] annotTypes = new String[] {"Text", "Highlight"}; List annotList = (List)editor.extractAnnotations(1, 2 , annotTypes);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return Annotations list. @param start Start page from which the annotations will be selected. @param end End page to which the annotations will be selected. @param annotTypes The array of needed annotation types.
      
      <param name="int"/>
      <param name="int"/>
      <param name="String[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfAnnotationEditor.extractAnnotations(int,int,int[])">
       
        <p>Gets the list of annotations of the specified types.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfAnnotationEditor editor = new PdfAnnotationEditor(); editor.bindPdf("example.pdf"); int[] annotTypes = new int[] {AnnotationType.Text, AnnotationType.Highlight}; List annotList = (List)editor.extractAnnotations(1, 2 , annotTypes);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return Annotations list. @param start Start page from which the annotations will be selected. @param end End page to which the annotations will be selected. @param annotTypes The array of needed annotation types.
      
      <param name="int"/>
      <param name="int"/>
      <param name="int[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfAnnotationEditor.save(String)">
      / * 
        <p>/ * Binds a PDF file for editing. / *</p> / * @param inputFile A PDF file to be edited. /
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfAnnotationEditor.save(OutputStream)">
       
        <p>Saves the result PDF to stream.</p> @param outputStream Output PDF stream
      
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfAnnotationEditor.modifyAnnotations(int,int,Annotation)">
       
        <p>Modifies the annotations of the specifed type on the specified page range. It supports to modify next annotation properties: Modified, Title, Contents, Color, Subject and Open.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfAnnotationEditor editor = new PdfAnnotationEditor(); editor.bindPdf("example.pdf"); TextAnnotation annot = new TextAnnotation(); annot.setModified ( new Date()); annot.setTitle ( "NEW AUTHOR"); annot.setContents ( "NEW CONTENTS"); annot.setColor ( Color.RED); annot.setSubject ( "NEW SUBJECT"); annot.setOpen ( true); editor.modifyAnnotations(1, 2, annot); editor.save("example_out.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param start The start page number. @param end The end page number. @param annotation The annotation object contains new properties.
      
      <param name="int"/>
      <param name="int"/>
      <param name="Annotation"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfAnnotationEditor.#ctor">
       
        <p>Binds a Pdf document for editing.</p> @param pdf Pdf document which came from Aspose.Pdf.Generator.
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfAnnotationEditor.#ctor(IDocument)">
       
        <p>Initializes new {@code PdfAnnotationEditor} object on base of the {@code document}.</p> @param document Pdf document.
      
      <param name="IDocument"/>
    </member>
    <member name="T:com.aspose.pdf.facades.PdfBookmarkEditor">
       
        <p>Represents a class to work with PDF file's bookmarks including create, modify, export, import and delete.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfBookmarkEditor.createBookmarks">
       
        <p>Creates bookmarks for all pages.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfBookmarkEditor editor = new PdfBookmarkEditor(); editor.bindPdf("example.pdf"); editor.createBookmarks(); editor.save("example_out.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfBookmarkEditor.createBookmarkOfPage(String,int)">
       
        <p>Creates bookmark for the specified page.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfBookmarkEditor editor = new PdfBookmarkEditor(); editor.bindPdf("example.pdf"); editor.createBookmarkOfPage("bookmark for page 1", 1); editor.save("example_out.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param bookmarkName The specified bookmark name. @param pageNumber The specified desination page.
      
      <param name="String"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfBookmarkEditor.createBookmarks(Bookmark)">
       
        <p>Creates the specified bookmark in the document. The method can be used for forming nested bookmarks hierarchy.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfBookmarkEditor editor = new PdfBookmarkEditor(); editor.bindPdf("example.pdf"); Bookmark bm1=new Bookmark(); bm1.setPageNumber(1); bm1.setTitle("First child"); Bookmark bm2=new Bookmark(); bm2.setPageNumber(2); bm2.setTitle("Second child"); Bookmark bm=new Bookmark(); bm.setAction=(GoTo"); bm.setPageNumber(1); bm.setTitle("Parent"); Bookmarks bms=new Bookmarks(); bms.add(bm1); bms.add(bm2); bm.setChildItem(bms); editor.setCreateBookmarks(bm); editor.save("example_out.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param bookmark The bookmark will be added to the document.
      
      <param name="Bookmark"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfBookmarkEditor.createBookmarks(java.awt.Color,boolean,boolean)">
       
        <p>Create bookmarks for all pages with specified color and style (bold, italic).</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfBookmarkEditor editor = new PdfBookmarkEditor(); editor.bindPdf("example.pdf"); editor.createBookmarks(System.Drawing.Color.Red, true, true); editor.save("example_out.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param color The color of title. @param boldFlag The flag of bold attribution. @param italicFlag The flag of italic attribution.
      
      <param name="java.awt.Color"/>
      <param name="boolean"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfBookmarkEditor.createBookmarkOfPage(String[],int[])">
       
        <p>Creates bookmarks for the specified pages.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfBookmarkEditor editor = new PdfBookmarkEditor(); editor.bindPdf("example.pdf"); editor.createBookmarkOfPage("bookmark for page 1", 1); editor.save("example_out.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param bookmarkName Bookmarks title array. @param pageNumber Bookmarks desination page array.
      
      <param name="String[]"/>
      <param name="int[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfBookmarkEditor.deleteBookmarks">
       
        <p>Deletes all bookmarks of the PDF document.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfBookmarkEditor editor = new PdfBookmarkEditor(); editor.bindPdf("example.pdf"); editor.deleteBookmarks(); editor.save("example_out.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfBookmarkEditor.deleteBookmarks(String)">
       
        <p>Deletes the bookmark of the PDF document.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfBookmarkEditor editor = new PdfBookmarkEditor(); editor.bindPdf("example.pdf"); editor.deleteBookmarks("existing bookmark title"); editor.save("example_out.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param title The title of bookmark deleted.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfBookmarkEditor.modifyBookmarks(String,String)">
       
        <p>Modifys bookmark title according to the specified bookmark title.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="JAva">PdfBookmarkEditor editor = new PdfBookmarkEditor(); editor.bindPdf("example.pdf"); editor.modifyBookmarks("existing bookmark title", "new bookmark title"); editor.save("example_out.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param sTitle Source bookmark title. @param dTitle Modified bookmark title.
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfBookmarkEditor.extractBookmarks">
       
        <p>Extracts bookmarks of all levels from the document.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfBookmarkEditor editor = new PdfBookmarkEditor(); editor.bindPdf("example.pdf"); Bookmarks bms = editor.ExtractBookmarks(); for(Bookmark bm : bms) System.out.println(bm.Title);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return The bookmarks collection of all bookmarks that exist in the document.
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfBookmarkEditor.extractBookmarks(String)">&lt;p&gt; Extracts the bookmarks with the specified title. &lt;/p&gt;&lt;p&gt;&lt;hr&gt;&lt;blockquote&gt;&lt;pre&gt; &lt;pre lang="Java"&gt; PdfBookmarkEditor editor = new PdfBookmarkEditor(); editor.bindPdf("example.pdf"); Bookmarks bms = editor.ExtractBookmarks("Title"); for(Bookmark bm : (Iterable&lt;Bookmark&gt;)bms) System.out.println(bm.Title); &lt;/pre&gt; &lt;/pre&gt;&lt;/blockquote&gt;&lt;/hr&gt;&lt;/p&gt; @return Bookmark collection has items with the same title. @param title Extracted item title. 
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfBookmarkEditor.extractBookmarks(Bookmark)">&lt;p&gt; Extracts the children of a bookmark with a title like in specified bookamrk. &lt;/p&gt;&lt;p&gt;&lt;hr&gt;&lt;blockquote&gt;&lt;pre&gt; &lt;pre lang="Java"&gt; PdfBookmarkEditor editor = new PdfBookmarkEditor(); editor.bindPdf("example.pdf"); Bookmark bookmark = new Bookmark(); bookmark.setTitle ( "Title"); Bookmarks bms = editor.ExtractBookmarks(bookmark); for(Bookmark bm : (Iterable&lt;Bookmark&gt;)bms) System.out.println(bm.Title); &lt;/pre&gt; &lt;/pre&gt;&lt;/blockquote&gt;&lt;/hr&gt;&lt;/p&gt; @return Bookmark collection with child bookmarks. @param bookmark The specified bookamrk. 
      <param name="Bookmark"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfBookmarkEditor.extractBookmarksToHTML(String,String)">
       
        <p>Exports bookmarks to HTML file.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="JAva">PdfBookmarkEditor editor = new PdfBookmarkEditor(); editor.extractBookmarksToHTML("example.pdf", null);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param pdfFile The PDF file which bookmarks will be exported. @param cssFile The CSS file to display HTML file, can be null.
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfBookmarkEditor.exportBookmarksToXML(String)">
       
        <p>Exports bookmarks to XML file.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="JAva">PdfBookmarkEditor editor = new PdfBookmarkEditor(); editor.bindPdf("example.pdf"); editor.exportBookmarksToXML("bookmarks.xml");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param xmlFile The output XML file.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfBookmarkEditor.exportBookmarksToXML(OutputStream)">
       
        <p>Exports bookmarks to XML stream.</p> @param stream Output stream where data will be stored.
      
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfBookmarkEditor.importBookmarksWithXML(String)">
       
        <p>Imports bookmarks to the document from XML file.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfBookmarkEditor editor = new PdfBookmarkEditor(); editor.bindPdf("example.pdf"); editor.importBookmarksWithXML("bookmarks.xml"); editor.save("example_out.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param xmlFile The XML file containing bookmarks list.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfBookmarkEditor.importBookmarksWithXML(InputStream)">
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfBookmarkEditor.exportBookmarksToHtml(String,String)">
       
        <p>Exports bookmarks to HTML file.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="JAva">PdfBookmarkEditor.extractBookmarksToHTML("example.pdf", "bookmarks.html");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param inPdfFile Input PDF file which bookmarks will be exported. @param outHtmlFile Output HTML file
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfBookmarkEditor.close"/>
    <member name="M:com.aspose.pdf.facades.PdfBookmarkEditor.#ctor">
       
        <p>Initializes new {@code PdfBookmarkEditor} object.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfBookmarkEditor.#ctor(IDocument)">
       
        <p>Initializes new {@code PdfBookmarkEditor} object on base of the {@code document}.</p> @param document Pdf document.
      
      <param name="IDocument"/>
    </member>
    <member name="T:com.aspose.pdf.facades.PdfContentEditor">
       
        <p>Represents a class to edit PDF file's content.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.getTextSearchOptions">
      / * 
        <p>/ * Document instance for PdfContentEditor. / *</p> /
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.setTextSearchOptions(TextSearchOptions)">
       
        <p>Sets text search options.</p> 
      
      <param name="TextSearchOptions"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.getTextEditOptions">
       
        <p>Gets text edit options.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.setTextEditOptions(TextEditOptions)">
       
        <p>Sets text edit options.</p> 
      
      <param name="TextEditOptions"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.getTextReplaceOptions">
       
        <p>Gets text replace options.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.setTextReplaceOptions(TextReplaceOptions)">
       
        <p>Sets text replace options.</p> 
      
      <param name="TextReplaceOptions"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.getReplaceTextStrategy">
       
        <p>Get a set of parameters for replace text operation</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.setReplaceTextStrategy(ReplaceTextStrategy)">
       
        <p>Set a set of parameters for replace text operation</p> 
      
      <param name="ReplaceTextStrategy"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.bindPdf(String)">
       
        <p>Binds a PDF file for editing.</p> @param inputFile A PDF file to be edited.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.bindPdf(InputStream)">
       
        <p>Binds a PDF stream for editing.</p> @param inputStream A PDF stream to be edited.
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.extractLink">
       
        <p>Extracts the collection of Link instances contained in PDF document.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); List links = editor.extractLink(); for (object obj : links) { Link link = (Link)obj; // work with Link instance }</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return The collection of Link objects
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.createWebLink(java.awt.Rectangle,String,int,java.awt.Color,int[])">
       
        <p>Creates a web link in PDF document.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); editor.createWebLink(new Rectangle(0, 0, 100, 100), "http://www.aspose.com", 1, Color.red, new int[] { PredefinedAction.FirstPage, PredefinedAction.PrintDialog }); editor.save("example_out.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param rect The rectangle for active click. @param url The web link destination. @param originalPage The number of original page on which rectangle bound with web link will be created. @param clr The colour of rectangle for active click. @param actionName The array of actions (members of PredefinedAction enum) corresponding to executing menu items in Acrobat viewer.
      
      <param name="java.awt.Rectangle"/>
      <param name="String"/>
      <param name="int"/>
      <param name="java.awt.Color"/>
      <param name="int[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.createWebLink(java.awt.Rectangle,String,int,java.awt.Color)">
       
        <p>Creates a web link in PDF document.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); editor.createWebLink(new Rectangle(0, 0, 100, 100), "http://www.aspose.com", 1, Color.red }); editor.save("example_out.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param rect The rectangle for active click. @param url The web link destination. @param originalPage The number of original page where rectangle bound with web link will be created. @param clr The colour of rectangle for active click.
      
      <param name="java.awt.Rectangle"/>
      <param name="String"/>
      <param name="int"/>
      <param name="java.awt.Color"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.createWebLink(java.awt.Rectangle,String,int)">
       
        <p>Creates a web link in PDF document.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); editor.createWebLink(new Rectangle(0, 0, 100, 100), "http://www.aspose.com", 1 }); editor.save("example_out.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param rect The rectangle for active click. @param url The web link destination. @param originalPage The number of original page where rectangle bound with web link will be created.
      
      <param name="java.awt.Rectangle"/>
      <param name="String"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.createLocalLink(java.awt.Rectangle,int,int,java.awt.Color,int[])">
       
        <p>Creates a local link in PDF document.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); editor.createLocalLink(new Rectangle(0, 0, 100, 100), 2, 1, Color.red, new int[] { PredefinedAction.FirstPage, PredefinedAction.PrintDialog }); editor.save("example_out.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param rect The rectangle for active click. @param desPage The destination page. @param originalPage The number of original page where rectangle bound with local link will be created. @param clr The colour of rectangle for active click. @param actionName The array of actions (members of PredefinedAction enum) corresponding to executing menu items in Acrobat viewer.
      
      <param name="java.awt.Rectangle"/>
      <param name="int"/>
      <param name="int"/>
      <param name="java.awt.Color"/>
      <param name="int[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.createLocalLink(java.awt.Rectangle,int,int,java.awt.Color)">
       
        <p>Creates a local link in PDF document.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); editor.createLocalLink(new Rectangle(0, 0, 100, 100), 2, 1, Color.red }); editor.save("example_out.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param rect The rectangle for active click. @param desPage The destination page. @param originalPage The number of original page where rectangle bound with local link will be created. @param clr The colour of rectangle for active click.
      
      <param name="java.awt.Rectangle"/>
      <param name="int"/>
      <param name="int"/>
      <param name="java.awt.Color"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.createPdfDocumentLink(java.awt.Rectangle,String,int,int,java.awt.Color,int[])">
       
        <p>Creates a link to another PDF document page.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); editor.createPdfDocumentLink(new Rectangle(0, 0, 100, 100), "another_example.pdf", 1, 1, Color.red, new int[] { PredefinedAction.FirstPage, PredefinedAction.PrintDialog }); editor.save("example_out.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param rect The rectangle for active click. @param remotePdf The PDF document which page will be opened. @param originalPage The number of original page where rectangle bound with link will be created. @param destinationPage The destination page. @param clr The colour of rectangle for active click. @param actionName The array of actions (members of PredefinedAction enum) corresponding to executing menu items in Acrobat viewer.
      
      <param name="java.awt.Rectangle"/>
      <param name="String"/>
      <param name="int"/>
      <param name="int"/>
      <param name="java.awt.Color"/>
      <param name="int[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.createPdfDocumentLink(java.awt.Rectangle,String,int,int,java.awt.Color)">
       
        <p>Creates a link to another PDF document page.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="JAva">PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); editor.createPdfDocumentLink(new Rectangle(0, 0, 100, 100), "another_example.pdf", 1, 1, Color.red }); editor.save("example_out.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param rect The rectangle for active click. @param remotePdf The PDF document which page will be opened. @param originalPage The number of original page where rectangle bound with link will be created. @param destinationPage The destination page. @param clr The colour of rectangle for active click.
      
      <param name="java.awt.Rectangle"/>
      <param name="String"/>
      <param name="int"/>
      <param name="int"/>
      <param name="java.awt.Color"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.createPdfDocumentLink(java.awt.Rectangle,String,int,int)">
       
        <p>Creates a link to another PDF document page.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); editor.createPdfDocumentLink(new Rectangle(0, 0, 100, 100), "another_example.pdf", 1, 1 }); editor.save("example_out.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param rect The rectangle for active click. @param remotePdf The PDF document which page will be opened. @param originalPage The number of original page where rectangle bound with link will be created. @param destinationPage The destination page.
      
      <param name="java.awt.Rectangle"/>
      <param name="String"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.createCustomActionLink(java.awt.Rectangle,int,java.awt.Color,int[])">
       
        <p>Creates a link to custom actions in PDF document.</p> @param rect The rectangle for active click. @param originalPage The number of original page where rectangle bound with link will be created. @param color The colour of rectangle for active click. @param actionName The array of actions (members of PredefinedAction enum) corresponding to executing menu items in Acrobat viewer.
      
      <param name="java.awt.Rectangle"/>
      <param name="int"/>
      <param name="java.awt.Color"/>
      <param name="int[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.createApplicationLink(java.awt.Rectangle,String,int,java.awt.Color,int[])">
       
        <p>Creates a link to launch an application in PDF document.</p> @param rect The rectangle for active click. @param application The path of application to be launched. @param page The number of original page where rectangle bound with link will be created. @param clr The colour of rectangle for active click. @param actionName The array of actions (members of PredefinedAction enum) corresponding to executing menu items in Acrobat viewer.
      
      <param name="java.awt.Rectangle"/>
      <param name="String"/>
      <param name="int"/>
      <param name="java.awt.Color"/>
      <param name="int[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.createApplicationLink(java.awt.Rectangle,String,int,java.awt.Color)">
       
        <p>Creates a link to launch an application in PDF document.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); editor.createApplicationLink(new Rectangle(0, 0, 100, 100), "explorer", 1, Color.red }); editor.save("example_out.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param rect The rectangle for active click. @param application The path of application to be launched. @param page The number of original page where rectangle bound with link will be created. @param clr The colour of rectangle for active click.
      
      <param name="java.awt.Rectangle"/>
      <param name="String"/>
      <param name="int"/>
      <param name="java.awt.Color"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.createApplicationLink(java.awt.Rectangle,String,int)">
       
        <p>Creates a link to launch an application in PDF document.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); editor.createApplicationLink(new Rectangle(0, 0, 100, 100), "explorer", 1 }); editor.save("example_out.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param rect The rectangle for active click. @param application The path of application to be launched. @param page The number of original page where rectangle bound with link will be created.
      
      <param name="java.awt.Rectangle"/>
      <param name="String"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.createJavaScriptLink(String,java.awt.Rectangle,int,java.awt.Color)">
       
        <p>Creates a link to JavaScript in PDF document.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="JAva">PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); editor.createJavaScriptLink("app.alert('welcome to aspose!');", new Rectangle(0, 0, 100, 100), 1, Color.red }); editor.save("example_out.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param code The JavaScript code. @param rect The rectangle for active click. @param originalPage The number of original page where rectangle bound with link will be created. @param color The colour of rectangle for active click.
      
      <param name="String"/>
      <param name="java.awt.Rectangle"/>
      <param name="int"/>
      <param name="java.awt.Color"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.createText(java.awt.Rectangle,String,String,boolean,String,int)">
      / * 
        <p>/ * Saves the result PDF to file. / *</p> / * @param outputFile Output PDF file /
      
      <param name="java.awt.Rectangle"/>
      <param name="String"/>
      <param name="String"/>
      <param name="boolean"/>
      <param name="String"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.createFreeText(java.awt.Rectangle,String,int)">
       
        <p>Creates free text annotation in PDF document</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); editor.createFreeText(new Rectangle(0, 0, 100, 100), "Welcome to Aspose", 1); editor.save("example_out.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param rect The annotation rectangle defining the location of the annotation on the page. @param contents The contents of the annotation. @param page The number of original page where the text annotation will be created.
      
      <param name="java.awt.Rectangle"/>
      <param name="String"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.createMarkup(java.awt.Rectangle,String,int,int,java.awt.Color)">
       
        <p>Creates markup annotation it PDF document.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="JAva">PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); editor.createMarkup(new Rectangle(0, 0, 100, 100), "Welcome to Aspose", 0, 1, Color.red); editor.save("example_out.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param rect The rectangle defining the location of the annotation on the page. @param contents The contents of the annotation. @param type The type of markup annotation. Can be 0 (Highlight), 1 (Underline), 2 (StrikeOut), 3 (Squiggly). @param page The number of original page where the annotation will be created. @param clr The color of markup.
      
      <param name="java.awt.Rectangle"/>
      <param name="String"/>
      <param name="int"/>
      <param name="int"/>
      <param name="java.awt.Color"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.createPopup(java.awt.Rectangle,String,boolean,int)">
       
        <p>Creates popup annotation in PDF document.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="JAva">PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); editor.createPopup(new Rectangle(0, 0, 100, 100), "Welcome to Aspose", true, 1); editor.save("example_out.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param rect The annotation rectangle defining the location of the annotation on the page. @param contents The contents of the annotation. @param open A flag specifying whether the pop-up annotation should initially be displayed open. @param page The number of original page where the annotation will be created.
      
      <param name="java.awt.Rectangle"/>
      <param name="String"/>
      <param name="boolean"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.createFileAttachment(java.awt.Rectangle,String,String,int,String)">
       
        <p>Creates file attachment annotation.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="JAva">PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); editor.createFileAttachment(new Rectangle(0, 0, 100, 100), "Welcome to Aspose", "attachment_file.pdf", 1, "Graph"); editor.save("example_out.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param rect The annotation rectangle defining the location of the annotation on the page. @param contents The contents of the annotation. @param filePath The path of the file will be attached. @param page The number of original page where the annotation will be created. @param name The name of an icon will be used in displaying the annotation. This value can be: "Graph", "PushPin", "Paperclip", "Tag".
      
      <param name="java.awt.Rectangle"/>
      <param name="String"/>
      <param name="String"/>
      <param name="int"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.createFileAttachment(java.awt.Rectangle,String,InputStream,String,int,String)">
       
        <p>Creates file attachment annotation.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="JAva">PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); java.io.InputStream attStream = new java.io.FileInputStream("attachment_file.pdf"); editor.createFileAttachment(new Rectangle(0, 0, 100, 100), "Welcome to Aspose", attStream, "attachment_file.pdf", 1, "Graph"); editor.save("example_out.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param rect The annotation rectangle defining the location of the annotation on the page. @param contents The contents of the annotation. @param attachmentStream The attachment file stream. @param attachmentName The attachment name. @param page The number of original page where the annotation will be created. @param name The name of an icon will be used in displaying the annotation. This value can be: "Graph", "PushPin", "Paperclip", "Tag".
      
      <param name="java.awt.Rectangle"/>
      <param name="String"/>
      <param name="InputStream"/>
      <param name="String"/>
      <param name="int"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.addDocumentAttachment(String,String)">
       
        <p>Adds document attachment with no annotation.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); editor.addDocumentAttachment("attachment_file.pdf", "description of attachment_file"); editor.save("example_out.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param fileAttachmentPath The path of the file will be attached. @param description The description information.
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.addDocumentAttachment(InputStream,String,String)">
       
        <p>Adds document attachment with no annotation.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); InputStream attStream = new FileInputStream("attachment_file.pdf") editor.addDocumentAttachment(attStream, "attachment_file.pdf", "description of attachment_file"); editor.save("example_out.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param fileAttachmentStream The stream of the file will be attached. @param fileAttachmentName The attachment name. @param description The description information.
      
      <param name="InputStream"/>
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.deleteAttachments">
       
        <p>Deletes all attachments in PDF document.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); editor.deleteAttachments(); editor.save("example_out.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.createLine(java.awt.Rectangle,String,float,float,float,float,int,int,java.awt.Color,String,int[],String[])">
       
        <p>Creates line annotation.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); editor.createLine(new Rectangle(0, 0, 100, 100), "Welcome to Aspose", 0, 0, 100, 100, 1, 1, Color.red, "D", new int[] {2, 3}, new string[] {"OpenArrow", "ClosedArrow"}); editor.save("example_out.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param rect The annotation rectangle defining the location of the annotation on the page. @param contents The contents of the annotation. @param x1 The starting horizontal coordinate of the line. @param y1 The starting vertical coordinate of the line. @param x2 The ending horizontal coordinate of the line. @param y2 The ending vertical coordinate of the line. @param page The number of original page where the annotation will be created. @param border The border width in points. If this value is 0 no border is drawn. Default value is 1. @param clr The color of line. @param borderStyle The border style specifying the width and dash pattern to be used in drawing the line. This value can be: "S" (Solid), "D" (Dashed), "B" (Beveled), "I" (Inset), "U" (Underline). @param dashArray A dash array defining a pattern of dashes and gaps to be used in drawing a dashed border. If it is used, borderSyle must be accordingly set to "D". @param LEArray An array of two values respectively specifying the beginning and ending style of the drawing line. The values can be: "Square", "Circle", "Diamond", "OpenArrow", "ClosedArrow", "None", "Butt", "ROpenArrow", "RClosedArrow", "Slash".
      
      <param name="java.awt.Rectangle"/>
      <param name="String"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
      <param name="int"/>
      <param name="int"/>
      <param name="java.awt.Color"/>
      <param name="String"/>
      <param name="int[]"/>
      <param name="String[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.createSquareCircle(java.awt.Rectangle,String,java.awt.Color,boolean,int,int)">
       
        <p>Creates square-circle annotation.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); editor.createSquareCircle(new Rectangle(0, 0, 100, 100), "Welcome to Aspose", Color.red, false, 1, 5); editor.save("example_out.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param rect The annotation rectangle defining the location of the annotation on the page. @param contents The contents of the annotation. @param clr The colour of square or circle. @param square True (square), false (sircle). @param page The number of original page where the annotation will be created. @param borderWidth The border width of square or circle.
      
      <param name="java.awt.Rectangle"/>
      <param name="String"/>
      <param name="java.awt.Color"/>
      <param name="boolean"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.drawCurve(LineInfo,int,java.awt.Rectangle,String)">
       
        <p>Creates curve annotation.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfContentEditor editor = new PdfContentEditor(); newApiEditor.bindPdf("example.pdf"); LineInfo lineInfo = new LineInfo(); lineInfo.setVerticeCoordinate ( new float[] { 0, 0, 100, 100 }); //x1, y1, x2, y2, .. xn, yn lineInfo.setVisibility ( true); editor.drawCurve(lineInfo, 1, new Rectangle(0, 0, 0, 0), "Welcome to Aspose"); editor.save("example_out.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param lineInfo The instance of LineInfo class. @param page The number of original page where the annotation will be created. @param annotRect The annotation rectangle defining the location of the annotation on the page. @param annotContents The contents of the annotation.
      
      <param name="LineInfo"/>
      <param name="int"/>
      <param name="java.awt.Rectangle"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.createPolygon(LineInfo,int,java.awt.Rectangle,String)">
       
        <p>Creates polygon annotation.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); LineInfo lineInfo = new LineInfo(); lineInfo.setVerticeCoordinate ( new float[] { 0, 0, 100, 100, 100, 50 }); lineInfo.setVisibility ( true); editor.createPolygon(lineInfo, 1 , new Rectangle(0, 0, 0, 0), "Welcome to Aspose"); editor.save("example_out.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param lineInfo The instance of LineInfo class. @param page The number of original page where the annotation will be created. @param annotRect The annotation rectangle defining the location of the annotation on the page. @param annotContents The contents of the annotation.
      
      <param name="LineInfo"/>
      <param name="int"/>
      <param name="java.awt.Rectangle"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.createPolyLine(LineInfo,int,java.awt.Rectangle,String)">
       
        <p>Creates polyline annotation.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); LineInfo lineInfo = new LineInfo(); lineInfo.setVerticeCoordinate ( new float[] { 0, 0, 100, 100, 100, 50 }); lineInfo.setVisibility ( true); editor.createPolyLine(lineInfo, 1 , new Rectangle(0, 0, 0, 0), "Welcome to Aspose"); editor.save("example_out.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param lineInfo The instance of LineInfo class. @param page The number of original page where the annotation will be created. @param annotRect The annotation rectangle defining the location of the annotation on the page. @param annotContents The contents of the annotation.
      
      <param name="LineInfo"/>
      <param name="int"/>
      <param name="java.awt.Rectangle"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.createCaret(int,java.awt.Rectangle,java.awt.Rectangle,String,String,java.awt.Color)">
       
        <p>Creates caret annotation.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); editor.createCaret(1, new Rectangle(50, 50, 100, 100), new Rectangle(60, 60, 70, 70), "None", "Welcome to Aspose", Color.red); editor.save("example_out.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param page The number of original page where the annotation will be created. @param annotRect The annotation rectangle defining the location of the annotation on the page. @param caretRect The actual boundaries of the underlying caret. @param symbol A symbol will be associated with the caret. Value can be: "P" (Paragraph), "None". @param annotContents The contents of the annotation. @param color The colour of the annotation.
      
      <param name="int"/>
      <param name="java.awt.Rectangle"/>
      <param name="java.awt.Rectangle"/>
      <param name="String"/>
      <param name="String"/>
      <param name="java.awt.Color"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.createRubberStamp(int,java.awt.Rectangle,String,String,java.awt.Color)">
       
        <p>Creates a rubber stamp annotation.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); editor.createRubberStamp(1, Rectangle(0, 0, 100, 100), "Welcome to Aspose", Color.red); editor.save("example_out.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param page The number of original page where the annotation will be created. @param annotRect The annotation rectangle defining the location of the annotation on the page. @param annotContents The contents of the annotation. @param color The colour of the annotation.
      
      <param name="int"/>
      <param name="java.awt.Rectangle"/>
      <param name="String"/>
      <param name="String"/>
      <param name="java.awt.Color"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.createRubberStamp(int,java.awt.Rectangle,String,java.awt.Color,String)">
       
        <p>Creates a rubber stamp annotation.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); editor.createRubberStamp(1, Rectangle(0, 0, 100, 100), "Welcome to Aspose", Color.red, "appearance_file.pdf"); editor.save("example_out.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param page The number of original page where the annotation will be created. @param annotRect The annotation rectangle defining the location of the annotation on the page. @param annotContents The contents of the annotation. @param color The colour of the annotation. @param appearanceFile The path of appearance file.
      
      <param name="int"/>
      <param name="java.awt.Rectangle"/>
      <param name="String"/>
      <param name="java.awt.Color"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.createRubberStamp(int,java.awt.Rectangle,String,java.awt.Color,InputStream)">
       
        <p>Creates a rubber stamp annotation.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); InputStream appStream = new FileInputStream("appearance_file.pdf"); editor.createRubberStamp(1, Rectangle(0, 0, 100, 100), "Welcome to Aspose", Color.red, appStream); editor.save("example_out.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param page The number of original page where the annotation will be created. @param annotRect The annotation rectangle defining the location of the annotation on the page. @param annotContents The contents of the annotation. @param color The colour of the annotation. @param appearanceStream The stream of appearance file.
      
      <param name="int"/>
      <param name="java.awt.Rectangle"/>
      <param name="String"/>
      <param name="java.awt.Color"/>
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.createBookmarksAction(String,java.awt.Color,boolean,boolean,String,String,String)">
       
        <p>Creates a bookmark with the specified action.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); editor.createBookmarksAction("bookmark title", Color.red, true, true, null, "GoTo", 1(page number)); editor.save("example_out.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param title The title of the bookmark. @param color The colour of the bookmark's title. @param boldFlag The flag of bold attribution. @param italicFlag The flag of italic attribution. @param file Another file or application required when the action type is "GoToR" or "Launch". @param actionType The action type. The value can be: "GoToR", "Launch", "GoTo", "URI". @param destination The local destination or remote destination or URL.
      
      <param name="String"/>
      <param name="java.awt.Color"/>
      <param name="boolean"/>
      <param name="boolean"/>
      <param name="String"/>
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.addDocumentAdditionalAction(String,String)">
       
        <p>Adds additional action for document event.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); editor.addDocumentAdditionalAction(PdfContentEditor.DocumentClose, "app.alert('Good-bye!');"); editor.save("example_out.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param eventType The document event types. @param code The code of JavaScript.
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.removeDocumentOpenAction">
       
        <p>Removes open action from the document. This operation is useful when concatenating multiple documents that use explicit 'GoTo' action on startup.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); editor.removeDocumentOpenAction(); editor.save("example_out.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.changeViewerPreference(int)">
       
        <p>Changes the view preference.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); editor.changeViewerPreference(ViewerPreference.HideMenubar); editor.changeViewerPreference(ViewerPreference.PageModeUseNone); editor.save("example_out.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param viewerAttribution The view attribution defined in the ViewerPreference class.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.getViewerPreference">
       
        <p>Returns the view preference.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); int prefValue = editor.GetViewerPreference(); if ((prefValue &amp; ViewerPreference.PageModeUseOutline) != 0) { // ... }</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.replaceImage(int,int,String)">
       
        <p>Replaces the specified image on the specified page of PDF document with another image.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); editor.replaceImage(1, 1, "image.jpg"); editor.save("example_out.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param pageNumber The number of page on which the image is replaced. @param index The index of the image object must be replaced. @param imageFile The image file will be used for replacing.
      
      <param name="int"/>
      <param name="int"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.deleteImage(int,int[])">
       
        <p>Deletes the specified images on the specified page.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="JAva">PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); editor.deleteImage(1, new int[] {1, 2}); editor.save("example_out.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param pageNumber The number of page on which images must be deleted. @param index An array repsents images' indexes.
      
      <param name="int"/>
      <param name="int[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.deleteImage">
       
        <p>Deletes all images from PDF document.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf("example.pdf"); editor.deleteImage(); editor.save("example_out.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.replaceText(String,int,String,TextState)">
      / * 
        <p>/ * Binds PDF document for editing. / *</p> / * @param document PDF document for editing. /
      
      <param name="String"/>
      <param name="int"/>
      <param name="String"/>
      <param name="TextState"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.replaceText(String,String)">
       
        <p>Replaces text in the PDF file.</p>
        <p>
          <hr>
            <blockquote>
              <pre>The example demonstrates how to replace text in PDF document. 
                <pre lang="Java">// open document Document doc = new Document(inFile); // create PdfContentEditor object to edit text PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf(doc); // change text editor.replaceText("hello world", "hi world"); // save document doc.save(outFile);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return Returns true if replacement was made. @param srcString The string to be replaced. @param destString Replacing string.
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.replaceText(String,int,String)">
       
        <p>Replaces text in the PDF file on the specified page.</p>
        <p>
          <hr>
            <blockquote>
              <pre>The example demonstrates how to replace text in PDF document on the specified page. 
                <pre lang="Java">// open document Document doc = new Document(inFile); // create PdfContentEditor object to edit text PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf(doc); // change text editor.replaceText("hello world", 1, "hi world"); // save document doc.save(outFile);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return Returns true if replacement was made. @param srcString The sting to be replaced. @param thePage Page number (0 for all pages) @param destString Replacing string.
      
      <param name="String"/>
      <param name="int"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.replaceText(String,String,TextState)">
       
        <p>Replaces text in the PDF file using specified {@code TextState} object.</p>
        <p>
          <hr>
            <blockquote>
              <pre>The example demonstrates how to replace text and set {@code TextState} text properties for the new text. 
                <pre lang="Java">Document doc = new Document(inFile); // Create font and mark it to be embedded com.aspose.pdf.Font font = com.aspose.pdf.FontRepository.findFont("Courier New"); font.isEmbedded ( true); // create PdfContentEditor object to edit text PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf(doc); // create textState object com.aspose.pdf.TextState textState = new com.aspose.pdf.TextState(); textState.setFont ( font); textState.setFontStyle ( com.aspose.pdf.FontStyles.Bold | com.aspose.pdf.FontStyles.Italic); // change text with specified font editor.replaceText("hello world", "hi world", textState); // save document doc.save(outFile);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return Returns true if replacement was made. @param srcString String to be replaced @param destString Replacing string @param textState Text state (Text Color, Font etc)
      
      <param name="String"/>
      <param name="String"/>
      <param name="TextState"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.createMovie(java.awt.Rectangle,String,int)">
      <param name="java.awt.Rectangle"/>
      <param name="String"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.createSound(java.awt.Rectangle,String,String,int,String)">
      <param name="java.awt.Rectangle"/>
      <param name="String"/>
      <param name="String"/>
      <param name="int"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.deleteStamp(int,int[])">
       
        <p>Deletes multiple stamps on the specified page by stamp indexes.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfContentEditor contentEditor = new PdfContentEditor(); contentEditor.bindPdf("file.pdf"); contentEditor.deleteStamp(1, new int[] { 2, 3, 5} ); contentEditor.save("outfile.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param pageNumber Page number where stamp will be deleted. @param index Stamp indexes.
      
      <param name="int"/>
      <param name="int[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.deleteStampByIds(int[])">
       
        <p>Deletes stamps with specified IDs from all pages of the document.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfContentEditor contentEditor = new PdfContentEditor(); contentEditor.bindPdf("file.pdf"); contentEditor.deleteStampByIds(new int[] { 102, 103 } ); contentEditor.save("outfile.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param stampIds Array of stamp IDs.
      
      <param name="int[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.deleteStampByIds(int,int[])">
       
        <p>Deletes stamps on the specified page by multiple stamp IDs.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfContentEditor contentEditor = new PdfContentEditor(); contentEditor.bindPdf("file.pdf"); contentEditor.deleteStampByIds(1, new int[] { 100, 101 } ); contentEditor.save("outfile.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param pageNumber Page number where stamps will be deleted. @param stampIds Array of stamp IDs.
      
      <param name="int"/>
      <param name="int[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.deleteStampById(int,int)">
       
        <p>Deletes stamp on the specified page by stamp ID.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfContentEditor contentEditor = new PdfContentEditor(); contentEditor.bindPdf("file.pdf"); contentEditor.deleteStampById(1, 100); contentEditor.save("outfile.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param pageNumber Page number where stamp will be deleted. @param stampId Stamp ID.
      
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.hideStampById(int,int)">
       
        <p>Hides the stamp. After hiding, stamp visibility may be restored with ShowStampById method.</p> @param pageNumber Number of the page. @param stampId Stamp ID.
      
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.showStampById(int,int)">
       
        <p>Shows stamp which was hidden by HiddenStampById.</p> @param pageNumber Number of the page. @param stampId Stamp ID.
      
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.moveStampById(int,int,double,double)">
       
        <p>Changes position of the stamp on page.</p> @param pageNumber Numer of page. @param stampId Stamp ID @param x New stamp horizontal pozition on the page. @param y New stamp vertical position on the page.
      
      <param name="int"/>
      <param name="int"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.moveStamp(int,int,double,double)">
       
        <p>Changes position of the stamp on page.</p> @param pageNumber Number of page. @param stampIndex Index of stamp on the page. @param x New stamp horizontal position. @param y New stamp vertical position.
      
      <param name="int"/>
      <param name="int"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.deleteStampById(int)">
       
        <p>Delete stamp by ID from all pages of the document.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfContentEditor contentEditor = new PdfContentEditor(); contentEditor.bindPdf("file.pdf"); contentEditor.deleteStampById(100); contentEditor.save("outfile.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param stampId Stamp ID
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.bindPdf(aspose.pdf.Pdf)">
       
        <p>Binds a Pdf document for editing.</p> @param pdf Pdf document which came from Aspose.Pdf.Generator.
      
      <param name="aspose.pdf.Pdf"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.createLocalLink(java.awt.Rectangle,int,int)">
      <param name="java.awt.Rectangle"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.replaceText(String,String,int)">
       
        <p>Replaces text in the PDF file and sets font size.</p>
        <p>
          <hr>
            <blockquote>
              <pre>The example demonstrates how to replace text and set font size for the new text. 
                <pre lang="Java">// open document Document doc = new Document(inFile); // Create font and mark it to be embedded com.aspose.pdf.Font font = FontRepository.FindFont("Courier New"); font.isEmbedded ( true); // create PdfContentEditor object to edit text PdfContentEditor editor = new PdfContentEditor(); editor.bindPdf(doc); // change text with specified font editor.replaceText("hello world", "hi world", 14); // save document doc.save(outFile);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return Returns true if replacement was made. @param srcString String to be replaced @param destString Replacing string @param fontSize Font size
      
      <param name="String"/>
      <param name="String"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.getStamps(int)">
       
        <p>Returns array of stamps on the page.</p> @return Array of stamps. @param pageNumber Page number where stamps will be searched.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.#ctor">
       
        <p>The constructor of the PdfContentEditor object.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfContentEditor.#ctor(IDocument)">
      / * 
        <p>/ * Gets the document {@code PdfContentEditor} is working on. / *</p> /
      
      <param name="IDocument"/>
    </member>
    <member name="F:com.aspose.pdf.facades.PdfContentEditor.DOCUMENT_OPEN">
       
        <p>A document event type. Opens a document.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfContentEditor.DOCUMENT_CLOSE">
       
        <p>A document event type. Closes a document.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfContentEditor.DOCUMENT_WILL_SAVE">
       
        <p>A document event type. Excute a action before saving.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfContentEditor.DOCUMENT_SAVED">
       
        <p>A document event type. Excute a action after saving.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfContentEditor.DOCUMENT_WILL_PRINT">
       
        <p>A document event type. Excute a action before printing.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfContentEditor.DOCUMENT_PRINTED">
       
        <p>A document event type. Excute a action after printing.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.PdfConverter">
       
        <p>Represents a class to convert a pdf file's each page to images, supporting BMP, JPEG, PNG and TIFF now. Supported content in pdfs: pictures, form, comment.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.getShowHiddenAreas">
       
        <p>Gets or sets flag that controls visibility of hidden areas on the page.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.setShowHiddenAreas(boolean)">
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.getRenderingOptions">
       
        <p>Gets or sets rendering options.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.setRenderingOptions(RenderingOptions)">
      <param name="RenderingOptions"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.getFormPresentationMode">
       
        <p>Gets or sets form presentation mode.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.setFormPresentationMode(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.getResolution">
       
        <p>Gets resolution during convertting. The higher resolution, the slower convertting speed. The default value is 150.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.setResolution(Resolution)">
       
        <p>Sets resolution during convertting. The higher resolution, the slower convertting speed. The default value is 150.</p> 
      
      <param name="Resolution"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.getStartPage">
       
        <p>Gets start position which you want to convert. The minimal value is 1.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.setStartPage(int)">
       
        <p>Sets start position which you want to convert. The minimal value is 1.
          <br/> use setEndPage(int) before setStartPage(int)
        </p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.getEndPage">
       
        <p>Gets end position which you want to convert.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.setEndPage(int)">
       
        <p>Sets end position which you want to convert.
          <br/> use setEndPage(int) before setStartPage(int)
        </p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.setRangeOfPages(int,int)">
       
        <p>Sets range of pages between of which you want to convert.</p> 
      
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.getPassword">
       
        <p>Gets document OwnerPassword.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.setPassword(String)">
       
        <p>Sets document OwnerPassword.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.getUserPassword">
       
        <p>Gets document UserPassword.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.setUserPassword(String)">
       
        <p>Sets document UserPassword.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.getPageCount">
       
        <p>Gets the page count.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.doConvert">
       
        <p>Do some initial works for converting a pdf document to images.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfConverter converter = new PdfConverter(); converter.bindPdf("D:\\Test\\test.pdf"); converter.doConvert(); String prefix = "D:\\Test\\"; String suffix = ".jpg"; int imageCount = 1; while (converter.hasNextImage()) { converter.getNextImage(prefix + imageCount + suffix); imageCount++; }</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.saveAsTIFF(String)">
       
        <p>Converts each pages of a pdf document to images and saves images to a single TIFF file.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>PdfConverter converter = new PdfConverter(); converter.bindPdf(@"D:\Test\test.pdf"); converter.doConvert(); converter.saveAsTIFF(@"D:\Test\test.tiff");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param outputFile The file to save the TIFF image.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.saveAsTIFF(String,int)">
       
        <p>Converts each pages of a pdf document to images and saves images to a single TIFF file.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>PdfConverter converter = new PdfConverter(); converter.bindPdf(@"D:\Test\test.pdf"); converter.doConvert(); converter.saveAsTIFF(@"D:\Test\test.tiff");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param outputFile The output file. @param compressionType Type of the compression.
      
      <param name="String"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.saveAsTIFF(String,int,int)">
       
        <p>Converts each pages of a pdf document to images with dimensions, and saves images to a single TIFF file.</p> @param outputFile The file name to save the TIFF image @param imageWidth The image width, the unit is pixel. @param imageHeight The image height, the unit is pixel.
      
      <param name="String"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.saveAsTIFF(String,PageSize)">
       
        <p>Converts each pages of a pdf document to images with page size and saves images to a single TIFF file.</p> @param outputFile The file name to save the TIFF image @param pageSize The page size of the image.
      
      <param name="String"/>
      <param name="PageSize"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.saveAsTIFF(String,PageSize,TiffSettings)">
       
        <p>Converts each pages of a pdf document to images with page size and saves images to a single TIFF file.</p> @param outputFile The file name to save the TIFF image @param pageSize The page size of the image. @param settings Settings.
      
      <param name="String"/>
      <param name="PageSize"/>
      <param name="TiffSettings"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.saveAsTIFF(String,int,int,int)">
       
        <p>Converts each pages of a pdf document to images with dimensions, and saves images to a single TIFF file.</p> @param outputFile The file name to save the TIFF image @param imageWidth The image width, the unit is pixel. @param imageHeight The image height, the unit is pixel. @param compressionType Type of the compression.
      
      <param name="String"/>
      <param name="int"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.saveAsTIFF(String,int,int,TiffSettings)">
       
        <p>Converts each pages of a pdf document to images with dimensions, and saves images to a single TIFF file.</p> @param outputFile The file name to save the TIFF image @param imageWidth The image width, the unit is pixel. @param imageHeight The image height, the unit is pixel. @param settings Settings.
      
      <param name="String"/>
      <param name="int"/>
      <param name="int"/>
      <param name="TiffSettings"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.saveAsTIFF(String,int,int,TiffSettings,IIndexBitmapConverter)">
       
        <p>Converts each pages of a pdf document to images with dimensions, and saves images to a single TIFF file.</p> @param outputFile The file name to save the TIFF image @param imageWidth The image width, the unit is pixel. @param imageHeight The image height, the unit is pixel. @param settings Settings. @param converter External converter
      
      <param name="String"/>
      <param name="int"/>
      <param name="int"/>
      <param name="TiffSettings"/>
      <param name="IIndexBitmapConverter"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.saveAsTIFFClassF(String,int,int)">
       
        <p>Converts each pages of a pdf document to images and save images to a single TIFF ClassF file.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>PdfConverter converter = new PdfConverter(); converter.bindPdf(@"D:\Test\test.pdf"); converter.doConvert(); converter.saveAsTIFFClassF(@"D:\Test\test.tiff",204,196);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param outputFile The stream to save the TIFF image. @param imageWidth The image width, the unit is pixel. @param imageHeight The image height, the unit is pixel.
      
      <param name="String"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.saveAsTIFFClassF(String,PageSize)">
       
        <p>Converts each pages of a pdf document to images and save images to a single TIFF ClassF file.</p> @param outputFile The stream to save the TIFF image. @param pageSize The page size of the image.
      
      <param name="String"/>
      <param name="PageSize"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.saveAsTIFFClassF(OutputStream,int,int)">
       
        <p>Converts each pages of a pdf document to images and save images to a single TIFF ClassF stream.</p> @param outputStream The stream to save the TIFF image. @param imageWidth The image width, the unit is pixel. @param imageHeight The image height, the unit is pixel.
      
      <param name="OutputStream"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.saveAsTIFFClassF(OutputStream,PageSize)">
       
        <p>Converts each pages of a pdf document to images and save images to a single TIFF ClassF stream.</p> @param outputStream The stream to save the TIFF image. @param pageSize The page size of the image.
      
      <param name="OutputStream"/>
      <param name="PageSize"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.saveAsTIFF(OutputStream)">
       
        <p>Converts each pages of a pdf document to images and saves images to a single TIFF stream.</p> @param outputStream The stream to save the TIFF image.
      
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.saveAsTIFF(OutputStream,int)">
       
        <p>Converts each pages of a pdf document to images and saves images to a single TIFF file.</p> @param outputStream The output stream. @param compressionType Type of the compression.
      
      <param name="OutputStream"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.saveAsTIFF(OutputStream,PageSize)">
       
        <p>Converts each pages of a pdf document to images with page size and saves images to a single TIFF stream.</p> @param outputStream The stream to save the TIFF image. @param pageSize The page size of the image.
      
      <param name="OutputStream"/>
      <param name="PageSize"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.saveAsTIFF(OutputStream,PageSize,TiffSettings)">
       
        <p>Converts each pages of a pdf document to images with page size and saves images to a single TIFF stream.</p> @param outputStream The stream to save the TIFF image. @param pageSize The page size of the image. @param settings Settings.
      
      <param name="OutputStream"/>
      <param name="PageSize"/>
      <param name="TiffSettings"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.saveAsTIFF(OutputStream,int,int)">
       
        <p>Converts each pages of a pdf document to images with dimensions, and saves images to a single TIFF stream.</p> @param outputStream The stream to save the TIFF image. @param imageWidth The image width, the unit is pixel. @param imageHeight The image height, the unit is pixel.
      
      <param name="OutputStream"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.saveAsTIFF(OutputStream,int,int,int)">
       
        <p>Converts each pages of a pdf document to images with dimensions, and saves images to a single TIFF stream.</p> @param outputStream The stream to save the TIFF image. @param imageWidth The image width, the unit is pixel. @param imageHeight The image height, the unit is pixel. @param compressionType Type of the compression.
      
      <param name="OutputStream"/>
      <param name="int"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.saveAsTIFF(OutputStream,int,int,TiffSettings)">
       
        <p>Converts each pages of a pdf document to images with dimensions, and saves images to a single TIFF stream.</p> @param outputStream The stream to save the TIFF image. @param imageWidth The image width, the unit is pixel. @param imageHeight The image height, the unit is pixel. @param settings Settings.
      
      <param name="OutputStream"/>
      <param name="int"/>
      <param name="int"/>
      <param name="TiffSettings"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.saveAsTIFF(OutputStream,int,int,TiffSettings,IIndexBitmapConverter)">
       
        <p>Converts each pages of a pdf document to images with dimensions, and saves images to a single TIFF stream.</p> @param outputStream The stream to save the TIFF image. @param imageWidth The image width, the unit is pixel. @param imageHeight The image height, the unit is pixel. @param settings Settings. @param converter External converter
      
      <param name="OutputStream"/>
      <param name="int"/>
      <param name="int"/>
      <param name="TiffSettings"/>
      <param name="IIndexBitmapConverter"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.hasNextImage">
       
        <p>Indicates whether the pdf file has more images or not.</p> @return Can get more images or not, true if can, or false.
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.getNextImage(String)">
       
        <p>Saves image to file with default image format - jpeg.</p> @param outputFile The file path and name to save the image.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.getNextImage(String,PageSize)">
       
        <p>Saves image to file with ith given page size and default image format - jpeg.</p> @param outputFile The file path and name to save the image. @param pageSize The page size of the image.
      
      <param name="String"/>
      <param name="PageSize"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.getNextImage(String,ImageFormat)">
       
        <p>Saves image to file with the givin image format.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>PdfConverter converter = new PdfConverter(); converter.bindPdf(@"D:\Test\test.pdf"); converter.DoConvert(); String prefix = @"D:\Test\"; String suffix = ".png"; int imageCount = 1; while (converter.HasNextImage()) { converter.getNextImage(prefix + imageCount + suffix, ImageFormat.Png); imageCount++; }</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param outputFile The file path and name to save the image. @param format The format of the image.
      
      <param name="String"/>
      <param name="ImageFormat"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.getNextImage(String,PageSize,ImageFormat)">
       
        <p>Saves image to file with given page size and image format.</p> @param outputFile The file path and name to save the image. @param pageSize The page size of the image. @param format The format of the image.
      
      <param name="String"/>
      <param name="PageSize"/>
      <param name="ImageFormat"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.getNextImage(OutputStream)">
       
        <p>Saves image to stream with default image format - jpeg.</p> @param outputStream The stream to save the image.
      
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.getNextImage(OutputStream,PageSize)">
       
        <p>Saves image to stream with given page size.</p> @param outputStream The stream to save the image. @param pageSize The page size of the image.
      
      <param name="OutputStream"/>
      <param name="PageSize"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.getNextImage(OutputStream,ImageFormat)">
       
        <p>Saves image to stream with given image format.</p> @param outputStream The stream to save the image. @param format The format of the image.
      
      <param name="OutputStream"/>
      <param name="ImageFormat"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.getNextImage(OutputStream,PageSize,ImageFormat)">
       
        <p>Saves image to stream with given page size.</p> @param outputStream The stream to save the image. @param pageSize The page size of the image. @param format The format of the image.
      
      <param name="OutputStream"/>
      <param name="PageSize"/>
      <param name="ImageFormat"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.getNextImage(String,ImageFormat,int,int,int)">
       
        <p>Saves image to file with the given image format, dimensions and quality.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>PdfConverter converter = new PdfConverter(); converter.bindPdf(@"D:\Test\test.pdf"); converter.doConvert(); String prefix = @"D:\Test\"; String suffix = ".jpg"; int imageCount = 1; while (converter.HasNextImage()) { converter.getNextImage(prefix + imageCount + suffix, ImageFormat.Jpeg, 800, 1000, 50); imageCount++; }</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param outputFile The file path and name to save the image. @param format The format of the image. @param imageWidth The image width, the unit is pixel. @param imageHeight The image height, the unit is pixel. @param quality The Jpeg file's quality (0~100), 0 is lowest and 100 is highest
      
      <param name="String"/>
      <param name="ImageFormat"/>
      <param name="int"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.getNextImage(OutputStream,ImageFormat,int,int,int)">
       
        <p>Saves image to stream with the givin image format, dimensions and quality.</p> @param outputStream The stream to save the image. @param format The format of the image. @param imageWidth The image width, the unit is pixel. @param imageHeight The image height, the unit is pixel. @param quality The Jpeg file's quality (0~100), 0 is lowest and 100 is highest
      
      <param name="OutputStream"/>
      <param name="ImageFormat"/>
      <param name="int"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.getNextImage(String,ImageFormat,double,double,int)">
       
        <p>Saves image to file with the givin image format, image size, and quality.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>PdfConverter converter = new PdfConverter(); converter.bindPdf(@"D:\Test\test.pdf"); converter.doConvert(); String prefix = @"D:\Test\"; String suffix = ".jpg"; int imageCount = 1; float pixelX=800f; float pixelY=600f; while (converter.HasNextImage()) { converter.getNextImage(prefix + imageCount + suffix, ImageFormat.Jpeg, pixelX, pixelY, 50); imageCount++; }</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param outputFile The file path and name to save the image. @param format The format of the image. @param imageWidth The image width, the unit is pixels. @param imageHeight The image height, the unit is pixels.. @param quality The Jpeg file's quality (0~100), 0 is lowest and 100 is highest
      
      <param name="String"/>
      <param name="ImageFormat"/>
      <param name="double"/>
      <param name="double"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.getNextImage(OutputStream,ImageFormat,double,double,int)">
       
        <p>Saves image to stream with the givin image format, size and quality.</p> @param outputStream The stream to save the image. @param format The format of the image. @param imageWidth The image width, the unit is pixel. @param imageHeight The image height, the unit is pixel. @param quality The Jpeg file's quality (0~100), 0 is lowest and 100 is highest
      
      <param name="OutputStream"/>
      <param name="ImageFormat"/>
      <param name="double"/>
      <param name="double"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.bindPdf(String)">
       
        <p>Binds a Pdf file for converting.</p> @param inputFile The pdf file.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.bindPdf(InputStream)">
       
        <p>Binds a Pdf Stream for convert.</p> @param inputStream The pdf Stream.
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.close">
       
        <p>Close the instance of PdfConverter and release the resources.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.saveAsTIFFClassF(String)">
       
        <p>Converts each pages of a pdf document to images and save images to a single TIFF ClassF file.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfConverter converter = new PdfConverter(); converter.bindPdf("D:\\Test\\test.pdf"); converter.doConvert(); converter.saveAsTIFFClassF("D:\\Test\\test.tiff");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param outputFile The stream to save the TIFF image.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.saveAsTIFFClassF(OutputStream)">
       
        <p>Converts each pages of a pdf document to images and save images to a single TIFF ClassF stream.</p> @param outputStream The stream to save the TIFF image.
      
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.saveAsTIFF(String,TiffSettings)">
       
        <p>Converts each pages of a pdf document to images with and saves images to a single TIFF file.</p> @param outputFile The file name to save the TIFF image @param settings Settings.
      
      <param name="String"/>
      <param name="TiffSettings"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.saveAsTIFF(String,TiffSettings,IIndexBitmapConverter)">
       
        <p>Converts each pages of a pdf document to images with and saves images to a single TIFF file.</p> @param outputFile The file name to save the TIFF image @param settings Settings. @param converter External converter
      
      <param name="String"/>
      <param name="TiffSettings"/>
      <param name="IIndexBitmapConverter"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.saveAsTIFF(OutputStream,TiffSettings)">
       
        <p>Converts each pages of a pdf document to images and saves images to a single TIFF stream.</p> @param outputStream The stream to save the TIFF image. @param settings Settings.
      
      <param name="OutputStream"/>
      <param name="TiffSettings"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.saveAsTIFF(OutputStream,TiffSettings,IIndexBitmapConverter)">
       
        <p>Converts each pages of a pdf document to images and saves images to a single TIFF stream.</p> @param outputStream The stream to save the TIFF image. @param settings Settings. @param converter External converter
      
      <param name="OutputStream"/>
      <param name="TiffSettings"/>
      <param name="IIndexBitmapConverter"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.getNextImage(String,ImageFormat,int,int)">
       
        <p>Saves image to file with the given image format and dimensions.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfConverter converter = new PdfConverter(); converter.bindPdf("D:\\Test\\test.pdf"); converter.DoConvert(); String prefix = "D:\\Test\\"; String suffix = ".jpg"; int imageCount = 1; while (converter.hasNextImage()) { converter.getNextImage(prefix + imageCount + suffix, ImageFormat.Jpeg, 800, 1000); imageCount++; }</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param outputFile The file path and name to save the image. @param format The format of the image. @param imageWidth The image width, the unit is pixel. @param imageHeight The image height, the unit is pixel.
      
      <param name="String"/>
      <param name="ImageFormat"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.getNextImage(OutputStream,ImageFormat,int,int)">
       
        <p>Saves image to stream with the givin image format, size and quality.</p> @param outputStream The stream to save the image. @param format The format of the image. @param imageWidth The image width, the unit is pixel. @param imageHeight The image height, the unit is pixel.
      
      <param name="OutputStream"/>
      <param name="ImageFormat"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.getNextImage(OutputStream,ImageFormat,int)">
       
        <p>Saves image to stream with given image format and quality.</p> @param outputStream The stream to save the image. @param format The format of the image. @param quality The Jpeg file's quality (0~100), 0 is lowest and 100 is highest
      
      <param name="OutputStream"/>
      <param name="ImageFormat"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.getNextImage(OutputStream,PageSize,ImageFormat,int)">
       
        <p>Saves image to stream with given page size, image format and quality.</p> @param outputStream The stream to save the image. @param format The format of the image. @param pageSize The page size of the image. @param quality The Jpeg file's quality (0~100), 0 is lowest and 100 is highest
      
      <param name="OutputStream"/>
      <param name="PageSize"/>
      <param name="ImageFormat"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.getNextImage(String,ImageFormat,int)">
       
        <p>Saves image to file with given image format and quality.</p> @param outputFile The file path and name to save the image. @param format The format of the image. @param quality The Jpeg file's quality (0~100), 0 is lowest and 100 is highest
      
      <param name="String"/>
      <param name="ImageFormat"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.getNextImage(String,PageSize,ImageFormat,int)">
       
        <p>Saves image to file with given page size, image format and quality.</p> @param outputFile The file path and name to save the image. @param pageSize The page size of the image. @param format The format of the image. @param quality The Jpeg file's quality (0~100), 0 is lowest and 100 is highest
      
      <param name="String"/>
      <param name="PageSize"/>
      <param name="ImageFormat"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.dispose">
      / * 
        <p>/ * Currently bound document. / *</p> /
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.#ctor">
      /* 
        <p>/* Binds a Pdf document for editing. /*</p> /* @param pdf Pdf document which came from Aspose.Pdf.Generator. /
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfConverter.#ctor(IDocument)">
       
        <p>Initializes new {@code PdfConverter} object on base of the {@code document}.</p> @param document Pdf document.
      
      <param name="IDocument"/>
    </member>
    <member name="T:com.aspose.pdf.facades.PdfExtractor">
       
        <p>Class for extracting images and text from PDF document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.getStartPage">
       
        <p>Pdf.Engine object representing PDF document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.setStartPage(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.getEndPage">
       
        <p>Gets or sets end page in the page range where extracting operation will be performed.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfExtractor ext = new PdfExtractor(); ext.bindBdf("sample.pdf"); ext.setStartPage(2); ext.setEndPage(3); ext.extractText();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.setEndPage(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.getExtractTextMode">
       
        <p>Sets the mode for extract text's result.</p>
        <p>
          <hr>
            <blockquote>
              <pre>The example demonstratres the {@code ExtractTextMode} property usage in text extraction scenario. 
                <pre lang="Java">PdfExtractor extractor = new PdfExtractor(); extractor.bindPdf(@"D:\Text\text.pdf"); extractor.setExtractTextMode(1); extractor.extractText(); extractor.getText(@"D:\Text\text.txt");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p>Value: 0 is pure text mode and 1 is raw ordering mode. Default is 0.
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.setExtractTextMode(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.getTextSearchOptions">
       
        <p>Gets or sets text search options.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.setTextSearchOptions(TextSearchOptions)">
      <param name="TextSearchOptions"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.getExtractImageMode">
       
        <p>Sets the mode for extract images process.</p>
        <p>
          <hr>Default value is ExtractImageMode.DefinedInResources that extracts all images defined in resources. To extract actually shown images ExtractImageMode.ActuallyUsed mode should be used.</hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.setExtractImageMode(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.isBidi">
       
        <p>Is true when text has hebriew or arabic symbols. This case must be specially considered because string functions change their behaviour and start process text from right to left (except numbers and other non text chars).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.extractText">
       
        <p>Extracts text from a Pdf document.</p>
        <p>
          <hr>
            <blockquote>
              <pre>First example demonstratres how to extract all the text from PDF file. 
                <pre lang="Java">PdfExtractor extractor = new PdfExtractor(); extractor.bindPdf("D:\Text\text.pdf"); extractor.extractText(); extractor.getText("D:\Text\text.txt");</pre> Second example demonstratres how to extract each page's text into one txt file.
                <pre lang="Java">PdfExtractor extractor = new PdfExtractor(); extractor.bindPdf(TestPath + "Aspose.Pdf.Kit.Pdf"); extractor.extractText(); String prefix = TestPath + "Aspose.Pdf.Kit"; String suffix = ".txt"; int pageCount = 1; while (extractor.hasNextPageText()) { extractor.getNextPageText(prefix + pageCount + suffix); pageCount++; }</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.extractText(com.aspose.ms.System.Text.Encoding)">
       
        <p>Extracts text from a Pdf document using specified encoding.</p>
        <p>
          <hr>
            <blockquote>
              <pre>First example demonstratres how to extract all the text from PDF file. 
                <pre lang="Java">PdfExtractor extractor = new PdfExtractor(); extractor.bindPdf("D:\\Text\\text.pdf"); extractor.extractText(Encoding.Unicode); extractor.getText("D:\\Text\\text.txt");</pre> Second example demonstratres how to extract each page's text into one txt file. 
                <pre lang="Java">PdfExtractor extractor = new PdfExtractor(); extractor.bindPdf(TestPath + "Aspose.Pdf.Kit.Pdf"); extractor.extractText(Encoding.Unicode); String prefix = TestPath + "Aspose.Pdf.Kit"; String suffix = ".txt"; int pageCount = 1; while (extractor.hasNextPageText()) { extractor.getNextPageText(prefix + pageCount + suffix); pageCount++; }</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param encoding The encoding of the extracted text.
      
      <param name="com.aspose.ms.System.Text.Encoding"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.getText(String)">
       
        <p>Saves text to file. see also:{@code ExtractText}</p> @param outputFile The file path and name to save the text.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.getText(OutputStream)">
       
        <p>Saves text to stream. see also:{@code ExtractText}</p> @param outputStream The stream to save the text.
      
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.bindPdf(String)">
       
        <p>Bind input PDF file.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfExtractor ext = new PdfExtractor(); ext.bindPdf("sample.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param inputFile PDF fiel to bind
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.bindPdf(InputStream)">
       
        <p>Binds PDF document from stream.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfExtractor ext = new PdfExtractor(); InputStream stream = new FileInputStream("sample.pdf"); ext.bindPdf(stream);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param inputStream Stream containing PDF document data
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.extractImage">
       
        <p>Extract images from PDF file.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfExtractor extractor = new PdfExtractor(); extractor.bindPdf("sample.pdf"); extractor.extractImage(); int i = 1; while (extractor.HasNextImage()) { extractor.getNextImage("image-" + i +".pdf"); }</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.hasNextImage">
       
        <p>Checks if more images are accessible in PDF document. Note: ExtractImage must be called before using of this method.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfExtractor extractor = new PdfExtractor(); extractor.bindPdf("sample.pdf"); extractor.extractImage(); int i = 1; while (extractor.hasNextImage()) { extractor.getNextImage("image-" + i +".pdf"); }</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return Trues if more images are accessible
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.getNextImage(String)">
       
        <p>Retreives next image from PDF document. Note: ExtractImage must be called before using of this method.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfExtractor extractor = new PdfExtractor(); extractor.bindPdf("sample.pdf"); extractor.extractImage(); int i = 1; while (extractor.hasNextImage()) { extractor.getNextImage("image-" + i +".pdf"); }</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return True is image is successfully extracted @param outputFile File where image will be stored
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.getNextImage(String,ImageFormat)">
       
        <p>Retreives next image from PDF document with given image format. Note: ExtractImage must be called before using of this method.</p> @return True is image is successfully extracted @param outputFile File where image will be stored
      
      <param name="String"/>
      <param name="ImageFormat"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.getNextImage(OutputStream,ImageFormat)">
       
        <p>Retreive next image from PDF file and stores it into stream with given image format.</p> @return @param outputStream Stream where image data will be saved @param format The format of the image.
      
      <param name="OutputStream"/>
      <param name="ImageFormat"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.getNextImage(OutputStream)">
       
        <p>Retreive next image from PDF file and stores it into stream.</p> @return @param outputStream Stream where image data will be saved
      
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.getAttachNames">&lt;p&gt; Returns list of attachments in PDF file. Note: ExtractAttachments must be called befor using this method. &lt;/p&gt;&lt;p&gt;&lt;hr&gt;&lt;blockquote&gt;&lt;pre&gt; Example demonstrates how to extract attachment names form PDF file. &lt;pre lang="Java"&gt; PdfExtractor extractor = new PdfExtractor(); extractor.bindPdf(TestSettings.GetInputFile("sample.pdf")); extractor.ExtractAttachment(); List attachments = extractor.getAttachNames(); for (String name : (Iterable&lt;String&gt;)attachments) System.out.println(name); &lt;/pre&gt; &lt;/pre&gt;&lt;/blockquote&gt;&lt;/hr&gt;&lt;/p&gt; @return List of attachments</member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.extractAttachment"/>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.extractAttachment(String)">
       
        <p>Extracts attachment to PDF file by attachment name.</p> @param attachmentFileName Name of attachment to extract
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.getAttachment(String)">
       
        <p>Stores attachment into file.</p> @param outputPath Directory path where attachment(s) will be stored. Null or empty string means attachment(s) will be placed in the application directory.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.hasNextPageText">&lt;p&gt; Indicates that whether can get more texts or not. &lt;/p&gt;&lt;p&gt;&lt;hr&gt;&lt;blockquote&gt;&lt;pre&gt; The example demonstratres the {@code HasNextPageText} property usage in text extraction scenario. &lt;pre lang="Java"&gt; PdfExtractor extractor = new PdfExtractor(); extractor.bindPdf(TestPath + "Aspose.Pdf.Kit.Pdf"); extractor.extractText(Encoding.Unicode); String prefix = TestPath + "Aspose.Pdf.Kit"; String suffix = ".txt"; int pageCount = 1; while (extractor.hasNextPageText()) { extractor.getNextPageText(prefix + pageCount + suffix); pageCount++; } &lt;/pre&gt;&lt;/blockquote&gt;&lt;/hr&gt;&lt;/p&gt; @return Can get more texts or not, true is can, or false.</member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.getNextPageText(String)">&lt;p&gt; Saves one page's text to file. &lt;/p&gt;&lt;p&gt;&lt;hr&gt;&lt;blockquote&gt;&lt;pre&gt; The example demonstratres the GetNextPageText method usage in text extraction scenario. &lt;pre lang="Java"&gt; PdfExtractor extractor = new PdfExtractor(); extractor.bindPdf(TestPath + @"Aspose.Pdf.Kit.Pdf"); extractor.extractText(Encoding.Unicode); String prefix = TestPath + @"Aspose.Pdf.Kit"; String suffix = ".txt"; int pageCount = 1; while (extractor.hasNextPageText()) { extractor.getNextPageText(prefix + pageCount + suffix); pageCount++; } &lt;/pre&gt;&lt;/blockquote&gt;&lt;/hr&gt;&lt;/p&gt; @param outputFile The file path and name to save the text. 
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.getNextPageText(OutputStream)">
       
        <p>Saves one page's text to stream.</p>
        <p>
          <hr>
            <blockquote>
              <pre>The example demonstratres the {@code GetNextPageText} method usage in text extraction scenario. 
                <pre lang="Java">PdfExtractor extractor = new PdfExtractor(); extractor.bindPdf(TestPath + @"Aspose.Pdf.Kit.Pdf"); extractor.extractText(Encoding.Unicode); String prefix = TestPath + "Aspose.Pdf.Kit"; String suffix = ".txt"; int pageCount = 1; while (extractor.hasNextPageText()) { FileInputStream fs = new FileInputStream(prefix + pageCount + suffix, FileMode.Create); extractor.getNextPageText(fs); fs.close(); pageCount++; }</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param outputStream The stream to save the text.
      
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.getText(OutputStream,boolean)">
       
        <p>Saves text to stream. see also:{@code ExtractText}</p> @param outputStream The stream to save the text. @param filterNotAscii If this parameter is true all Not ASCII simbols will be removed
      
      <param name="OutputStream"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.getAttachment">&lt;p&gt; Saves all the attachment file to streams. &lt;/p&gt;&lt;p&gt;&lt;hr&gt;&lt;blockquote&gt;&lt;pre&gt; &lt;pre lang="Java"&gt; PdfExtractor extractor = new PdfExtractor(); extractor.bindPdf(path + "Attach.pdf"); extractor.extractAttachment(); IList names = extractor.getAttachNames(); ByteArrayOutputStream[] tempStreams = extractor.getAttachment(); for (int i=0; i&amp;lt;tempStreams.Length; i++) { string name = (string)names[i]; OutputStream fs = new FileOutputStream(path + name); fs.write(tempStreams[i].toByteArray()); fs.close(); } &lt;/pre&gt;&lt;/blockquote&gt;&lt;/hr&gt;&lt;/p&gt; @return The stream array of the attachment file in the pdf document.</member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.getAttachmentInfo">
       
        <p>Gets the list of attachments.</p> @return Returns an ArrayList.
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.getResolution">
       
        <p>Gets resolution for extracted images. Default value is 150. Images which have greater resolution value are more clear. However increasing resolution value results in increasing time and memory needed to extract images. Usually to get clear image it's enough to set resolution to 150 or 300.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.setResolution(int)">
       
        <p>Set resolution for extracted images. Default value is 150. Images which have greater resolution value are more clear. However increasing resolution value results in increasing time and memory needed to extract images. Usually to get clear image it's enough to set resolution to 150 or 300.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.getPassword">
       
        <p>Gets input file's password.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.setPassword(String)">
       
        <p>Sets input file's password.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.#ctor">
       
        <p>Binds a Pdf document for editing.</p> @param pdf Pdf document which came from Aspose.Pdf.Generator.
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfExtractor.#ctor(IDocument)">
       
        <p>Initializes new {@code PdfExtractor} object on base of the {@code document}.</p> @param document Pdf document.
      
      <param name="IDocument"/>
    </member>
    <member name="T:com.aspose.pdf.facades.PdfFileEditor">
       
        <p>Implements operations with PDF file: concatenation, splitting, extracting pages, making booklet, etc.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.getCorruptedItems">
       
        <p>Array of encountered problems when concatenation was performed. For every corrupted document from passed to Concatenate() function new CorruptedItem entry is created. This property may be used only when CorruptedFileAction is ConcatenateIgnoringCorrupted.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">//concatenate documents and show information about corrupted documents PdfFileEditor pfe = new PdfFileEditor(); pfe.setCorruptedFileAction(PdfFileEditor.ConcatenateCorruptedFileAction.ConcatenateIgnoringCorrupted); if (pfe.getCorruptedItems().length &gt;0) { for(PdfFileEditor.CorruptedItem item : pfe.getCorruptedItems()) { System.out.println(item.getIndex()+ " reason: " + item.getException()); } }</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.getCorruptedFileAction">
       
        <p>This property defines behavior when concatenating process met corrupted file. Possible values are: StopWithError and ConcatenateIgnoringCorrupted.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.setCorruptedFileAction(int)">
       
        <p>This property defines behavior when concatenating process met corrupted file. Possible values are: StopWithError and ConcatenateIgnoringCorrupted.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.getOwnerPassword">
       
        <p>Gets owner's password if the source input Pdf file is encrypted. This property is not implemented yet.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.setOwnerPassword(String)">
       
        <p>Sets owner's password if the source input Pdf file is encrypted. This property is not implemented yet.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.getAllowConcatenateExceptions">
       
        <p>If set to true, exceptions are thrown if error occured. Else excetion are not thrown and methods return false if failed.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); pfe.setAllowConcatenatedException (true);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.setAllowConcatenateExceptions(boolean)">
       
        <p>If set to true, exceptions are thrown if error occured. Else excetion are not thrown and methods return false if failed.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); pfe.setAllowConcatenatedException (true);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.setConvertTo(int)">
       
        <p>Sets PDF file format. Result file will be saved in specified file format. If this property is not specified then file will be save in default PDF format without conversion.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.setCloseConcatenatedStreams(boolean)">
       
        <p>If set to true, streams are closed after operation.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); pfe.setCloseConcatenatedStreams (true);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.getUniqueSuffix">&lt;p&gt; Get format of the suffix which is added to field name to make it unique when forms are concatenated. This string must contain %NUM% substring which will be replaced with numbers. For example if UniqueSuffix = "ABC%NUM%" then for field "fieldName" names will be: fieldNameABC1, fieldNameABC2, fieldNameABC3 etc.</member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.setUniqueSuffix(String)">
       
        <p>Set format of the suffix which is added to field name to make it unique when forms are concatenated. This string must contain %NUM% substring which will be replaced with numbers. For example if UniqueSuffix = "ABC%NUM%" then for field "fieldName" names will be: fieldNameABC1, fieldNameABC2, fieldNameABC3 etc.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileEditor ed = new PdfFileEditor(); ed.setUniqueSuffix ( "_%NUM%");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.getKeepFieldsUnique">
       
        <p>If true then field names will be made unique when forms are concatenated. Suffixes will be added to field names, suffix template may be specified in UniqueSuffix property.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.setKeepFieldsUnique(boolean)">
       
        <p>If true then field names will be made unique when forms are concatenated. Suffixes will be added to field names, suffix template may be specified in UniqueSuffix property.</p> 
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.concatenate(String,String,String)">
       
        <p>Concatentates two files.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileEditor fileEditor = new PdfFileEditor(); fileEditor.concatenate("file1.pdf", "file2.pdf", "outfile.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return True if operation was succeeded. @param firstInputFile First file to concatenate. @param secInputFile Second file to concatenate. @param outputFile Output file.
      
      <param name="String"/>
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.concatenate(InputStream,InputStream,OutputStream)">
       
        <p>Concatenates two files.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileEditor fileEditor = new PdfFileEditor(); InputStream stream1 = new FileInputStream("file1.pdf"); InputStream stream2 = new FileInputStream("file2.pdf"); OutputStream outstream = new FileOutputStream("outfile.pdf"); fileEditor.concatenate(stream1, stream2, outstream);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return True if operation was succeeded. @return True if operation was succeeded. @param firstInputStream Stream of first file. @param secInputStream Stream of second file. @param outputStream Stream where result file will be stored.
      
      <param name="InputStream"/>
      <param name="InputStream"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.concatenate(Document[],Document)">
       
        <p>Concatenates documents.</p> @return True if concatenation is successful. @param src Array of source documents. @param dest Destination document.
      
      <param name="Document[]"/>
      <param name="Document"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.concatenate(String[],String)">
       
        <p>Concatenates files into one file.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); pfe.concatenate(new String[] { "src1.pdf", "src2.pdf" }, "dest.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return True if operation was succeeded. @param inputFiles Array of files to concatenate. @param outputFile Name of output file.
      
      <param name="String[]"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.concatenate(InputStream[],OutputStream)">
       
        <p>Concatenates files</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileEditor fileEditor = new PdfFileEditor(); InputStream stream1 = new FileInputStream("file1.pdf"); InputStream stream2 = new FileInputStream("file2.pdf"); OutputStream outstream = new FileOutputStream("outfile.pdf"); fileEditor.concatenate(new Stream[] { stream1, stream2 } , outstream);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return True if operation was succeeded. @param inputStream Array of streams to be concatenated. @param outputStream Stream where result file will be stored.
      
      <param name="InputStream[]"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.concatenate(String,String,String,String)">
       
        <p>Merges two Pdf documents into a new Pdf document with pages in alternate ways and fill the blank places with blank pages. e.g.: document1 has 5 pages: p1, p2, p3, p4, p5. document2 has 3 pages: p1', p2', p3'. Merging the two Pdf document will produce the result document with pages:p1, p1', p2, p2', p3, p3', p4, blankpage, p5, blankpage.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); pfe.concatenate("src1.pdf", "src2.pdf", "blank.pdf", "dest.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return True if operation was succeeded. @param firstInputFile First file. @param secInputFile Second file. @param blankPageFile PDF file with blank page. @param outputFile Result file.
      
      <param name="String"/>
      <param name="String"/>
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.concatenate(InputStream,InputStream,InputStream,OutputStream)">
       
        <p>Merges two Pdf documents into a new Pdf document with pages in alternate ways and fill the blank places with blank pages. e.g.: document1 has 5 pages: p1, p2, p3, p4, p5. document2 has 3 pages: p1', p2', p3'. Merging the two Pdf document will produce the result document with pages:p1, p1', p2, p2', p3, p3', p4, blankpage, p5, blankpage.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileEditor fileEditor = new PdfFileEditor(); InputStream stream1 = new FileInputStream("file1.pdf"); InputStream stream2 = new FileInputStream("file2.pdf"); InputStream blank = new FileInputStream("blank.pdf"); OutputStream outstream = new FileOutputStream("outfile.pdf"); fileEditor.concatenate(new Stream[] { stream1, stream2, blank } , outstream);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return True if operation was succeeded. @param firstInputStream The first Pdf Stream. @param secInputStream The second Pdf Stream. @param blankPageStream The Pdf Stream with blank page @param outputStream Output Pdf Stream.
      
      <param name="InputStream"/>
      <param name="InputStream"/>
      <param name="InputStream"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.append(InputStream,InputStream[],int,int,OutputStream)">
       
        <p>Appends pages, which are chosen from array of documents in portStreams. The result document includes firstInputFile and all portStreams documents pages in the range startPage to endPage.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileEditor fileEditor = new PdfFileEditor(); InputStream instream = new FileInputStream("input.pdf"); InputStream stream1 = new FileInputStream("file1.pdf"); InputStream stream2 = new FileInputStream("file2.pdf"); OtputStream outstream = new FileOutputStream("outfile.pdf"); fileEditor.append(instream, new InputStream[] { stream1, stream2}, 3, 5, outstream);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return True for success, or false. @param inputStream Input Pdf stream. @param portStreams Documents to copy pages from. @param startPage Page starts in portStreams documents. @param endPage Page ends in portStreams documents . @param outputStream Output Pdf stream.
      
      <param name="InputStream"/>
      <param name="InputStream[]"/>
      <param name="int"/>
      <param name="int"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.append(String,String[],int,int,String)">
       
        <p>Appends pages, which are chosen from portFiles documents. The result document includes firstInputFile and all portFiles documents pages in the range startPage to endPage.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileEditor fileEditor = new PdfFileEditor(); fileEditor.append("input.pdf", new string[] { "file1.pdf", "file2.pdf"}, 3, 5, "outfile.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return True if operation was succeeded. @param inputFile Input Pdf file. @param portFiles Documents to copy pages from. @param startPage Page starts in portFiles documents. @param endPage Page ends in portFiles documents . @param outputFile Output Pdf document.
      
      <param name="String"/>
      <param name="String[]"/>
      <param name="int"/>
      <param name="int"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.append(String,String,int,int,String)">
       
        <p>Appends pages, which are chosen from portFile within the range from startPage to endPage, in portFile at the end of firstInputFile.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileEditor fileEditor = new PdfFileEditor(); fileEditor.append("input.pdf", "file1.pdf", 3, 5, "outfile.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return True if operation was succeeded. @param inputFile Input Pdf file. @param portFile Pages from Pdf file. @param startPage Page starts in portFile. @param endPage Page ends in portFile. @param outputFile Output Pdf document.
      
      <param name="String"/>
      <param name="String"/>
      <param name="int"/>
      <param name="int"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.append(InputStream,InputStream,int,int,OutputStream)">
       
        <p>Appends pages,which are chosen from portStream within the range from startPage to endPage, in portStream at the end of firstInputStream.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileEditor fileEditor = new PdfFileEditor(); InputStream instream = new FileInputStream("input.pdf"); InputStream stream1 = new FileInputStream("file1.pdf"); OutputStream outstream = new FileOutputStream("outfile.pdf"); fileEditor.append(instream, stream1, 3, 5, outstream);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return True for success, or false. @param inputStream Input file Stream. @param portStream Pages from Pdf file Stream. @param startPage Page starts in portFile Stream. @param endPage Page ends in portFile Stream. @param outputStream Output Pdf file Stream.
      
      <param name="InputStream"/>
      <param name="InputStream"/>
      <param name="int"/>
      <param name="int"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.insert(String,int,String,int,int,String)">
       
        <p>Inserts pages from an other file into the Pdf file at a position.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); pfe.insert("file1.pdf", 1, "file2.pdf", 2, 6, "out.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return True for success, or false. @param inputFile Input Pdf file. @param insertLocation Position in input file. @param portFile The porting Pdf file. @param startPage Start position in portFile. @param endPage End position in portFile. @param outputFile Output Pdf file.
      
      <param name="String"/>
      <param name="int"/>
      <param name="String"/>
      <param name="int"/>
      <param name="int"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.insert(InputStream,int,InputStream,int,int,OutputStream)">
       
        <p>Inserts pages from an other file into the input Pdf file.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); outstream sourceStream = new FileInputStream("file1.pdf"); outstream insertedStream = new FileInputStream("file2.pdf"); OutputStream outStream = new FileOutputStream("out.pdf"); pfe.insert(sourceStream, 1, insertedStream, 2, 6, outStream);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return True for success, or false. @param inputStream Input Stream of Pdf file. @param insertLocation Insert position in input file. @param portStream Stream of Pdf file for pages. @param startPage From which page to start. @param endPage To which page to end. @param outputStream Output Stream.
      
      <param name="InputStream"/>
      <param name="int"/>
      <param name="InputStream"/>
      <param name="int"/>
      <param name="int"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.insert(String,int,String,int[],String)">
       
        <p>Inserts pages from an other file into the input Pdf file.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); outstream sourceStream = new FileInputStream("file1.pdf"); outstream insertedStream = new FileInputStream("file2.pdf"); OutputStream outStream = new FileInputStream("out.pdf"); pfe.insert(sourceStream, 1, insertedStream, 2, 6, outStream);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return True for success, or false. @param inputFile Input Pdf file. @param insertLocation Insert position in input file. @param portFile Pages from the Pdf file. @param pageNumber The page number of the ported in portFile. @param outputFile Output Pdf file.
      
      <param name="String"/>
      <param name="int"/>
      <param name="String"/>
      <param name="int[]"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.insert(InputStream,int,InputStream,int[],OutputStream)">
       
        <p>Inserts pages from an other file into the input Pdf file.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); outstream sourceStream = new FileInputStream("file1.pdf"); outstream insertedStream = new FileInputStream("file2.pdf"); OutputStream outStream = new FileoutputStream("out.pdf"); pfe.Insert(sourceStream, 1, insertedStream, new int[] { 3, 4, 5}, outStream);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return True if operation was succeeded. @param inputStream Input Stream of Pdf file. @param insertLocation Insert position in input file. @param portStream Stream of Pdf file for pages. @param pageNumber The page number of the ported in portFile. @param outputStream Output Stream.
      
      <param name="InputStream"/>
      <param name="int"/>
      <param name="InputStream"/>
      <param name="int[]"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.delete(String,int[],String)">
       
        <p>Deletes pages specified by number array from input file, saves as a new Pdf file.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); pfe.delete("input.pdf", new int[] { 2, 3 }, "out.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return True if operation was succeeded. @param inputFile Input file path. @param pageNumber Index of page out of the input file. @param outputFile Output file path.
      
      <param name="String"/>
      <param name="int[]"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.delete(InputStream,int[],OutputStream)">
       
        <p>Deletes pages specified by number array from input file, saves as a new Pdf file.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); InputStream intputStream = new FileInputStream("input.pdf"); OutputStream outputStream = new FileInputStream("output.pdf"); pfe.Delete(inputStream, new int[] { 2, 3 }, outputStream);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return True for success, or false. @param inputStream Input file Stream. @param pageNumber Index of page out of the input file. @param outputStream Output file stream.
      
      <param name="InputStream"/>
      <param name="int[]"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.extract(String,int,int,String)">
       
        <p>Extracts pages from input file,saves as a new Pdf file.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); pfe.Extract("input.pdf", 3, 7, "output.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return True for success, or false. @param inputFile Input Pdf file path. @param startPage Start page number. @param endPage End page number. @param outputFile Output Pdf file path.
      
      <param name="String"/>
      <param name="int"/>
      <param name="int"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.extract(String,int[],String)">
       
        <p>Extracts pages specified by number array, saves as a new PDF file.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); pfe.extract("input.pdf", new int[] { 3, 5, 7 }, "output.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return True if operation was succeeded. @param inputFile Input file path. @param pageNumber Index of page out of the input file. @param outputFile Output file path.
      
      <param name="String"/>
      <param name="int[]"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.extract(InputStream,int,int,OutputStream)">
       
        <p>Extracts pages from input file,saves as a new Pdf file.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); InputStream sourceStream = new FileInputStream("file1.pdf"); OutputStream outStream = new FileOutputStream("out.pdf"); pfe.extract(sourceStream, 1, 3, 6, outStream);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return True for success, or false. @param inputStream Input file Stream. @param startPage Start page number. @param endPage End page number. @param outputStream Output Pdf file Stream.
      
      <param name="InputStream"/>
      <param name="int"/>
      <param name="int"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.extract(InputStream,int[],OutputStream)">
       
        <p>Extracts pages specified by number array, saves as a new Pdf file.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); InputStream sourceStream = new FileInputStream("file1.pdf"); OutputStream outStream = new FileInputStream("out.pdf"); pfe.extract(sourceStream, new int[] { 3, 5, 8 }, outStream);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return True for success, or false. @param inputStream Input file Stream. @param pageNumber Index of page out of the input file. @param outputStream Output file stream.
      
      <param name="InputStream"/>
      <param name="int[]"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.splitFromFirst(String,int,String)">
       
        <p>Splits Pdf file from first page to specified location,and saves the front part as a new file.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); pfe.splitFromFirst("input.pdf", 5, "out.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return True for success, or false. @param inputFile Source Pdf file. @param location The splitting point. @param outputFile Output Pdf file.
      
      <param name="String"/>
      <param name="int"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.splitFromFirst(InputStream,int,OutputStream)">
       
        <p>Splits from start to specified location,and saves the front part in output Stream.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); InputStream sourceStream = new FileInputStream("file1.pdf"); OutputStream outStream = new FileOutputStream("out.pdf"); pfe.splitFromFirst(sourceStream, 5, outStream);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return True for success, or false. @param inputStream Source Pdf file Stream. @param location The splitting point. @param outputStream Output file Stream.
        <p>
          <hr>The streams are NOT closed after this operation.</hr>
        </p> 
      
      <param name="InputStream"/>
      <param name="int"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.splitToEnd(String,int,String)">
       
        <p>Splits from location, and saves the rear part as a new file.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); pfe.splitToEnd("input.pdf", 5, "out.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return True for success, or false. @param inputFile Source Pdf file. @param location The splitting position. @param outputFile Output Pdf file path.
      
      <param name="String"/>
      <param name="int"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.splitToEnd(InputStream,int,OutputStream)">
       
        <p>Splits from specified location, and saves the rear part as a new file Stream.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); InputStream sourceStream = new FileInputStream("file1.pdf"); OutputStream outStream = new FileInputStream("out.pdf"); pfe.splitToEnd(sourceStream, 5, outStream);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return True for success, or false. @param inputStream Source Pdf file Stream. @param location The splitting position. @param outputStream Output Pdf file Stream.
        <p>
          <hr>The streams are NOT closed after this operation unless CloseConcatedStreams is specified.</hr>
        </p> 
      
      <param name="InputStream"/>
      <param name="int"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.makeBooklet(String,String)">
       
        <p>Makes booklet from the input file to output file.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); pfe.makeBooklet("input.pdf", "output.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return boolean - True for success, or false. @param inputFile Input pdf file path and name. @param outputFile Output pdf file path and name.
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.makeBooklet(InputStream,OutputStream)">
       
        <p>Makes booklet from the InputStream to outputStream.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); InputStream inputStream = new FileInputStream("input.pdf"); OutputStream outputStream = new FileInputStream("output.pdf"); pfe.makeBooklet(inputStream, outputStream);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return True if operation was succeeded. @param inputStream Input pdf stream. @param outputStream output pdf stream.
      
      <param name="InputStream"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.makeBooklet(String,String,PageSize)">
       
        <p>Makes booklet from the inputFile to outputFile.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); pfe.makeBooklet("input.pdf", "output.pdf", PageSize.A4);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return True if operation is succeeded. @param inputFile Input pdf file path and name. @param outputFile Output pdf file path and name. @param pageSize The page size of the output pdf file.
      
      <param name="String"/>
      <param name="String"/>
      <param name="PageSize"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.makeBooklet(InputStream,OutputStream,PageSize)">
       
        <p>Makes booklet from the input stream and save result into output stream.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); InputStream inputStream = new FileInputStream("input.pdf"); OutputStream outputStream = new FileInputStream("output.pdf"); pfe.makeBooklet(inputStream, outputStream, PageSize.A4);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return True if operation was succeeded. @param inputStream Input PDF stream. @param outputStream output pdf stream. @param pageSize The page size of the output pdf file.
      
      <param name="InputStream"/>
      <param name="OutputStream"/>
      <param name="PageSize"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.makeBooklet(String,String,int[],int[])">
       
        <p>Makes customized booklet from the firstInputFile to outputFile.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); pfe.makeBooklet("input.pdf", "output.pdf", new int[] { 2, 4, 6 }, new int[] 1, 3, 5, 7 });</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return boolean - True for success, or false. @param inputFile The input file. @param outputFile Output pdf file path and name. @param leftPages The left pages of the booklet. @param rightPages The right pages of the booklet.
      
      <param name="String"/>
      <param name="String"/>
      <param name="int[]"/>
      <param name="int[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.makeBooklet(InputStream,OutputStream,int[],int[])">
       
        <p>Makes customized booklet from the firstInputStream to outputStream.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); InputStream inputStream = new FileInputStream("input.pdf"); OutputStream outputStream = new FileOutputStream("output.pdf"); pfe.makeBooklet(inputStream, outputStream, new int[] { 2, 4, 6 }, new int[] 1, 3, 5, 7 });</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return boolean - True for success, or false. @param inputStream The input stream. @param outputStream output pdf stream. @param leftPages The left pages. @param rightPages The right pages.
      
      <param name="InputStream"/>
      <param name="OutputStream"/>
      <param name="int[]"/>
      <param name="int[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.makeBooklet(String,String,PageSize,int[],int[])">
       
        <p>Makes customized booklet from the firstInputFile to outputFile.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); pfe.makeBooklet("input.pdf", "output.pdf", PageSize.A4, new int[] { 2, 4, 6 }, new int[] 1, 3, 5, 7 });</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return boolean - True for success, or false. @param inputFile The input file. @param outputFile Output pdf file path and name. @param pageSize The page size of the output pdf file. @param leftPages The left pages. @param rightPages The right pages.
      
      <param name="String"/>
      <param name="String"/>
      <param name="PageSize"/>
      <param name="int[]"/>
      <param name="int[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.makeBooklet(InputStream,OutputStream,PageSize,int[],int[])">
       
        <p>Makes booklet from the firstInputStream to outputStream.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); InputStream inputStream = new FileInputStream("input.pdf"); OutputStream outputStream = new FileOutputStream("output.pdf"); pfe.makeBooklet(inputStream, outputStream, PageSize.A4, new int[] { 2, 4, 6 }, new int[] 1, 3, 5, 7 });</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return boolean - True for success, or false. @param inputStream The input stream. @param outputStream output pdf stream. @param pageSize The page size of the output pdf file. @param leftPages The left pages. @param rightPages The right pages.
      
      <param name="InputStream"/>
      <param name="OutputStream"/>
      <param name="PageSize"/>
      <param name="int[]"/>
      <param name="int[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.makeNUp(String,String,int,int)">
       
        <p>Makes N-Up document from the firstInputFile to outputFile.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); pfe.makeNUp("input.pdf", "output.pdf", 3, 3);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return boolean - True for success, or false. @param inputFile Input pdf file path and name. @param outputFile Output pdf file path and name. @param x Number of columns. @param y Number of rows.
      
      <param name="String"/>
      <param name="String"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.makeNUp(InputStream,OutputStream,int,int)">
       
        <p>Makes N-Up document from the input stream and saves result into output stream.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); InputStream inputStream = new FileInputStream("input.pdf"); OutputStream outputStream = new FileOutputStream("output.pdf"); pfe.makeNUp(inputStream, outputStream, 3, 3);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return boolean - True for success, or false. @param inputStream Input pdf stream. @param outputStream Output pdf stream. @param x Number of columns. @param y Number of rows.
      
      <param name="InputStream"/>
      <param name="OutputStream"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.makeNUp(InputStream,OutputStream,int,int,PageSize)">
       
        <p>Makes N-Up document from the first input stream to output stream.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); InputStream inputStream = new FileInputStream("input.pdf"); OutputStream outputStream = new FileOutputStream("output.pdf"); pfe.MakeNUp(inputStream, outputStream, 3, 3, PageSize.A4);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return True if operation was succeeded. @param inputStream Input pdf stream. @param outputStream Output pdf stream. @param x Number of columns. @param y Number of rows. @param pageSize The page size of the output pdf file.
      
      <param name="InputStream"/>
      <param name="OutputStream"/>
      <param name="int"/>
      <param name="int"/>
      <param name="PageSize"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.makeNUp(String,String,String)">
       
        <p>Makes N-Up document from the two input PDF files to outputFile. Each page of outputFile will contain two pages, one page is from the first input file and another is from the second input file. The two pages are piled up horizontally.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); pfe.makeNUp("input1.pdf", "input2.pdf", "output.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return boolean - True for success, or false. @param firstInputFile first input file. @param secondInputFile second input file. @param outputFile Output pdf file path and name.
      
      <param name="String"/>
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.makeNUp(InputStream,InputStream,OutputStream)">
       
        <p>Makes N-Up document from the two input PDF streams to outputStream.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); InputStream input1 = new FileInputStream("input1.pdf"); InputStream input2 = new FileInputStream("input2.pdf"); OutputStream output = new FileOutputStream("output.pdf"); pfe.makeNUp(input1, input2, output);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return boolean - True for success, or false. @param firstInputStream first input stream. @param secondInputStream second input stream. @param outputStream Output pdf stream.
      
      <param name="InputStream"/>
      <param name="InputStream"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.makeNUp(String[],String,boolean)">
       
        <p>Makes N-Up document from the multi input PDF files to outputFile. Each page of outputFile will contain multi pages, which are combination with pages in the input files of the same page number. The multi pages piled up horizontally if isSidewise is true and piled up vertically if isSidewise is false.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); pfe.makeNUp(new String[] { "input1.pdf", "input2.pdf", "input3.pdf" }, "output.pdf", false);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return boolean - True for success, or false. @param inputFiles Input Pdf files. @param outputFile Output pdf file path and name. @param isSidewise Piled up way, true for horizontally and flase for vertically.
      
      <param name="String[]"/>
      <param name="String"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.makeNUp(InputStream[],OutputStream,boolean)">
       
        <p>Makes N-Up document from the multi input PDF streams to outputStream. Each page of outputStream will contain multi pages, which are combination with pages in the input streams of the same page number. The multi-pages piled up horizontally if isSidewise is true and piled up vertically if isSidewise is false.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); InputStream stream1 = new FileInputStream("input1.pdf"); InputStream stream2 = new FileInputStream("input2.pdf"); InputStream stream3 = new FileInputStream("input3.pdf"); OutputStream output = new FileOutputStream("output.pdf"); pfe.makeNUp(new InputStream[] { stream1, stream2, stream3 }, output, false);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return boolean - True for success, or false. @param inputStreams Input Pdf streams. @param outputStream Output pdf stream. @param isSidewise Piled up way, true for horizontally and flase for vertically
      
      <param name="InputStream[]"/>
      <param name="OutputStream"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.makeNUp(String,String,int,int,PageSize)">
       
        <p>Makes N-Up document from the input file to outputFile.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); pfe.makeNUp("input.pdf", "output.pdf", 3, 3, PageSize.A4);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return boolean - True for success, or false. @param inputFile Input pdf file path and name. @param outputFile Output pdf file path and name. @param x Number of columns. @param y Number of rows. @param pageSize The page size of the output pdf file.
      
      <param name="String"/>
      <param name="String"/>
      <param name="int"/>
      <param name="int"/>
      <param name="PageSize"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.splitToPages(String)">
       
        <p>Splits the PDF file into single-page documents.</p> @return Output PDF streams, each stream buffers a single-page PDF document. @param inputFile Input PDF file name.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.splitToPages(InputStream)">
       
        <p>Splits the Pdf file into single-page documents.</p> @param inputStream Input Pdf stream.
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.splitToBulks(String,int[][])">
       
        <p>Splits the Pdf file into several documents.The documents can be single-page or multi-pages.</p> @return Output PDF streams, each stream buffers a PDF document. @param inputFile Input PDF file. @param numberOfPage Array which contains array of double elements, which is start and end pages of document.
      
      <param name="String"/>
      <param name="int[][]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.splitToBulks(InputStream,int[][])">
       
        <p>Splits the Pdf file into several documents.The documents can be single-page or multi-pages.</p> @return Output PDF streams, each stream buffers a PDF document. @param inputStream Input PDF stream. @param numberOfPage The start page and the end page of each document.
      
      <param name="InputStream"/>
      <param name="int[][]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.getLastException">
       
        <p>Gets last occured exception. May be used to check the reason of failure when AllowconcatenateExceptions = false.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileEditor pfe = new PdfFileEditor(); pfe.setAllowConcatenateExceptions ( false); if (!pfe.concatenate("file1.pdf", "file2.pdf", "file3.pdf")) { System.out.println("Error occured:"); if (pfe.getLastException() != null) { System.out.println(pfe.getLastException().getMessage()); if (pfe.getLastException().getCause() != null) System.out.println(pfe.getLastException().getCause().getMessage()); } }</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.resizeContents(InputStream,OutputStream,int[],ContentsResizeParameters)">
       
        <p>Resizes contents of pages of the document.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileEditor fileEditor = new PdfFileEditor(); InputStream src = new FileInputStream("input.pdf"); OutputStream dest = new FileOutputStream("output.pdf"); PdfFileEditor.ContentsResizeParameters parameters = new PdfFileEditor.ContentsResizeParameters( //left margin = 10% of page width PdfFileEditor.ContentsResizeValue.percents(10), //new contents width calculated automatically as width - left margin - right margin (100% - 10% - 10% = 80%) null, //right margin is 10% of page PdfFileEditor.ContentsResizeValue.percents(10), //top margin = 10% of height PdfFileEditor.ContentsResizeValue.percents(10), //new contents height is calculated automatically (similar to width) null, //bottom margin is 10% PdfFileEditor.ContentsResizeValue.percents(10) ); fileEditor.resizeContents(src, dest, new int[] { 1, 2, 3}, parameters); dest.close();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return Returns true if success. @param source Stream with source document. @param destination Stream with the destination document. @param pages Array of page indexes. @param parameters Resize parameters.
      
      <param name="InputStream"/>
      <param name="OutputStream"/>
      <param name="int[]"/>
      <param name="ContentsResizeParameters"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.resizeContents(InputStream,OutputStream,int[],double,double)">
       
        <p>Resizes contents of document pages. Shrinks contents of page and adds margins. New size of contents is specified in default space units.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileEditor fileEditor = new PdfFileEditor(); InputStream src = new FileInputStream("input.pdf"); OutputStream dest = new FileOutputStream("output.pdf"); fileEditor.resizeContents(src, dest, //resize all pages of document null, //new contents width = 200 200, //new contents height = 300 300); // rest area of page will be empty</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return True if resize was successful. @param source Stream which contains source document. @param destination Stream where resultant document will be saved. @param pages Array of page indexes. If null then all document pages will be processed. @param newWidth New width of page contents in default space units. @param newHeight New height of page contents in default space units.
      
      <param name="InputStream"/>
      <param name="OutputStream"/>
      <param name="int[]"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.resizeContentsPct(InputStream,OutputStream,int[],double,double)">
       
        <p>Resizes contents of document pages. Shrinks contents of page and adds margins. New contents size is specified in percents.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileEditor fileEditor = new PdfFileEditor(); InputStream src = new FileInputStream("input.pdf"); OutputStream dest = new FileOutputStream("output.pdf"); fileEditor.resizePct(src, dest, //resize all pages of document null, //new contents width = 60% of initial size 60, //new contents height = 60% of initial size 60); // Rest area of page will be empty (page margins). Size of left and right margins is (100% - 60%) / 2 = 20% // The same for top and bottom margins.</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return @param source Stream which contains source document. @param destination Stream where resultant document will be saved. @param pages Array of page indexes. If null then all document pages will be processed. @param newWidth New width of page contents in percents. @param newHeight New height of page contents in percetns.
      
      <param name="InputStream"/>
      <param name="OutputStream"/>
      <param name="int[]"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.addMargins(InputStream,OutputStream,int[],double,double,double,double)">
       
        <p>Resizes page contents and add specifed margins. Margins are specified in default space units.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileEditor fileEditor = new PdfFileEditor(); InmputStream src = new FileInputStream("input.pdf"); OutputStream dest = new FileInputStream("output.pdf"); fileEditor.addMargins(src, dest, //process pages 1, 2, 3 new int[] { 1, 2, 3}, //left margin is 10 units 10, //right margin is 5 units 5, //top margin is 5 units 5, //bottom margin is 5 units 5); dest.Close();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return @param source Stream which contains source document. @param destination Stream where resultant document will be saved. @param pages Array of page indexes. If null then all document pages will be processed. @param leftMargin Left margin. @param rightMargin Right margin. @param topMargin Top margin. @param bottomMargin Bottom margin.
      
      <param name="InputStream"/>
      <param name="OutputStream"/>
      <param name="int[]"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.addMarginsPct(InputStream,OutputStream,int[],double,double,double,double)">
       
        <p>Resizes page contents and add specified margins. Margins are specified in percents of intitial page size.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileEditor fileEditor = new PdfFileEditor(); InmputStream src = new FileInputStream("input.pdf"); OutputStream dest = new FileInputStream("output.pdf"); fileEditor.addMarginsPct(src, dest, //process pages 1, 2, 3 new int[] { 1, 2, 3}, //left margin is 15% of page width 15, //right margin is 10% of page width 10, //top margin is 20% of page width 20, //bottom margin is 5% of page width 5); dest.close();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return @param source Stream which contains source document. @param destination Stream where resultant document will be saved. @param pages Array of page indexes. If null then all document pages will be processed. @param leftMargin Left margin in percents of initial page size. @param rightMargin Right margin in percents of initial page size. @param topMargin Top margin in percents of initial page size. @param bottomMargin Bottom margin in percents of initial page size.
      
      <param name="InputStream"/>
      <param name="OutputStream"/>
      <param name="int[]"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.resizeContents(String,String,int[],double,double)">
       
        <p>Resizes contents of document pages. Shrinks contents of page and adds margins. New size of contents is specified in default space units.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileEditor fileEditor = new PdfFileEditor(); fileEditor.resizeContents("input.pdf", "output.pdf", //resize all pages of document null, //new contents width = 200 200, //new contents height = 300 300); // rest area of page will be empty</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return True if resize was successful. @param source Path to source document. @param destination Path where resultant document will be saved. @param pages Array of page indexes. If null then all document pages will be processed. @param newWidth New width of page contents in default space units. @param newHeight New height of page contents in default space units.
      
      <param name="String"/>
      <param name="String"/>
      <param name="int[]"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.resizeContentsPct(String,String,int[],double,double)">
       
        <p>Resizes contents of document pages. Shrinks contents of page and adds margins. New contents size is specified in percents.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileEditor fileEditor = new PdfFileEditor(); fileEditor.resizePct("input.pdf", "output.pdf", //resize all pages of document null, //new contents width = 60% of initial size 60, //new contents height = 60% of initial size 60); // Rest area of page will be empty (page margins). Size of left and right margins is (100% - 60%) / 2 = 20% // The same for top and bottom margins.</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return true if resize was successful. @param source Path to source document. @param destination Path where resultant document will be saved. @param pages Array of page indexes. If null then all document pages will be processed. @param newWidth New width of page contents in percents. @param newHeight New height of page contents in percetns.
      
      <param name="String"/>
      <param name="String"/>
      <param name="int[]"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.addMargins(String,String,int[],double,double,double,double)">
       
        <p>Resizes page contents and add specifed margins. Margins are specified in default space units.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileEditor fileEditor = new PdfFileEditor(); fileEditor.addMargins("input.pdf", "output.pdf", //process pages 1, 2, 3 new int[] { 1, 2, 3}, //left margin is 10 units 10, //right margin is 5 units 5, //top margin is 5 units 5, //bottom margin is 5 units 5);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return true if resize was successful. @param source Path to source document. @param destination Path where resultant document will be saved. @param pages Array of page indexes. If null then all document pages will be processed. @param leftMargin Left margin. @param rightMargin Right margin. @param topMargin Top margin. @param bottomMargin Bottom margin.
      
      <param name="String"/>
      <param name="String"/>
      <param name="int[]"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.addMarginsPct(String,String,int[],double,double,double,double)">
       
        <p>Resizes page contents and add specified margins. Margins are specified in percents of intitial page size.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileEditor fileEditor = new PdfFileEditor(); fileEditor.addMarginsPct("input.pdf", "output.pdf", //process pages 1, 2, 3 new int[] { 1, 2, 3}, //left margin is 15% of page width 15, //right margin is 10% of page width 10, //top margin is 20% of page width 20, //bottom margin is 5% of page width 5);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return true if resize was successful @param source Path to source document. @param destination Path where resultant document will be saved. @param pages Array of page indexes. If null then all document pages will be processed. @param leftMargin Left margin in percents of initial page size. @param rightMargin Right margin in percents of initial page size. @param topMargin Top margin in percents of initial page size. @param bottomMargin Bottom margin in percents of initial page size.
      
      <param name="String"/>
      <param name="String"/>
      <param name="int[]"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.resizeContents(String,String,int[],ContentsResizeParameters)">
       
        <p>Resizes contents of pages in document. If page is shrinked blank margins are added around the page.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileEditor fileEditor = new PdfFileEditor(); PdfFileEditor.ContentsResizeParameters parameters = new PdfFileEditor.ContentsResizeParameters( //left margin = 10% of page width PdfFileEditor.ContentsResizeValue.percents(10), //new contents width calculated automatically as width - left margin - right margin (100% - 10% - 10% = 80%) null, //right margin is 10% of page PdfFileEditor.ContentsResizeValue.percents(10), //top margin = 10% of height PdfFileEditor.ContentsResizeValue.percents(10), //new contents height is calculated automatically (similar to width) null, //bottom margin is 10% PdfFileEditor.ContentsResizeValue.percents(10) ); fileEditor.resizeContents("input.pdf", "output.pdf", new int[] { 1, 2,.3}, parameters);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return trure if resize was successful. @param source Source document path. @param destination Destination document path. @param pages Array of page indexes (page index starts from 1). @param parameters Parameters of page resize.
      
      <param name="String"/>
      <param name="String"/>
      <param name="int[]"/>
      <param name="ContentsResizeParameters"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.resizeContents(IDocument,int[],ContentsResizeParameters)">
       
        <p>Resizes pages of document. Blank margins are added around of shrinked page.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileEditor fileEditor = new PdfFileEditor(); Document doc = new Document("input.pdf"); PdfFileEditor.ContentsResizeParameters parameters = new PdfFileEditor.ContentsResizeParameters( //left margin = 10% of page width PdfFileEditor.ContentsResizeValue.percents(10), //new contents width calculated automatically as width - left margin - right margin (100% - 10% - 10% = 80%) null, //right margin is 10% of page PdfFileEditor.ContentsResizeValue.percents(10), //top margin = 10% of height PdfFileEditor.ContentsResizeValue.percents(10), //new contents height is calculated automatically (similar to width) null, //bottom margin is 10% PdfFileEditor.ContentsResizeValue.percents(10) ); fileEditor.resizeContents(doc, new int[] { 1, 2,.3}, parameters); doc.save("output.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return true if resizing was successful. @param source Source document. @param pages List of page indexes. @param parameters Resize parameters.
      
      <param name="IDocument"/>
      <param name="int[]"/>
      <param name="ContentsResizeParameters"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.getContentDisposition">
       
        <p>Gets how content will be stored when result of operation is stored into HttpServletResponse object. Possible value: inline / attachment. Default: inline.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.setContentDisposition(int)">
       
        <p>Sets how content will be stored when result of operation is stored into HttpServletResponse object. Possible value: inline / attachment. Default: inline.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.getSaveOptions">
       
        <p>Gets or sets save options when result is stored as HttpServletResponse. Default value: PdfSaveOptions.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.setSaveOptions(SaveOptions)">
       
        <p>Sets save options when result is stored as HttpServletResponse. Default value: PdfSaveOptions.</p> 
      
      <param name="SaveOptions"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.getAttachmentName">
       
        <p>Gets name of attachment when result of operation is stored into HttpServletResponse objects as attachment.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.setAttachmentName(String)">
       
        <p>Sets name of attachment when result of operation is stored into HttpServletResponse objects as attachment.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.#ctor">
       
        <p>PdfFileEditor constructor.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfFileEditor.E_EMPTY_PAGE_RANGE"/>
    <member name="F:com.aspose.pdf.facades.PdfFileEditor.E_SMALL_PAGE_RANGE"/>
    <member name="F:com.aspose.pdf.facades.PdfFileEditor.E_WRONG_PAGE_RANGE"/>
    <member name="T:com.aspose.pdf.facades.PdfFileEditor.ConcatenateCorruptedFileAction">
       
        <p>Action performed when corrupted file was met in concatenation process.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfFileEditor.ConcatenateCorruptedFileAction.StopWithError">
       
        <p>If corrupted file was met, then stop concatentation process and return error.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfFileEditor.ConcatenateCorruptedFileAction.ConcatenateIgnoringCorrupted">
       
        <p>If corrupted file was met, then don't stop concatenation and don't process corrupted file. List of corrupted files is accessible in Failures property.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfFileEditor.ConcatenateCorruptedFileAction.ConcatenateIgnoringCorruptedObjects">
       
        <p>When corrupted object is met in source document, process will not stopped and corrupted object only is ignored.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.PdfFileEditor.CorruptedItem">
       
        <p>Class which provides information about corrupted files in time of concatenation.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.CorruptedItem.getIndex">
       
        <p>Index of corrupted file.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditor.CorruptedItem.getException">
       
        <p>Exception thrown for this file which indicates problem with the file.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.PdfFileEditorWeb"/>
    <member name="M:com.aspose.pdf.facades.PdfFileEditorWeb.concatenate(String[],HttpServletResponse)">
       
        <p>Concatenates files and saves reslt into HttpResposnse object.</p> @return @param inputFiles Array of files to concatenate. @param response Response object.
      
      <param name="String[]"/>
      <param name="HttpServletResponse"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditorWeb.concatenate(InputStream[],HttpServletResponse)">
       
        <p>Concatenates files and stores result into HttpServletResponse object.</p> @return true if operation was succeeded. @param inputStream Streams array which contain files to concatenate. @param response Response object/
      
      <param name="InputStream[]"/>
      <param name="HttpServletResponse"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditorWeb.append(InputStream,InputStream[],int,int,HttpServletResponse)">
       
        <p>Appends documents to source document and saves result into response object.</p> @return @param inputStream Stream containing source document. @param portStreams Array of streams containing appended documents. @param startPage Start page. @param endPage End page. @param response Response object to save resultant document. @param name File name.
      
      <param name="InputStream"/>
      <param name="InputStream[]"/>
      <param name="int"/>
      <param name="int"/>
      <param name="HttpServletResponse"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditorWeb.append(String,String[],int,int,HttpServletResponse)">
       
        <p>Appends documents to source document and saves result into HttpServletResponse object.</p> @return true if operation was succeeded. @param inputFile Name of file containing source document. @param portFiles Array of file names containing appended documents @param startPage Start page of appended pages. @param endPage End page of appended pages. @param response Response object where document will be saved.
      
      <param name="String"/>
      <param name="String[]"/>
      <param name="int"/>
      <param name="int"/>
      <param name="HttpServletResponse"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditorWeb.insert(String,int,String,int[],HttpServletResponse)">
       
        <p>Inserts contents of file into source file and stores result into HttpServletResponse object.</p> @return @param inputFile Source file name. @param insertLocation Page number where second file will be inserted. @param portFile Path to file which will be inserted. @param pageNumber Array of page numbers in source file wihich will be inserted. @param response Response object where result will be stored.
      
      <param name="String"/>
      <param name="int"/>
      <param name="String"/>
      <param name="int[]"/>
      <param name="HttpServletResponse"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditorWeb.insert(InputStream,int,InputStream,int[],HttpServletResponse)">
       
        <p>Inserts document into other document and stores result into response object.</p> @return True if operation was succeeded. @param inputStream Stream with source document @param insertLocation Location where other document will be inserted. @param portStream Document to be inserted. @param pageNumber Array of page numbers in second document which will be inserted. @param response Response object where result will be stored.
      
      <param name="InputStream"/>
      <param name="int"/>
      <param name="InputStream"/>
      <param name="int[]"/>
      <param name="HttpServletResponse"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditorWeb.delete(String,int[],HttpServletResponse)">
       
        <p>Deletes specified pages from document and stores result into HttpServletResponse object.</p> @return True if operation was succeeded. @param inputFile Path of source file. @param pageNumber Array of page numbers which must be deleted. @param response Response object where result document will be stored.
      
      <param name="String"/>
      <param name="int[]"/>
      <param name="HttpServletResponse"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditorWeb.delete(InputStream,int[],HttpServletResponse)">
       
        <p>Deletes specified pages from document and saves result into HttpServletResponse object.</p> @return True if operation succeded. @param inputStream Source document stream. @param pageNumber Array of page numbers which will be deleted. @param response HttpServletResponse object
      
      <param name="InputStream"/>
      <param name="int[]"/>
      <param name="HttpServletResponse"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditorWeb.extract(InputStream,int[],HttpServletResponse)">
       
        <p>Extracts specified pages form source file and stores result into HttpServletResponse object.</p> @return True if operation was succeeded. @param inputStream Stream of source document. @param pageNumber Array of page numbers which will be extracted. @param response HttpServletResponse object where result will be stored.
      
      <param name="InputStream"/>
      <param name="int[]"/>
      <param name="HttpServletResponse"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditorWeb.extract(String,int[],HttpServletResponse)">
       
        <p>Extracts specified pages from source file and stores result into HttpServletResponse object.</p> @return @param inputFile Source file path. @param pageNumber Array of page numbers which will be extracted. @param response HttpServletResponse object where result will be stored.
      
      <param name="String"/>
      <param name="int[]"/>
      <param name="HttpServletResponse"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditorWeb.splitFromFirst(String,int,HttpServletResponse)">
       
        <p>Splits document from first page to location and saves result into HttpServletResponse objects.</p> @return True if operation was succeeded. @param inputFile Source file name. @param location Split point. @param response HttpServletResponse objects.
      
      <param name="String"/>
      <param name="int"/>
      <param name="HttpServletResponse"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditorWeb.splitFromFirst(InputStream,int,HttpServletResponse)">
       
        <p>Splits document from start to specified location and stores result into HttpServletResponse object.</p> @return True if operation was succeeded. @param inputStream Stream of source document. @param location The splitting point. @param response HttpServletResponse object where result will be stored.
      
      <param name="InputStream"/>
      <param name="int"/>
      <param name="HttpServletResponse"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditorWeb.splitToEnd(InputStream,int,HttpServletResponse)">
       
        <p>Splits from specified location, and saves the rear part into HttpServletResponse object.</p> @return @param inputStream Source document stream. @param location Split point. @param response HttpServletResponse object.
      
      <param name="InputStream"/>
      <param name="int"/>
      <param name="HttpServletResponse"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditorWeb.splitToEnd(String,int,HttpServletResponse)">
       
        <p>Splits from specified location, and saves the rear part into HttpServletResponse object.</p> @return True if operation was succeeded. @param inputFile source file name. @param location Split point. @param response HttpServletResponse objects.
      
      <param name="String"/>
      <param name="int"/>
      <param name="HttpServletResponse"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditorWeb.makeBooklet(String,PageSize,int[],int[],HttpServletResponse)">
       
        <p>Makes booklet from source file and stores result into HttpServletResponse objects.</p> @return True if operation was succeeded. @param inputFile Source file path. @param pageSize Desired page size. @param leftPages Aray of page numbers to be placed in left. @param rightPages Array of page numbers to be placed in right. @param response HttpServletResponse object where result will be stored.
      
      <param name="String"/>
      <param name="PageSize"/>
      <param name="int[]"/>
      <param name="int[]"/>
      <param name="HttpServletResponse"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditorWeb.makeBooklet(InputStream,PageSize,int[],int[],HttpServletResponse)">
       
        <p>Make booklet from PDF file and stores it into HttpServletResponse.</p> @return True if operation was succeeded. @param inputStream Input document stream. @param pageSize Desired page size. @param leftPages Array of page numbers which will be placed in left. @param rightPages Array of page numbers which will b eplaced in right. @param response HttpServletResponse object.
      
      <param name="InputStream"/>
      <param name="PageSize"/>
      <param name="int[]"/>
      <param name="int[]"/>
      <param name="HttpServletResponse"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditorWeb.makeBooklet(String,PageSize,HttpServletResponse)">
       
        <p>Makes booklet from source file and stores result into HttpServletResponse objects.</p> @return True if operation is succeeded. @param inputFile Source file path. @param pageSize Desired page size in output file. @param response HttpServletResponse object where result will be stored.
      
      <param name="String"/>
      <param name="PageSize"/>
      <param name="HttpServletResponse"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditorWeb.makeBooklet(InputStream,PageSize,HttpServletResponse)">
       
        <p>Makes booklet from source file and stores result into HttpServletResponse.</p> @return @param inputStream @param pageSize @param response
      
      <param name="InputStream"/>
      <param name="PageSize"/>
      <param name="HttpServletResponse"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditorWeb.makeNUp(InputStream,int,int,PageSize,HttpServletResponse)">
       
        <p>Makes N-up document and stores result into HttpServletResponse object.</p> @return True if operation was succeeded. @param inputStream Stream of source document. @param x Number of columns. @param y Number of rows. @param pageSize Page size in result file. @param response HttpServletResponse object where result will be stored.
      
      <param name="InputStream"/>
      <param name="int"/>
      <param name="int"/>
      <param name="PageSize"/>
      <param name="HttpServletResponse"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditorWeb.makeNUp(String,int,int,PageSize,HttpServletResponse)">
       
        <p>Makes N-up document and stores result into HttpServletResponse object.</p> @return True if operation was succeeded. @param inputStream Path to source file. @param x Number of columns. @param y Number of rows. @param pageSize Page size in result file. @param response HttpServletResponse object where result will be stored.
      
      <param name="String"/>
      <param name="int"/>
      <param name="int"/>
      <param name="PageSize"/>
      <param name="HttpServletResponse"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditorWeb.makeNUp(String,int,int,HttpServletResponse)">
       
        <p>Makes N-up document and stores result into HttpServletResponse.</p> @return True if operation was succeeded. @param inputFile Source file name. @param x Number of columns. @param y Number of rows. @param response HttpServletResponse object where result will be stored.
      
      <param name="String"/>
      <param name="int"/>
      <param name="int"/>
      <param name="HttpServletResponse"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditorWeb.makeNUp(InputStream,int,int,HttpServletResponse)">
       
        <p>Makes N-up document and stores result into HttpServletResponse.</p> @return True if operation was succeeded. @param inputStream Stream of input document. @param x Number of columns. @param y Number of rows. @param response HttpServletResponse where result will be stored.
      
      <param name="InputStream"/>
      <param name="int"/>
      <param name="int"/>
      <param name="HttpServletResponse"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditorWeb.resizeContents(String,int[],ContentsResizeParameters,HttpServletResponse)">
       
        <p>Resizes contents of pages in document. If page is shrinked blank margins are added around the page.Result is stored into HttpServletResponse object.</p> @return True if operation was succeeded. @param source Path to source file. @param pages Array of pages to be resized. @param parameters Resize parameters. @param response HttpServletResponse object where result is saved.
      
      <param name="String"/>
      <param name="int[]"/>
      <param name="ContentsResizeParameters"/>
      <param name="HttpServletResponse"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditorWeb.resizeContents(Stream,int[],ContentsResizeParameters,HttpServletResponse)">
       
        <p>Resizes contents of pages in document. If page is shrinked blank margins are added around the page.Result is stored into HttpServletResponse object.</p> @return True if operation was succeeded. @param source Stream of source file. @param pages Array of pages to be resized. @param parameters Resize parameters. @param response HttpServletResponse object where result is saved.
      
      <param name="Stream"/>
      <param name="int[]"/>
      <param name="ContentsResizeParameters"/>
      <param name="HttpServletResponse"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileEditorWeb.#ctor">
       
        <p>PdfFileEditorWeb constructor.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfFileEditorWeb.E_EMPTY_PAGE_RANGE"/>
    <member name="F:com.aspose.pdf.facades.PdfFileEditorWeb.E_SMALL_PAGE_RANGE"/>
    <member name="F:com.aspose.pdf.facades.PdfFileEditorWeb.E_WRONG_PAGE_RANGE"/>
    <member name="T:com.aspose.pdf.facades.PdfFileInfo">
       
        <p>Represents a class for accessing meta information of PDF document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.bindPdf(Document)">
       
        <p>Initializes the facade.</p> @param srcDoc The Aspose.Pdf.Document object.
      
      <param name="Document"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.getAuthor">
       
        <p>Gets the Author information of PDF document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.setAuthor(String)">
       
        <p>Sets the Author information of PDF document.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.isEncrypted">
       
        <p>Checkes whether the PDF document is encrypted.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.isPdfFile">
       
        <p>Checkes whether the source input is a valid PDF file.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.getCreationDate">
       
        <p>Gets the CreationDate information of PDF document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.setCreationDate(String)">
       
        <p>Sets the CreationDate information of PDF document.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.getCreator">
       
        <p>Gets the Creator information of PDF document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.setCreator(String)">
       
        <p>Sets the Creator information of PDF document.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.hasCollection">
       
        <p>Returns true if the current input file is a 'Portfolio' file containing collection of PDF files in it.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.getHeader">
       
        <p>Gets or sets the customized information of PDF document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.setHeader(java.util.Map)">
       
        <p>Gets or sets the customized information of PDF document.</p> 
      
      <param name="java.util.Map"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.getInputFile">
       
        <p>Gets the input file.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.setInputFile(String)">
       
        <p>Sets the input file.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.getInputStream">
       
        <p>Gets the input stream.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.setInputStream(InputStream)">
       
        <p>Sets the input stream.</p> 
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.getKeywords">
       
        <p>Gets the Keywords information of PDF document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.setKeywords(String)">
       
        <p>Sets the Keywords information of PDF document.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.getModDate">
       
        <p>Gets the ModDate date information of PDF document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.setModDate(String)">
       
        <p>Sets the ModDate date information of PDF document.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.getNumberOfPages">
       
        <p>Gets the number of document pages.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.getProducer">
       
        <p>Gets the Producer information of PDF document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.getSubject">
       
        <p>Gets the Subject information of PDF document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.setSubject(String)">
       
        <p>Sets the Subject information of PDF document.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.getTitle">
       
        <p>Gets the Title information of PDF document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.setTitle(String)">
       
        <p>Sets the Title information of PDF document.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.clearInfo">&lt;p&gt; Clears all meta information of PDF document.</member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.getDocumentPrivilege">
       
        <p>Gets the PDF document privilege settings.</p> @return The PDF document privilege settings.
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.getMetaInfo(String)">
       
        <p>Gets customized information of PDF document with property name. If there is no property match the name it will return a blank string.</p> @return Custom meta property value. @param name Custom meta property key.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.getPageHeight(int)">
       
        <p>Gets the height of the specified page.</p> @return The height of the page. @param pageNum Page number.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.getPageRotation(int)">
       
        <p>Gets the rotation of the specified page.</p> @return The rotation of the page. The value may be 0,90,180,270. @param pageNum Page number.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.getPageWidth(int)">
       
        <p>Gets the width of the specified page.</p> @return The width of the page. @param pageNum Page number.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.getPageXOffset(int)">
       
        <p>Gets the horizontal offset of the specified page display area.</p> @return The horizontal offset from the left side of the page. @param pageNum Page number.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.getPageYOffset(int)">
       
        <p>Gets the vertical offset of the specified page display area.</p> @return The vertical offset of the page display area. @param pageNum Page number.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.getPdfVersion">
       
        <p>Gets the version info of PDF document.</p> @return The version string.
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.saveNewInfo(OutputStream)">
       
        <p>Save updated PDF document into specified stream.</p> @return True if success otherwise is false. @param outputStream Output stream.
      
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.saveNewInfo(String)">
       
        <p>Save updated PDF document into specified file.</p> @return True if success otherwise is false. @param outputFile Output file.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.save(OutputStream)">
       
        <p>Saves the PDF document to the specified file.</p> @param destStream The destination stream.
      
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.setMetaInfo(String,String)">
       
        <p>Sets customized information of PDF document.</p> @param name Custom meta property key. @param value Custom meta property value.
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.saveNewInfoWithXmp(String)">
       
        <p>Changes the properties specified explicitly by setting file information, other properties remain.</p> @return True for success, or false. @param outputFileName Output file.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.getPasswordType">
       
        <p>Returns the type of password which was passed for creating PdfFileInfo instance. See possible values in {@code PasswordType}. Pay attention that pdf document can be opened using both user (or open) password and owner (or permissions, edit) password.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.hasOpenPassword">
       
        <p>Returns true if password is needed to open password protected pdf document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.hasEditPassword">
       
        <p>Returns true if password is needed to modify permissions or document security property. Pay attention that this property can be read only if valid password was provided in {@code PdfFileInfo} constructor. In case PasswordType is Inaccessible (means that invalid password was provided) reading this property will fail with {@code InvalidPasswordException}.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.close">
       
        <p>Deinitializes the instance.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.dispose"/>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.#ctor">
       
        <p>Initializes a new instance of the com.aspose.pdf.facades.PdfFileInfo class with default values.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.#ctor(InputStream)">
       
        <p>Initializes a new instance of the com.aspose.pdf.facades.PdfFileInfo class.</p> 
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.#ctor(InputStream,String)">
       
        <p>Initializes a new instance of the com.aspose.pdf.facades.PdfFileInfo class.</p> 
      
      <param name="InputStream"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.#ctor(String)">
       
        <p>Initializes a new instance of the com.aspose.pdf.facades.PdfFileInfo class.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.#ctor(String,String)">
       
        <p>Initializes a new instance of the com.aspose.pdf.facades.PdfFileInfo class.</p> 
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileInfo.#ctor(IDocument)">
       
        <p>Initializes new {@code PdfFileInfo} object on base of the {@code document}.</p> @param document Pdf document.
      
      <param name="IDocument"/>
    </member>
    <member name="T:com.aspose.pdf.facades.PdfFileMend">
       
        <p>Represents a class for adding texts and images on the pages of existing PDF document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.getInputStream"/>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.setInputStream(InputStream)">
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.getOutputStream"/>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.setOutputStream(OutputStream)">
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.getInputFile">
       
        <p>Sets the input file.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.setInputFile(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.getOutputFile">
       
        <p>Sets the output file.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.setOutputFile(String)">
       
        <p>Sets the output file.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.setOutputStream(Stream)">
       
        <p>Sets the output stream.</p> 
      
      <param name="Stream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.isWordWrap(boolean)">
       
        <p>Sets a bool value that indicates word wrap in AddText methods. If the value is true, the text in FormattedText will word wrap. By defalt, the value is false.</p> 
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.getWrapMode">
       
        <p>Sets or gets word wrapping algorithm. See WordWrapMode and IsWordWrap.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.setWrapMode(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.getTextPositioningMode">
       
        <p>Sets or gets text positioning strategy. {@code PositioningMode} Default mode is Legacy.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.setTextPositioningMode(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.addImage(InputStream,int,float,float,float,float)">
       
        <p>Adds image to the specified page of PDF document at specified coordinates.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileMend mendor = new PdfFileMend("example.pdf", "out_example.pdf"); InputStream stream = new FileInputStream("picture.jpg")) mendor.addImage(stream, 1, 10, 10, 100, 100); mendor.close();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return True if success false otherwise. @param imageStream Input image stream. @param pageNum The number of page that will receive the image. @param lowerLeftX The lower left x of image rectangle. @param lowerLeftY The lower left y of image rectangle. @param upperRightX The upper right x of image rectangle. @param upperRightY The upper right y of image rectangle.
      
      <param name="InputStream"/>
      <param name="int"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.addImage(InputStream,int,float,float,float,float,CompositingParameters)">
       
        <p>Adds image to the specified page of PDF document at specified coordinates.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileMend mendor = new PdfFileMend("example.pdf", "out_example.pdf"); InputStream stream = new FileInputStream("picture.jpg")) mendor.addImage(stream, 1, 10, 10, 100, 100, new CompositingParameters(BlendMode.Multiply); mendor.close();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return True if success false otherwise. @param imageStream Input image stream. @param pageNum The number of page that will receive the image. @param lowerLeftX The lower left x of image rectangle. @param lowerLeftY The lower left y of image rectangle. @param upperRightX The upper right x of image rectangle. @param upperRightY The upper right y of image rectangle. @param compositingParameters The graphics compositing parameters for the image.
      
      <param name="InputStream"/>
      <param name="int"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
      <param name="CompositingParameters"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.addImage(InputStream,int[],float,float,float,float)">
       
        <p>Adds image to the specified pages of PDF document at specified coordinates.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileMend mendor = new PdfFileMend("example.pdf", "out_example.pdf"); InputStream stream = new FileInputStream("picture.jpg") mendor.addImage(stream, new int[]{1, 2}, 10, 10, 100, 100); mendor.close();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return True if success false otherwise. @param imageStream Input image stream. @param pageNums The numbers of pages that will receive the image. @param lowerLeftX The lower left x of image rectangle. @param lowerLeftY The lower left y of image rectangle. @param upperRightX The upper right x of image rectangle. @param upperRightY The upper right y of image rectangle.
      
      <param name="InputStream"/>
      <param name="int[]"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.addImage(InputStream,int[],float,float,float,float,CompositingParameters)">
       
        <p>Adds image to the specified pages of PDF document at specified coordinates.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileMend mendor = new PdfFileMend("example.pdf", "out_example.pdf"); InputStream stream = new FileInputStream("picture.jpg") mendor.addImage(stream, new int[]{1, 2}, 10, 10, 100, 100, new CompositingParameters(BlendMode.Multiply); mendor.close();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return True if success false otherwise. @param imageStream Input image stream. @param pageNums The numbers of pages that will receive the image. @param lowerLeftX The lower left x of image rectangle. @param lowerLeftY The lower left y of image rectangle. @param upperRightX The upper right x of image rectangle. @param upperRightY The upper right y of image rectangle. @param compositingParameters The graphics compositing parameters for the images.
      
      <param name="InputStream"/>
      <param name="int[]"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
      <param name="CompositingParameters"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.addImage(String,int,float,float,float,float)">
       
        <p>Adds image to the specified page of PDF document at specified coordinates.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileMend mendor = new PdfFileMend("example.pdf", "out_example.pdf"); mendor.addImage("picture.jpg", 1, 10, 10, 100, 100); mendor.close();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return True if success false otherwise. @param imageName The path of input image file. @param pageNum The number of page that will receive the image. @param lowerLeftX The lower left x of image rectangle. @param lowerLeftY The lower left y of image rectangle. @param upperRightX The upper right x of image rectangle. @param upperRightY The upper right y of image rectangle.
      
      <param name="String"/>
      <param name="int"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.addImage(String,int,float,float,float,float,CompositingParameters)">
       
        <p>Adds image to the specified page of PDF document at specified coordinates.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileMend mendor = new PdfFileMend("example.pdf", "out_example.pdf"); mendor.addImage("picture.jpg", 1, 10, 10, 100, 100, new CompositingParameters(BlendMode.Multiply)); mendor.close();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return True if success false otherwise. @param imageName The path of input image file. @param pageNum The number of page that will receive the image. @param lowerLeftX The lower left x of image rectangle. @param lowerLeftY The lower left y of image rectangle. @param upperRightX The upper right x of image rectangle. @param upperRightY The upper right y of image rectangle. @param compositingParameters The graphics compositing parameters for the images.
      
      <param name="String"/>
      <param name="int"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
      <param name="CompositingParameters"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.addImage(String,int[],float,float,float,float)">
       
        <p>Adds image to the specified pages of PDF document at specified coordinates.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileMend mendor = new PdfFileMend("example.pdf", "out_example.pdf"); mendor.addImage("picture.jpg", 1, 10, 10, 100, 100); mendor.close();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return True if success false otherwise. @param imageName The path of input image file. @param pageNums The numbers of pages that will receive the image. @param lowerLeftX The lower left x of image rectangle. @param lowerLeftY The lower left y of image rectangle. @param upperRightX The upper right x of image rectangle. @param upperRightY The upper right y of image rectangle.
      
      <param name="String"/>
      <param name="int[]"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.addImage(String,int[],float,float,float,float,CompositingParameters)">
       
        <p>Adds image to the specified pages of PDF document at specified coordinates.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileMend mendor = new PdfFileMend("example.pdf", "out_example.pdf"); mendor.addImage("picture.jpg", 1, 10, 10, 100, 100, new CompositingParameters(BlendMode.Multiply)); mendor.close();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return True if success false otherwise. @param imageName The path of input image file. @param pageNums The numbers of pages that will receive the image. @param lowerLeftX The lower left x of image rectangle. @param lowerLeftY The lower left y of image rectangle. @param upperRightX The upper right x of image rectangle. @param upperRightY The upper right y of image rectangle. @param compositingParameters The graphics compositing parameters for the images.
      
      <param name="String"/>
      <param name="int[]"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
      <param name="CompositingParameters"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.addText(FormattedText,int,float,float)">
       
        <p>Not implemented.</p> @return @param text @param pageNum @param lowerLeftX @param lowerLeftY
      
      <param name="FormattedText"/>
      <param name="int"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.addText(FormattedText,int,float,float,float,float)">
       
        <p>Not implemented.</p> @return @param text @param pageNum @param lowerLeftX @param lowerLeftY @param upperRightX @param upperRightY
      
      <param name="FormattedText"/>
      <param name="int"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.addText(FormattedText,int[],float,float,float,float)">
       
        <p>Not implemented.</p> @return @param text @param pageNums @param lowerLeftX @param lowerLeftY @param upperRightX @param upperRightY
      
      <param name="FormattedText"/>
      <param name="int[]"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.close">
       
        <p>Closes PdfFileMend object.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.dispose"/>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.save(String)">
      Saves the PDF document to the specified file. @param The destination file.
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.save(OutputStream)">
      Saves the PDF document to the specified file. @param The destination stream.
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.getDocument">
       
        <p>Gets the document {@code PdfFileMend} is working on.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.#ctor">
       
        <p>Constructor.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.#ctor(String,String)">
       
        <p>Constructor.</p> @param inputFileName Input PDF file name. @param outputFileName Output PDF file name.
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.#ctor(FileInputStream,FileOutputStream)">
       
        <p>Constructor.</p> @param inputStream Input PDF stream. @param outputStream Output PDF stream.
      
      <param name="FileInputStream"/>
      <param name="FileOutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.#ctor(Stream,FileOutputStream)">
      <param name="Stream"/>
      <param name="FileOutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.#ctor(Stream,Stream)">
       
        <p>Constructor.</p> @param inputStream Input PDF stream. @param outputStream Output PDF stream.
      
      <param name="Stream"/>
      <param name="Stream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.#ctor(IDocument)">
       
        <p>Initializes new {@code PdfFileMend} object on base of the {@code document}.</p> @param document Pdf document.
      
      <param name="IDocument"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.#ctor(IDocument,String)">
       
        <p>Initializes new {@code PdfFileMend} object on base of the {@code document}.</p> @param document Pdf document. @param outputFileName Output PDF file name.
      
      <param name="IDocument"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileMend.#ctor(IDocument,Stream)">
       
        <p>Initializes new {@code PdfFileMend} object on base of the {@code document}.</p> @param document Pdf document. @param destStream Output PDF stream.
      
      <param name="IDocument"/>
      <param name="Stream"/>
    </member>
    <member name="T:com.aspose.pdf.facades.PdfFileSecurity">
       
        <p>Represents encrypting or decrypting a Pdf file with owner or user password, changing the security setting and password.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSecurity.setInputFile(String)">
       
        <p>Sets the input file.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSecurity.setInputStream(InputStream)">
       
        <p>Sets the input stream.</p> 
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSecurity.setOutputFile(String)">
       
        <p>Sets the output file.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSecurity.setOutputStream(OutputStream)">
       
        <p>Sets the output stream.</p> 
      
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSecurity.encryptFile(String,String,DocumentPrivilege,int)">
       
        <p>Encrypts Pdf file with userpassword and ownerpassword and sets the document's privileges to access. The user password and the owner password can be null or empty. The owner password will be replaced with a random string if the input owner password is null or empty.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre>String inFile = "..\\AsposePdfKitExample\\example1.pdf"; // The TestPath may be // re-assigned. String outFile = "..\\AsposePdfKitExample\\Kit0401.pdf"; // The TestPath may be // re-assigned. PdfFileSecurity fileSecurity = new PdfFileSecurity(inFile, outFile); fileSecurity.EncryptFile("userpass", "ownerpass", DocumentPrivilege.Print, KeySize.x256);</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @return True for success, or false. @param userPassword User password. @param ownerPassword Owner password. @param privilege Set privilege. @param keySize KeySize.x40 for 40 bits encryption, KeySize.x128 for 128 bits encryption and KeySize.x256 for 256 bits encryption.
      
      <param name="String"/>
      <param name="String"/>
      <param name="DocumentPrivilege"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSecurity.encryptFile(String,String,DocumentPrivilege,int,int)">
       
        <p>Encrypts Pdf file with userpassword and ownerpassword and sets the document's privileges to access. The user password and the owner password can be null or empty. The owner password will be replaced with a random string if the input owner password is null or empty. There are 6 possible combinations of KeySize and Algorithm values. However (KeySize.x40, Algorithm.AES) and (KeySize.x256, Algorithm.RC4) are invalid and corresponding exception will be raised if kit encounters this combination.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre>String inFile = "..\\AsposePdfKitExample\\example1.pdf"; // The TestPath may be // re-assigned. String outFile = "..\\AsposePdfKitExample\\Kit0401.pdf"; // The TestPath may be // re-assigned. PdfFileSecurity fileSecurity = new PdfFileSecurity(inFile, outFile); fileSecurity.encryptFile("userpass", "ownerpass", DocumentPrivilege.Print, KeySize.x256, Algorithm.AES);</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @return True for success, or false. @param userPassword User password. @param ownerPassword Owner password. @param privilege Set privilege. @param keySize KeySize.x40 for 40 bits encryption, KeySize.x128 for 128 bits encryption and KeySize.x256 for 256 bits encryption. @param cipher Algorithm.AES to encrypt using AES algorithm or Algorithm.RC4 for RC4 encryption.
      
      <param name="String"/>
      <param name="String"/>
      <param name="DocumentPrivilege"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSecurity.decryptFile(String)">
       
        <p>Decrypts an encrypted Pdf document by owner password. If the document hasn't owner password, it is allow to use user password.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre>string inFile = "..\\AsposePdfKitExample\\Kit0401.pdf"; // The TestPath may be // re-assigned. string outFile = "..\\AsposePdfKitExample\\Kit0404.pdf"; // The TestPath may be // re-assigned. PdfFileSecurity fileSecurity = new PdfFileSecurity(inFile, outFile); fileSecurity.DecryptFile("ownerpass");</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @return True for success,or false. @param ownerPassword Owner password.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSecurity.setPrivilege(DocumentPrivilege)">
       
        <p>Sets Pdf file security without being encrypted. The owner password will be added by a random string.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre>string inFile = "..\\AsposePdfKitExample\\example1.pdf"; // The TestPath may be // re-assigned. string outFile = "..\\AsposePdfKitExample\\Kit0405.pdf"; // The TestPath may be // re-assigned. PdfFileSecurity fileSecurity = new PdfFileSecurity(inFile, outFile); fileSecurity.SetPrivilege(DocumentPrivilege.Print);</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @return True for success, or false. @param privilege Set privilege.
      
      <param name="DocumentPrivilege"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSecurity.setPrivilege(String,String,DocumentPrivilege)">
       
        <p>Sets Pdf file security with original password.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre>string inFile = "..\\AsposePdfKitExample\\example1.pdf"; // The TestPath may be // re-assigned. string outFile = "..\\AsposePdfKitExample\\Kit0405.pdf"; // The TestPath may be // re-assigned. PdfFileSecurity fileSecurity = new PdfFileSecurity(inFile, outFile); fileSecurity.SetPrivilege(userPassword, ownerPassword, DocumentPrivilege.Print);</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @return True for success, or false. @param userPassword Original user password. @param ownerPassword Original owner password. @param privilege Set privilege.
      
      <param name="String"/>
      <param name="String"/>
      <param name="DocumentPrivilege"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSecurity.changePassword(String,String,String)">
       
        <p>Changes the user password and owner password by owner password, keeps the original security settings. The new user password and the new owner password can be null or empty. The owner password will be replaced with a random string if the new owner password is null or empty.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre>string inFile = "..\\AsposePdfKitExample\\Kit0406.pdf"; // The TestPath may be // re-assigned. string outFile = "..\\AsposePdfKitExample\\Kit0407.pdf"; // The TestPath may be // re-assigned. PdfFileSecurity fileSecurity = new PdfFileSecurity(inFile, outFile); fileSecurity.ChangePassword("owner", "newuser", "newowner");</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @return True for success,or false. @param ownerPassword Original Owner password. @param newUserPassword New User password. @param newOwnerPassword New Owner password.
      
      <param name="String"/>
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSecurity.changePassword(String,String,String,DocumentPrivilege,int)">
       
        <p>Changes the user password and password by owner password, allows to reset Pdf documnent security. The new user password and the new owner password can be null or empty. The owner password will be replaced with a random string if the new owner password is null or empty.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre>string inFile = "..\\AsposePdfKitExample\\Kit0401.pdf"; // The TestPath may be // re-assigned. string outFile = "..\\AsposePdfKitExample\\Kit0407.pdf"; // The TestPath may be // re-assigned. PdfFileSecurity fileSecurity = new PdfFileSecurity(inFile, outFile); fileSecurity.ChangePassword("owner", "newuser", "newowner", DocumentPrivilege.Print, KeySize.x256);</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @return True for success, or false. @param ownerPassword Original owner password. @param newUserPassword New User password. @param newOwnerPassword New Owner password. @param privilege Reset security. @param keySize KeySize.x40 for 40 bits encryption, KeySize.x128 for 128 bits encryption and KeySize.x256 for 256 bits encryption.
      
      <param name="String"/>
      <param name="String"/>
      <param name="String"/>
      <param name="DocumentPrivilege"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSecurity.changePassword(String,String,String,DocumentPrivilege,int,int)">
       
        <p>Changes the user password and password by owner password, allows to reset Pdf documnent security. The new user password and the new owner password can be null or empty. The owner password will be replaced with a random string if the new owner password is null or empty. There are 6 possible combinations of KeySize and Algorithm values. However (KeySize.x40, Algorithm.AES) and (KeySize.x256, Algorithm.RC4) are invalid and corresponding exception will be raised if kit encounters this combination.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre>string inFile = "..\\AsposePdfKitExample\\Kit0401.pdf"; // The TestPath may be // re-assigned. string outFile = "..\\AsposePdfKitExample\\Kit0407.pdf"; // The TestPath may be // re-assigned. PdfFileSecurity fileSecurity = new PdfFileSecurity(inFile, outFile); fileSecurity.ChangePassword("owner", "newuser", "newowner", DocumentPrivilege.Print, KeySize.x256, Algorithm.AES);</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @return True for success, or false. @param ownerPassword Original owner password. @param newUserPassword New User password. @param newOwnerPassword New Owner password. @param privilege Reset security. @param keySize KeySize.x40 for 40 bits encryption, KeySize.x128 for 128 bits encryption and KeySize.x256 for 256 bits encryption. @param cipher Algorithm.AES to encrypt using AES algorithm or Algorithm.RC4 for RC4 encryption.
      
      <param name="String"/>
      <param name="String"/>
      <param name="String"/>
      <param name="DocumentPrivilege"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSecurity.bindPdf(String)">
       
        <p>Initializes the facade.</p> @param srcFile The PDF file.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSecurity.bindPdf(InputStream)">
       
        <p>Initializes the facade.</p> @param srcStream The stream of PDF file.
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSecurity.close">
       
        <p>Closes the facade.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSecurity.#ctor(InputStream,OutputStream)">
       
        <p>Initialize the object of PdfFileSecurity with input and output stream.</p> @param inputStream Input Pdf Stream. @param outputStream Output Pdf Stream.
      
      <param name="InputStream"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSecurity.#ctor(String,String)">
       
        <p>Initializes the object of PdfFileSecurity with input and output file.</p> @param inputFile Source input Pdf file. @param outputFile Output Pdf file.
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSecurity.#ctor">
       
        <p>Initialize the object of PdfFileSecurity.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSecurity.#ctor(IDocument)">
       
        <p>Initializes new {@code PdfFileSecurity} object on base of the {@code document}.</p> @param document Pdf document.
      
      <param name="IDocument"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSecurity.#ctor(IDocument,String)">
       
        <p>Initializes new {@code PdfFileSecurity} object on base of the {@code document}.</p> @param document Pdf document. @param outputFile Output Pdf file.
      
      <param name="IDocument"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSecurity.#ctor(IDocument,OutputStream)">
       
        <p>Initializes new {@code PdfFileSecurity} object on base of the {@code document}.</p> @param document Pdf document. @param outputStream Output Pdf Stream.
      
      <param name="IDocument"/>
      <param name="OutputStream"/>
    </member>
    <member name="T:com.aspose.pdf.facades.PdfFileSignature">
       
        <p>Represents a class to sign a pdf file with a certificate.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.getSignatureAppearance">
       
        <p>Gets a graphic appearance for the signature. Property value represents image file name.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.setSignatureAppearance(String)">
       
        <p>Sets a graphic appearance for the signature. Property value represents image file name.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.bindPdf(String)">
       
        <p>Binds a Pdf file for editing.</p> @param inputFile The pdf file to be edited.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.bindPdf(InputStream)">
       
        <p>Binds a Pdf stream for editing.</p> @param inputStream The pdf stream to be edited. @throws IOException
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.save(String)">
       
        <p>Saves the result PDF to file.</p> @param outputFile output pdf file
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.save(OutputStream)">
       
        <p>Saves the result PDF to stream.</p> @param outputStream output pdf stream
      
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.sign(int,String,String,String,boolean,java.awt.Rectangle)">
       
        <p>Make a signature on the pdf document.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>String inFile = TestPath + "example1.pdf"; String outFile = TestPath + "signature.pdf"; PdfFileSignature pdfSign = new PdfFileSignature(); pdfSign.bindPdf(inFile); Rectangle rect = new Rectangle(100, 100, 200, 200); pdfSign.setSignatureAppearance ( TestPath + "butterfly.jpg"); pdfSign.setCertificate("certificate.pfx", "password"); pdfSign.sign(2, "Allen", "success", "ChangSha", true, rect); pdfSign.save(outFile);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param SigReason The reason of signature. @param SigContact The contact of signature. @param SigLocation The location of signature. @param visible The visiblity of signature. @param annotRect The rect of signature. @param page The page on which signature is made.
      
      <param name="int"/>
      <param name="String"/>
      <param name="String"/>
      <param name="String"/>
      <param name="boolean"/>
      <param name="java.awt.Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.sign(int,String,String,String,boolean,java.awt.Rectangle,Signature)">
       
        <p>Sign the document with the given type signature.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>String inFile = TestPath + "example1.pdf"; String outFile = TestPath + "signature.pdf"; PdfFileSignature pdfSign = new PdfFileSignature(inFile, outFile); Rectangle rect = new Rectangle(100, 100, 200, 100); pdfSign.setSignatureAppearance ( TestPath + "butterfly.jpg"); pdfSign.sign(2, "Allen", "success", "ChangSha", true, rect, new PKCS1("certificate.pfx", "password")); pdfSign.save();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param page The page on which signature is made. @param SigReason The reason of signature. @param SigContact The contact of signature. @param SigLocation The location of signature. @param visible The visiblity of signature. @param annotRect The rect of signature. @param sig The type of the signature, could be PKCS1, PKCS7 and PKCS7Detached.
      
      <param name="int"/>
      <param name="String"/>
      <param name="String"/>
      <param name="String"/>
      <param name="boolean"/>
      <param name="java.awt.Rectangle"/>
      <param name="Signature"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.sign(int,boolean,java.awt.Rectangle,Signature)">
       
        <p>Sign the document with the given type signature.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>String inFile = TestPath + "example1.pdf"; String outFile = TestPath + "signature.pdf"; PKCS1 sig = new PKCS1("certificate.pfx", "password"); sig.setReason ( "Some reason"); sig.setContact ( "Smith"); sig.setLocation ( "New York"); PdfFileSignature pdfSign = new PdfFileSignature(inFile, outFile); Rectangle rect = new Rectangle(100, 100, 200, 100); pdfSign.setSignatureAppearance ( TestPath + "butterfly.jpg"); pdfSign.sign(2, true, rect, sig); pdfSign.save();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param page The page on which signature is made. @param visible The visiblity of signature. @param annotRect The rect of signature. @param sig The type of the signature, could be PKCS1, PKCS7 and PKCS7Detached. Such data as signature reason, contact and location must be already present in this object (see corresponding properties).
      
      <param name="int"/>
      <param name="boolean"/>
      <param name="java.awt.Rectangle"/>
      <param name="Signature"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.sign(String,String,String,String,Signature)">
       
        <p>Sign the document with the given type signature which is placed in already presented signature field. Before signing signature field must be empty, i.e. field must not contain signature dictionary. Thus pdf document already has signature field, you should not supply the place to stamp the signature, corresponding page and rectangle are taken from signature field which is found by signature name (see SigName parameter).</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>String inFile = TestPath + "example1.pdf"; String outFile = TestPath + "signature.pdf"; PKCS1 sig = new PKCS1("certificate.pfx", "password"); PdfFileSignature pdfSign = new PdfFileSignature(inFile, outFile); pdfSign.setSignatureAppearance ( TestPath + "butterfly.jpg"); pdfSign.sign("Signature1", "Allen", "success", "ChangSha", sig); pdfSign.save();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param SigName The name of the signature field. @param SigReason The reason of signature. @param SigContact The contact of signature. @param SigLocation The location of signature. @param sig The type of the signature, could be PKCS1, PKCS7 and PKCS7Detached.
      
      <param name="String"/>
      <param name="String"/>
      <param name="String"/>
      <param name="String"/>
      <param name="Signature"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.sign(int,String,String,String,String,boolean,java.awt.Rectangle,Signature)">
       
        <p>Sign the document with the given type signature which is placed in already presented signature field. Before signing pdf document should already has signature field, corresponding page and rectangle are taken from signature field which is found by signature name (see SigName parameter).</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>String inFile = TestPath + "blankWithSignature.pdf"; String outFile = TestPath + "signature.pdf"; PKCS7 sig = new PKCS7("certificate.pfx", "password"); PdfFileSignature pdfSign = new PdfFileSignature(inFile); Rectangle rect = new Rectangle(100, 100, 100, 100); pdfSign.setSignatureAppearance( TestPath + "butterfly.jpg"); pdfSign.sign(1, "Signature1", "ReasonToTest", "ContactMe", "SomeLocation", true, rect, sig); pdfSign.save(outFile);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param page The page on which signature is made. @param SigName The name of the signature field. @param SigReason The reason of signature. @param SigContact The contact of signature. @param SigLocation The location of signature. @param visible The visiblity of signature. @param annotRect The rect of signature. @param sig The type of the signature, could be PKCS1, PKCS7 and PKCS7Detached.
      
      <param name="int"/>
      <param name="String"/>
      <param name="String"/>
      <param name="String"/>
      <param name="String"/>
      <param name="boolean"/>
      <param name="java.awt.Rectangle"/>
      <param name="Signature"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.sign(String,Signature)">
       
        <p>Sign the document with the given type signature which is placed in already presented signature field. Before signing signature field must be empty, i.e. field must not contain signature dictionary. Thus pdf document already has signature field, you should not supply the place to stamp the signature, corresponding page and rectangle are taken from signature field which is found by signature name (see SigName parameter). Such data as signature reason, contact and location must be provided by corresponding properties of the Signature object sig.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>String inFile = TestPath + "example1.pdf"; String outFile = TestPath + "signature.pdf"; PKCS1 sig = new PKCS1("certificate.pfx", "password"); sig.setReason ( "Some reason"); sig.setContact ( "Smith"); sig.setLocation ( "New York"); PdfFileSignature pdfSign = new PdfFileSignature(inFile, outFile); pdfSign.setSignatureAppearance ( TestPath + "butterfly.jpg"); pdfSign.sign("Signature1", sig); pdfSign.save();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param SigName The name of the signature field. @param sig The type of the signature, could be PKCS1 (Pkcs1Signature object), PKCS7 and PKCS7 detached (Pkcs7Signature object)
      
      <param name="String"/>
      <param name="Signature"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.getSignNames">
       
        <p>Gets the names of all not empty signatures.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>String inFile=TestPath + "example1.pdf"; PdfFileSignature pdfSign=new PdfFileSignature(); pdfSign.bindPdf(inFile); ArrayList names=pdfSign.getSignNames(); for(int i=0;i&lt;names.Count;i++) { System.out.println("signature name:"+(String)names[i]); System.out.println("coverswholedocument:"+pdfSign.IsCoversWholeDocument((String)names[i])); System.out.println("revision:"+pdfSign.GetRevision((String)names[i])); System.out.println("verifysigned:"+pdfSign.VerifySigned((String)names[i])); System.out.println("reason:"+pdfSign.GetReason((String)names[i])); System.out.println("location:"+pdfSign.GetLocation((String)names[i])); System.out.println("datatime:"+pdfSign.GetDateTime((String)names[i])); } System.out.println("totalvision:"+pdfSign.GetTotalRevision());</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return Return a arrayList.
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.getBlankSignNames">
       
        <p>Gets the names of all empty signature fields.</p> @return Return a arrayList.
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.isContainSignature">
       
        <p>Checks if the pdf has a digital signature or not.</p> @return Return a result of bool type.
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.isCoversWholeDocument(String)">
       
        <p>Checks if the signature covers the whole document.</p> @return Return a result of bool type. @param signName The name of signature.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.getRevision(String)">
       
        <p>Gets the revision of a signature.</p> @return Return the number of signature revision. @param signName The name of signature.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.getTotalRevision">
       
        <p>Gets the toltal revision.</p> @return Return the total number of signature revision.
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.removeSignature(String)">
       
        <p>Remove the signature according to the name of the signature.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>String inFile = TestPath + "example1.pdf"; PdfFileSignature pdfSign = new PdfFileSignature(); pdfSign.bindPdf(inFile); List names = pdfSign.getSignNames(); for(int i = 0; i &lt; names.size(); i++) { pdfSign.removeSignature((String)names.get(i)); } pdfSign.save(TestPath + "signed_removed.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param signName The name of signature.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.removeSignature(String,boolean)">
       
        <p>Removes the signature according to the name of the signature.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">String inFile = TestPath + "example1.pdf"; PdfFileSignature pdfSign = new PdfFileSignature(); pdfSign.BindPdf(inFile); List names = pdfSign.getSignNames(); for(int i = 0; i &lt; names.size(); i++) { pdfSign.removeSignature((String)names.get(i), false); } pdfSign.save(TestPath + "signed_removed.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param signName The name of signature. @param removeField If set to true, than removes both of signature and field from document; otherwise, signature only.
      
      <param name="String"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.verifySigned(String)">
       
        <p>Checks the validity of a signature.</p> @return Return a result of bool type. @param signName The name of signature.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.getSignerName(String)">
       
        <p>Gets the name of person or organization who signing the pdf document.</p> @return Returns the result of the signer's name. @param signName The name of signature.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.getDateTime(String)">
       
        <p>Gets the signature's datetime.</p> @return Return the result of DateTime type. @param signName The name of signature.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.getReason(String)">
       
        <p>Gets the reason of a signature.</p> @return Returns a result of String type. @param signName The name of signature.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.getLocation(String)">
       
        <p>Gets the location of a signature.</p> @return Returns a result of String type. @param signName The name of signature.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.getContactInfo(String)">
       
        <p>Gets the contact information of a signature.</p> @return Returns a result of String type. @param signName The name of signature.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.verifySignature(String)">
       
        <p>Checks the validity of a signature.</p> @return Return a result of bool type. @param signName The name of signature.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.extractImage(String)">
       
        <p>Extracts signature's image.</p> @return If image was successfully found than returns stream object; otherwise, null. @param signName The name of signature.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.extractCertificate(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.save">
       
        <p>Save signed pdf file. Output filename must be provided before with the help of coresponding PdfFileSignature constructor.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.setCertificate(String,String)">
       
        <p>Set certificate file and password for signing routine.</p> @param pfx PKCS #12 certificate file. @param pass Password to get access for the certificate private key.
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.getSignatureAppearanceStream">
       
        <p>Gets a graphic appearance for the signature. Property value represents image stream.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.setSignatureAppearanceStream(InputStream)">
       
        <p>Sets a graphic appearance for the signature. Property value represents image stream.</p> 
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.close">
      Closes the facade.
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.dispose"/>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.#ctor">
       
        <p>The constructor of PdfFileSignature class.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.#ctor(String)">
       
        <p>The constructor of PdfFileSignature class.</p> @param inputFile The input file for signature.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.#ctor(String,String)">
       
        <p>The constructor of PdfFileSignature class.</p> @param inputFile The input file for signature. @param outputFile The output file.
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.#ctor(IDocument)">
       
        <p>Binds a Pdf document for editing.</p> @param pdf Pdf document which came from Aspose.Pdf.Generator.
      
      <param name="IDocument"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileSignature.#ctor(IDocument,String)">
       
        <p>Initializes new {@code PdfFileSignature} object on base of the {@code document}.</p> @param document Pdf document. @param outputFile The output file.
      
      <param name="IDocument"/>
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.facades.PdfFileStamp">
       
        <p>Class for adding stamps (watermark or background) to PDF files.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.getKeepSecurity">
       
        <p>Keeps security if true. (This feature will be implemented in next versions).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.setKeepSecurity(boolean)">
       
        <p>Keeps security if true. (This feature will be implemented in next versions).</p> 
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.getInputFile">
       
        <p>Gets name and path of input file.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.setInputFile(String)">
       
        <p>Sets name and path of input file.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.getInputStream">
       
        <p>Gets input stream.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.setInputStream(InputStream)">
       
        <p>Sets input stream.</p> 
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.getOutputFile">
       
        <p>Gets name and path of output file.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.setOutputFile(String)">
       
        <p>Sets name and path of output file.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.getOutputStream">
       
        <p>Gets output stream.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.setOutputStream(OutputStream)">
       
        <p>Sets or sets output stream.</p> 
      
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.getPageNumberRotation">
       
        <p>Gets rotation of page number. Rotation is in degrees. Default is 0.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.setPageNumberRotation(float)">
       
        <p>Sets rotation of page number. Rotation is in degrees. Default is 0.</p> 
      
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.setConvertTo(int)">
       
        <p>Sets PDF file format. Result file will be saved in specified file format. If this property is not specified then file will be save in default PDF format without conversion.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.getPageHeight">
       
        <p>Gets height of first page in souorce file.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre code="Java">PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); System.out.println("Height = " + fileStamp.getPageHeight()); fileStamp.close();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.getPageWidth">
       
        <p>Gets width of first page in input file.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); System.out.println("Width = " + fileStamp.getPageWidth()); fileStamp.close();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.getStartingNumber">
      Gets or sets starting number for first page in input file. Next pages will be numbered starting from this value.
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.setStartingNumber(int)">
       
        <p>Sets starting number for first page in input file. Next pages will be numbered starting from this value. For example if StartingNumber is set to 100, document pages will have numbers 100, 101, 102...</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); fileStamp.setStartingNumber( 100); fileStamp.addPageNumber("Page #"); fileStamp.close();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.close">
       
        <p>Closes opened files and saves changes. Warning. If input or output streams are specified they are not closed by Close() method.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileStamp stamp = new PdfFileStamp("input.pdf", "output.pdf"); //do some work... stamp.close();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.addStamp(Stamp)">
       
        <p>Adds stamp to the file.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre code="Java">PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); Stamp stamp = new com.aspose.pdf.facades.Stamp(); stamp.setOrigin(140, 400); stamp.setImageSize(50, 50); stamp.setOpacity ( 0.8f); stamp.isBackground ( true); stamp.bindImage("image.jpg"); fileStamp.addStamp(stamp); fileStamp.close();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param stamp Stamp object which.
      
      <param name="Stamp"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.addPageNumber(String)">
       
        <p>Add page number to file. Page number text may contain # sign which will be replaced with number of the page. Page number is placed in the bottom of the page centered horizontally.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); fileStamp.addPageNumber("Page #"); fileStamp.close();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param formatString Text of page number
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.addPageNumber(FormattedText)">
       
        <p>Adds page number to the page. Page number may contain # sign which will be replaced with page number. Page number is placed in the bottom of the page centered horizontally.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); fileStamp.addPageNumber(new FormattedText("Page #")); fileStamp.close();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param formattedText Format string for page number representes as FormattedText.
      
      <param name="FormattedText"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.addPageNumber(String,int,float,float,float,float)">
       
        <p>Adds page number to the pages of document.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre code="Java">PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); fileStamp.addPageNumber("Page #", PdfFileStamp.PosBottomLeft, 100, 100, 200, 200); fileStamp.close();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param formatString Format string for page number. @param position Position where page number will be placed on the page. 0-bottom middle, 1-bottom right, 2-upper right, 3 - sides right, 4 - upper middle,5 - bottom left,6 - sides left,7 - upper left. You can use the following constants: PosBottomMiddle = 0, PosBottomRight = 1, PosUpperRight = 2, PosSidesRight = 3, PosUpperMiddle, PosBottomLeft = 5, PosSidesLeft, PosUpperLeft @param leftMargin Margin on the left edge of the page. @param rightMargin Margin on the right edge of the page. @param topMargin Margin on the top edge of the page. @param bottomMargin Margin on the bottom edge of the page.
      
      <param name="String"/>
      <param name="int"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.addPageNumber(String,float,float)">
       
        <p>Adds page number at the specified position on the page.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); fileStamp.addPageNumber(new FormattedText("Page #"), 123, 357); fileStamp.close();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param formatString Format string. Format string can contain # sign which will be replaced with page number. @param x X coordinate of page number. @param y Y coordinate of page number.
      
      <param name="String"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.addPageNumber(FormattedText,int,float,float,float,float)">
       
        <p>Adds page number to the pages of document.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="JAva">PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); fileStamp.addPageNumber(new FormattedText("Page #"), PdfFileStamp.PosBottomLeft, 100, 100, 200, 200); fileStamp.close();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param formattedText FormattedText object which represents page number format and properties iof the text. @param position Position where page number will be placed on the page. 0-bottom middle, 1-bottom right, 2-upper right, 3 - sides right, 4 - upper middle,5 - bottom left,6 - sides left,7 - upper left. You can use the following constants: PosBottomMiddle = 0, PosBottomRight = 1, PosUpperRight = 2, PosSidesRight = 3, PosUpperMiddle, PosBottomLeft = 5, PosSidesLeft, PosUpperLeft @param leftMargin Margin on the left edge of the page. @param rightMargin Margin on the right edge of the page. @param topMargin Margin on the top edge of the page. @param bottomMargin Margin on the bottom edge of the page.
      
      <param name="FormattedText"/>
      <param name="int"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.addPageNumber(FormattedText,float,float)">
       
        <p>Adds page number at the specified position on the page.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); fileStamp.addPageNumber(new FormattedText("Page #"), 123, 357); fileStamp.close();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param formattedText Formatted text which represents page number format and properties of the text. Format string can contain # sign which will be replaced with page number. @param x X coordinate of page number. @param y Y coordinate of page number.
      
      <param name="FormattedText"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.addHeader(FormattedText,float)">
       
        <p>Adds header to the page.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); fileStamp.addHeader(new FormattedText("Head of the page"), 50); fileStamp.close();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param formattedText Text for header and properties of the text. @param topMargin Margin on the top of page.
      
      <param name="FormattedText"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.addHeader(FormattedText,float,float,float)">
       
        <p>Adds header to the pages of file.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileStamp stamp = new PdfFileStamp("input.pdf", "output.pdf"); stamp.addHeader(new FormattedText("Head of the page"), 10, 50, 50);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param formattedText Formatted text object which contains page text and its properties. @param topMargin Margin on the top of the page. @param leftMargin Margin on the left of the page. @param rightMargin Margin on the right of the page.
      
      <param name="FormattedText"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.addHeader(String,float)">
       
        <p>Adds image as header to the pages of the file.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", output.pdf"); InpetuStream input = new FileInputStream(TestSettings.GetInputFile("test.jpg")); fileStamp.addHeader("image.jpg", 50); fileStamp.close();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param imageFile Path to the image file. @param topMargin Margin at top of the page.
      
      <param name="String"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.addHeader(String,float,float,float)">
       
        <p>Adds image as header on the pages.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", output.pdf"); InputStream input = new FileInputStream(TestSettings.GetInputFile("test.jpg")); fileStamp.addHeader("image.jpg", 50, 100, 100); fileStamp.close();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param imageFile Path to the image file. @param topMargin Margin at top of the page. @param leftMargin Margin at left side of the page. @param rightMargin Margin at right side of the page.
      
      <param name="String"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.addHeader(InputStream,float)">
       
        <p>Adds image as header on the pages.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", output.pdf"); InputStream input = new FileInputStream("test.jpg"); fileStamp.addHeader(new FileInputStream("image.jpg"), 50); fileStamp.close();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param imageStream Stream of the image. @param topMargin Margin at top of the page.
      
      <param name="InputStream"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.addHeader(InputStream,float,float,float)">
       
        <p>Adds image at the top of the page.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", output.pdf"); IjnputStream input = new FileInputStream("test.jpg"); fileStamp.addHeader(new FileInputStream("image.jpg"), 50, 100, 100); fileStamp.close();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param inputStream Stream which contains image data. @param topMargin Margin at top of the page. @param leftMargin Margin at left side of the page. @param rightMargin Margin at right side of the page.
      
      <param name="InputStream"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.addFooter(FormattedText,float)">
       
        <p>Adds footer to the pages of the document.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileStamp stamp = new PdfFileStamp("input.pdf", "output.pdf"); stamp.addFooter(new FormattedText("Foot of the page"), 10);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param formattedText FormattedText object which contains text of the footer and text properties. @param bottomMargin Margin at the top of page.
      
      <param name="FormattedText"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.addFooter(FormattedText,float,float,float)">
       
        <p>Adds footer to the pages of the document.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileStamp stamp = new PdfFileStamp("input.pdf", "output.pdf"); stamp.addFooter(new FormattedText("Foot of the page"), 10, 50, 50);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param formattedText FormattedText object which contains footer text and text properties. @param bottomMargin Margin at the bottom of the page. @param leftMargin Margin at the left side of the page. @param rightMargin Margin at the right side of the page.
      
      <param name="FormattedText"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.addFooter(String,float)">
       
        <p>Adds image as footer to the pages of the document.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", output.pdf"); InputStream input = new FileInputStream("test.jpg"); fileStamp.addFooter("image.jpg", 50); fileStamp.close();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param imageFile Image file name and path. @param bottomMargin Margin at the bottom of the page.
      
      <param name="String"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.addFooter(String,float,float,float)">
       
        <p>Adds image as footer of the pages.</p> @param imageFile Iamge file name and path. @param bottomMargin Margin at the bottom of the page. @param leftMargin Margin at the left side of the page. @param rightMargin Margin at the right side of the page.
      
      <param name="String"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.addFooter(InputStream,float)">
       
        <p>Adds image as footer of the page.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", output.pdf"); InputStream input = new FileInputStream("test.jpg"); fileStamp.addFooter(new FileInputStream("image.jpg"), 50); fileStamp.close();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param imageStream Stream contains image data. @param bottomMargin Margin at the bottom of the page.
      
      <param name="InputStream"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.addFooter(InputStream,float,float,float)">
       
        <p>Adds image as footer of the page.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", output.pdf"); InputStream input = new FileInputStream("test.jpg"); fileStamp.addFooter(new FileInputStream("image.jpg"), 50, 50, 50); fileStamp.close();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param imageStream Stream contains image data. @param bottomMargin Margin at the bottom of the page. @param leftMargin Margin at the left side of the page. @param rightMargin Margin at the right side of the page.
      
      <param name="InputStream"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.addPageNumber(String,int)">
       
        <p>Adds page number to the pages.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); fileStamp.addPageNumber("Page #", PdfFileStamp.POS_UPPER_RIGHT); fileStamp.close();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param formatString Format of the page number. This text may contain # which will be replaced with page number. @param position Position where page number will be placed on the page. 0-bottom middle, 1-bottom right, 2-upper right, 3 - sides right, 4 - upper middle,5 - bottom left,6 - sides left,7 - upper left. You can use the following constants: PosBottomMiddle = 0, PosBottomRight = 1, PosUpperRight = 2, PosSidesRight = 3, PosUpperMiddle, PosBottomLeft = 5, PosSidesLeft, PosUpperLeft
      
      <param name="String"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.addPageNumber(FormattedText,int)">
       
        <p>Adds page number to the pages.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); fileStamp.addPageNumber("Page #", PdfFileStamp.POS_UPPER_RIGHT); fileStamp.close();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param formattedText FormattedText object which contains format of the page number and text properties. This text may contain # which will be replaced with page number. @param position Position where page number will be placed on the page. 0-bottom middle, 1-bottom right, 2-upper right, 3 - sides right, 4 - upper middle,5 - bottom left,6 - sides left,7 - upper left. You can use the following constants: PosBottomMiddle = 0, PosBottomRight = 1, PosUpperRight = 2, PosSidesRight = 3, PosUpperMiddle, PosBottomLeft = 5, PosSidesLeft, PosUpperLeft
      
      <param name="FormattedText"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.getContentDisposition">
       
        <p>Gets how content will be stored when result of operation is stored into HttpResponse object. Possible value: inline / attachment. Default: inline.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.setContentDisposition(int)">
       
        <p>Sets how content will be stored when result of operation is stored into HttpResponse object. Possible value: inline / attachment. Default: inline.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.getSaveOptions">
       
        <p>Gets save options when result is stored as HttpResponse. Default value: PdfSaveOptions.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.setSaveOptions(SaveOptions)">
       
        <p>Sets save options when result is stored as HttpResponse. Default value: PdfSaveOptions.</p> 
      
      <param name="SaveOptions"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.getAttachmentName">
       
        <p>Gets name of attachment when result of operation is stored into HttpResponse objects as attachment.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.setAttachmentName(String)">
       
        <p>Sets name of attachment when result of operation is stored into HttpResponse objects as attachment.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.#ctor">
       
        <p>Constructor of the PdfFileStamp. Input file and output file may be specified via corresponding properties.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="JAva">PdfFileStamp fileStamp = new PdfFileStamp(); fileStamp.setInputFile ( "input.pdf"); fileStamp.setOutputFile ( "output.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.#ctor(IDocument)">
       
        <p>Initializes new {@code PdfFileStamp} object on base of the {@code document}.</p> @param document Pdf document.
      
      <param name="IDocument"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.#ctor(IDocument,OutputStream)">
       
        <p>Initializes new {@code PdfFileStamp} object on base of the {@code document}.</p> @param document Pdf document. @param outputStream Output stream.
      
      <param name="IDocument"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.#ctor(IDocument,String)">
       
        <p>Initializes new {@code PdfFileStamp} object on base of the {@code document}.</p> @param document Pdf document. @param outputFile Output file name and path.
      
      <param name="IDocument"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.#ctor(InputStream,OutputStream)">
       
        <p>Constructor for PdfFileStamp.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">[SampleCode] InputStream input = new FileInputStream("input.pdf"); OutputStream output = new FileInputStream("output.pdf"); PdfFileStamp stamp = new PdfFileStamp(input, output);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param inputStream Input stream. @param outputStream Output stream.
      
      <param name="InputStream"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.#ctor(InputStream,OutputStream,boolean)">
       
        <p>Constructor of PdfFileStamp.</p> @param inputStream Input stream. @param outputStream Output stream. @param keepSecurity Keep security if true.
      
      <param name="InputStream"/>
      <param name="OutputStream"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.#ctor(String,String)">
       
        <p>Constructor for PdfFileStamp.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileStamp stamp = new PdfFileStamp("input.pdf", "output.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param inputFile Input file name and path. @param outputFile Output file name and path.
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStamp.#ctor(String,String,boolean)">
       
        <p>Constructor for PdfFileStamp.</p> @param inputFile Input file name and path. @param outputFile Output file name and path. @param keepSecurity Keep security if true.
      
      <param name="String"/>
      <param name="String"/>
      <param name="boolean"/>
    </member>
    <member name="F:com.aspose.pdf.facades.PdfFileStamp.POS_BOTTOM_MIDDLE">
       
        <p>Bottom middle position.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfFileStamp.POS_BOTTOM_RIGHT">
       
        <p>Bottom right position.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfFileStamp.POS_UPPER_RIGHT">
       
        <p>Right upper position.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfFileStamp.POS_SIDES_RIGHT">
       
        <p>Right position.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfFileStamp.POS_UPPER_MIDDLE">
       
        <p>Upper middle position.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfFileStamp.POS_BOTTOM_LEFT">
       
        <p>Bottom left position.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfFileStamp.POS_SIDES_LEFT">
       
        <p>Left position.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfFileStamp.POS_UPPER_LEFT">
       
        <p>Upper let position.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.PdfFileStampWeb">
       
        <p>Class for adding stamps (watermark or background) to PDF files. Enable to work with HttpServletResponse.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.getKeepSecurity">
       
        <p>Keeps security if true. (This feature will be implemented in next versions).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.setKeepSecurity(boolean)">
       
        <p>Keeps security if true. (This feature will be implemented in next versions).</p> 
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.getInputFile">
       
        <p>Gets name and path of input file.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.setInputFile(String)">
       
        <p>Sets name and path of input file.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.getInputStream">
       
        <p>Gets input stream.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.setInputStream(InputStream)">
       
        <p>Sets input stream.</p> 
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.getOutputFile">
       
        <p>Gets name and path of output file.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.setOutputFile(String)">
       
        <p>Sets name and path of output file.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.getOutputStream">
       
        <p>Gets output stream.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.setOutputStream(OutputStream)">
       
        <p>Sets or sets output stream.</p> 
      
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.getPageNumberRotation">
       
        <p>Gets rotation of page number. Rotation is in degrees. Default is 0.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.setPageNumberRotation(float)">
       
        <p>Sets rotation of page number. Rotation is in degrees. Default is 0.</p> 
      
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.setConvertTo(int)">
       
        <p>Sets PDF file format. Result file will be saved in specified file format. If this property is not specified then file will be save in default PDF format without conversion.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.getPageHeight">
       
        <p>Gets height of first page in souorce file.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre code="Java">PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); System.out.println("Height = " + fileStamp.getPageHeight()); fileStamp.close();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.getPageWidth">
       
        <p>Gets width of first page in input file.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); System.out.println("Width = " + fileStamp.getPageWidth()); fileStamp.close();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.getStartingNumber">
      Gets or sets starting number for first page in input file. Next pages will be numbered starting from this value.
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.setStartingNumber(int)">
       
        <p>Sets starting number for first page in input file. Next pages will be numbered starting from this value. For example if StartingNumber is set to 100, document pages will have numbers 100, 101, 102...</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); fileStamp.setStartingNumber( 100); fileStamp.addPageNumber("Page #"); fileStamp.close();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.addStamp(Stamp)">
       
        <p>Adds stamp to the file.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre code="Java">PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); Stamp stamp = new com.aspose.pdf.facades.Stamp(); stamp.setOrigin(140, 400); stamp.setImageSize(50, 50); stamp.setOpacity ( 0.8f); stamp.isBackground ( true); stamp.bindImage("image.jpg"); fileStamp.addStamp(stamp); fileStamp.close();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param stamp Stamp object which.
      
      <param name="Stamp"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.addPageNumber(String)">
       
        <p>Add page number to file. Page number text may contain # sign which will be replaced with number of the page. Page number is placed in the bottom of the page centered horizontally.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); fileStamp.addPageNumber("Page #"); fileStamp.close();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param formatString Text of page number
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.addPageNumber(FormattedText)">
       
        <p>Adds page number to the page. Page number may contain # sign which will be replaced with page number. Page number is placed in the bottom of the page centered horizontally.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); fileStamp.addPageNumber(new FormattedText("Page #")); fileStamp.close();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param formattedText Format string for page number representes as FormattedText.
      
      <param name="FormattedText"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.addPageNumber(String,int,float,float,float,float)">
       
        <p>Adds page number to the pages of document.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre code="Java">PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); fileStamp.addPageNumber("Page #", PdfFileStamp.POS_BOTTOM_LEFT, 100, 100, 200, 200); fileStamp.close();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param formatString Format string for page number. @param position Position where page number will be placed on the page. 0-bottom middle, 1-bottom right, 2-upper right, 3 - sides right, 4 - upper middle,5 - bottom left,6 - sides left,7 - upper left. You can use the following constants: PosBottomMiddle = 0, PosBottomRight = 1, PosUpperRight = 2, PosSidesRight = 3, PosUpperMiddle, PosBottomLeft = 5, PosSidesLeft, PosUpperLeft @param leftMargin Margin on the left edge of the page. @param rightMargin Margin on the right edge of the page. @param topMargin Margin on the top edge of the page. @param bottomMargin Margin on the bottom edge of the page.
      
      <param name="String"/>
      <param name="int"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.addPageNumber(String,float,float)">
       
        <p>Adds page number at the specified position on the page.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); fileStamp.addPageNumber(new FormattedText("Page #"), 123, 357); fileStamp.close();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param formatString Format string. Format string can contain # sign which will be replaced with page number. @param x X coordinate of page number. @param y Y coordinate of page number.
      
      <param name="String"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.addPageNumber(FormattedText,int,float,float,float,float)">
       
        <p>Adds page number to the pages of document.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); fileStamp.addPageNumber(new FormattedText("Page #"), PdfFileStamp.POS_BOTTOM_LEFT, 100, 100, 200, 200); fileStamp.close();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param formattedText FormattedText object which represents page number format and properties iof the text. @param position Position where page number will be placed on the page. 0-bottom middle, 1-bottom right, 2-upper right, 3 - sides right, 4 - upper middle,5 - bottom left,6 - sides left,7 - upper left. You can use the following constants: PosBottomMiddle = 0, PosBottomRight = 1, PosUpperRight = 2, PosSidesRight = 3, PosUpperMiddle, PosBottomLeft = 5, PosSidesLeft, PosUpperLeft @param leftMargin Margin on the left edge of the page. @param rightMargin Margin on the right edge of the page. @param topMargin Margin on the top edge of the page. @param bottomMargin Margin on the bottom edge of the page.
      
      <param name="FormattedText"/>
      <param name="int"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.addPageNumber(FormattedText,float,float)">
       
        <p>Adds page number at the specified position on the page.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); fileStamp.addPageNumber(new FormattedText("Page #"), 123, 357); fileStamp.close();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param formattedText Formatted text which represents page number format and properties of the text. Format string can contain # sign which will be replaced with page number. @param x X coordinate of page number. @param y Y coordinate of page number.
      
      <param name="FormattedText"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.addHeader(FormattedText,float)">
       
        <p>Adds header to the page.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); fileStamp.addHeader(new FormattedText("Head of the page"), 50); fileStamp.close();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param formattedText Text for header and properties of the text. @param topMargin Margin on the top of page.
      
      <param name="FormattedText"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.addHeader(FormattedText,float,float,float)">
       
        <p>Adds header to the pages of file.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileStamp stamp = new PdfFileStamp("input.pdf", "output.pdf"); stamp.addHeader(new FormattedText("Head of the page"), 10, 50, 50);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param formattedText Formatted text object which contains page text and its properties. @param topMargin Margin on the top of the page. @param leftMargin Margin on the left of the page. @param rightMargin Margin on the right of the page.
      
      <param name="FormattedText"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.addHeader(String,float)">
       
        <p>Adds image as header to the pages of the file.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", output.pdf"); fileStamp.addHeader("image.jpg", 50); fileStamp.close();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param imageFile Path to the image file. @param topMargin Margin at top of the page.
      
      <param name="String"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.addHeader(String,float,float,float)">
       
        <p>Adds image as header on the pages.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", output.pdf"); fileStamp.addHeader("image.jpg", 50, 100, 100); fileStamp.close();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param imageFile Path to the image file. @param topMargin Margin at top of the page. @param leftMargin Margin at left side of the page. @param rightMargin Margin at right side of the page.
      
      <param name="String"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.addHeader(InputStream,float)">
       
        <p>Adds image as header on the pages.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", output.pdf"); InputStream input = new FileInputStream("test.jpg"); fileStamp.addHeader(input, 50); fileStamp.close();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param imageStream Stream of the image. @param topMargin Margin at top of the page.
      
      <param name="InputStream"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.addHeader(InputStream,float,float,float)">
       
        <p>Adds image at the top of the page.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", output.pdf"); InputStream input = new FileInputStream("test.jpg"); fileStamp.addHeader(input, 50, 100, 100); fileStamp.close();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param inputStream Stream which contains image data. @param topMargin Margin at top of the page. @param leftMargin Margin at left side of the page. @param rightMargin Margin at right side of the page.
      
      <param name="InputStream"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.addFooter(FormattedText,float)">
       
        <p>Adds footer to the pages of the document.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileStamp stamp = new PdfFileStamp("input.pdf", "output.pdf"); stamp.addFooter(new FormattedText("Foot of the page"), 10);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param formattedText FormattedText object which contains text of the footer and text properties. @param bottomMargin Margin at the top of page.
      
      <param name="FormattedText"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.addFooter(FormattedText,float,float,float)">
       
        <p>Adds footer to the pages of the document.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileStamp stamp = new PdfFileStamp("input.pdf", "output.pdf"); stamp.addFooter(new FormattedText("Foot of the page"), 10, 50, 50);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param formattedText FormattedText object which contains footer text and text properties. @param bottomMargin Margin at the bottom of the page. @param leftMargin Margin at the left side of the page. @param rightMargin Margin at the right side of the page.
      
      <param name="FormattedText"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.addFooter(String,float)">
       
        <p>Adds image as footer to the pages of the document.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", output.pdf"); fileStamp.addFooter("image.jpg", 50); fileStamp.close();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param imageFile Image file name and path. @param bottomMargin Margin at the bottom of the page.
      
      <param name="String"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.addFooter(String,float,float,float)">
       
        <p>Adds image as footer of the pages.</p> @param imageFile Iamge file name and path. @param bottomMargin Margin at the bottom of the page. @param leftMargin Margin at the left side of the page. @param rightMargin Margin at the right side of the page.
      
      <param name="String"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.addFooter(InputStream,float)">
       
        <p>Adds image as footer of the page.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", output.pdf"); InputStream input = new FileInputStream("test.jpg"); fileStamp.addFooter(input, 50); fileStamp.close();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param imageStream Stream contains image data. @param bottomMargin Margin at the bottom of the page.
      
      <param name="InputStream"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.addFooter(InputStream,float,float,float)">
       
        <p>Adds image as footer of the page.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", output.pdf"); InputStream input = new FileInputStream("test.jpg"); fileStamp.addFooter(input, 50, 50, 50); fileStamp.close();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param imageStream Stream contains image data. @param bottomMargin Margin at the bottom of the page. @param leftMargin Margin at the left side of the page. @param rightMargin Margin at the right side of the page.
      
      <param name="InputStream"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.addPageNumber(String,int)">
       
        <p>Adds page number to the pages.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); fileStamp.addPageNumber("Page #", PdfFileStamp.PosUpperRight); fileStamp.close();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param formatString Format of the page number. This text may contain # which will be replaced with page number. @param position Position where page number will be placed on the page. 0-bottom middle, 1-bottom right, 2-upper right, 3 - sides right, 4 - upper middle,5 - bottom left,6 - sides left,7 - upper left. You can use the following constants: PosBottomMiddle = 0, PosBottomRight = 1, PosUpperRight = 2, PosSidesRight = 3, PosUpperMiddle, PosBottomLeft = 5, PosSidesLeft, PosUpperLeft
      
      <param name="String"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.addPageNumber(FormattedText,int)">
       
        <p>Adds page number to the pages.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); fileStamp.addPageNumber("Page #", PdfFileStamp.PosUpperRight); fileStamp.close();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param formattedText FormattedText object which contains format of the page number and text properties. This text may contain # which will be replaced with page number. @param position Position where page number will be placed on the page. 0-bottom middle, 1-bottom right, 2-upper right, 3 - sides right, 4 - upper middle,5 - bottom left,6 - sides left,7 - upper left. You can use the following constants: PosBottomMiddle = 0, PosBottomRight = 1, PosUpperRight = 2, PosSidesRight = 3, PosUpperMiddle, PosBottomLeft = 5, PosSidesLeft, PosUpperLeft
      
      <param name="FormattedText"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.getContentDisposition">
       
        <p>Gets how content will be stored when result of operation is stored into HttpResponse object. Possible value: inline / attachment. Default: inline.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.setContentDisposition(int)">
       
        <p>Sets how content will be stored when result of operation is stored into HttpResponse object. Possible value: inline / attachment. Default: inline.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.getSaveOptions">
       
        <p>Gets save options when result is stored as HttpResponse. Default value: PdfSaveOptions.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.setSaveOptions(SaveOptions)">
       
        <p>Sets save options when result is stored as HttpResponse. Default value: PdfSaveOptions.</p> 
      
      <param name="SaveOptions"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.getAttachmentName">
       
        <p>Gets name of attachment when result of operation is stored into HttpResponse objects as attachment.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.setAttachmentName(String)">
       
        <p>Sets name of attachment when result of operation is stored into HttpResponse objects as attachment.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.close">
       
        <p>Closes opened files and saves changes. Warning. If input or output streams are specified they are not closed by Close() method.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileStamp stamp = new PdfFileStamp("input.pdf", "output.pdf"); //do some work... stamp.close();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.getResponse">
       
        <p>Gets Response object where result of operation will be stored.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.setResponse(HttpServletResponse)">
       
        <p>Sets Response object where result of operation will be stored.</p> 
      
      <param name="HttpServletResponse"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.#ctor">
       
        <p>Constructor of the PdfFileStamp. Input file and output file may be specified via corresponding properties.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileStamp fileStamp = new PdfFileStamp(); fileStamp.setInputFile ( "input.pdf"); fileStamp.setOutputFile ( "output.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.#ctor(IDocument)">
       
        <p>Initializes new {@code PdfFileStamp} object on base of the {@code document}.</p> @param document Pdf document.
      
      <param name="IDocument"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.#ctor(IDocument,OutputStream)">
       
        <p>Initializes new {@code PdfFileStamp} object on base of the {@code document}.</p> @param document Pdf document. @param outputStream Output stream.
      
      <param name="IDocument"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.#ctor(IDocument,String)">
       
        <p>Initializes new {@code PdfFileStamp} object on base of the {@code document}.</p> @param document Pdf document. @param outputFile Output file name and path.
      
      <param name="IDocument"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.#ctor(InputStream,OutputStream)">
       
        <p>Constructor for PdfFileStamp.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">[SampleCode] InputStream input = new FileInputStream("input.pdf"); OutputStream output = new FileInputStream("output.pdf"); PdfFileStamp stamp = new PdfFileStamp(input, output);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param inputStream Input stream. @param outputStream Output stream.
      
      <param name="InputStream"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.#ctor(InputStream,OutputStream,boolean)">
       
        <p>Constructor of PdfFileStamp.</p> @param inputStream Input stream. @param outputStream Output stream. @param keepSecurity Keep security if true.
      
      <param name="InputStream"/>
      <param name="OutputStream"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.#ctor(String,String)">
       
        <p>Constructor for PdfFileStamp.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileStamp stamp = new PdfFileStamp("input.pdf", "output.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param inputFile Input file name and path. @param outputFile Output file name and path.
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.#ctor(String,String,boolean)">
       
        <p>Constructor for PdfFileStamp.</p> @param inputFile Input file name and path. @param outputFile Output file name and path. @param keepSecurity Keep security if true.
      
      <param name="String"/>
      <param name="String"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.#ctor(InputStream,HttpServletResponse)">
       
        <p>Creates PdfFileStampWeb which will save result into HttpResponse object.</p> @param inputStream Stream with input document. @param response HttpResponse object where result will be saved.
      
      <param name="InputStream"/>
      <param name="HttpServletResponse"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfFileStampWeb.#ctor(String,HttpServletResponse)">
       
        <p>Creates PdfFileStampWeb which will save result into HttpResponse object.</p> @param inputFile Source file name. @param response HttpResponse object where result will be saved.
      
      <param name="String"/>
      <param name="HttpServletResponse"/>
    </member>
    <member name="F:com.aspose.pdf.facades.PdfFileStampWeb.POS_BOTTOM_MIDDLE">
       
        <p>Bottom middle position.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfFileStampWeb.POS_BOTTOM_RIGHT">
       
        <p>Bottom right position.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfFileStampWeb.POS_UPPER_RIGHT">
       
        <p>Right upper position.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfFileStampWeb.POS_SIDES_RIGHT">
       
        <p>Right position.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfFileStampWeb.POS_UPPER_MIDDLE">
       
        <p>Upper middle position.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfFileStampWeb.POS_BOTTOM_LEFT">
       
        <p>Bottom left position.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfFileStampWeb.POS_SIDES_LEFT">
       
        <p>Left position.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfFileStampWeb.POS_UPPER_LEFT">
       
        <p>Upper let position.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.PdfJavaScriptStripper">
       
        <p>Class for removing all Java Script code.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfJavaScriptStripper.strip(String,String)">
       
        <p>Remove Java Script from document.</p> @return @param inputFile File containig the document. @param outputFile File where document will be stored.
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfJavaScriptStripper.strip(InputStream,OutputStream)">
       
        <p>Remove Java Script from the document.</p> @return @param inStream Stream containing document. @param outStream Stream where the document will be stored.
      
      <param name="InputStream"/>
      <param name="OutputStream"/>
    </member>
    <member name="T:com.aspose.pdf.facades.PdfPageEditor">
       
        <p>Represents a class to edit the PDF file's page, including rotating page, zooming page, moving position and changing page size.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.getTransitionDuration">
       
        <p>Gets duration of the transition effect.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.setTransitionDuration(int)">
       
        <p>Sets duration of the transition effect.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.getTransitionType">
       
        <p>Gets transition style to use when moving to this page from another during a presentation.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.setTransitionType(int)">
       
        <p>Sets transition style to use when moving to this page from another during a presentation.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.getDisplayDuration">
       
        <p>Gets display duration for pages.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.setDisplayDuration(int)">
       
        <p>Sets display duration for pages.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.getPages_Rename_Namesake">
       
        <p>Gets the page numbers to be edited. By default, each page would be edited.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.setPages(int[])">
       
        <p>Sets the page numbers to be edited. By default, each page would be edited.</p> 
      
      <param name="int[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.getRotation">
       
        <p>Gets the rotation of the pages, the rotation must be 0, 90, 180 or 270. Default value is 0.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.setRotation(int)">
       
        <p>Sets the rotation of the pages, the rotation must be 0, 90, 180 or 270. Default value is 0.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.getPageRotations">
       
        <p>Gets the rotation of the pages, A hashtable contains the page number and rotation degree, the key represents the page number, the value of key represents the rotation in degrees.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.setPageRotations(java.util.Map)">
       
        <p>Sets the rotation of the pages, A hashtable contains the page number and rotation degree, the key represents the page number, the value of key represents the rotation in degrees.</p> 
      
      <param name="java.util.Map"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.getZoom">&lt;p&gt; Get zoom coefficient. Value 1.0 corresponds to 100%. Default value is 1.0.</member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.setZoom(float)">
       
        <p>Sets zoom coefficient. Value 1.0 corresponds to 100%. Default value is 1.0.</p>
        <p>
          <hr>
            <blockquote>
              <pre>The following example demonstrates how to change zoom of the document pages. 
                <pre lang="Java">PdfPageEditor editor = new PdfPageEditor(); editor.bindPdf("sample.pdf"); editor.setZoom ( 0.5f);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.getPageSize">
       
        <p>Gets the output file's page size.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.setPageSize(PageSize)">
       
        <p>Sets the output file's page size.</p> 
      
      <param name="PageSize"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.getAlignment">
       
        <p>Gets or sets the horizontal alignment of the original PDF content on the result page, default is AlignmentType.Left.
          <br/> Use getHorizontalAlignment instead
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.setAlignment(AlignmentType)">
      Sets or sets the horizontal alignment of the original PDF content on the result page, default is AlignmentType.Left.
        <br/> Use setHorizontalAlignment instead @param value
      
      <param name="AlignmentType"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.getHorizontalAlignment">
       
        <p>Gets the horizontal alignment of the original PDF content on the result page, default is AlignmentType.Left.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.setHorizontalAlignment(int)">
       
        <p>Sets the horizontal alignment of the original PDF content on the result page, default is AlignmentType.Left.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.getVerticalAlignment">
       
        <p>Gets the vertical alignment of the original PDF content on the result page, default is VerticalAlignmentType.Bottom.
          <br/> Use getVerticalAlignmentType instead
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.setVerticalAlignment(VerticalAlignmentType)">
       
        <p>Sets the vertical alignment of the original PDF content on the result page, default is VerticalAlignmentType.Bottom.
          <br/> Use setVerticalAlignmentType instead
        </p> 
      
      <param name="VerticalAlignmentType"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.getVerticalAlignmentType">
       
        <p>Gets or Sets the vertical alignment of the original PDF content on the result page, default is VerticalAlignmentType.Bottom.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.setVerticalAlignmentType(int)">
       
        <p>Sets the vertical alignment of the original PDF content on the result page, default is VerticalAlignmentType.Bottom.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.movePosition(float,float)">
       
        <p>Moves the origin from (0, 0) to the point that appointted. The origin is left-bottom and the unit is point(1 inch = 72 points).</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfPageEditor editor = new PdfPageEditor(); editor.bindPdf("input.pdf"); editor.movePosition(-100, 60); editor.save("moved.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param moveX X-coordinate. @param moveY Y-coordinate.
      
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.getPages">
       
        <p>Returns total number of pages.</p>
        <p>
          <hr>
            <blockquote>
              <pre>The following example demonstrates using of GetPages() method: 
                <pre lang="Java">PdfPageEditor editor = new PdfPageEditor(); editor.bindPdf("sample.pdf"); System.out.println("Document has: " + editor.GetPages());</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.getPageSize(int)">
       
        <p>Returns the page size of the specified page.</p>
        <p>
          <hr>
            <blockquote>
              <pre>The following example demonstrates using of GetPageSize method: 
                <pre lang="Java">PdfPageEditor editor = new PdfPageEditor(); editor.bindPdf("sample.pdf"); PageSize size = editor.getPageSize(1); System.out.println("Size of 1st page : " + size.getWidth() + " x " + size.getHeight());</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return Result is instance of PageSize. Use Width and Height properties of the returned object to get page width and height. @param page Page index. Document pages are numbered from 1.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.getPageRotation(int)">
       
        <p>Returns the rotation of specified page.</p>
        <p>
          <hr>
            <blockquote>
              <pre>The following example demonstrates how to get page rotation: 
                <pre lang="Java">PdfPageEditor editor = new PdfPageEditor(); editor.bindPdf("sample.pdf"); int rotation = editor.getPageSize(1); System.out.println("Rotation of 1st page : " + rotation + " degrees");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return Page rotation in degrees. @param page Page index. Document pages are numbered from 1.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.getPageBoxSize(int,String)">
       
        <p>Returns size of specified box in document.</p>
        <p>
          <hr>
            <blockquote>
              <pre>The following example demonstrates how to get media box of the 1st page: 
                <pre lang="Java">PdfPageEditor editor = new PdfPageEditor(); editor.bindPdf("sample.pdf"); Rectangle rect = editor.getBoxSize(1, "media");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return Rectangle which contains requested box. @param page Page index. Document pages are numbered from 1. @param pageBoxName Box type name. Valid values are: "art", "bleed", "crop", "media", "trim".
      
      <param name="int"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.save(String)">
       
        <p>Saves changed document into file.</p>
        <p>
          <hr>
            <blockquote>
              <pre>The following sample demonstrates how to save changed PDF document 
                <pre lang="JAva">PdfPageEditor editor = new PdfPageEditor(); editor.bindPdf("sample.pdf"); editor.setZoom ( 0.5f); editor.save("newdocument.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param outputFile Path to file where document will be saved.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.save(OutputStream)">
       
        <p>Saves changed document into stream.</p>
        <p>
          <hr>
            <blockquote>
              <pre>The following sample demonstrates how to save changed PDF document into stream. 
                <pre lang="JAva">PdfPageEditor editor = new PdfPageEditor(); editor.bindPdf("sample.pdf"); editor.setZoom ( 0.5f); editor.save("newdocument.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param outputStream Stream where changed PDF document will be saved.
      
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.applyChanges">
       
        <p>Binds a Pdf document for editing.</p> @param pdf Pdf document which came from Aspose.Pdf.Generator.
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.#ctor">
       
        <p></p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfPageEditor.#ctor(Document)">
       
        <p></p> 
      
      <param name="Document"/>
    </member>
    <member name="F:com.aspose.pdf.facades.PdfPageEditor.SPLITVOUT">
       
        <p>Out Vertical Split</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfPageEditor.SPLITHOUT">
       
        <p>Out Horizontal Split</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfPageEditor.SPLITVIN">
       
        <p>In Vertical Split</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfPageEditor.SPLITHIN">
       
        <p>IN Horizontal Split</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfPageEditor.BLINDV">
       
        <p>Vertical Blinds</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfPageEditor.BLINDH">
       
        <p>Vertical Blinds</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfPageEditor.INBOX">
       
        <p>Inward Box</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfPageEditor.OUTBOX">
       
        <p>Outward Box</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfPageEditor.LRWIPE">
       
        <p>Left-Right Wipe</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfPageEditor.RLWIPE">
       
        <p>Right-Left Wipe</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfPageEditor.BTWIPE">
       
        <p>Bottom-Top Wipe</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfPageEditor.TBWIPE">
       
        <p>Top-Bottom Wipe</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfPageEditor.DISSOLVE">
       
        <p>Dissolve</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfPageEditor.LRGLITTER">
       
        <p>Left-Right Glitter</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfPageEditor.TBGLITTER">
       
        <p>Top-Bottom Glitter</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PdfPageEditor.DGLITTER">
       
        <p>Diagonal Glitter</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.PdfProducer">
       
        <p>Represents a class to produce PDF from other formats.</p>
        <p>
          <hr>
            <blockquote>
              <pre>This sample shows how to produce Pdf file from CGM file. 
                <pre>String inputFile = "myImage.cgm"; String outputFile = "myPdf.pdf"; try { PdfProducer.produce(inputFile, ImportFormat.Cgm, outputFile); // Success produced pdf file. } catch (Exception e) { // Do something... }</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfProducer.produce(InputStream,int,OutputStream)">
      <param name="InputStream"/>
      <param name="int"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfProducer.produce(String,int,OutputStream)">
      <param name="String"/>
      <param name="int"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfProducer.produce(InputStream,int,String)">
       
        <p>Produce the PDF file using specified import format.</p>
        <p>
          <hr>
            <blockquote>
              <pre>This sample shows how to produce Pdf file from CGM stream. 
                <pre>String inputFile = "myImage.cgm"; String outputFile = "myPdf.pdf"; using (FileInputStream inputStream = File.OpenRead(inputFile)) using (FileOutputStream outputStream = File.Create(outputFile)) { PdfProducer.produce(inputStream, ImportFormat.Cgm, outputStream); }</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @exception InvalidFileFormatException The exception is thrown when a file is invalid. @exception ArgumentNullException Input stream is null @exception ArgumentException Output file name is an empty string @param inputStream Input stream. @param format Import format. @param outputFileName Output PDF file
      
      <param name="InputStream"/>
      <param name="int"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfProducer.produce(String,int,String)">
       
        <p>Produce the PDF file using specified import format.</p>
        <p>
          <hr>
            <blockquote>
              <pre>This sample shows how to produce Pdf file from CGM file. 
                <pre>String inputFile = "myImage.cgm"; String outputFile = "myPdf.pdf"; PdfProducer.produce(inputFile, ImportFormat.Cgm, outputFile);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @exception InvalidFileFormatException The exception is thrown when a file is invalid. @exception ArgumentException Input or output file name is an empty string @param inputFileName Input file name. @param format Import format. @param outputFileName Output PDF file
      
      <param name="String"/>
      <param name="int"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfProducer.produce(String,ImportOptions,OutputStream)">
      <param name="String"/>
      <param name="ImportOptions"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfProducer.produce(InputStream,ImportOptions,String)">
      <param name="InputStream"/>
      <param name="ImportOptions"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfProducer.produce(String,ImportOptions,String)">
       
        <p>Produce the PDF file using specified import option.</p>
        <p>
          <hr>
            <blockquote>
              <pre>This sample shows how to produce Pdf file from CGM file. 
                <pre>String inputFile = "myImage.cgm"; String outputFile = "myPdf.pdf"; ImportOptions importOptions = new CgmImportOptions(); PdfProducer.produce(inputStream, importOptions, outputStream);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @exception InvalidFileFormatException The exception is thrown when a file is invalid. @exception ArgumentException Input or output file name is an empty string @param inputFileName Input file name. @param options Import option. @param outputFileName Output PDF stream.
      
      <param name="String"/>
      <param name="ImportOptions"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfProducer.produce(InputStream,ImportOptions,OutputStream)">
       
        <p>Produce the PDF file using specified import option.</p>
        <p>
          <hr>
            <blockquote>
              <pre>This sample shows how to produce Pdf stream from CGM stream. 
                <pre>String inputFile = "myImage.cgm"; String outputFile = "myPdf.pdf"; ImportOptions importOptions = new CgmImportOptions(); using (FileInputStream inputStream = File.OpenRead(inputFile)) using (FileOutputStream outputStream = File.Create(outputFile)) { PdfProducer.produce(inputStream, importOptions, outputStream); }</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @exception InvalidFileFormatException The exception is thrown when a file is invalid. @exception ArgumentNullException Input or output stream is null. @param inputStream Input stream. @param options Import option. @param outputStream Output PDF stream.
      
      <param name="InputStream"/>
      <param name="ImportOptions"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfProducer.getProducer(ImportOptions)">
       
        <p>Get the producer for specified import option.</p> @return PDF producer. @param options Import option
      
      <param name="ImportOptions"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfProducer.getProducer(int)">
       
        <p>Get the producer for specified import format.</p> @return PDF producer. @param format Import option
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfProducer.getImportOptions(int)">
       
        <p>Get the {@code ImportOptions} for specified import format.</p> @return Import option. @param format Import format.
      
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.facades.PdfViewer">
       
        <p>Represents a class to view or print a pdf.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.getShowHiddenAreas">
       
        <p>Gets or sets flag that controls visibility of hidden areas on the page.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.setShowHiddenAreas(boolean)">
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.getPrintStatus">
       
        <p>Gets the result of printing job. If success than null; otherwise, exception object.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.getCopiesPrinted">
       
        <p>Gets copies printed</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.getPrintAsImage">
       
        <p>Gets a mode for PdfViewer to print as image.</p>
        <p>
          <hr>If true prints always as image (generates image that is printed) If false prints directly to device if all features are supported. In case document contains non-supported features the system may automatically decide to print as image. Default falue is false.</hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.setPrintAsImage(boolean)">
       
        <p>Sets a mode for PdfViewer to print as image.</p>
        <p>
          <hr>If true prints always as image (generates image that is printed) If false prints directly to device if all features are supported. In case document contains non-supported features the system may automatically decide to print as image. Default falue is false.</hr>
        </p> 
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.getPageCount">
       
        <p>Gets page count of the current Pdf file.</p> @return return page count.
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.getPassword">
       
        <p>Sets input document password.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.setPassword(String)">
       
        <p>Sets input document password.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.getPrintPageDialog">
       
        <p>Gets a bool value that indicates whether produce the page number dialog when printing.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.setPrintPageDialog(boolean)">
       
        <p>Sets a bool value that indicates whether produce the page number dialog when printing.</p> 
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.getPrinterJobName">
       
        <p>Gets name of document in printer queue when document is printed. Default value is file name.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.setPrinterJobName(String)">
       
        <p>Sets name of document in printer queue when document is printed. Default value is file name.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.getFormPresentationMode">
       
        <p>Gets or sets form presentation mode.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.setFormPresentationMode(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.getRenderingOptions">
       
        <p>Gets or sets rendering options.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.setRenderingOptions(RenderingOptions)">
      <param name="RenderingOptions"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.getVerticalAlignment">
       
        <p>Gets or sets a value that indicates vertical alignment</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.setVerticalAlignment(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.getHorizontalAlignment">
       
        <p>Gets or sets a value that indicates horizontal alignment</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.setHorizontalAlignment(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.getAutoResize">
       
        <p>Sets a bool value that indicates whether the file be printed with optimized size.</p> Value: If false print page without page scaling. If true print page with scaling to fit to printable area.
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.setAutoResize(boolean)">
       
        <p>Sets a bool value that indicates whether the file be printed with optimized size.</p> Value: If false print page without page scaling. If true print page with scaling to fit to printable area.
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.getAutoRotate">
       
        <p>Gets a bool value that indicates whether the file be printed with auto rotation</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.setAutoRotate(boolean)">
       
        <p>Sets a bool value that indicates whether the file be printed with auto rotation</p> 
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.getAutoRotateMode">
       
        <p>Gets an AutoRotateMode value that indicates direction of rotation</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.setAutoRotateMode(int)">
       
        <p>Sets an AutoRotateMode value that indicates direction of rotation</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.getResolution">
       
        <p>Gets or sets resolution during viewing and printing. The higher resolution, the slower speed. The default value is 150.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.setResolution(int)">
       
        <p>Sets resolution during viewing and printing. The higher resolution, the slower speed. The default value is 150.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.printLargePdf(String)">
       
        <p>Opens and prints a large Pdf file. If your Pdf file has hundreds of pages or more or its size is more than 3 MB, this method is recommended to get better performance.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre>PdfViewer viewer = new PdfViewer(); viewer.setAutoResize(true); // print the file with adjusted size viewer.setAutoRotate(true); // print the file with adjusted rotation viewer.setPrintPageDialog(false);// do not produce the page number dialog when // printing viewer.setPrintLargePdf("d:\test.pdf");</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @param filePath The path of Pdf file.
        <p> 
          <hr>This method has integrated the opening and the printing of the file and you need not calling the OpenPdfFile() explicitly.</hr> 
        </p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.printLargePdf(InputStream)">
       
        <p>Opens and prints a large Pdf stream. If your Pdf file has hundreds of pages or more or its size is more than 3 MB, this method is recommended to get better performance.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre> 
                <pre>PdfViewer viewer = new PdfViewer(); viewer.setAutoResize ( true); //print the file with adjusted size viewer.setAutoRotate ( true); //print the file with adjusted rotation viewer.printPageDialog=false;//do not produce the page number dialog when printing viewer.printLargePdf(new MemoryStream(File.ReadAllBytes(@"d:\test.pdf"))); viewer.closePdfFile();</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> @param inputStream The pdf stream to be opened and printed..
        <p> 
          <hr>This method has integrated the opening and the printing of the file and you need not calling the OpenPdfFile() explicitly.</hr> 
        </p> 
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.printLargePdf(String,PrinterSettings)">
       
        <p>Opens and prints a large Pdf file with specified printer settings. If your Pdf file has hundreds of pages or more or its size is more than 3 MB, this method is recommended to get better performance.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfViewer viewer = new PdfViewer(); viewer.setAutoResize ( true); //print the file with adjusted size viewer.setAutoRotate ( true); //print the file with adjusted rotation viewer.setPrintPageDialog ( false);//do not produce the page number dialog when printing PrinterSettings ps = new PrinterSettings(); PrintDocument prtdoc = new PrintDocument(); ps.setPrinterName ( prtdoc.getPrinterSettings().getPrinterName()); viewer.printLargePdf("d:\\test.pdf",ps); viewer.closePdfFile();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param filePath The path of Pdf file. @param printerSettings The printer settings.
        <p>
          <hr>This method has integrated the opening and the printing of the file and you need not calling the OpenPdfFile() explicitly.</hr>
        </p> 
      
      <param name="String"/>
      <param name="PrinterSettings"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.printLargePdf(InputStream,PrinterSettings)">
       
        <p>Opens and prints a large Pdf stream with specified printer settings. If your Pdf file has hundreds of pages or more or its size is more than 3 MB, this method is recommended to get better performance.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfViewer viewer = new PdfViewer(); viewer.setAutoResize ( true); //print the file with adjusted size viewer.setAutoRotate ( true); //print the file with adjusted rotation viewer.setPrintPageDialog ( false); //do not produce the page number dialog when printing PrinterSettings ps = new PrinterSettings(); PrintDocument prtdoc = new PrintDocument(); ps.setPrinterName ( prtdoc.getPrinterSettings().getPrinterName()); viewer.printLargePdf(new FileInputStream("d:\\middleware.pdf"),ps); viewer.closePdfFile();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param inputStream The pdf stream to be opened and printed.. @param printerSettings The printer settings.
        <p>
          <hr>This method has integrated the opening and the printing of the file and you need not calling the OpenPdfFile() explicitly.</hr>
        </p> 
      
      <param name="InputStream"/>
      <param name="PrinterSettings"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.printLargePdf(String,PageSettings,PrinterSettings)">
       
        <p>Opens and prints a large Pdf file with specified page settings and printer settings. If your Pdf file has hundreds of pages or more or its size is more than 3 MB, this method is recommended to get better performance.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfViewer viewer = new PdfViewer(); viewer.setAutoResize ( true); //print the file with adjusted size viewer.setAutoRotate ( true); //print the file with adjusted rotation viewer.setPrintPageDialog ( false); //do not produce the page number dialog when printing PrinterSettings ps = new PrinterSettings(); PrintDocument prtdoc = new PrintDocument(); ps.setPrinterName ( prtdoc.getPrinterSettings().getPrinterName()); PageSettings pgs = new PageSettings(); pgs.setPaperSize ( new PaperSize("A4", 827, 1169)); pgs.setMargins ( new Margins(0, 0, 0, 0)); viewer.printLargePdf("d:\\test.pdf",pgs,ps); viewer.closePdfFile();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param filePath The path of Pdf file. @param pageSettings The page settings. @param printerSettings The printer settings.
        <p>
          <hr>This method has integrated the opening and the printing of the file and you need not calling the OpenPdfFile() explicitly.</hr>
        </p> 
      
      <param name="String"/>
      <param name="PageSettings"/>
      <param name="PrinterSettings"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.printLargePdf(InputStream,PageSettings,PrinterSettings)">
       
        <p>Opens and prints a large Pdf stream with specified page settings and printer settings. If your Pdf file has hundreds of pages or more or its size is more than 3 MB, this method is recommended to get better performance.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfViewer viewer = new PdfViewer(); viewer.setAutoResize ( true); //print the file with adjusted size viewer.setAutoRotate ( true); //print the file with adjusted rotation viewer.setPrintPageDialog ( false);//do not produce the page number dialog when printing PrinterSettings ps = new PrinterSettings(); PrintDocument prtdoc = new PrintDocument(); ps.setPrinterName ( prtdoc.getPrinterSettings().getPrinterName()); PageSettings pgs = new PageSettings(); pgs.setPaperSize ( new PaperSize("A4", 827, 1169)); pgs.setMargins ( new Margins(0, 0, 0, 0)); viewer.printLargePdf(new FileInputStream("d:\\middleware.pdf"),pgs,ps); viewer.closePdfFile();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param inputStream The pdf stream to be opened and printed. @param pageSettings The page settings. @param printerSettings The printer settings.
        <p>
          <hr>This method has integrated the opening and the printing of the file and you need not calling the OpenPdfFile() explicitly.</hr>
        </p> 
      
      <param name="InputStream"/>
      <param name="PageSettings"/>
      <param name="PrinterSettings"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.decodeAllPages">
       
        <p>Get pages of current pdf file.</p> @return return the array of Pdf page images.
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.decodePage(int)">
       
        <p>Decodes a page of one Pdf file.</p> @return return the Pdf page image. @param pageNumber The page number of one Pdf file which must be between 1 and PageCount.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.printDocumentWithSettings(PageSettings,PrinterSettings)">&lt;p&gt; Prints the Pdf document with settings. If the document size is not complatible to page size, pdf.kit will extend it to fit page size. &lt;/p&gt;&lt;p&gt;&lt;hr&gt;&lt;blockquote&gt;&lt;pre&gt; &lt;pre lang="Java"); PdfViewer viewer = new PdfViewer(); viewer.openPdfFile("d:\\test.pdf"); viewer.setAutoResize ( true); //print the file with adjusted size viewer.setAutoRotate ( true); //print the file with adjusted rotation viewer.setPrintPageDialog ( false);//do not produce the page number dialog when printing PrinterSettings ps = new PrinterSettings(); PrintDocument prtdoc = new PrintDocument(); ps.setPrinterName ( prtdoc.getPrinterSettings.getPrinterName()); PageSettings pgs = new PageSettings(); pgs.setPaperSize ( new PaperSize("A4", 827, 1169)); pgs.setMargins ( new Margins(0, 0, 0, 0)); viewer.printDocumentWithSettings(pgs, ps); viewer.closePdfFile(); &lt;/pre&gt; &lt;/pre&gt;&lt;/blockquote&gt;&lt;/hr&gt;&lt;/p&gt; @param pageSettings The page setting of the printing document. @param printerSettings The printer setting of the printing document. &lt;p&gt;&lt;hr&gt; printerSettings object is used to print the document. pageSettings.PrinterSettings object is ignored. &lt;/hr&gt;&lt;/p&gt; 
      <param name="PageSettings"/>
      <param name="PrinterSettings"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.printDocumentWithSettings(PrinterSettings)">
       
        <p>Prints the Pdf document with printer settings. The output page size will fit the the document first page size.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfViewer viewer = new PdfViewer(); viewer.openPdfFile("d:\\test.pdf"); viewer.setAutoResize ( true); //print the file with adjusted size viewer.setAutoRotate ( true); //print the file with adjusted rotation viewer.setPrintPageDialog ( false); //do not produce the page number dialog when printing PrinterSettings ps = new PrinterSettings(); PrintDocument prtdoc = new PrintDocument(); ps.setPrinterName ( prtdoc.getPrinterSettings().PrinterName()); viewer.printDocumentWithSettings(ps); viewer.closePdfFile();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param printerSettings The printer setting of the printing document.
      
      <param name="PrinterSettings"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.printDocument">
       
        <p>Prints the Pdf document using default printer.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre lang="Java">PdfViewer viewer = new PdfViewer(); viewer.openPdfFile("d:\\test.pdf"); viewer.setAutoResize ( true); //print the file with adjusted size viewer.setAutoRotate ( true); //print the file with adjusted rotation viewer.setPrintPageDialog ( false); //do not produce the page number dialog when printing viewer.printDocument(ps); viewer.closePdfFile();</pre>
            </blockquote> 
          </hr> 
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.openPdfFile(String)">
       
        <p>Opens a Pdf file, but does not actually decode the pages of the Pdf file.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfViewer viewer = new PdfViewer(); viewer.openPdfFile("d:\\test.pdf"); viewer.closePdfFile();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param filePath The path of Pdf file.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.openPdfFile(InputStream)">
       
        <p>Opens a Pdf file stream. But does not actually decode the pages of the Pdf file.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfViewer viewer = new PdfViewer(); viewer.openPdfFile(new FileInputStream("d:\\test.pdf"))); viewer.closePdfFile();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param inputStream The pdf stream to be opened.
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.closePdfFile">
       
        <p>Closes the current Pdf file.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.decodePageToImage(int,ImageFormat)">
       
        <p>Decodes page to Image</p> @return @param pageNumber @param imageFormat
      
      <param name="int"/>
      <param name="ImageFormat"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.getScaleFactor">
       
        <p>Gets and sets a floating point value that indicates scale factor. The default value is 1.0.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.setScaleFactor(float)">
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.bindPdf(String)">
      / * 
        <p>/ * checks if the resources contain complex blending modes that can be / * printed via image only / *</p> /
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.bindPdf(InputStream)">
       
        <p>Initializes the facade.</p> @param srcStream The stream of PDF file.
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.bindPdf(IDocument)">
       
        <p>Initializes the facade.</p> @param srcDoc The Aspose.Pdf.Document object.
      
      <param name="IDocument"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.save(String)">
       
        <p>Saves the result PDF document to file.</p> @param destFile The path of output PDF document.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.save(InputStream)">
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.close">
      Closes the current Pdf file.
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.dispose">
       
        <p>Disposes the facade resources.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.#ctor">
      / * 
        <p>/ * Adds/removes subscription on the last page printing event. / *</p> /
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfViewer.#ctor(IDocument)">
       
        <p></p> @param document
      
      <param name="IDocument"/>
    </member>
    <member name="T:com.aspose.pdf.facades.PdfXmpMetadata">
       
        <p>Class for manipulation with XMP metadata.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfXmpMetadata.registerNamespaceURI(String,String)">
       
        <p>Registers the namespace URI.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfXmpMetadata xmp = new PdfXmpMetadata("input.pdf"); xmp.registerNamespaceURI("xmp", "http://ns.adobe.com/xap/1.0/");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param prefix The prefix. @param namespaceURI The namespace URI.
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfXmpMetadata.getNamespaceURIByPrefix(String)">
       
        <p>Gets namespace URI by prefix.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfXmpMetadata xmp = new PdfXmpMetadata("input.pdf"); System.out.println(xmp.getNamespaceURIByPrefix("xmp"));</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return Namespace URI. @param prefix The prefix.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfXmpMetadata.getPrefixByNamespaceURI(String)">
       
        <p>Gets the prefix by namespace URI.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfXmpMetadata xmp = new PdfXmpMetadata("input.pdf"); System.out.println(xmp.getPrefixByNamespaceURI("http://ns.adobe.com/xap/1.0/"));</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return Prefix. @param namespaceURI Namespace URI.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfXmpMetadata.add(int,Object)">
       
        <p>Adds value to XMP metadata.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfXmpMetadata xmp = new PdfXmpMetadata(); xmp.bindPdf("input.pdf"); xmp.add(DefaultMetadataProperties.Nickname, "name1"); xmp.save(TestSettings.getOutputFile("XMP_AddedValue.pdf"));</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param key Key name. @param value Value which will be added.
      
      <param name="int"/>
      <param name="Object"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfXmpMetadata.add(XmpPdfAExtensionObject,String,String,String)">
       
        <p>Adds extension field into metadata.</p> @param xmpPdfAExtensionObject The pdf extension object to add. @param namespacePrefix The prefix of schema. @param namespaceUri The namespace uri of schema. @param schemaDescription The optional description of schema.
      
      <param name="XmpPdfAExtensionObject"/>
      <param name="String"/>
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfXmpMetadata.clear">
       
        <p>Removes all elements from the object.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="JAva">PdfXmpMetadata xmp = new PdfXmpMetadata(); xmp.bindPdf("input.pdf"); xmp.clear();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfXmpMetadata.remove(int)">
       
        <p>Removes element with specified key.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfXmpMetadata xmp = new PdfXmpMetadata(); xmp.bindPdf("input.pdf"); xmp.remove(DefaultMetadataProperties.Nickname);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param key Key of the element which will be deleted.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfXmpMetadata.remove(XmpPdfAExtensionObject)">
       
        <p>Removes pdf extension field.</p> @param key
      
      <param name="XmpPdfAExtensionObject"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfXmpMetadata.addItem(Object,Object)">
       
        <p>Adds new element to the dictionary object.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfXmpMetadata xmp = new PdfXmpMetadata(); xmp.bindPdf("input.pdf"); xmp.add("xmp:Nickname", "Nickname1");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param key Key of new element. @param value Value of the element.
      
      <param name="Object"/>
      <param name="Object"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfXmpMetadata.contains(Object)">
       
        <p>Checks if dictionary contains the specified key.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfXmpMetadata xmp = new PdfXmpMetadata(); xmp.bindPdf("input.pdf"); xmp.add("xmp:Nickname", "Nickname1"); if (!xmp.contains("xmp:Nickname")) System.out.println("Key does not exists");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return @param key Key which will be checked.
      
      <param name="Object"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfXmpMetadata.iterator">
       
        <p>Gets enumerator object of the dictionary.</p> @return
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfXmpMetadata.getKeys">
       
        <p>Gets keys from the dictionary.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfXmpMetadata.removeItem(Object)">
       
        <p>Removes key from the dictionary.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfXmpMetadata xmp = new PdfXmpMetadata(); xmp.bindPdf("input.pdf"); xmp.remove("xmp:Nickname");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param key Key which will be removed.
      
      <param name="Object"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfXmpMetadata.getExtensionFields">
       
        <p>Gets the dictionary of extension fields.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfXmpMetadata.getValues">
       
        <p>Gets the collection of values in dictionary.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfXmpMetadata.get_Item(Object)">
       
        <p>Gets value by key.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfXmpMetadata pxm = new PdfXmpMetadata(); pxm.bindPdf("PdfFile.pdf"); System.out.println(pxm.get_Item("xmp:Nickname"));</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return Object by key @param key
      
      <param name="Object"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfXmpMetadata.set_Item(Object,Object)">
       
        <p>Sets value by key.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfXmpMetadata pxm = new PdfXmpMetadata(); pxm.bindPdf("PdfFile.pdf"); System.out.println(pxm.get_Item("xmp:Nickname"));</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return Object by key @param key
      
      <param name="Object"/>
      <param name="Object"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfXmpMetadata.isFixedSize">
       
        <p>Returns true is collection has fixed size.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfXmpMetadata.isReadOnly">
       
        <p>Returns true if collection is read-only.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfXmpMetadata.copyTo(Array,int)">
       
        <p>Copy metadata into array.</p> @param array @param index
      
      <param name="Array"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfXmpMetadata.size">
       
        <p>Gets count if items in the collection.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfXmpMetadata pxm = new PdfXmpMetadata(); pxm.bindPdf("PdfFile.pdf"); System.out.println("Count = " + pxm.size());</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfXmpMetadata.isSynchronized">
       
        <p>Returns true if collection is synchronized.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfXmpMetadata.getSyncRoot">
       
        <p>Gets synchroniztion object of the collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfXmpMetadata.iteratorIt">
       
        <p>Gets enumerator object of the collection.</p> @return
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfXmpMetadata.getByDefaultMetadataProperties(int)">
       
        <p>Assigns input PDF document.</p> @param pdf Pdf document which came from Aspose.Pdf.Generator.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfXmpMetadata.setByDefaultMetadataProperties(int,Object)">
      <param name="int"/>
      <param name="Object"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfXmpMetadata.getXmpMetadata">
       
        <p>Get the XmpMetadata of the input pdf in a xml format.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfXmpMetadata pxm = new PdfXmpMetadata(); pxm.bindPdf("PdfFile.pdf"); byte[] data = pxm.getXmpMetadata();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return The bytes of the XmpMetadata.
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfXmpMetadata.getXmpMetadata(String)">
       
        <p>Get a part of the XmpMetadata of the input pdf according to a meta name.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfXmpMetadata pxm = new PdfXmpMetadata(); pxm.bindPdf("PdfFile.pdf"); byte[] data = pxm.getXmpMetadata("dc:creator");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return Bytes of metadata. @param name Metadata name.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.PdfXmpMetadata.#ctor">
       
        <p>Constructor for PdfXmpMetadata.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfXmlMetadata xmp = new PdfXmpMetadata(); xmp.bindPdf("input.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.PdfXmpMetadata.#ctor(IDocument)">
       
        <p>Initializes new {@code PdfXmpMetadata} object on base of the {@code document}.</p> @param document Pdf document.
      
      <param name="IDocument"/>
    </member>
    <member name="T:com.aspose.pdf.facades.PositioningMode">
       
        <p>Defines positioning mode. Possible values include Legacy (backward compatibility) and Current (updated text position calculation method)</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PositioningMode.Legacy">
       
        <p>Legacy text positioning</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PositioningMode.ModernLineSpacing">
       
        <p>Updated line spacing, vertical position calculation is done by the old rules (i.e. text is positioned relative to bottom-left corner of the specified rectangle)</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PositioningMode.Current">
       
        <p>Updated line spacing and vertical position calculation is done based on left-top corner rather than left-bottom.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.PropertyFlag">
       
        <p>Enumeration of possible field flags.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PropertyFlag.ReadOnly">
       
        <p>Field is read-only.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PropertyFlag.Required">
       
        <p>Field is required.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PropertyFlag.NoExport">
       
        <p>Field is not exportable.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.PropertyFlag.InvalidFlag">
       
        <p>Invalid field flag.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.ReplaceTextStrategy">
       
        <p>This class contains parameters which define PdfContentEditor behavior when ReplaceText operation is performed.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.ReplaceTextStrategy.isRegularExpressionUsed">
       
        <p>If false, string to find is a simple text. If true, string to find is regular expression.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.ReplaceTextStrategy.isRegularExpressionUsed(boolean)">
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.ReplaceTextStrategy.getNoCharacterBehavior">
       
        <p>Action which is performed when no approppriate font found for changed text (Throw exception / Substitute other font / Replace anyway).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.ReplaceTextStrategy.setNoCharacterBehavior(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.ReplaceTextStrategy.getReplaceScope">
       
        <p>Scope of the replacement operation (replace first occurence or replace all occurences).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.ReplaceTextStrategy.setReplaceScope(int)">
       
        <p>Scope of the replacement operation (replace first occurence or replace all occurences).</p>  
        <pre>Example: ReplaceTextStrategy replaceTxt = new ReplaceTextStrategy(); replaceTxt.setReplaceScope(ReplaceTextStrategy.Scope.REPLACE_ALL);</pre> @see Scope
      
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.facades.ReplaceTextStrategy.Scope">
       
        <p>Scope where replace text operation is applied REPLACE_FIRST by default</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.ReplaceTextStrategy.Scope.REPLACE_FIRST">
       
        <p>Replace only first occurence of the text on each of affected pages</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.ReplaceTextStrategy.Scope.REPLACE_ALL">
       
        <p>Replace all text occurences on all affected pages</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.ReplaceTextStrategy.NoCharacterAction">
       
        <p>Action to perform if font does not contain required character</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.ReplaceTextStrategy.NoCharacterAction.ThrowException">
       
        <p>Throw exception</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.ReplaceTextStrategy.NoCharacterAction.UseStandardFont">
       
        <p>Repalce font to standard font which contains required character</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.ReplaceTextStrategy.NoCharacterAction.ReplaceAnyway">
       
        <p>Replace text anyway without font substitution</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.SaveableFacade">&lt;p&gt; Base class for all saveable facades.</member>
    <member name="M:com.aspose.pdf.facades.SaveableFacade.save(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.SaveableFacade.save(java.io.OutputStream)">
      <param name="java.io.OutputStream"/>
    </member>
    <member name="T:com.aspose.pdf.facades.Stamp">
       
        <p>Class represeting stamp.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.Stamp.getStampId">
       
        <p>Gets or sets identifier of stamp.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.Stamp.setStampId(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Stamp.getOpacity">
       
        <p>Gets opacity of the stamp.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.Stamp.setOpacity(float)">
       
        <p>Sets opacity of the stamp.</p> 
      
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Stamp.getPageNumber">
       
        <p>Gets page number.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.Stamp.setPageNumber(int)">
       
        <p>Sets page number.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Stamp.getPages">&lt;p&gt; Gets array with numbers of pages which will be affected by stamp.</member>
    <member name="M:com.aspose.pdf.facades.Stamp.setPages(int[])">
       
        <p>Sets array with numbers of pages which will be affected by stamp. If Pages = null all pages of the document are affected.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); Stamp stamp = new com.aspose.pdf.facades.Stamp(); stamp.bindLogo(new FormattedText(text)); //put stamp only on 1st, 4th and 6th page. stamp.setPages(new int[] { 1, 4, 6 }); fileStamp.addStamp(stamp); fileStamp.close();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
      <param name="int[]"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Stamp.getRotation">&lt;p&gt; Gets rotation of the stamp in degrees.</member>
    <member name="M:com.aspose.pdf.facades.Stamp.setRotation(float)">
       
        <p>Gets or sets rotation of the stamp in degrees.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); Stamp stamp = new Stamp(); stamp.bindLogo(new FormattedText("STAMP")); stamp.setRotation(90); fileStamp.addStamp(stamp); fileStamp.close();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Stamp.isBackground">
       
        <p>Gets background status. If true stamp will be placed as background of the spamped page. By default is set to false.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.Stamp.isBackground(boolean)">
       
        <p>Sets background status. If true stamp will be placed as background of the spamped page. By default is set to false.</p> 
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Stamp.getBlendingSpace">
       
        <p>Gets a BlendingColorSpace value that defines a color space that is used to perform transparency and blending operations on the page.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.Stamp.setBlendingSpace(int)">
       
        <p>Sets a BlendingColorSpace value that defines a color space that is used to perform transparency and blending operations on the page.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Stamp.bindPdf(String,int)">
       
        <p>Sets PDF file and number of page which will be used as stamp.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); Stamp stamp = new Stamp(); //First page will be used as stamp. stamp.bindPdf("stamp.pdf", 1); stamp.isBackground (true); fileStamp.addStamp(stamp); fileStamp.close();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param pdfFile Path to PDF file. @param pageNumber Number of page in PDF file
      
      <param name="String"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Stamp.bindPdf(InputStream,int)">
       
        <p>Sets PDF file and number of page which will be used as stamp.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); Stamp stamp = new Stamp(); //First page will be used as stamp. InputStream stream = new FileInputStream("stamp.pdf"); stamp.bindPdf(stream, 1); fileStamp.addStamp(stamp); fileStamp.close();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param pdfStream Stream which contains PDF document. @param pageNumber Page index of the document whihc will be used as stamp.
      
      <param name="InputStream"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Stamp.bindImage(String)">
       
        <p>Sets image as a stamp.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf"); Stamp stamp = new Stamp(); stamp.bindImage("image.jpg"); fileStamp.addStamp(stamp); fileStamp.close();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param imageFile Image file name and path.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Stamp.bindLogo(FormattedText)">
       
        <p>Sets text as stamp.</p> @param formattedText FormattedText object which specifies text and text properties.
      
      <param name="FormattedText"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Stamp.setOrigin(float,float)">
       
        <p>Sets position on page where stamp will be placed.</p> @param originX X coordinate of the stamp. @param originY Y coordinate of the stamp.
      
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Stamp.setImageSize(float,float)">
       
        <p>Sets size of image stamp. Image will be scaled according to the specified values.</p> @param width Image width. @param height Image height.
      
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Stamp.bindImage(InputStream)">
       
        <p>Sets image which will be used as stamp.</p> @param image Stream which contains image data.
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Stamp.bindPdf(aspose.pdf.Pdf,int)">
       
        <p>Sets PDF document and number of page which will be used as stamp.</p> @param pdf Pdf document which came from Aspose.Pdf.Generator.
      
      <param name="aspose.pdf.Pdf"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.facades.Stamp.close"/>
    <member name="M:com.aspose.pdf.facades.Stamp.#ctor">
       
        <p>Constructor for Stamp object.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.StampInfo">
       
        <p>Class representing stamp information.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.StampInfo.getStampId">
       
        <p>Gets identifier of the stamp.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.StampInfo.getIndexOnPage">
       
        <p>Gets stamp index on the page.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.StampInfo.getStampType">
       
        <p>Gets stamp type (image / form).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.StampInfo.getRectangle">
       
        <p>Gets rectangle where stamp is placed.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.StampInfo.getImage">
       
        <p>Gets image of stamp. May be null if stamp does not contain images (for example for text stamp).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.StampInfo.getForm">
       
        <p>Gets XForm of the stamp.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.StampInfo.getText">
       
        <p>Gets text in the stamp.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.StampInfo.getVisible">
       
        <p>Gets visibility of stamp. If false then stamp is hidden (with HideStampById). Hidden stamp may be restored by ShowStampById.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.StampType">
       
        <p>Describes stamp types.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.StampType.Form">
       
        <p>Stamp if Form.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.StampType.Image">
       
        <p>Stamp is image.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.SubmitFormFlag">
       
        <p>Enumeration of possible submit form flags.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.SubmitFormFlag.Fdf">
       
        <p>Data will be returned in FDF format.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.SubmitFormFlag.Html">
       
        <p>Data will be returned in HTML format.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.SubmitFormFlag.Xfdf">
       
        <p>Data will be returned in XFDF format.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.SubmitFormFlag.FdfWithComments">
       
        <p>Data will be returned in FDF format with comments.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.SubmitFormFlag.XfdfWithComments">
       
        <p>Data will be returned in XFDF format with comments.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.SubmitFormFlag.Pdf">
       
        <p>Whole PDF file will be submitted.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.TextProperties">
       
        <p>Represents text properties such as: text size, color, style etc.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.TextProperties.getColor">
       
        <p>Gets text color.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.TextProperties.setColor(java.awt.Color)">
       
        <p>Sets text color.</p> 
      
      <param name="java.awt.Color"/>
    </member>
    <member name="M:com.aspose.pdf.facades.TextProperties.isColorSpecified">
       
        <p>Gets a value that indicates whether the {@code Color} property is specified.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.TextProperties.getTextSize">
       
        <p>Gets text size.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.TextProperties.setTextSize(double)">
       
        <p>Sets text size.</p> 
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.facades.TextProperties.isTextSizeSpecified">
       
        <p>Gets a value that indicates whether the {@code TextSize} property is specified.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.TextProperties.#ctor(double)">
       
        <p>Creates {@code TextProperties} object for the specified text size</p> 
      
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.facades.VerticalAlignmentType">
       
        <p>Class representing possible vertical alignment values.
          <br/> Use VerticalAlignment instead
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.facades.VerticalAlignmentType.toString">
       
        <p>Returns string representation.</p> @return Name value.
      
    </member>
    <member name="M:com.aspose.pdf.facades.VerticalAlignmentType.#ctor(String)">
       
        <p>Initializes vertical alignment by its name.</p> @param name
      
      <param name="String"/>
    </member>
    <member name="F:com.aspose.pdf.facades.VerticalAlignmentType.Top">
       
        <p>Top alignment.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.VerticalAlignmentType.Center">
       
        <p>Center alignment type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.VerticalAlignmentType.Bottom">
       
        <p>Bottom alignment type.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.ViewerPreference">
       
        <p>Describes viewer prefereces (page mode, non full screen page mode, page layout).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.ViewerPreference.PAGE_MODE_USE_OC">
       
        <p>Optional content group panel visible.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.ViewerPreference.DISPLAY_DOC_TITLE">
       
        <p>A flag specifying whether the window�s title bar should display the document title</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.ViewerPreference.NON_FULL_SCREEN_PAGE_MODE_USE_OC">
       
        <p>Optional content group panel visible.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.ViewerPreference.PAGE_LAYOUT_SINGLE_PAGE">
       
        <p>Display one page at a time.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.ViewerPreference.PAGE_LAYOUT_ONE_COLUMN">
       
        <p>Display the pages in one column.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.ViewerPreference.PAGE_LAYOUT_TWO_COLUMN_LEFT">
       
        <p>Display the pages in two columns, with odd-numbered pages on the right</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.ViewerPreference.PAGE_LAYOUT_TWO_COLUMN_RIGHT">
       
        <p>Display the pages in two columns, with odd-numbered pages on the right.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.ViewerPreference.PAGE_MODE_USE_NONE">
       
        <p>Neither document outline nor thumbnail images visible</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.ViewerPreference.PAGE_MODE_USE_OUTLINES">
       
        <p>Document outline visible.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.ViewerPreference.PAGE_MODE_USE_THUMBS">
       
        <p>Thumbnail images visible.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.ViewerPreference.PAGE_MODE_FULL_SCREEN">
       
        <p>Full-screen mode, with no menu bar, window controls, or any other window visible.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.ViewerPreference.PAGE_MODE_USE_ATTACHMENT"/>
    <member name="F:com.aspose.pdf.facades.ViewerPreference.HIDE_TOOLBAR">
       
        <p>A flag specifying whether to hide the conforming reader�s tool bars when the document is active.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.ViewerPreference.HIDE_MENUBAR">
       
        <p>A flag specifying whether to hide the conforming reader�s menu bar when the document is active.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.ViewerPreference.HIDE_WINDOW_UI">
       
        <p>A flag specifying whether to hide user interface elements in the document�s window (such as scroll bars and navigation controls), leaving only the document�s contents displayed.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.ViewerPreference.FIT_WINDOW">
       
        <p>A flag specifying whether to resize the document�s window to fit the size of the first displayed page.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.ViewerPreference.CENTER_WINDOW">
       
        <p>A flag specifying whether to position the document�s window in the center of the screen.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.ViewerPreference.NON_FULL_SCREEN_PAGE_MODE_USE_NONE">
       
        <p>Neither document outline nor thumbnail images visible.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.ViewerPreference.NON_FULL_SCREEN_PAGE_MODE_USE_OUTLINES">
       
        <p>Document outline visible.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.ViewerPreference.NON_FULL_SCREEN_PAGE_MODE_USE_THUMBS">
       
        <p>Thumbnail images visible</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.ViewerPreference.DIRECTION_L_2_R">
       
        <p>Text reading order left to right.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.ViewerPreference.DIRECTION_R_2_L">
       
        <p>Text reading order right to left.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.facades.WordWrapMode">
       
        <p>Defines word wrapping strategies</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.WordWrapMode.Default">
       
        <p>Default algorithm (allows breaking words in the middle)</p> 
      
    </member>
    <member name="F:com.aspose.pdf.facades.WordWrapMode.ByWords">
       
        <p>Word wrapping only wraps complete words. If the complete word cannot be wrapped, attempts to wrap word in the middle</p> 
      
    </member>
    <member name="T:com.aspose.pdf.Field">
       
        <p>Base class for acro form fields.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Field.getPartialName">
       
        <p>Gets or sets partial name of the field.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Field.setPartialName(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Field.getAlternateName">
       
        <p>Gets alternate name of the field (An alternate field name that shall be used in place of the actual field name wherever the field shall be identified in the user interface). Alternate name is used as field tooltip in Adobe Acrobat.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Field.setAlternateName(String)">
       
        <p>Sets alternate name of the field (An alternate field name that shall be used in place of the actual field name wherever the field shall be identified in the user interface). Alternate name is used as field tooltip in Adobe Acrobat.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Field.getMappingName">
       
        <p>Gets mapping name of the field that shall be used when exporting interactive form field data from the document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Field.setMappingName(String)">
       
        <p>Sets mapping name of the field that shall be used when exporting interactive form field data from the document.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Field.recalculate"/>
    <member name="M:com.aspose.pdf.Field.getValue">
       
        <p>Gets value of the field.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Field.setValue(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Field.isSynchronized">
       
        <p>Returns true if dictionary is synchronized.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Field.size">
       
        <p>Gets number of subfields in this field. (For example number of items in radio button field).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Field.getSyncRoot">
       
        <p>Synchronization object.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Field.isGroup">
       
        <p>Gets s boolean value which indicates is this field non-terminal field i.e. group of fields.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Field.copyTo(Array,int)">
       
        <p>Copies subfields of this field into array starting from specified index.</p> @param array Array where field must be copied. @param index Starting index where fields will be copied.
      
      <param name="Array"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Field.iterator">
       
        <p>Returns enumerator of contained fields.</p> @return Enumerator.
      
    </member>
    <member name="M:com.aspose.pdf.Field.flatten">
       
        <p>Removes this field and place its value directly on the page.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Field.get_Item(String)">
       
        <p>Gets subfield contained in this field by name of the subfield.</p> @return Field instance. @param name Contained subfield name.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Field.get_Item(int)">
       
        <p>Gets subfield contained in this field by index.</p> @return Field instance. @param index Index of the reuqested subfield.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Field.setPosition(Point)">
       
        <p>Set position of the field.</p> @param point
      
      <param name="Point"/>
    </member>
    <member name="M:com.aspose.pdf.Field.updateAppearances"/>
    <member name="M:com.aspose.pdf.Field.setFieldImage(Stream)">
      <param name="Stream"/>
    </member>
    <member name="M:com.aspose.pdf.Field.getAnnotationIndex">
       
        <p>Gets index of this anotation on the page.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Field.setAnnotationIndex(int)">
       
        <p>Sets index of this anotation on the page.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Field.getPageIndex">
       
        <p>Gets index of page which contains this field.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Field.getRect">
       
        <p>Gets or sets the field rectangle.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Field.setRect(Rectangle)">
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.Field.isSharedField">
       
        <p>Property for Generator support. Used when field is added to header or footer. If true, this field will created once and it's appearance will be visible on all pages of the document. If false, separated field will be created for every document page.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Field.isSharedField(boolean)">
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Field.getFitIntoRectangle">
       
        <p>If true then font size will reduced to fit text to specified rectangle.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Field.setFitIntoRectangle(boolean)">
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Field.#ctor(IPdfObject,IDocument)">
      <param name="IPdfObject"/>
      <param name="IDocument"/>
    </member>
    <member name="F:com.aspose.pdf.Field._Password"/>
    <member name="F:com.aspose.pdf.Field._FileSelect"/>
    <member name="T:com.aspose.pdf.FigureElement">
       
        <p>Class representing logical structure figure.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FigureElement.getImage">
       
        <p>Gets the value of figure structure element.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.FileAttachmentAnnotation">
       
        <p>Class describes file attachment annotation.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FileAttachmentAnnotation.getFile">
       
        <p>The specification of the file associated with this annotation.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FileAttachmentAnnotation.setFile(FileSpecification)">
      <param name="FileSpecification"/>
    </member>
    <member name="M:com.aspose.pdf.FileAttachmentAnnotation.getIcon">
       
        <p>Gets or sets icon that shall be used in displaying annotation.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FileAttachmentAnnotation.setIcon(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.FileAttachmentAnnotation.accept(AnnotationSelector)">
       
        <p>Accepts visitor object to process annotation.</p> @param visitor Visitor object.
      
      <param name="AnnotationSelector"/>
    </member>
    <member name="M:com.aspose.pdf.FileAttachmentAnnotation.#ctor(Page,Rectangle,FileSpecification)">
       
        <p>Creates new FileAttachment annotation on the specified page.</p> @param page Document's page where annotation should be created. @param rect Required rectangle that sets annotation's border. @param fileSpec Describes the file that shoud be bound with the annotation.
      
      <param name="Page"/>
      <param name="Rectangle"/>
      <param name="FileSpecification"/>
    </member>
    <member name="T:com.aspose.pdf.FileIcon">
       
        <p>An icon to be used in displaying the annotation.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.FileIcon.PushPin">
       
        <p>PushPin icon (default value).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.FileIcon.Graph">
       
        <p>Graph icon.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.FileIcon.Paperclip">
       
        <p>Paperclip icon.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.FileIcon.Tag">
       
        <p>Tag icon.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.FileParams">
       
        <p>Defines an embedded file parameter dictionary that shall contain additional file-specific information.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FileParams.getEngineDict"/>
    <member name="M:com.aspose.pdf.FileParams.getSize">
       
        <p>The size of the uncompressed embedded file, in bytes.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FileParams.getCreationDate"/>
    <member name="M:com.aspose.pdf.FileParams.getModDate"/>
    <member name="M:com.aspose.pdf.FileParams.getCheckSum">
       
        <p>A 16-byte string that is the checksum of the bytes of the uncompressed embedded file. The checksum is calculated by applying the standard MD5 message-digest algorithm to the bytes of the embedded file stream.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.FileSpecification">
       
        <p>Class representing embedded file.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FileSpecification.getIncludeContents">
       
        <p>If true, contents of the file will be included in the file specification.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FileSpecification.setIncludeContents(boolean)">
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.FileSpecification.getEngineDict">
       
        <p>Pdf dictionary containing information about the file.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FileSpecification.getEngineObj"/>
    <member name="M:com.aspose.pdf.FileSpecification.getDescription">
       
        <p>Gets text associated with the file specification.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FileSpecification.setDescription(String)">
       
        <p>Sets text associated with the file specification.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.FileSpecification.getStreamContents"/>
    <member name="M:com.aspose.pdf.FileSpecification.getContentsInternal">
       
        <p>Gets or sets contents file.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FileSpecification.getContents">
       
        <p>Gets contents file.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FileSpecification.setContents(InputStream)">
       
        <p>Sets contents file.</p> 
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.FileSpecification.getParams">
       
        <p>Gets file paramteres.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FileSpecification.getMIMEType">
       
        <p>Gets subtype of the embedded file</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FileSpecification.getName">
       
        <p>Gets or sets file specification string.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FileSpecification.setName(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.FileSpecification.createFileSpecification(ITrailerable)">
       
        <p>Creates file specification</p> @return PDF object which describes file specification @param trailer Trailerable object.
      
      <param name="ITrailerable"/>
    </member>
    <member name="M:com.aspose.pdf.FileSpecification.getFileSystem">
       
        <p>Gets name of the file system.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FileSpecification.setFileSystem(String)">
       
        <p>Sets name of the file system.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.FileSpecification.#ctor(IPdfPrimitive)">
      <param name="IPdfPrimitive"/>
    </member>
    <member name="M:com.aspose.pdf.FileSpecification.#ctor(String)">
       
        <p>Constructor for FileSpecification</p> @param file File path
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.FileSpecification.#ctor(Stream,String)">
       
        <p>Constructor for file specification.</p> @param stream Stream containing data file. @param name File specification.
      
      <param name="Stream"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.FileSpecification.#ctor(InputStream,String)">
       
        <p>Constructor for file specification.</p> @param stream Stream containing data file. @param name File specification.
      
      <param name="InputStream"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.FileSpecification.#ctor(String,String)">
       
        <p>Constructor for FileSpecification.</p> @param file File path. @param description File description.
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.FileSpecification.#ctor(Stream,String,String)">
       
        <p>Constructor for FileSpecification.</p> @param stream Stream to be used in the document. @param name A file specification string. @param description File description.
      
      <param name="Stream"/>
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.FileSpecification.#ctor(InputStream,String,String)">
       
        <p>Constructor for FileSpecification.</p> @param stream Stream to be used in the document. @param name A file specification string. @param description File description.
      
      <param name="InputStream"/>
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.FileSpecification.#ctor(String,Annotation)">
       
        <p></p> @param fileName @param annot
      
      <param name="String"/>
      <param name="Annotation"/>
    </member>
    <member name="M:com.aspose.pdf.FileSpecification.#ctor">
       
        <p>Create new empty file specification.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.FitBExplicitDestination">
       
        <p>Represents explicit destination that displays the page with its contents magnified just enough to fit its bounding box entirely within the window both horizontally and vertically. If the required horizontal and vertical magnification factors are different, use the smaller of the two, centering the bounding box within the window in the other dimension.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FitBExplicitDestination.toString">
       
        <p>Converts the object state into string value. Example: "1 FitB".</p> @return String value representing object state.
      
    </member>
    <member name="M:com.aspose.pdf.FitBExplicitDestination.#ctor(Page)">
       
        <p>Creates the instance and initializes it by DOM page object.</p> @param page DOM page object.
      
      <param name="Page"/>
    </member>
    <member name="M:com.aspose.pdf.FitBExplicitDestination.#ctor(Document,int)">
       
        <p>Creates remote explicit destination.</p> @param document The parent document that contains this object. @param pageNumber The destination page number of remote document.
      
      <param name="Document"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.FitBExplicitDestination.#ctor(int)">
       
        <p>Creates remote explicit destination.</p> @param pageNumber The destination page number of remote document.
      
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.FitBHExplicitDestination">
       
        <p>Represents explicit destination that displays the page with the vertical coordinate top positioned at the top edge of the window and the contents of the page magnified just enough to fit the entire width of its bounding box within the window. A null value for top specifies that the current value of that parameter is to be retained unchanged.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FitBHExplicitDestination.getTop">
       
        <p>Gets the vertical coordinate top positioned at the top edge of the window.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FitBHExplicitDestination.toString">
       
        <p>Converts the object state into string value. Example: "1 FitBH 100".</p> @return String value representing object state.
      
    </member>
    <member name="M:com.aspose.pdf.FitBHExplicitDestination.#ctor(Page,double)">
       
        <p>Creates the instance and initializes it by DOM page object and top parameter.</p> @param page DOM page object. @param top The vertical coordinate top positioned at the top edge of the window.
      
      <param name="Page"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.FitBHExplicitDestination.#ctor(Document,int,double)">
       
        <p>Creates remote explicit destination.</p> @param document The parent document that contains this object. @param pageNumber The destination page number of remote document. @param top The vertical coordinate top positioned at the top edge of the window.
      
      <param name="Document"/>
      <param name="int"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.FitBHExplicitDestination.#ctor(int,double)">
       
        <p>Creates remote explicit destination.</p> @param pageNumber The destination page number of remote document. @param top The vertical coordinate top positioned at the top edge of the window.
      
      <param name="int"/>
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.FitBVExplicitDestination">
       
        <p>Represents explicit destination that displays the page with the horizontal coordinate left positioned at the left edge of the window and the contents of the page magnified just enough to fit the entire height of its bounding box within the window. A null value for left specifies that the current value of that parameter is to be retained unchanged.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FitBVExplicitDestination.getLeft">
       
        <p>Gets the horizontal coordinate left positioned at the left edge of the window.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FitBVExplicitDestination.toString">
       
        <p>Converts the object state into string value. Example: "1 FitBV 100".</p> @return String value representing object state.
      
    </member>
    <member name="M:com.aspose.pdf.FitBVExplicitDestination.#ctor(Page,double)">
       
        <p>Creates the instance and initializes it by DOM page object and left parameter.</p> @param page DOM page object. @param left The horizontal coordinate left positioned at the left edge of the window.
      
      <param name="Page"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.FitBVExplicitDestination.#ctor(Document,int,double)">
       
        <p>Creates remote explicit destination.</p> @param document The parent document that contains this object. @param pageNumber The destination page number of remote document. @param left The horizontal coordinate left positioned at the left edge of the window.
      
      <param name="Document"/>
      <param name="int"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.FitBVExplicitDestination.#ctor(int,double)">
       
        <p>Creates remote explicit destination.</p> @param pageNumber The destination page number of remote document. @param left The horizontal coordinate left positioned at the left edge of the window.
      
      <param name="int"/>
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.FitExplicitDestination">
       
        <p>Represents explicit destination that displays the page with its contents magnified just enough to fit the entire page within the window both horizontally and vertically. If the required horizontal and vertical magnification factors are different, use the smaller of the two, centering the page within the window in the other dimension.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FitExplicitDestination.toString">
       
        <p>Converts the object state into string value. Example: "1 Fit".</p> @return String value representing object state.
      
    </member>
    <member name="M:com.aspose.pdf.FitExplicitDestination.#ctor(Page)">
       
        <p>Creates local explicit destination.</p> @param page The destination page object.
      
      <param name="Page"/>
    </member>
    <member name="M:com.aspose.pdf.FitExplicitDestination.#ctor(Document,int)">
       
        <p>Creates remote explicit destination.</p> @param document The Aspose.Pdf.Document object. @param pageNumber The destination page number.
      
      <param name="Document"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.FitExplicitDestination.#ctor(int)">
       
        <p>Creates remote explicit destination.</p> @param pageNumber The destination page number of remote document.
      
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.FitHExplicitDestination">
       
        <p>Represents explicit destination that displays the page with the vertical coordinate top positioned at the top edge of the window and the contents of the page magnified just enough to fit the entire width of the page within the window. A null value for top specifies that the current value of that parameter is to be retained unchanged.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FitHExplicitDestination.getTop">
       
        <p>Gets the vertical coordinate top positioned at the top edge of the window.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FitHExplicitDestination.toString">
       
        <p>Converts the object state into string value. Example: "1 FitH 100".</p> @return String value representing object state.
      
    </member>
    <member name="M:com.aspose.pdf.FitHExplicitDestination.#ctor(Page,double)">
       
        <p>Creates the instance and initializes it by DOM page object and top parameter.</p> @param page DOM page object. @param top The vertical coordinate top positioned at the top edge of the window.
      
      <param name="Page"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.FitHExplicitDestination.#ctor(Document,int,double)">
       
        <p>Creates remote explicit destination.</p> @param document The parent document that contains this object. @param pageNumber The destination page number of remote document. @param top The vertical coordinate top positioned at the top edge of the window.
      
      <param name="Document"/>
      <param name="int"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.FitHExplicitDestination.#ctor(int,double)">
       
        <p>Creates remote explicit destination.</p> @param pageNumber The destination page number of remote document. @param top The vertical coordinate top positioned at the top edge of the window.
      
      <param name="int"/>
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.FitRExplicitDestination">
       
        <p>Represents explicit destination that displays the page with its contents magnified just enough to fit the rectangle specified by the coordinates left, bottom, right, and topentirely within the window both horizontally and vertically. If the required horizontal and vertical magnification factors are different, use the smaller of the two, centering the rectangle within the window in the other dimension. A null value for any of the parameters may result in unpredictable behavior.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FitRExplicitDestination.getLeft">
       
        <p>Gets left horizontal coordinate of visible rectangle.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FitRExplicitDestination.getBottom">
       
        <p>Gets bottom vertical coordinate of visible rectangle.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FitRExplicitDestination.getRight">
       
        <p>Gets right horizontal coordinate of visible rectangle.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FitRExplicitDestination.getTop">
       
        <p>Gets top vertical coordinate of visible rectangle.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FitRExplicitDestination.toString">
       
        <p>Converts the object state into string value. Example: "1 FitR 100 200 300 400".</p> @return String value representing object state.
      
    </member>
    <member name="M:com.aspose.pdf.FitRExplicitDestination.#ctor(Page,double,double,double,double)">
       
        <p>Creates the instance and initializes it by DOM page object and visible parameters.</p> @param page DOM page object. @param left Left horizontal coordinate of visible rectangle. @param bottom Bottom vertical coordinate of visible rectangle. @param right Right horizontal coordinate of visible rectangle. @param top Top vertical coordinate of visible rectangle.
      
      <param name="Page"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.FitRExplicitDestination.#ctor(Document,int,double,double,double,double)">
       
        <p>Creates remote explicit destination.</p> @param document The parent document that contains this object. @param pageNumber The destination page number of remote document. @param left Left horizontal coordinate of visible rectangle. @param bottom Bottom vertical coordinate of visible rectangle. @param right Right horizontal coordinate of visible rectangle. @param top Top vertical coordinate of visible rectangle.
      
      <param name="Document"/>
      <param name="int"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.FitRExplicitDestination.#ctor(int,double,double,double,double)">
       
        <p>Creates remote explicit destination.</p> @param pageNumber The destination page number of remote document. @param left Left horizontal coordinate of visible rectangle. @param bottom Bottom vertical coordinate of visible rectangle. @param right Right horizontal coordinate of visible rectangle. @param top Top vertical coordinate of visible rectangle.
      
      <param name="int"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.FitVExplicitDestination">
       
        <p>Represents explicit destination that displays the page with the horizontal coordinate left positioned at the left edge of the window and the contents of the page magnified just enough to fit the entire height of the page within the window. A null value for left specifies that the current value of that parameter is to be retained unchanged.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FitVExplicitDestination.getLeft">
       
        <p>Gets the horizontal coordinate left positioned at the left edge of the window.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FitVExplicitDestination.toString">
       
        <p>Converts the object state into string value. Example: "1 FitV 100".</p> @return String value representing object state.
      
    </member>
    <member name="M:com.aspose.pdf.FitVExplicitDestination.#ctor(Page,double)">
       
        <p>Creates the instance and initializes it by DOM page object and left parameter.</p> @param page DOM page object. @param left The horizontal coordinate left positioned at the left edge of the window.
      
      <param name="Page"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.FitVExplicitDestination.#ctor(Document,int,double)">
       
        <p>Creates remote explicit destination.</p> @param document The parent document that contains this object. @param pageNumber The destination page number of remote document. @param left The horizontal coordinate left positioned at the left edge of the window.
      
      <param name="Document"/>
      <param name="int"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.FitVExplicitDestination.#ctor(int,double)">
       
        <p>Creates remote explicit destination.</p> @param pageNumber The destination page number of remote document. @param left The horizontal coordinate left positioned at the left edge of the window.
      
      <param name="int"/>
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.FolderFontSource">
       
        <p>Represents the folder that contains font files.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FolderFontSource.getFolderPath">
       
        <p>Path to the folder that contains font files.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FolderFontSource.setFolderPath(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.FolderFontSource.equals(Object)">
      <param name="Object"/>
    </member>
    <member name="M:com.aspose.pdf.FolderFontSource.#ctor(String)">
       
        <p>Initializes a new instance of {@code FolderFontSource} class.</p> @param folderPath Path to the folder.
      
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.Font">
       
        <p>Represents font object.</p>
        <p>
          <hr>
            <blockquote>
              <pre>The example demonstrates how to search text on first page and change font of a first search occurrence. 
                <pre lang="Java">// Open document Document doc = new Document("D:\Tests\input.pdf"); // Create TextFragmentAbsorber object to find all "hello world" text occurrences TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world"); // Accept the absorber for first page doc.getPages().get_Item(1).accept(absorber); // Create font and mark it to be embedded Font font = FontRepository.findFont("Arial"); font.isEmbedded(true); // Change font of the first text occurrence absorber.getTextFragments().get_Item(1).getTextState().setFont( font); // Save document doc.save("D:\Tests\output.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @see TextFragmentAbsorber @see FontRepository @see IDocument
      
    </member>
    <member name="M:com.aspose.pdf.Font.getFontName">
       
        <p>Gets font name of the {@code Font} object.</p>
        <p>
          <hr>
            <blockquote>
              <pre>The example demonstrates how to search text on first page and view font name of a first text occurrence. 
                <pre lang="Java">// Open document Document doc = new Document(@"D:\Tests\input.pdf"); // Create TextFragmentAbsorber object to find all "hello world" text occurrences TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world"); // Accept the absorber for first page doc.getPages().get_Item(1).accept(absorber); // View font name of first text occurrence System.out.println(absorber.getTextFragments().get_Item(1).getTextState().getFont().getFontName());</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @see TextFragmentAbsorber @see IDocument
      
    </member>
    <member name="M:com.aspose.pdf.Font.isEmbedded">
       
        <p>Gets or sets a value that indicates whether the font is embedded.</p>
        <p>
          <hr>
            <blockquote>
              <pre>The following example demonstrates how to find a font, mark it as embedded, search text on the document's page and replace the text font. 
                <pre lang="Java">// Create font and mark it to be embedded com.aspose.pdf.Font font = com.aspose.pdf.FontRepository.findFont("Arial"); font.isEmbedded ( true); // open document com.aspose.pdf.Document doc = new com.aspose.pdf.Document("D:\\Tests\\input.pdf"); // create TextFragmentAbsorber object to find all "hello world" text occurrences com.aspose.pdf.TextFragmentAbsorber absorber = new com.aspose.pdf.TextFragmentAbsorber("hello world"); // accept the absorber for first page doc.getPages().get_Item(1).accept(absorber); // change font for the first text occurrence absorber.getTextFragments().get_Item(1).getTextState().setFont(font); // save document doc.save("D:\\Tests\\output.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @see TextFragmentAbsorber @see FontRepository @see IDocument
      
    </member>
    <member name="M:com.aspose.pdf.Font.isEmbedded(boolean)">
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Font.isSubset">
       
        <p>Gets or sets a value that indicates whether the font is a subset.</p>
        <p>
          <hr>
            <blockquote>
              <pre>The example demonstrates how to search text on first page and get the value that indicates whether the font is a subset. 
                <pre lang="Java">// Open document Document doc = new Document("D:\\Tests\\input.pdf"); // Create TextFragmentAbsorber object to find all "hello world" text occurrences TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world"); // Accept the absorber for first page doc.getPages().get_Item(1).accept(absorber); // View font's IsSubset value of first text occurrence if(absorber.TextFragments[1].TextState.Font.IsSubset) System.out.println("the font is a subset");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @see TextFragmentAbsorber @see IDocument
      
    </member>
    <member name="M:com.aspose.pdf.Font.isSubset(boolean)">
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Font.isAccessible">
       
        <p>Gets indicating whether the font is present (installed) in the system.</p>
        <p>
          <hr>
            <blockquote>
              <pre>The example demonstrates how to search text on first page and get the value that indicates whether the font is installed in the system. 
                <pre lang="Java">// Open document Document doc = new Document("D:\\Tests\\input.pdf"); // Create TextFragmentAbsorber object to find all "hello world" text occurrences TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world"); // Accept the absorber for first page doc.getPages().get_Item(1).accept(absorber); // View font's IsSubset value of first text occurrence if(absorber.getTextFragments().get_Item(1).getTextState().getFont().isAccessible()) System.out.println("the font is installed in the system");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p>
        <p>
          <hr>Some operations are not available with fonts that could not be found in the system.</hr>
        </p> @see TextFragmentAbsorber @see IDocument
      
    </member>
    <member name="M:com.aspose.pdf.Font.getIPdfFont">
       
        <p>Pdf font object.</p>
        <p>
          <hr>For internal usage only</hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.Font.getIFont">
       
        <p>System font object.</p>
        <p>
          <hr>For internal usage only</hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.Font.addFontPropertiesChanged(EventHandler)">
      <param name="EventHandler"/>
    </member>
    <member name="M:com.aspose.pdf.Font.removeFontPropertiesChanged(EventHandler)">
      <param name="EventHandler"/>
    </member>
    <member name="M:com.aspose.pdf.Font.#ctor(IFont)">
      <param name="IFont"/>
    </member>
    <member name="T:com.aspose.pdf.FontCollection">
       
        <p>Represents font collection.</p>
        <p>
          <hr>
            <blockquote>
              <pre>The example demonstrates how to make all font declared on page as embedded. 
                <pre lang="Java">// Open document Document doc = new Document("D:\\Tests\\input.pdf"); // ensure all fonts declared on page resources are embedded // note that if fonts are declared on form resources they are not accessible from page resources for(com.aspsoe.pdf.Font font : doc.getPages().get_Item(1).getResources().getFonts()) { if(!font.isEmbedded()) font.isEmbedded(true); } doc.save("D:\\Tests\\input.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p>
        <p>
          <hr>Font collections represented by {@code FontCollection} class are used in several scenarios. For example, in resources with {@code Resources.Fonts} property.</hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.FontCollection.size">
       
        <p>Gets the number of {@code Font} object elements actually contained in the collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FontCollection.getSyncRoot">
       
        <p>Gets an object that can be used to synchronize access to the collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FontCollection.isSynchronized">
       
        <p>Gets a value indicating whether access to the collection is synchronized (thread safe).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FontCollection.iterator">
       
        <p>Returns an enumerator for the entire collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FontCollection.copyTo(Array,int)">
       
        <p>Copies the entire collection to a compatible one-dimensional Array, starting at the specified index of the target array</p> 
      
      <param name="Array"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.FontCollection.add(Font,String[])">
       
        <p>Adds new font to font resources and returns automatically assigned name of font resource.</p> @param newFont Font. @param resName The automatically assigned resource item name.
      
      <param name="Font"/>
      <param name="String[]"/>
    </member>
    <member name="M:com.aspose.pdf.FontCollection.get_Item(int)">
       
        <p>Gets the font element at the specified index.</p> @return @param index
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.FontCollection.get_Item(String)">
       
        <p>Gets font from the collection by font name. Exception is thrown if font was not found.</p> @return Found font. @param name Name of the font.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.FontCollection.contains(String)">
       
        <p>Checks if font exists in font collection.</p> @param name Font name.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.FontCollection.add(String,IPdfObject)">
       
        <p>Add new font to font collection.</p> @param resName @param newFont
      
      <param name="String"/>
      <param name="IPdfObject"/>
    </member>
    <member name="M:com.aspose.pdf.FontCollection.add(String,String)">
       
        <p>Adds to font resources new font entry with specified base font name.</p> @param resName @param baseFontName
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.FontRepository">
       
        <p>Performs font search. Searches in system installed fonts and standard Pdf fonts. Also provides functionality to open custom fonts.</p>
        <p>
          <hr>
            <blockquote>
              <pre>The example demonstrates how to find font and replace the font of text of first page. 
                <pre lang="Java">// Find font Font font = FontRepository.findFont("Arial"); // Open document Document doc = new Document("D:\\Tests\\input.pdf"); // Create TextFragmentAbsorber object to find all "hello world" text occurrences TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world"); // Accept the absorber for first page doc.getPages().get_Item(1).accept(absorber); // Change font of the first text occurrence absorber.getTextFragments().get_Item(1).getTextState().setFont(font); // Save document doc.save("D:\\Tests\\output.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @see TextFragmentAbsorber @see IDocument
      
    </member>
    <member name="M:com.aspose.pdf.FontRepository.getSubstitutions">
       
        <p>Gets font substitution strategies collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FontRepository.getSources">
       
        <p>Gets font sources collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FontRepository.findFont(String)">
       
        <p>Searches and returns font with specified font name.</p>
        <p>
          <hr>
            <blockquote>
              <pre>The example demonstrates how to find font and replace the font of text of first page. 
                <pre lang="Java">// Find font Font font = FontRepository.findFont("Arial"); // Open document Document doc = new Document("D:\\Tests\\input.pdf"); // Create TextFragmentAbsorber object to find all "hello world" text occurrences TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world"); // Accept the absorber for first page doc.getPages().get_Item(1).accept(absorber); // Change font of the first text occurrence absorber.getTextFragments().get_Item(1).getTextState().setFont ( font); // Save document doc.save("D:\\Tests\\output.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.FontRepository.findFont(String,int)">
       
        <p>Searches and returns font with specified font name and font style.</p>
        <p>
          <hr>
            <blockquote>
              <pre>The example demonstrates how to find font and replace the font of text of first page. 
                <pre lang="Java">// Find font Font font = FontRepository.findFont("Arial", FontStyles.Italic); // Open document Document doc = new Document("D:\\Tests\\input.pdf"); // Create TextFragmentAbsorber object to find all "hello world" text occurences TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world"); // Accept the absorber for first page doc.getPages().get_Item(1).accept(absorber); // Change font of the first text occurence absorber.getTextFragments().get_Item(1).getTextState().setFont(font); // Save document doc.save("D:\\Tests\\output.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
      <param name="String"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.FontRepository.openFont(InputStream,int)">
       
        <p>Opens font with specified font stream.</p>
        <p>
          <hr>
            <blockquote>
              <pre>The example demonstrates how to open font and replace the font of text of first page. 
                <pre lang="Java">// Open font InputStream fontStream = new FileInputStream("C:\\WINDOWS\\Fonts\\arial.ttf")) { Font font = FontRepository.openFont(fontStream, , FontTypes.TTF); // Open document Document doc = new Document("D:\\Tests\\input.pdf"); // Create TextFragmentAbsorber object to find all "hello world" text occurrences TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world"); // Accept the absorber for first page doc.getPages().get_Item(1).accept(absorber); // Change font of the first text occurrence absorber.getTextFragments().get_Item(1).getTextState().setFont ( font); // Save document doc.save("D:\\Tests\\output.pdf"); }</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
      <param name="InputStream"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.FontRepository.openFont(String)">
       
        <p>Opens font with specified font file path.</p>
        <p>
          <hr>
            <blockquote>
              <pre>The example demonstrates how to open font and replace the font of text of first page. 
                <pre lang="Java">// Open font Font font = FontRepository.openFont("C:\\WINDOWS\\Fonts\\arial.ttf"); // Open document Document doc = new Document("D:\\Tests\\input.pdf"); // Create TextFragmentAbsorber object to find all "hello world" text occurrences TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world"); // Accept the absorber for first page doc.getPages().get_Item(1).accept(absorber); // Change font of the first text occurrence absorber.getTextFragments().get_Item(1).getTextState().setFont ( font); // Save document doc.save("D:\\Tests\\output.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.FontRepository.openFont(String,String)">
       
        <p>Opens font with specified font file path and metrics file path.</p>
        <p>
          <hr>
            <blockquote>
              <pre>The example demonstrates how to open Type1 font with metrics and replace the font of text of first page. 
                <pre lang="Java">// Open font Font font = FontRepository.openFont("courier.pfb", "courier.afm"); // Open document Document doc = new Document("D:\\Tests\\input.pdf"); // Create TextFragmentAbsorber object to find all "hello world" text occurrences TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world"); // Accept the absorber for first page doc.getPages().get_Item(1).accept(absorber); // Change font of the first text occurrence absorber.getTextFragments().get_Item(1).sgetTextState().setFont(font); // Save document doc.save("D:\\Tests\\output.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.FontSource">
      Represents a base class fot font source.
    </member>
    <member name="T:com.aspose.pdf.FontStyles">
       
        <p>Specifies style information applied to text.</p>
        <p>
          <hr>This enumeration has a {@code FlagsAttribute} attribute that allows a combination of its member values.</hr>
        </p> 
      
    </member>
    <member name="F:com.aspose.pdf.FontStyles.Regular">
       
        <p>Regular text</p> 
      
    </member>
    <member name="F:com.aspose.pdf.FontStyles.Bold">
       
        <p>Bold text</p> 
      
    </member>
    <member name="F:com.aspose.pdf.FontStyles.Italic">
       
        <p>Italic text</p> 
      
    </member>
    <member name="T:com.aspose.pdf.FooterArtifact">
      Describes footer artifact. This may be used to set footer of the page.
    </member>
    <member name="M:com.aspose.pdf.FooterArtifact.#ctor">
      Creates Footer Artifact instance.
    </member>
    <member name="T:com.aspose.pdf.Form">
       
        <p>Class representing form object.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Form.getDocument"/>
    <member name="M:com.aspose.pdf.Form.get_xfa"/>
    <member name="M:com.aspose.pdf.Form.isSynchronized">
       
        <p>Returns true if object is thread-safe.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Form.getSyncRoot">
       
        <p>Returns synchronization object.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Form.size">
       
        <p>Gets number of the fields on this form.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Form.getDefaultResources">
       
        <p>Gets default resources placed on this form.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Form.getDefaultAppearance">
       
        <p>Gets default appearance of the form (object which describes default font, text size and color for fields on the form).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Form.setDefaultAppearance(DefaultAppearance)">
       
        <p>Sets default appearance of the form (object which describes default font, text size and color for fields on the form).</p> 
      
      <param name="DefaultAppearance"/>
    </member>
    <member name="M:com.aspose.pdf.Form.getXFA">
       
        <p>Gets XFA data of the form (if presents).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Form.getType">
       
        <p>Gets type of the form. Possible values are: Standard, Static, Dynamic.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Form.setType(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Form.copyTo(Array,int)">
       
        <p>Copies fields placed on the form into array.</p> @param array Array where fields must be placed. @param index Starting index.
      
      <param name="Array"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Form.iterator">
       
        <p>Gets enumeration of form fields.</p> @return Field enumerator.
      
    </member>
    <member name="M:com.aspose.pdf.Form.get(String)">
       
        <p>Searches field by field name. Returns null if field was not found.</p> @return Field object. @param name Field name.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Form.add(Field,int)">
       
        <p>Adds field on the form.</p> @param field Field which must be added. @param pageNumber Page index where added field will be placed.
      
      <param name="Field"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Form.add(Field)">
       
        <p>Adds field on the form.</p> @param field Field which must be added.
      
      <param name="Field"/>
    </member>
    <member name="M:com.aspose.pdf.Form.delete(Field)">
       
        <p>Delete field from the form.</p> @param field Field which must be deleted.
      
      <param name="Field"/>
    </member>
    <member name="M:com.aspose.pdf.Form.delete(String)">
       
        <p>Deletes field from the form by its name.</p> @param fieldName Name of the filed which must be deleted.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Form.flatten">
       
        <p>Removes all form fields and place their values directly on the page.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Form.get_Item(String)">
       
        <p>Gets field of the form by field name. Throws excpetion if the field was not found.</p> @return Retreived field. @param name Name of the field.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Form.get_Item(int)">
       
        <p>Gets field of the form by field index.</p> @return Retreived field. @param index Index of the field.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Form.add(Field,String,int)">
       
        <p>Adds new field to the form; If this field is already placed on other or this form, the copy of field is created.</p> @return Added field returned. If copy of the field was created it will be returned. @param field Field name. @param partialName Name of field on the form. @param pageNumber Page number where field will be added.
      
      <param name="Field"/>
      <param name="String"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Form.addFieldAppearance(Field,int,Rectangle)">
       
        <p>Adds additional appearance of the field to specified page of the document in the specified location.</p> @param field @param pageNumber @param rect
      
      <param name="Field"/>
      <param name="int"/>
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.Form.addFieldToAcroForm(Field)">
      <param name="Field"/>
    </member>
    <member name="M:com.aspose.pdf.Form.hasXfa"/>
    <member name="M:com.aspose.pdf.Form.assignXfa(XmlDocument)">
       
        <p>Sets XFA of the form to specified value.</p> @param xml
      
      <param name="XmlDocument"/>
    </member>
    <member name="M:com.aspose.pdf.Form.getFields">
       
        <p>Gets list of all fields in lowest level of hierarhical form.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Form.getFieldsInRect(Rectangle)">
       
        <p>Returns fields inside of specified rectangle.</p> @return Array with found fields. @param rect Rectangle where fields should be found.
      
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.Form.#ctor(IDocument)">
      <param name="IDocument"/>
    </member>
    <member name="T:com.aspose.pdf.FormType">
       
        <p>Enumeration of posible types of Acro Form.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.FormType.Standard">
       
        <p>Standard AcroForm.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.FormType.Static">
       
        <p>Static XFA form.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.FormType.Dynamic">
       
        <p>Dynamic XFA form.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.FreeTextAnnotation">
       
        <p>Represents a free text annotation that displays text directly on the page. Unlike an ordinary text annotation, a free text annotation has no open or closed state; instead of being displayed in a pop-up window, the text is always visible.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FreeTextAnnotation.getStartingStyle">
       
        <p>Gets or sets line ending style for line starting point.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FreeTextAnnotation.setStartingStyle(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.FreeTextAnnotation.getEndingStyle">
       
        <p>Gets or sets line ending style for line ending point.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FreeTextAnnotation.setEndingStyle(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.FreeTextAnnotation.getJustification">
       
        <p>Gets a code specifying the form of quadding (justification) to be used in displaying the annotation�s text.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FreeTextAnnotation.setJustification(int)">
       
        <p>Sets a code specifying the form of quadding (justification) to be used in displaying the annotation�s text.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.FreeTextAnnotation.accept(AnnotationSelector)">
       
        <p>Accepts visitor object to process the annotation.</p> @param visitor Visitor object.
      
      <param name="AnnotationSelector"/>
    </member>
    <member name="M:com.aspose.pdf.FreeTextAnnotation.getDefaultAppearance">
       
        <p>Gets the default appearance string to be used in formatting the text.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FreeTextAnnotation.setDefaultAppearance(String)">
       
        <p>Sets the default appearance string to be used in formatting the text.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.FreeTextAnnotation.getDefaultAppearanceObject">
       
        <p>Object which represents default appearance of FreeText annotation.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FreeTextAnnotation.getIntent">
       
        <p>Gets the intent of the free text annotation.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FreeTextAnnotation.setIntent(int)">
       
        <p>Sets the intent of the free text annotation.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.FreeTextAnnotation.getDefaultStyle">
       
        <p>Gets a default style string.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FreeTextAnnotation.setDefaultStyle(String)">
       
        <p>Sets a default style string.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.FreeTextAnnotation.getTextStyle">
       
        <p>Gets or sets style of the text in appearance. when text style is changed, text appearance is updated.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.FreeTextAnnotation.setTextStyle(TextStyle)">
       
        <p>Sets style of the text in appearance. when text style is changed, text appearance is updated.</p> 
      
      <param name="TextStyle"/>
    </member>
    <member name="M:com.aspose.pdf.FreeTextAnnotation.#ctor(Page,Rectangle,DefaultAppearance)">
       
        <p>Creates new FreeText annotation on the specified page.</p> @param page The document's page where annotation should be created. @param rect The annotation rectangle, defining the location of the annotation on the page. @param appearance The default appearance string to be used in formatting the text.
      
      <param name="Page"/>
      <param name="Rectangle"/>
      <param name="DefaultAppearance"/>
    </member>
    <member name="T:com.aspose.pdf.FreeTextIntent">
       
        <p>Enumerates the intents of the free text annotation.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.FreeTextIntent.Undefined">
       
        <p>Not defined state.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.FreeTextIntent.FreeTextCallout">
       
        <p>Means that the annotation is intended to function as a callout.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.FreeTextIntent.FreeTextTypeWriter">
       
        <p>Means that the annotation is intended to function as a click-to-type or typewriter object.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.Adapter"/>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Adapter.toDomEntities(LegacyPdf,com.aspose.pdf.IDocument,com.aspose.pdf.facades.DocumentPrivilege[],int[])">
      <param name="LegacyPdf"/>
      <param name="com.aspose.pdf.IDocument"/>
      <param name="com.aspose.pdf.facades.DocumentPrivilege[]"/>
      <param name="int[]"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Adapter.copyRelevantAttributesAndContent(Section,com.aspose.pdf.Page)">
      <param name="Section"/>
      <param name="com.aspose.pdf.Page"/>
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.Annotation"/>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Annotation.load(XmlTextReader,LoadingContext)">
      <param name="XmlTextReader"/>
      <param name="LoadingContext"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Annotation.#ctor">
       
        <p>Initializes a new instance of the {@code Attachment} class.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Annotation._AnnotationType">
       
        <p>Gets or sets a {@code AttachmentType} that indicates the attachment type.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.Arc">
       
        <p>Represents an arc {@code Shape} in a Graph.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>[Java] Pdf pdf1 = new Pdf(); Section sec1 = pdf1.Sections.Add(); Graph graph1 = new Graph(sec1,100,400); sec1.getParagraphs().add(graph1); Arc arc1 = new Arc(graph1,200,50,30,30,90); graph1.getShapes().add(arc1); arc1.getGraphInfo().setColor ( new com.aspose.pdf.generator.Color("Red")); pdf1.save(...); [XML] &lt;?xml version="1.0" encoding="utf-8" ?&gt; &lt;Pdf xmlns="Aspose.Pdf"&gt; &lt;Section&gt; &lt;Graph Height="100" Width="400"&gt; &lt;Arc CenterPosition="200 50" Radius="30" Alpha="30" Beta="90" Color="Red"&gt; &lt;/Arc&gt; &lt;/Graph&gt; &lt;/Section&gt; &lt;/Pdf&gt;</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Arc.#ctor">
       
        <p>Initializes a new instance of the {@code Arc} class.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Arc.#ctor(float,float,float,float,float)">
       
        <p>Initializes a new instance of the {@code Arc} class.</p> @param xPosition The x-coordinate of the center point of the arc. @param yPosition The y-coordinate of the center point of the arc. @param radius The radius value of the arc. @param alpha The beginning angle value of the arc. @param beta The end angle value of the arc.
      
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Arc.#ctor(Graph)">
       
        <p>Initializes a new instance of the {@code Arc} class.</p> @param parentGraph The specified {@code Graph} object. 
        <p>
          <hr>This constructor can inherit common property values from the specified {@code Graph} object.</hr>
        </p> 
      
      <param name="Graph"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Arc.#ctor(Graph,float,float,float,float,float)">
       
        <p>Initializes a new instance of the {@code Arc} class.</p> @param graph The specified {@code Graph} object. @param xPosition The x-coordinate of the center point of the arc. @param yPosition The y-coordinate of the center point of the arc. @param radius The radius value of the arc. @param alpha The beginning angle value of the arc. @param beta The end angle value of the arc.
        <p>
          <hr>This constructor can inherit common property values from the specified {@code Graph} object.</hr>
        </p> 
      
      <param name="Graph"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Arc.PosX">
       
        <p>Gets or sets a float value that indicates the x-coordinate of the center of the arc.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Arc.PosY">
       
        <p>Gets or sets a float value that indicates the y-coordinate of the center of the arc.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Arc.Radius">
       
        <p>Gets or sets a float value that indicates the radius of the arc.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Arc.Alpha">
       
        <p>Gets or sets a float value that indicates the beginning angle (in degrees) of the arc.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Arc.Beta">
       
        <p>Gets or sets a float value that indicates the ending angle (in degrees) of the arc.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.Attachment">
       
        <p>Represents an attachment {@code Paragraph} in a Pdf document. Attachment can be file attachment. stream attachment or note annotation.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>[Java] Pdf pdf1 = new Pdf(); Section sec1 = pdf1.getSections().add(); Attachment fileAttachment = new Attachment(); sec1.getParagraphs().add(fileAttachment); fileAttachment.setAttachmentType ( AttachmentType.File); fileAttachment.setAttachedFileName ( "c:/images/ccitt.tif"); fileAttachment.setAttachedFileType ( "tif"); fileAttachment.setFileIconType ( FileIconType.Graph); fileAttachment.setIconColor ( new com.aspose.pdf.generator.Color("Brown")); Attachment noteAttachment = new Attachment(); sec1.getParagraphs().add(noteAttachment); noteAttachment.setAttachmentType ( AttachmentType.Note); noteAttachment.setNoteContent ( "This is a note."); noteAttachment.setNoteHeading ( "this is a heading"); noteAttachment.isNoteOpen ( true); pdf1.save("test.pdf"); [XML] &lt;?xml version="1.0" encoding="utf-8" ?&gt; &lt;Pdf xmlns="Aspose.Pdf"&gt; &lt;Section&gt; &lt;Attachment AttachmentType="File" AttachedFileName="c:/images/flower.jpg" AttachedFileType="jpeg" FileIconType="Graph" IconColor="Brown"&gt; &lt;/Attachment&gt; &lt;Attachment AttachmentType="Note" IsNoteOpen="true" NoteContent="This is a note."&gt; &lt;/Attachment&gt; &lt;/Section&gt; &lt;/Pdf&gt;</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Attachment.#ctor">
       
        <p>Initializes a new instance of the {@code Attachment} class.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Attachment.TextInfo">
       
        <p>Gets or sets a {@code TextInfo} that indicates the attachment text info.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Attachment._AttachmentType">
       
        <p>Gets or sets a {@code AttachmentType} that indicates the attachment type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Attachment.AttachedFileName">
       
        <p>Gets or sets a string that indicates the attach file name.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Attachment.AttachedStream">
       
        <p>Gets or sets a stream attaches to the file.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Attachment.AttachedFileType">
       
        <p>Gets or sets a string that indicates the MIME type of the attached file.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Attachment._FileIconType">
       
        <p>Gets or sets a {@code FileIconType} that indicates the file attachment icon type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Attachment._NoteWindowPositioningType">
       
        <p>Gets or sets a {@code NoteWindowPositioningType} object that indicates the note window's positioning type. Default is Auto.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Attachment.NoteWindowPosition">
       
        <p>Gets or sets a {@code RectangleArea} object that indicates the position of the note's popup window.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Attachment.NoteContent">
       
        <p>Gets or sets a string that indicates the content of the attached note.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Attachment.NoteHeading">
       
        <p>Gets or sets a string that indicates the heading (title) of the attached note.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Attachment._NoteIconType">
       
        <p>Gets or sets a {@code NoteIconType} that indicates the note icon type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Attachment.IsNoteOpen">
       
        <p>Gets or sets a bool value that indicates whether the note is open or not when the Pdf document is opened.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Attachment.IconColor">
       
        <p>Represents a {@code Color} object that indicates the color of the icon.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.BaseValidator"/>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.BaseValidator.getErrorMessage">
       
        <p>Gets or sets the text for the error message displayed in a pop-up window when validation fails.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.BaseValidator.setErrorMessage(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.BaseValidator.deepClone"/>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.Bookmark">
       
        <p>Represents a bookmark item in the PDF.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>[Java] Pdf pdf1 = new Pdf(); pdf1.setIsBookmarked ( true); pdf1.setBookMarkLevel ( 1;) Section sec1 = pdf1.getSections().add(); Heading heading1 = new Heading(pdf1,sec1,1); Segment segment1 = new Segment(heading1); heading1.getSegments().add(segment1); heading1.setIsAutoSequence ( true); segment1.setContent ( "this is heading of level 1"); sec1.getParagraphs().add(heading1); Heading heading2 = new Heading(pdf1,sec1,2); Segment segment2 = new Segment(heading2); heading2.getSegments().add(segment2); heading2.setIsAutoSequence ( true); segment2.setContent ( "this is heading of level 2"); sec1.getParagraphs().add(heading2); Heading heading3 = new Heading(pdf1,sec1,1); Segment segment3 = new Segment(heading3); heading3.getSegments().add(segment3); heading3.setIsAutoSequence ( false); heading3.setLabelWidth ( 60); heading3.setUserLabel ( "bullet1"); segment3.setContent ( "this is bullet style 1"); sec1.getParagraphs().add(heading3); pdf1.save("testHeading.pdf"); [XML] &lt;?xml version="1.0" encoding="utf-8" ?&gt; &lt;Pdf xmlns="Aspose.Pdf" IsBookmarked="true" BookMarkLevel="1"&gt; &lt;Section&gt; &lt;Heading Level="1" IsAutoSequence="true"&gt; &lt;Segment&gt;this is heading of level 1&lt;/Segment&gt; &lt;/Heading&gt; &lt;Heading Level="2" IsAutoSequence="true"&gt; &lt;Segment&gt;this is heading of level 2&lt;/Segment&gt; &lt;/Heading&gt; &lt;Heading Level="1" IsAutoSequence="false" LabelWidth="60" UserLabel="bullet1"&gt; &lt;Segment&gt;this is bullet style 1&lt;/Segment&gt; &lt;/Heading&gt; &lt;/Section&gt; &lt;/Pdf&gt;</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Bookmark.addLinkAction(LinkAction)">
      <param name="LinkAction"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Bookmark.getCountOfLinkActions"/>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Bookmark.getLinkAction(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Bookmark.#ctor"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Bookmark.LinkParagraphID">
       
        <p>Gets or sets a string that indicates the ID of the paragraph that the bookmark item links to. If this property is set, the {@code PageNumber} and {@code YPosition} properties are not needed. If the link paragraph is {@code Text} or {@code Heading} and the {@code Title} is not set, the content of the {@code Text} or {@code Heading} will be used as the title of the bookmark item.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Bookmark.ChildBookmarks">
       
        <p>Gets or sets a {@code ChildBookmarks} object that indicates the child bookmarks.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Bookmark.Title">
       
        <p>Gets or sets a string that indicates the title of the bookmark. If the {@code LinkParagraphID} is set and the linked paragraph is {@code Text} or {@code Heading} and this property is not set, the content of the {@code Text} or {@code Heading} will be used as the title of the bookmark item.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Bookmark.PageNumber">
       
        <p>Gets or sets a int number that indicates the page number of the bookmark link. If the {@code LinkParagraphID} is set, this property is not needed.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Bookmark.YPosition">
       
        <p>Gets or sets a float number that indicates the Y coordination of the bookmark link. The origin of is in the lower-left corner of the page. If the {@code LinkParagraphID} is set, this property is not needed.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Bookmark.IsExpanded">
       
        <p>Gets or sets a bool value that indicates whether the bookmark item is expanded if it has child bookmarks.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.Bookmarks">
       
        <p>Represents a collection of bookmarks.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Bookmarks.get_Item(int)">
       
        <p>Gets or sets a {@code Bookmarks} object from the collection according to object index.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Bookmarks.set_Item(int,Bookmark)">
      <param name="int"/>
      <param name="Bookmark"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Bookmarks.add(Bookmark)">
       
        <p>Adds a new {@code Bookmark} object into the collection.</p> @param bookmark The {@code Bookmark} object to be added.
      
      <param name="Bookmark"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Bookmarks.#ctor"/>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.BorderInfo"/>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.BorderInfo.deepClone">
       
        <p>Clones a new BorderInfo object.</p> @return The new BorderInfo object.
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.BorderInfo.#ctor">
       
        <p>Initializes a new instance of the {@code BorderInfo} class.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.BorderInfo.Left">
       
        <p>Gets or sets a {@code GraphInfo} object that indicates left of the border.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.BorderInfo.Right">
       
        <p>Gets or sets a {@code GraphInfo} object that indicates right of the border.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.BorderInfo.Top">
       
        <p>Gets or sets a {@code GraphInfo} object that indicates the top border.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.BorderInfo.Round">
       
        <p>Gets or sets a {@code GraphInfo} object that indicates the round border.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.BorderInfo.Bottom">
       
        <p>Gets or sets a {@code GraphInfo} object that indicates bottom of the border.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.Canvas">
       
        <p>Represents a Canvs {@code Paragraph} in a Pdf document.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>[Java] aspose.pdf.generator.Pdf pdf = new aspose.pdf.generator.Pdf(0; aspose.pdf.generator.Section sec = new aspose.pdf.generator.Section(); pdf.getSections().add(sec); aspose.pdf.generator.Canvas canvas = new aspose.pdf.generator.Canvas(); canvas.setFillColor ( new aspose.pdf.generator.Color(0, 128, 128)); sec.getParagraphs().add(canvas); aspose.pdf.generator.FloatingBox fb1 = new aspose.pdf.generator.FloatingBox(); fb1.setLeft ( 250f); fb1.setTop ( 150f); fb1.getParagraphs().add(new aspose.pdf.generator.Text("This is a text in floating box."))); canvas.getParagraphs().add(fb1); aspose.pdf.generator.FloatingBox fb2 = new aspose.pdf.generator.FloatingBox(); fb2.setLeft ( 50f); fb2.setTop ( 100f); aspose.pdf.generator.image image2 = new aspose.pdf.generator.Image(); image2.getImageInfo().setFile ( "temp.jpeg"); image2.getImageInfo().setImageFileType ( aspose.pdf.generator.ImageFileType.Jpeg); fb2.getParagraphs().add(image2); canvas.getParagraphs().add(fb2); pdf.save(...); [XML] &lt;Pdf xmlns="Aspose.Pdf"&gt; &lt;Section&gt; &lt;Canvas Width="450" Height="440"&gt; &lt;Border&gt; &lt;Box LineWidth="0.5"&gt; &lt;/Box&gt; &lt;/Border&gt; &lt;FloatingBox Left="250" Top="150"&gt; &lt;Text&gt; &lt;Segment&gt;This is a text in floating box. &lt;/Segment&gt; &lt;/Text&gt; &lt;/FloatingBox&gt; &lt;FloatingBox Left="50" Top="100"&gt; &lt;Image File="F:/temp/temp.002.jpeg" Type="Jpeg"&gt; &lt;/Image&gt; &lt;/FloatingBox&gt; &lt;/Canvas&gt; &lt;Text&gt; &lt;Segment&gt;ADFASFDASDF &lt;/Segment&gt; &lt;/Text&gt; &lt;/Section&gt; &lt;/Pdf&gt;</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Canvas.getBoxWidth">
       
        <p>Gets or sets a float value that indicates the width of the canvas.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Canvas.setBoxWidth(float)">
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Canvas.getBoxHeight">
       
        <p>Gets or sets a float value that indicates the height of the canvas.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Canvas.setBoxHeight(float)">
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Canvas.#ctor(float,float)">
       
        <p>Initializes a new instance of the {@code Canvas} class with specified width and height.</p> @param width The width of the Canvas. @param height The height of the Canvas.
      
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Canvas.#ctor">
       
        <p>Initializes a new instance of the {@code Canvas} class with default width(available page width) and height(279F).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Canvas.Border">
       
        <p>Gets or sets a {@code BorderInfo} object that indicates the border info of the canvas.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Canvas.FillColor">
       
        <p>Gets or sets a {@code Aspose.Pdf.Generator.Color} object that indicates the background color of the canvas.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Canvas.Paragraphs">
       
        <p>Gets or sets a {@code GraphInfo} collection that indicates all paragraphs in the section.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.Cell">
       
        <p>Represents a cell in a {@code Aspose.Pdf.Generator.Table}.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>[Java] Pdf pdf1 = new Pdf(); Section sec1 = pdf1.getSections().add(); aspose.pdf.generator.Table table1 = new aspose.pdf.generator.Table(); sec1.getParagraphs().add(table1); table1.setColumnWidths ( "70 2cm"); Row row1 = table1.getRows().add(); Cell cell1Row1 = row1.getCells().add("ColumnsSpan = 2"); cell1Row1.ColumnsSpan = 2; cell1Row1.Border = new BorderInfo((int)BorderSide.All,0.5F); Row row2 = table1.getRows().add(); Cell cell1Row2 = row2.getCells().add("cell1"); cell1Row2.Border = new BorderInfo((int)BorderSide.All,0.5F); Cell cell2Row2 = row2.getCells().add("cell2"); cell2Row2.Border = new BorderInfo((int)BorderSide.All,0.5F,new aspose.pdf.generator.Color("Red")); pdf1.Save(...); [XML] &lt;Pdf xmlns="Aspose.Pdf"&gt; &lt;Section&gt; &lt;Table ColumnWidths="70 2cm"&gt; &lt;Row&gt; &lt;Cell ColumnsSpan="2"&gt; &lt;Border&gt; &lt;All LineWidth="0.5"&gt;&lt;/All&gt; &lt;/Border&gt; &lt;Text&gt; &lt;Segment&gt;ColumnsSpan = 2&lt;/Segment&gt; &lt;/Text&gt; &lt;/Cell&gt; &lt;/Row&gt; &lt;Row&gt; &lt;Cell&gt; &lt;Border&gt; &lt;All LineWidth="0.5"&gt;&lt;/All&gt; &lt;/Border&gt; &lt;Text&gt; &lt;Segment&gt;cell1&lt;/Segment&gt; &lt;/Text&gt; &lt;/Cell&gt; &lt;Cell&gt; &lt;Border&gt; &lt;All LineWidth="0.5" Color="Red"&gt;&lt;/All&gt; &lt;/Border&gt; &lt;Text&gt; &lt;Segment&gt;cell2&lt;/Segment&gt; &lt;/Text&gt; &lt;/Cell&gt; &lt;/Row&gt; &lt;/Table&gt; &lt;/Section&gt; &lt;/Pdf&gt;</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Cell.getColumnsSpan">
       
        <p>Gets or sets an int value that indicates how many columns the cell spans.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Cell.setColumnsSpan(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Cell.getVerticalAlignment">
       
        <p>Gets or sets a {@code VerticalAlignmentType} object that indicates the vertical alignment type.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Cell.setVerticalAlignment(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Cell.getVerticalAlignmentType">
       
        <p>Gets or sets a {@code Aspose.Pdf.VerticalAlignment} object that indicates the vertical alignment type.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Cell.setVerticalAlignmentType(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Cell.getHorizontalAlignment">
       
        <p>Gets or sets a {@code HorizontalAlignment} object that indicates the alignment type of the cell.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Cell.setHorizontalAlignment(AlignmentType)">
      <param name="AlignmentType"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Cell.getHorizontalAlignmentType">
       
        <p>Gets or sets a {@code Aspose.Pdf.HorizontalAlignment} object that indicates the alignment type of the cell.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Cell.setHorizontalAlignmentType(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Cell.deepClone">
       
        <p>Clones a new {@code Cell} object. This method clones only the format but not contents of the cell.</p> @return The new cloned {@code Cell} object.
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Cell.setTextNameForTextualChildren(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Cell.setFontSizeForTextualChildren(float)">
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Cell.addTextAsNewParagraph(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Cell.#ctor(Table)">
       
        <p>Initializes a new instance of the {@code Cell} class in a table.</p> @param table The {@code Table} object where the cell is in. 
        <p>
          <hr>Please use Cell(Row row) instead.</hr>
        </p> 
      
      <param name="Table"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Cell.#ctor(Row)">
       
        <p>Initializes a new instance of the {@code Cell} class in a table.</p> @param row The {@code Row} object where the cell is in.
      
      <param name="Row"/>
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Cell.Border">
       
        <p>Gets or sets a {@code BorderInfo} object that indicates the cell's border info.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Cell.BackgroundColor">
       
        <p>Gets or sets a {@code Aspose.Pdf.Generator.Color} object that indicates the background color of the cell.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Cell.BackgroundImageFile">
       
        <p>Gets or sets a string that indicates the background image file name.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Cell.BackgroundImageType">
       
        <p>Gets or sets a {@code ImageFileType} enum that indicates the type of the background image.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Cell.BackgroundAlignment">
       
        <p>Gets or sets a {@code CellBackgroundAlignment} enum that indicates the alignment of the background image.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Cell.Padding">
       
        <p>Gets or sets a {@code MarginInfo} object that indicates the cell's padding.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Cell.FitWidth">
       
        <p>Obsolete.Please use Table.ColumnWidths instead. Gets or sets a float value that indicates the fit width of the cell. The unit is point. In XML,the default unit is point,but cm and inch are also supported. For example,FitWidth="2cm" or FitWidth="2inch".</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Cell.Paragraphs">
       
        <p>Gets or sets a {@code Paragraphs} collection of paragraphs(ifa any)that are contained in the the cell.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Cell.ID">
       
        <p>Gets or sets a string that indicates the ID of the cell.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Cell.DefaultCellTextInfo">
       
        <p>Gets or sets a {@code TextInfo} object that indicates the default cell text format info.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Cell.VerticalTextRotationAngle">
       
        <p>Gets or sets a {@code VerticalTextRotationType} object that indicates the text rotation angle in floating box or cells.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Cell.RowSpan">
       
        <p>Gets or sets a int value that indicates how many rows the cell spans.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Cell.IsWordWrapped">
       
        <p>Gets or sets a boolean value that indicates the alignment type of the cell.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.Cells">
       
        <p>Represents a collection of {@code Cell} objects.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>[Java] Pdf pdf1 = new Pdf(); Section sec1 = pdf1.getSections().add(); aspose.pdf.generator.Table table1 = new aspose.pdf.generator.Table(); sec1.getParagraphs().add(table1); table1.ColumnWidths = "70 2cm"; Row row1 = table1.getRows().add(); Cell cell1Row1 = row1.getCells().add("ColumnsSpan = 2"); cell1Row1.ColumnsSpan = 2; cell1Row1.Border = new BorderInfo((int)BorderSide.All,0.5F); Row row2 = table1.geRows().add(); Cell cell1Row2 = row2.getCells().add("cell1"); cell1Row2.Border = new BorderInfo((int)BorderSide.All,0.5F); Cell cell2Row2 = row2.getCells().add("cell2"); cell2Row2.Border = new BorderInfo((int)BorderSide.All,0.5F,new aspose.pdf.generator.Color("Red")); pdf1.save(...); [XML] &lt;Pdf xmlns="Aspose.Pdf"&gt; &lt;Section&gt; &lt;Table ColumnWidths="70 2cm"&gt; &lt;Row&gt; &lt;Cell ColumnsSpan="2"&gt; &lt;Border&gt; &lt;All LineWidth="0.5"&gt;&lt;/All&gt; &lt;/Border&gt; &lt;Text&gt; &lt;Segment&gt;ColumnsSpan = 2&lt;/Segment&gt; &lt;/Text&gt; &lt;/Cell&gt; &lt;/Row&gt; &lt;Row&gt; &lt;Cell&gt; &lt;Border&gt; &lt;All LineWidth="0.5"&gt;&lt;/All&gt; &lt;/Border&gt; &lt;Text&gt; &lt;Segment&gt;cell1&lt;/Segment&gt; &lt;/Text&gt; &lt;/Cell&gt; &lt;Cell&gt; &lt;Border&gt; &lt;All LineWidth="0.5" Color="Red"&gt;&lt;/All&gt; &lt;/Border&gt; &lt;Text&gt; &lt;Segment&gt;cell2&lt;/Segment&gt; &lt;/Text&gt; &lt;/Cell&gt; &lt;/Row&gt; &lt;/Table&gt; &lt;/Section&gt; &lt;/Pdf&gt;</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Cells.add(Cell)">
       
        <p>Adds a new {@code Cell} object into the collection.</p> @param cell The {@code Cell} object to be added.
      
      <param name="Cell"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Cells.add">
       
        <p>Initializes a new instance of the {@code Cell} class and add it to the Cells collection.</p> @return The new {@code Cell} object
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Cells.add(String)">
       
        <p>Initializes a new instance of the {@code Cell} class,adds a string to the new cell object and then add the Cell object to the Cells collection.</p> @return The new {@code Cell} object. @param cellString The string to be added to the cell.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Cells.add(String,TextInfo)">
       
        <p>Initializes a new instance of the {@code Cell} class and add it to the Cells collection. Adds a string with specified text format to the new cell.</p> @return The new {@code Cell} object. @param cellString The string to be added to the cell. @param textInfo The TextInfo object that contains text format information
      
      <param name="String"/>
      <param name="TextInfo"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Cells.get_Item(int)">
       
        <p>Gets or sets a {@code Cell} object from the collection according to cell index.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Cells.set_Item(int,Cell)">
      <param name="int"/>
      <param name="Cell"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Cells.get_Item(String)">
       
        <p>Gets or sets a {@code Cell} object from the collection according to cell ID.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Cells.set_Item(String,Cell)">
      <param name="String"/>
      <param name="Cell"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Cells.insert(int,Cell)">
       
        <p>Inserts a new {@code Cell} object into the collection at specified position.</p> @param index The zero-based index at which {@code Cell} object should be inserted. @param cell The {@code Cell} object to be inserted.
      
      <param name="int"/>
      <param name="Cell"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Cells.insert(Cell,Cell)">
       
        <p>Inserts a new {@code Cell} object into the collection after specified Cell object.</p> @param cellToInsertAfter The {@code Cell} object to insert after. @param newCell The {@code Cell} object to be inserted.
      
      <param name="Cell"/>
      <param name="Cell"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Cells.remove(Cell)">
       
        <p>Removes a {@code Cell} object from the collection.</p> @param cellToRemove The {@code Cell} object to be romoved.
      
      <param name="Cell"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Cells.copyTo(Cell[],int)">
       
        <p>Copies the elements to a cells array, starting at a specified array index.</p> @param cellArray The cells array. @param index The start index.
      
      <param name="Cell[]"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Cells.indexOf(Cell)">
       
        <p>Gets the index of a specified cell in the collection.</p> @return The index value. @param cell The specified {@code Cell} object.
      
      <param name="Cell"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Cells.#ctor">
       
        <p>Initializes a new instance of the {@code Cells} class.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.Circle">
       
        <p>Represents a circle {@code Shape} in a Graph.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>[Java] Pdf pdf1 = new Pdf(); Section sec1 = pdf1.getSections().add(); Graph graph1 = new Graph(sec1,100,400); sec1.getParagraphs().add(graph1); Circle circle1 = new Circle(graph1,200,50,30); graph1.getShapes().add(circle1); circle1.getGraphInfo().setColor ( new aspose.pdf.generator.Color("Red")); pdf1.save(...); [XML] &lt;?xml version="1.0" encoding="utf-8" ?&gt; &lt;Pdf xmlns="Aspose.Pdf"&gt; &lt;Section&gt; &lt;Graph Height="100" Width="400"&gt; &lt;Circle CenterPosition="200 50" Radius="30" Color="Red"&gt;&lt;/Circle&gt; &lt;/Graph&gt; &lt;/Section&gt; &lt;/Pdf&gt;</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Circle.#ctor">
       
        <p>Initializes a new instance of the {@code Circle} class.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Circle.#ctor(float,float,float)">
       
        <p>Initializes a new instance of the {@code Circle} class.</p> @param xPosition The x-coordinate of the center of the circle. @param yPosition The y-coordinate of the center of the circle. @param radius The radius of the circle.
      
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Circle.#ctor(Graph)">
       
        <p>Initializes a new instance of the {@code Circle} class.</p> @param parentGraph The specified {@code Graph} object. 
        <p>
          <hr>This constructor can inherit common property values from the specified {@code Graph} object.</hr>
        </p> 
      
      <param name="Graph"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Circle.#ctor(Graph,float,float,float)">
       
        <p>Initializes a new instance of the {@code Circle} class.</p> @param parentGraph The specified {@code Graph} object. @param xPosition The x-coordinate of the center of the circle. @param yPosition The y-coordinate of the center of the circle. @param radius The radius of the circle.
        <p>
          <hr>This constructor can inherit common property values from the specified {@code Graph} object.</hr>
        </p> 
      
      <param name="Graph"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Circle.PosX">
       
        <p>Gets or sets a float value that indicates the x-coordinate of the center of the circle.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Circle.PosY">
       
        <p>Gets or sets a float value that indicates the y-coordinate of the center of the circle.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Circle.Radius">
       
        <p>Gets or sets a float value that indicates the radius of the circle.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.CircleNote"/>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.CircleNote.load(XmlTextReader,LoadingContext)">
      <param name="XmlTextReader"/>
      <param name="LoadingContext"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.CircleNote.#ctor">
       
        <p>Initializes a new instance of the {@code CircleNote} class.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.CircleNote.BorderStyle">
       
        <p>Gets or sets a value that indicates border style.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.CircleNote.FillColor">
       
        <p>Gets or sets a value that indicates fill color.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.CmykColorSpace">
       
        <p>Represents the CMYK colorspace.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>[Java] Pdf pdf1 = new Pdf(); Section sec1 = pdf1.getSections().add(); Graph graph1 = new Graph(sec1,200,400); sec1.getParagraphs().add(graph1); float[] posArr = new float[]{100,0,300,0}; Line l1 = new Line(graph1,posArr); l1.getGraphInfo().setColor ( new aspose.pdf.generator.Color("Red")); graph1.getShapes().add(l1); posArr = new float[]{100,50,300,50}; Line l2 = new Line(graph1,posArr); l2.getGraphInfo().setColor ( new aspose.pdf.generator.Color(0,128,128);) graph1.getShapes().add(l2); posArr = new float[]{100,100,300,100}; Line l3 = new Line(graph1,posArr); l3.getGraphInfo().setColor ( new aspose.pdf.generator.Color(0,128,64,0)); graph1.getShapes().add(l3); posArr = new float[]{100,150,300,150}; Line l4 = new Line(graph1,posArr); l4.getGraphInfo().setColor ( new aspose.pdf.generator.Color((byte)140)); graph1.getShapes().add(l4); pdf1.Save(...); [XML] &lt;?xml version="1.0" encoding="utf-8" ?&gt; &lt;Pdf xmlns="Aspose.Pdf"&gt; &lt;Section&gt; &lt;Graph Height="200" Width="400"&gt; &lt;Line Color="Red" Position="100 0 300 0" /&gt; &lt;Line Color="rgb 0 128 128" Position="100 50 300 50" /&gt; &lt;Line Color="cmyk 0 128 64 0" Position="100 100 300 100" /&gt; &lt;Line Color="gray 140" Position="100 150 300 150" /&gt; &lt;/Graph&gt; &lt;/Section&gt; &lt;/Pdf&gt;</pre> 
              </pre>
            </blockquote>
          </hr>
        </p>
        <p>
          <hr>Note that you can use the {@code Aspose.Pdf.Color(byte,byte,byte,byte)} constructor to create a color object with CMYK colorspace and need not use this class directly.</hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.CmykColorSpace.getC">
       
        <p>Represents a {@code byte} value (0-255) that indicates the cyan component of the CMYK colorspace.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.CmykColorSpace.setC(byte)">
      <param name="byte"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.CmykColorSpace.getM">
       
        <p>Represents a {@code byte} value (0-255) that indicates the magenta component of the CMYK colorspace.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.CmykColorSpace.setM(byte)">
      <param name="byte"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.CmykColorSpace.getY">
       
        <p>Represents a {@code byte} value (0-255) that indicates the yellow component of the CMYK colorspace.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.CmykColorSpace.setY(byte)">
      <param name="byte"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.CmykColorSpace.getK">
       
        <p>Represents a {@code byte} value (0-255) that indicates the black component of the CMYK colorspace.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.CmykColorSpace.setK(byte)">
      <param name="byte"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.CmykColorSpace.#ctor">
       
        <p></p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.Color">
       
        <p>Represents the colorspaces used in Aspose.Pdf.Generator including {@code RgbColorSpace}, {@code CmykColorSpace} and {@code GrayColorSpace}.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>[Java] Pdf pdf1 = new Pdf(); Section sec1 = pdf1.getSections().add(); Graph graph1 = new Graph(sec1,200,400); sec1.getParagraphs().add(graph1); float[] posArr = new float[]{100,0,300,0}; Line l1 = new Line(graph1,posArr); l1.getGraphInfo().setColor ( new aspose.pdf.generator.Color("Red")); graph1.getShapes().add(l1); posArr = new float[]{100,50,300,50}; Line l2 = new Line(graph1,posArr); l2.getGraphInfo().setColor ( new aspose.pdf.generator.Color(0,128,128)); graph1.getShapes().add(l2); posArr = new float[]{100,100,300,100}; Line l3 = new Line(graph1,posArr); l3.getGraphInfo().setColor ( new aspose.pdf.generator.Color(0,128,64,0)); graph1.getShapes().add(l3); posArr = new float[]{100,150,300,150}; Line l4 = new Line(graph1,posArr); l4.getGraphInfo().setColor ( new aspose.pdf.generator.Color((byte)140)); graph1.getShapes().add(l4); pdf1.save(...); [XML] &lt;?xml version="1.0" encoding="utf-8" ?&gt; &lt;Pdf xmlns="Aspose.Pdf"&gt; &lt;Section&gt; &lt;Graph Height="200" Width="400"&gt; &lt;Line Color="Red" Position="100 0 300 0" /&gt; &lt;Line Color="rgb 0 128 128" Position="100 50 300 50" /&gt; &lt;Line Color="cmyk 0 128 64 0" Position="100 100 300 100" /&gt; &lt;Line Color="gray 140" Position="100 150 300 150" /&gt; &lt;/Graph&gt; &lt;/Section&gt; &lt;/Pdf&gt;</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Color.getColorSpaceType">
       
        <p>Represents a {@code ColorSpaceType} object that indicates the colorspace type.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Color.setColorSpaceType(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Color.getRgbColorSpace"/>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Color.setRgbColorSpace(java.awt.Color)">
      <param name="java.awt.Color"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Color.getCmykColorSpace">
       
        <p>Represents a {@code CmykColorSpace} object that indicates the CMYK colorspace. Note that you can use the {@code Aspose.Pdf.Color(byte,byte,byte,byte)} constructor to create a color object with CMYK colorspace and need not use this class directly.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Color.setCmykColorSpace(CmykColorSpace)">
      <param name="CmykColorSpace"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Color.getGrayColorSpace">
       
        <p>Represents a {@code GrayColorSpace} object that indicates the gray colorspace. Note that you can use the {@code Aspose.Pdf.Color(byte)} constructor to create a color object with gray colorspace and need not use this class directly.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Color.setGrayColorSpace(GrayColorSpace)">
      <param name="GrayColorSpace"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Color.getPatternColorSpace">
       
        <p>Represents a {@code GrayColorSpace} object that indicates the pattern colorspace.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Color.setPatternColorSpace(PatternColorSpace)">
      <param name="PatternColorSpace"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Color.#ctor">
       
        <p>Initializes a new instance of the {@code Color} class.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Color.#ctor(byte)">
       
        <p>Initializes a new instance of the {@code Color} class with {@code GrayColorSpace}.</p> @param grayValue The gray value of the gray colorspace.
      
      <param name="byte"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Color.#ctor(byte,byte,byte)">
       
        <p>Initializes a new instance of the {@code Color} class with RgbColorSpace.</p> @param r The red color value. @param g The green color value. @param b The blue color value.
      
      <param name="byte"/>
      <param name="byte"/>
      <param name="byte"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Color.#ctor(byte,byte,byte,byte)">
       
        <p>Initializes a new instance of the {@code Color} class with {@code CmykColorSpace}.</p> @param c The cyan value. @param m The magenta value. @param y The yellow value. @param k The black value.
      
      <param name="byte"/>
      <param name="byte"/>
      <param name="byte"/>
      <param name="byte"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Color.#ctor(String)">
       
        <p>Initializes a new instance of the {@code Color} class with RgbColorSpace from specified color name.</p> @param colorName The color name. It can be any name in System.Drawing.Color or format like '#0000ff'.
      
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.ColorSpaceType"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.ColorSpaceType.Cmyk">
       
        <p>CMYK colorspace.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.ColorSpaceType.Gray">
       
        <p>Gray colorspace.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.ColorSpaceType.Rgb">
       
        <p>RGB colorspace.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.ColorSpaceType.Unknown">
       
        <p>Unkown colorspace.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.ColorSpaceType.Pattern">
       
        <p>Pattern colorspace.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.ComplexShape">
       
        <p>{@code 
          <p>ComplexShape is a Shape that consists of several closed Shapes (contours). It can contain Circle, Ellipse, Rectangle and PathArea. Other shapes are ignored.</p>} {@code 
          <p>Typical usages are the following:</p>} {@code 
          <xmp>[Java] Pdf pdf1 = new Pdf(); Section sec = pdf1.getSections().add(); Color color = new aspose.pdf.generator.Color("Red"); Graph graph = new Graph(100,400); sec.getParagraphs().add(graph); ComplexShape complexShape = new ComplexShape(graph); complexShape.GraphInfo.FillColor = color; complexShape.GraphInfo.IsFilled = true; complexShape.GraphInfo.FillRule = "evenodd"; graph.getShapes().add(complexShape); PathArea path = new PathArea(); complexShape.getShapes().add(path); Line line = new Line(new float [] {200, 80, 200, 100}); path.getShapes().add(line); Arc arc = new Arc(200, 50, 50, 90, 270); path.getShapes().add(arc); float [] curPos = arc.getEndPosition(); line = new Line(new float [] {curPos[0], curPos[1], 200, 20}); path.getShapes().add(line); arc = new Arc(200, 50, 30, 270, 90); path.getShapes().add(arc); Circle circle = new Circle(160, 50, 5); complexShape.getShapes().add(circle); pdf1.save(....);</xmp>}
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.ComplexShape.getShapes">
       
        <p>Returns or specifies a list of closed shapes.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.ComplexShape.setShapes(IList)">
      <param name="IList"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.ComplexShape.#ctor">
       
        <p>Initializes a new instance of the {@code T:Aspose.Pdf.ComplexShape} class.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.ComplexShape.#ctor(Graph)">
       
        <p>Initializes a new instance of the {@code T:Aspose.Pdf.ComplexShape} class.</p> @param parentGraph object. {@code 
        <p> 
          <b>Remarks</b>: This constructor can inherit common property values from the specified {@code T:Aspose.Pdf.Graph} object.
        </p>}
      
      <param name="Graph"/>
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.Curve">
       
        <p>Represents a curve {@code Shape} in a Graph.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>[Java] Pdf pdf1 = new Pdf(); Section sec1 = pdf1.getSections().add(); Graph graph1 = new Graph(sec1,100,400); sec1.getParagraphs().add(graph1); float[] posArr = new float[]{0,0,200,80,300,40,350,90}; Curve curve1 = new Curve(graph1,posArr); graph1.getShapes().add(curve1); pdf1.save(...); [XML] &lt;?xml version="1.0" encoding="utf-8" ?&gt; &lt;Pdf xmlns="Aspose.Pdf"&gt; &lt;Section&gt; &lt;Graph Height="100" Width="400"&gt; &lt;Curve Position="0 0 200 80 300 40 350 90" /&gt; &lt;/Graph&gt; &lt;/Section&gt; &lt;/Pdf&gt;</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Curve.#ctor">
       
        <p>Initializes a new instance of the {@code Curve} class.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Curve.#ctor(float[])">
       
        <p>Initializes a new instance of the {@code Curve} class.</p> @param positionArr The position array of the control points of the curve.There should be four control points,so the length of the array should be eight.
      
      <param name="float[]"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Curve.#ctor(Graph)">
       
        <p>Initializes a new instance of the {@code Curve} class.</p> @param graph The graph object. 
        <p>
          <hr>This constructor can inherit common property values from the specified {@code Graph} object.</hr>
        </p> 
      
      <param name="Graph"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Curve.#ctor(Graph,float[])">
       
        <p>Initializes a new instance of the {@code Curve} class.</p> @param graph The graph object. @param positionArr The position array of the control points of the curve.There should be four control points,so the length of the array should be eight. 
        <p>
          <hr>This constructor can inherit common property values from the specified {@code Graph} object.</hr>
        </p> 
      
      <param name="Graph"/>
      <param name="float[]"/>
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Curve.Position1X">
       
        <p>Gets or sets a float value that indicates the x-coordinate of the control point 1 of the curve.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Curve.Position1Y">
       
        <p>Gets or sets a float value that indicates the y-coordinate of the control point 1 of the curve.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Curve.Position2X">
       
        <p>Gets or sets a float value that indicates the x-coordinate of the control point 2 of the curve.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Curve.Position2Y">
       
        <p>Gets or sets a float value that indicates the y-coordinate of the control point 2 of the curve.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Curve.Position3X">
       
        <p>Gets or sets a float value that indicates the x-coordinate of the control point 3 of the curve.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Curve.Position3Y">
       
        <p>Gets or sets a float value that indicates the y-coordinate of the control point 3 of the curve.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Curve.Position4X">
       
        <p>Gets or sets a float value that indicates the x-coordinate of the control point 4 of the curve.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Curve.Position4Y">
       
        <p>Gets or sets a float value that indicates the y-coordinate of the control point 4 of the curve.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.DocumentAttachment">
       
        <p>Represents a set of document level attachment {@code Paragraph} in a Pdf document. Attachment can be file attachment, stream attachment or note annotation.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>[Java] Pdf pdf1 = new Pdf(); Section sec1 = pdf1.getSections().add(); InputStream fstream = new FileInputStream("c:/word.doc"); DocumentAttachment DocStreamAttachment = new DocumentAttachment(); pdf1.getDocumentAttachments().add(DocStreamAttachment); DocStreamAttachment.setDocumentAttachmentStream ( fstream); DocStreamAttachment.setDocumentAttachmentCotentType ( "doc"); DocumentAttachment DocFileAttachment = new DocumentAttachment(); pdf1.getDocumentAttachments().add(DocFileAttachment); DocFileAttachment.setDocumentAttachmentFile ( "c:/image.jpg"); DocFileAttachment.setDocumentAttachmentCotentType ( "jpeg"); Attachment PageFileAttachment = new Attachment(); sec1.getParagraphs().add(PageFileAttachment); PageFileAttachment.setAttachmentType ( AttachmentType.File); PageFileAttachment.setAttachedFileName ( "c:/text.txt"); PageFileAttachment.setAttachedFileType ( "txt"); PageFileAttachment.setFileIconType ( FileIconType.Graph); PageFileAttachment.setIconColor ( new aspose.pdf.generator.Color("Brown")); fstream = new FileInputStream("c:/readme.txt"); Attachment PageStreamAttachment = new Attachment(); sec1.getParagraphs().add(PageStreamAttachment); PageStreamAttachment.setAttachedStream ( fstream0; PageStreamAttachment.setAttachedFileType ( "txt"); PageStreamAttachment.setAttachmentType ( AttachmentType.File); PageStreamAttachment.setFileIconType ( FileIconType.PaperClip); Attachment PageNoteAttachment = new Attachment(); sec1.getParagraphs().add(PageNoteAttachment); PageNoteAttachment.setAttachmentType ( AttachmentType.Note); PageNoteAttachment.setNoteContent ( "This is a note."); PageNoteAttachment.setIsNoteOpen ( true); pdf1.save("test.pdf"); [XML] &lt;?xml version="1.0" encoding="utf-8" ?&gt; &lt;Pdf xmlns="Aspose.Pdf"&gt; &lt;DocumentAttachment DocumentAttachmentFileName="c:/word.doc" DocumentAttachmentFileType="doc"&gt; &lt;/DocumentAttachment&gt; &lt;DocumentAttachment DocumentAttachmentFileName="c:/image.jpg" DocumentAttachmentFileType="jpeg"&gt; &lt;/DocumentAttachment&gt; &lt;Section&gt; &lt;Attachment AttachmentType="File" AttachedFileName="c:/text.txt" AttachedFileType="txt" FileIconType="Graph" IconColor="Brown"&gt; &lt;/Attachment&gt; &lt;Attachment AttachmentType="File" AttachedFileName="c:/readme.txt" AttachedFileType="txt" FileIconType="PaperClip"&gt; &lt;/Attachment&gt; &lt;Attachment AttachmentType="Note" IsNoteOpen="true" NoteContent="This is a note."&gt; &lt;/Attachment&gt; &lt;/Section&gt; &lt;/Pdf&gt;</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.DocumentAttachment.#ctor">
       
        <p>Initializes a new instance of the {@code DocumentAttachment} class.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.DocumentAttachment.DocumentAttachmentFile">
       
        <p>Gets or sets a string that indicates the DocumentAttachment file name.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.DocumentAttachment.DocumentAttachmentStream">
       
        <p>Gets or sets a stream attaches to the document.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.DocumentAttachment.DocumentAttachmentContentType">
       
        <p>Gets or sets a string that indicates the MIME type of the attached file. When</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.DocumentAttachments">
       
        <p>Represents a set of document level attachment {@code Paragraph} in a Pdf document. Attachment can be file attachment, stream attachment or note annotation.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>[Java] Pdf pdf1 = new Pdf(); Section sec1 = pdf1.getSections().add(); InputStream fstream = new FileInputStream("c:/word.doc"); DocumentAttachment DocStreamAttachment = new DocumentAttachment(); pdf1.getDocumentAttachments().add(DocStreamAttachment); DocStreamAttachment.setDocumentAttachmentStream ( fstream); DocStreamAttachment.setDocumentAttachmentCotentType ( "doc"); DocumentAttachment DocFileAttachment = new DocumentAttachment(); pdf1.getDocumentAttachments.add(DocFileAttachment); DocFileAttachment.setDocumentAttachmentFile ( "c:/image.jpg"); DocFileAttachment.setDocumentAttachmentCotentType ( "jpeg"0; Attachment PageFileAttachment = new Attachment(); sec1.getParagraphs.add(PageFileAttachment); PageFileAttachment.setAttachmentType ( AttachmentType.File); PageFileAttachment.setAttachedFileName ( "c:/text.txt"); PageFileAttachment.setAttachedFileType ( "txt"); PageFileAttachment.setFileIconType ( FileIconType.Graph); PageFileAttachment.setIconColor ( new aspose.pdf.generator.Color("Brown")); fstream = new FileInputStream("c:/readme.txt"); Attachment PageStreamAttachment = new Attachment(); sec1.getParagraphs().add(PageStreamAttachment); PageStreamAttachment.setAttachedStream ( fstream); PageStreamAttachment.setAttachedFileType ( "txt"); PageStreamAttachment.setAttachmentType ( AttachmentType.File); PageStreamAttachment.setFileIconType ( FileIconType.PaperClip); Attachment PageNoteAttachment = new Attachment(); sec1.getParagraphs().add(PageNoteAttachment); PageNoteAttachment.setAttachmentType ( AttachmentType.Note); PageNoteAttachment.setNoteContent ( "This is a note."); PageNoteAttachment.setIsNoteOpen ( true); pdf1.save("test.pdf"); [XML] &lt;?xml version="1.0" encoding="utf-8" ?&gt; &lt;Pdf xmlns="Aspose.Pdf"&gt; &lt;DocumentAttachment DocumentAttachmentFileName="c:/word.doc" DocumentAttachmentFileType="doc"&gt; &lt;/DocumentAttachment&gt; &lt;DocumentAttachment DocumentAttachmentFileName="c:/image.jpg" DocumentAttachmentFileType="jpeg"&gt; &lt;/DocumentAttachment&gt; &lt;Section&gt; &lt;Attachment AttachmentType="File" AttachedFileName="c:/text.txt" AttachedFileType="txt" FileIconType="Graph" IconColor="Brown"&gt; &lt;/Attachment&gt; &lt;Attachment AttachmentType="File" AttachedFileName="c:/readme.txt" AttachedFileType="txt" FileIconType="PaperClip"&gt; &lt;/Attachment&gt; &lt;Attachment AttachmentType="Note" IsNoteOpen="true" NoteContent="This is a note."&gt; &lt;/Attachment&gt; &lt;/Section&gt; &lt;/Pdf&gt;</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.DocumentAttachments.add(DocumentAttachment)">
       
        <p>Adds a new {@code DocumentAttachment} object into the collection.</p> @param docattachment The {@code DocumentAttachment} object to be added.
      
      <param name="DocumentAttachment"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.DocumentAttachments.insert(DocumentAttachment,DocumentAttachment)">
       
        <p>Inserts a new {@code DocumentAttachment} object into the collection after specified {@code DocumentAttachment} object.</p> @param attachmentToInsertAfter The {@code DocumentAttachment} object to insert after. If this object is null, the new object will be inserted as the first member. @param newAttachment The {@code DocumentAttachment} object to be inserted.
      
      <param name="DocumentAttachment"/>
      <param name="DocumentAttachment"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.DocumentAttachments.insert(int,DocumentAttachment)">
       
        <p>Inserts a new {@code DocumentAttachment} object into the collection after specified {@code DocumentAttachment} object.</p> @param index The zero-based index at which {@code DocumentAttachment} object should be inserted. @param attachment The {@code DocumentAttachment} object to be inserted.
      
      <param name="int"/>
      <param name="DocumentAttachment"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.DocumentAttachments.remove(DocumentAttachment)">
       
        <p>Removes a {@code DocumentAttachment} object from the collection.</p> @param removedAttach The {@code DocumentAttachment} object to be romoved.
      
      <param name="DocumentAttachment"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.DocumentAttachments.remove(int)">
       
        <p>Removes a {@code DocumentAttachment} object from the collection.</p> @param index The index of the {@code DocumentAttachment} object to be romoved.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.DocumentAttachments.get_Item(int)">
       
        <p>Gets or sets a {@code DocumentAttachment} object from the collection according to DocumentAttachment index.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.DocumentAttachments.set_Item(int,DocumentAttachment)">
      <param name="int"/>
      <param name="DocumentAttachment"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.DocumentAttachments.#ctor"/>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.Ellipse">
       
        <p>Represents a Ellipse {@code Shape} in a Pdf document.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>[Java] Pdf pdf1 = new Pdf(); Section sec1 = pdf1.getSections().add(); Graph graph1 = new Graph(sec1,400,100); sec1.getParagraphs().add(graph1); aspose.pdf.generator.Ellipse ellipse1 = new aspose.pdf.generator.Ellipse(graph1,50,10,100,50); graph1.getShapes().add(ellipse1); pdf1.save("d:/test/test.pdf"); [XML] &lt;Pdf xmlns="Aspose.Pdf"&gt; &lt;Section&gt; &lt;Graph Width="400" Height="100"&gt; &lt;Ellipse Position="50 10 100 50" /&gt; &lt;/Graph&gt; &lt;/Section&gt; &lt;/Pdf&gt;</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Ellipse.#ctor">
       
        <p>Initializes a new instance of the {@code Ellipse} class.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Ellipse.#ctor(float,float,float,float)">
       
        <p>Initializes a new instance of the {@code Ellipse} class.</p> @param left The left position of the ellipse. @param bottom The bottom position of the ellipse. @param height The height of the ellipse. @param width The width of the ellipse.
      
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Ellipse.#ctor(Graph)">
       
        <p>Initializes a new instance of the {@code Ellipse} class.</p> @param parentGraph The specified {@code Graph} object. 
        <p>
          <hr>This constructor can inherit common property values from the specified {@code Graph} object.</hr>
        </p> 
      
      <param name="Graph"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Ellipse.#ctor(Graph,float,float,float,float)">
       
        <p>Initializes a new instance of the {@code Ellipse} class.</p> @param parentGraph The specified {@code Graph} object. @param left The left position of the ellipse. @param bottom The bottom position of the ellipse. @param height The height of the ellipse. @param width The width of the ellipse.
        <p>
          <hr>This constructor can inherit common property values from the specified {@code Graph} object.</hr>
        </p> 
      
      <param name="Graph"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Ellipse.Left">
       
        <p>Gets or sets a float value that indicates the left position of the ellipse.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Ellipse.Bottom">
       
        <p>Gets or sets a float value that indicates the bottom position of the ellipse.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Ellipse.Width">
       
        <p>Gets or sets a float value that indicates the width of the ellipse.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Ellipse.Height">
       
        <p>Gets or sets a float value that indicates the height of the ellipse.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.EndNote">
       
        <p>Represents the EndNote of Segment{@code Segment}.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>[Java] //Create pdf document Pdf pdf1 = new Pdf(); //Add a section into the pdf document aspose.pdf.generator.Section sec1 = pdf1.getSections().add(); //Create a new text paragraph Text text1 = new Text(); // Create a segment object and pass string as argument Segment seg1 = new Segment("dog"); // Create an EndNote object and pass string as argument to its constructor EndNote endnote1 = new EndNote("dog is an animal"); // add EndNote to segment object seg1.EndNote = endnote1; // Add segment to segments collection of Text paragraph text1.getSegments().add(seg1); //Add text paragraph to the Paragraphs collection of section object sec1.getParagraphs().add(text1); //Save the pdf document pdf1.save("D:\\pdftest\\EndNoteTest_code.pdf"); [XML] &lt;?xml version="1.0" encoding="utf-8" ?&gt; &lt;Pdf xmlns="Aspose.Pdf"&gt; &lt;Section PageHeight="1684"&gt; &lt;Text MarginTop="0"&gt; &lt;Segment&gt;dog&lt;/Segment&gt; &lt;Segment&gt; &lt;EndNote fontsize="7"&gt; &lt;Segment&gt; dog is an animal&lt;/Segment&gt; &lt;/EndNote&gt; &lt;/Segment&gt; &lt;/Text&gt; &lt;/Section&gt; &lt;/Pdf&gt;</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.EndNote.getNumberingContinuation">
       
        <p>Get or set a NumberingContinuationType value that indicates the continuation type of end note's number.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.EndNote.setNumberingContinuation(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.EndNote.#ctor">
       
        <p>Constructor without content for EndNote object</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.EndNote.#ctor(String)">
       
        <p>constructor with content for EndNote object</p> 
      
      <param name="String"/>
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.EndNote.EndNotePositioning">
       
        <p>Get or set a NEndNotePositioningType value that indicates the position of the end note.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.enums.AnnotationType"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.AnnotationType.Note"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.AnnotationType.None">
       
        <p>The attachment is a free text note.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.AnnotationType.Line">
       
        <p>The attachment is a line text note.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.AnnotationType.Circle">
       
        <p>The attachment is a circle note.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.AnnotationType.Square">
       
        <p>The attachment is a Square note.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.AnnotationType.TextMarkup">
       
        <p>The attachment is a Square note.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.AnnotationType.FreeText">
       
        <p>The attachment is a free text note.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.AnnotationType.Sound">
       
        <p>The attachment is a sound note.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.AnnotationType.Video">
       
        <p>The attachment is a video note.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.AnnotationType.Flash">
       
        <p>The attachment is flash note.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.enums.AttachmentType"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.AttachmentType.File">
       
        <p>The attachment is a file.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.AttachmentType.Note">
       
        <p>The attachment is a note.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.AttachmentType.None">
       
        <p>No attachment.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.enums.BorderCornerStyle"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.BorderCornerStyle.None">
       
        <p>None border style.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.BorderCornerStyle.Round">
       
        <p>Round border style.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.enums.BorderStyle">
       
        <p>Enumerates the border styles for page border,text border and table border. Note that dash style is not included in this enum. Dash can be set in {@code GraphInfo}.</p>
        <p>
          <hr>More border styles will be supported later.</hr>
        </p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.BorderStyle.None">
       
        <p>None border style.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.BorderStyle.Normal">
       
        <p>Normal border style.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.BorderStyle.Double">
       
        <p>Double border style.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.enums.BoxHorizontalAlignmentType"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.BoxHorizontalAlignmentType.None">
       
        <p>No alignment type is used. This means the box is positioned using coordinates.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.BoxHorizontalAlignmentType.Left">
       
        <p>Left alignment.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.BoxHorizontalAlignmentType.Center">
       
        <p>Center alignment.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.BoxHorizontalAlignmentType.Right">
       
        <p>Right alignment.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.enums.BoxHorizontalPositioningType"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.BoxHorizontalPositioningType.Margin">
       
        <p>The distance is measured from the top page margin.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.BoxHorizontalPositioningType.Page">
       
        <p>The distance is measured from the top edge of the page.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.BoxHorizontalPositioningType.Column">
       
        <p>The distance is measured from the left side of the column.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.enums.BoxVerticalAlignmentType"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.BoxVerticalAlignmentType.None">
       
        <p>No alignment type is used. This means the box is positioned using coordinates.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.BoxVerticalAlignmentType.Top">
       
        <p>Top alignment</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.BoxVerticalAlignmentType.Center">
       
        <p>Center alignment.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.BoxVerticalAlignmentType.Bottom">
       
        <p>Bottom alignment.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.enums.BoxVerticalPositioningType"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.BoxVerticalPositioningType.Margin">
       
        <p>The distance is measured from the left page margin.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.BoxVerticalPositioningType.Page">
       
        <p>The distance is measured from the left edge of the page.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.BoxVerticalPositioningType.Paragraph">
       
        <p>The distance is measured from the top of the paragraph that contains the anchor.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.enums.CcittSubFormat"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.CcittSubFormat.Group31D">
       
        <p>CCITT group3 1D format</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.CcittSubFormat.Group32D">
       
        <p>CCITT group3 2D format</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.CcittSubFormat.Group4">
       
        <p>CCITT group4 format</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.CcittSubFormat.UnKnown">
       
        <p></p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.enums.CellBackgroundAlignment"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.CellBackgroundAlignment.TopLeft">
       
        <p>Background image is drawing from the top left corner and only fitted part is visible.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.CellBackgroundAlignment.TopRight">
       
        <p>Background image is drawing from the top right corner and whole image is visible.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.CellBackgroundAlignment.BottomRight">
       
        <p>Background image is drawing from bottom right corner and whole image is visible.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.CellBackgroundAlignment.BottomLeft">
       
        <p>Background image is drawing to fit cell.</p>
        <p>Background image is drawing from bottom left corner and whole image is visible.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.CellBackgroundAlignment.Stretch"/>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.enums.ColumnAdjustmentType"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.ColumnAdjustmentType.AutoFitToContent">
       
        <p>AutoFit to content of cell.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.ColumnAdjustmentType.AutoFitToWindow">
       
        <p>AutoFit to page width.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.ColumnAdjustmentType.Customized">
       
        <p>Specified by {@code Table.ColumnWidths} manually.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.enums.DestinationType">
       
        <p>Enumerates the destination types for internal and external links.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.DestinationType.Retain">
       
        <p>Retains the original type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.DestinationType.FitPage">
       
        <p>Fits the page.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.DestinationType.FitWidth">
       
        <p>Fits the width.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.DestinationType.FitHeight">
       
        <p>Fits the height</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.DestinationType.FitBox">
       
        <p>Fits the box</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.enums.EndNotePositioningType">
       
        <p>Enumerates the positioning types for endnote.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.EndNotePositioningType.EndOfSection">
       
        <p>The end note will be placed at end of the current section.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.EndNotePositioningType.EndOfDoc">
       
        <p>The end note will be placed at end of the current Pdf document.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.enums.FileIconType"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.FileIconType.Graph">
       
        <p>Graph type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.FileIconType.PaperClip">
       
        <p>PaperClip type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.FileIconType.PushPin">
       
        <p>PushPin type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.FileIconType.Tag">
       
        <p>Tag type.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.enums.FormFieldType"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.FormFieldType.PushButton">
       
        <p>Button formfield type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.FormFieldType.RadioButton">
       
        <p>RadioButton formfield type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.FormFieldType.List">
       
        <p>List formfield type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.FormFieldType.CheckBox">
       
        <p>CheckBox formfield type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.FormFieldType.Combo">
       
        <p>Combo formfield type</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.FormFieldType.Text">
       
        <p>Text formfield type.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.enums.GutterPlacementType">
       
        <p>Gets or sets a enum value that indicates the placement type of page gutter, the default value is None.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.GutterPlacementType.None">
       
        <p>No Gutter.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.GutterPlacementType.Left">
       
        <p>Place Left.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.GutterPlacementType.Top">
       
        <p>Place Top.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.GutterPlacementType.Right">
       
        <p>Place Right.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.GutterPlacementType.Inner">
       
        <p>Place Inner.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.GutterPlacementType.Outer">
       
        <p>Place Outer.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.GutterPlacementType.Bottom">
       
        <p>Place Outer.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.enums.HeaderFooterTargetPages"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.HeaderFooterTargetPages.All">
       
        <p>It means that header or footer not aimed to all( not only odd or even) pages</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.HeaderFooterTargetPages.Even">
       
        <p>It means that header or footer aimed to only even pages</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.HeaderFooterTargetPages.Odd">
       
        <p>It means that header or footer aimed to only odd pages</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.enums.HeadingType"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.HeadingType.Arab">
       
        <p>Arab type,for example, 1,1.1,...</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.HeadingType.RomanUpper">
       
        <p>Roman upper type, for example, I,I.II, ...</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.HeadingType.RomanLower">
       
        <p>Roman lower type, for example, i,i.ii, ...</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.HeadingType.EnglishUpper">
       
        <p>English upper type, for example, A,A.B, ...</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.HeadingType.EnglishLower">
       
        <p>English lower type, for example, a,a.b, ...</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.enums.HorizontalAlignmentType"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.HorizontalAlignmentType.Left"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.HorizontalAlignmentType.Center"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.HorizontalAlignmentType.Right"/>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.enums.HyperlinkType"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.HyperlinkType.File">
       
        <p>Links to another file.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.HyperlinkType.Local">
       
        <p>Links to a page in local Pdf document.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.HyperlinkType.Pdf">
       
        <p>Links to a page in another Pdf document.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.HyperlinkType.Web">
       
        <p>Links to a web page.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.HyperlinkType.None">
       
        <p>No links.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.enums.ImageFileType"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.ImageFileType.Ccitt">
       
        <p>Ccitt type</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.ImageFileType.Gif">
       
        <p>Gif type</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.ImageFileType.Jpeg">
       
        <p>Jpeg type</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.ImageFileType.Png">
       
        <p>Png type</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.ImageFileType.Tiff">
       
        <p>Tiff type</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.ImageFileType.Bmp">
       
        <p>Bmp type</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.ImageFileType.Emf">
       
        <p>Emf type</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.ImageFileType.Exif">
       
        <p>Exif type</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.ImageFileType.Icon">
       
        <p>Icon type</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.ImageFileType.Wmf">
       
        <p>Wmf type</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.ImageFileType.MemoryBmp">
       
        <p>MemoryBmp type {@code
          <BLOCKQUOTE class="dtBlock"> 
            <Font color="red">NOTE: This enum member is now obsolete.</Font>
          </BLOCKQUOTE>} {@code 
          <BLOCKQUOTE class="dtBlock">Momory image can be supported by Image.ImageInfo.ImageStream. If BMP is used, just set the type to Bmp. It will be removed 12 months later since release 3.0.0.0 in April 2006. Aspose apologizes for any inconvenience you may have experienced.</BLOCKQUOTE>}
        </p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.ImageFileType.Unknown">
       
        <p>Unknown type</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.ImageFileType.MemoryUnpacked"/>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.enums.ImageOpenType"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.ImageOpenType.File">
       
        <p>Opens the image from a file.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.ImageOpenType.Memory">
       
        <p>Opens the image from memory directly. Only JPEG and CCITT image are supported.You can also use ImageFileType.MemoryBmp which supports all image type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.ImageOpenType.Url">
       
        <p>Opens the image from a url directly. Only JPEG and CCITT image are supported. You can also use URL as file name in File open type which supports all image type.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.enums.InconsistentXmlImageParamsHandlingTypes">
       
        <p>During loading of logical PDF document model from XML (with BindXML method) can be found inconsistent combinations of image attributes . F.e. setting Height and FixedHeight together with usage of image formats where sizes are set inside image bynary content itself, can lead to unexpected or weird distortions of result file. This parameter allows define processing behaviour in such situations. By default it's set as PutToConsistentStateIfPossibleOtherwiseThrowException.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.InconsistentXmlImageParamsHandlingTypes.IgnoreInconsistencyAndProcessAsUsually">
       
        <p>In such case inconsistency will be ignored. It can be used f.e. when You want to analyse and correct situation yourself after loading, in custom code via public API.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.InconsistentXmlImageParamsHandlingTypes.PutToConsistentStateIfPossibleOtherwiseIgnore">
       
        <p>in such case loader will try analyse and correct situation itself (with correction of loaded image attributes immediately after loading from XML). If correction for some reason impossible, inconsistency will be ignored (attributes will be left as it was loaded from XML itself)</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.InconsistentXmlImageParamsHandlingTypes.PutToConsistentStateIfPossibleOtherwiseThrowException">
       
        <p>in such case loader will try analyse and correct situation itself (with correctiion of loaded image attributes immediately after loading from XML). If correction for some reason impossible, exception that describes detected inconsistency will be thrown.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.InconsistentXmlImageParamsHandlingTypes.AllwaysThrowException">
       
        <p>in such case will be allways thrown exception that describes detected inconsistency</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.enums.LineSideStyle">
       
        <p>Enumerates the line side tyles (mainly for lines of Line Annotations).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.LineSideStyle.Square"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.LineSideStyle.Circle"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.LineSideStyle.Diamond"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.LineSideStyle.OpenArrow"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.LineSideStyle.ClosedArrow"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.LineSideStyle.None"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.LineSideStyle.Butt"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.LineSideStyle.ReversedOpenArrow"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.LineSideStyle.ReversedClosedArrow"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.LineSideStyle.Slash"/>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.enums.LinkActionType"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.LinkActionType.ExcuteMenuItem">
       
        <p>Excute a menu item.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.LinkActionType.OpenFile">
       
        <p>Open a file.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.LinkActionType.OpenWebLink">
       
        <p>Open a web link.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.enums.ListType"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.ListType.TableOfContents">
       
        <p>Table of contents.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.ListType.ListOfTables">
       
        <p>List of tables.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.ListType.ListOfFigures">
       
        <p>List of figures.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.enums.LongSideAlignmentType"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.LongSideAlignmentType.BEGIN"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.LongSideAlignmentType.CENTER"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.LongSideAlignmentType.END"/>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.enums.MarkupStyle">
       
        <p>Enumerates the text markup style for line annotations</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MarkupStyle.Highlight"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MarkupStyle.Underline"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MarkupStyle.Squiggly"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MarkupStyle.StrikeOut"/>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.FileOrganizerOpenOrganizer">
       
        <p>File-&gt;Organizer-&gt;Open Organizer</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.FileCreatePDFFromScanner">
       
        <p>File-&gt;Create PDF-&gt;From Scanner</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.FileCreatePDFFromWebPage">
       
        <p>File-&gt;Create PDF-&gt;From Web Page</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.FileSaveAs">
       
        <p>File-&gt;Save As</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.FileSaveCopy">
       
        <p>File-&gt;Save a Copy</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.FileAttachToEmail">
       
        <p>File-&gt;Attach to Email</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.FileClose">
       
        <p>File-&gt;Close</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.FileProperties">
       
        <p>File-&gt;Properties</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.FilePrintSetup">
       
        <p>File-&gt;Print Setup</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.FilePrint">
       
        <p>File-&gt;Print</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.FileExit">
       
        <p>File-&gt;Exit</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.EditCheckSpelling">
       
        <p>Edit-&gt;Check Spelling</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.EditFind">
       
        <p>Edit-&gt;Find</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.EditSearch">
       
        <p>Edit-&gt;Search</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.EditPreferences">
       
        <p>Edit-&gt;Preferences</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.ViewGoToFirstPage">
       
        <p>View-&gt;Go To-&gt;First Page</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.ViewGoToPreviousPage">
       
        <p>View-&gt;Go To-&gt;Previous Page</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.ViewGoToNextPage">
       
        <p>View-&gt;Go To-&gt;Next Page</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.ViewGoToLastPage">
       
        <p>View-&gt;Go To-&gt;Last Page</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.ViewGoToPage">
       
        <p>View-&gt;Go To-&gt;Page</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.ViewGoToPreviousView">
       
        <p>View-&gt;Go To-&gt;Previous View</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.ViewGoToNextView">
       
        <p>View-&gt;Go To-&gt;Next View</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.ViewZoomZoomTo">
       
        <p>View-&gt;Zoom-&gt;Zoom To</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.ViewZoomActualSize">
       
        <p>View-&gt;Zoom-&gt;Actual Size</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.ViewZoomFitPage">
       
        <p>View-&gt;Zoom-&gt;Fit Page</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.ViewZoomFitWidth">
       
        <p>View-&gt;Zoom-&gt;Fit Width</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.ViewZoomFitHeight">
       
        <p>View-&gt;Zoom-&gt;Fit Height</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.ViewZoomFitVisible">
       
        <p>View-&gt;Zoom-&gt;Fit Visible</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.ViewPageDisplaySinglePage">
       
        <p>View-&gt;Page Display-&gt;Single Page</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.ViewPageDisplaySinglePageContinuous">
       
        <p>View-&gt;Page Display-&gt;Single Page Continuous</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.ViewPageDisplayTwoUp">
       
        <p>View-&gt;Page Display-&gt;Two-Up</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.ViewPageDisplayTwoUpContinuous">
       
        <p>View-&gt;Page Display-&gt;Two-Up Continuous</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.ViewToolBarsAdvancedEditing">
       
        <p>View-&gt;ToolBars-&gt;Advanced Editing</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.ViewToolBarsCommentMarkup"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.ViewToolBarsEdit">
       
        <p>View-&gt;ToolBars-&gt;Edit</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.ViewToolBarsFile">
       
        <p>View-&gt;ToolBars-&gt;File</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.ViewToolBarsFind">
       
        <p>View-&gt;ToolBars-&gt;Find</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.ViewToolBarsForms">
       
        <p>View-&gt;ToolBars-&gt;Forms</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.ViewToolBarsMeasuring">
       
        <p>View-&gt;ToolBars-&gt;Measuring</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.ViewToolBarsObjectData">
       
        <p>View-&gt;ToolBars-&gt;Object Data</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.ViewToolBarsPageDisplay">
       
        <p>View-&gt;ToolBars-&gt;Page Display</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.ViewToolBarsPageNavigation">
       
        <p>View-&gt;ToolBars-&gt;Page Navigation</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.ViewToolBarsPrintProduction">
       
        <p>View-&gt;ToolBars-&gt;Print Production</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.ViewToolBarsRedAction">
       
        <p>View-&gt;ToolBars-&gt;RedAction</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.ViewToolBarsSelectZoom"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.ViewToolBarsTasks">
       
        <p>View-&gt;ToolBars-&gt;Tasks</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.ViewToolBarsTypewriter">
       
        <p>View-&gt;ToolBars-&gt;Typewriter</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.ViewToolBarsPropertiesBar">
       
        <p>View-&gt;ToolBars-&gt;Properties Bar</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.ViewNavigationPanelsArticles">
       
        <p>View-&gt;Navigation Panels-&gt;Articles</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.ViewNavigationPanelsAttachments">
       
        <p>View-&gt;Navigation Panels-&gt;Attachments</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.ViewNavigationPanelsBookmarks">
       
        <p>View-&gt;Navigation Panels-&gt;Bookmarks</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.ViewNavigationPanelsComments">
       
        <p>View-&gt;Navigation Panels-&gt;Comments</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.ViewNavigationPanelsFields">
       
        <p>View-&gt;Navigation Panels-&gt;Fields</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.ViewNavigationPanelsLayers">
       
        <p>View-&gt;Navigation Panels-&gt;Layers</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.ViewNavigationPanelsModelTree">
       
        <p>View-&gt;Navigation Panels-&gt;Model Tree</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.ViewNavigationPanelsPages">
       
        <p>View-&gt;Navigation Panels-&gt;Pages</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.ViewNavigationPanelsSignatures">
       
        <p>View-&gt;Navigation Panels-&gt;Signatures</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.DocumentInsertPages">
       
        <p>Document-&gt;Insert Pages</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.DocumentExtractPages">
       
        <p>Document-&gt;Extract Pages</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.DocumentDeletePages">
       
        <p>Document-&gt;Delete Pages</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.DocumentCropPages">
       
        <p>Document-&gt;Crop Pages</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.DocumentRotatePages">
       
        <p>Document-&gt;Rotate Pages</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.DocumentAttachFile">
       
        <p>Document-&gt;Attach a File</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.WindowFullScreenMode">
       
        <p>Window-&gt;Full Screen Mode</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.BookmarksExpandCurrentBookmark">
       
        <p>Bookmarks-&gt;Expand Current Bookmark</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.BookmarksHighlightCurrentBookmark">
       
        <p>Bookmarks-&gt;Highlight Current Bookmark</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.PageImagesPrintPages">
       
        <p>Page Images-&gt;Print Pages</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.MiscellaneousZoomIn">
       
        <p>Miscellaneous-&gt;Zoom In</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.MenuItemType.MiscellaneousZoomOut">
       
        <p>Miscellaneous-&gt;Zoom Out</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.enums.NoteIconType"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.NoteIconType.Comment">
       
        <p>Comment type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.NoteIconType.Insert">
       
        <p>Insert type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.NoteIconType.Paragraph">
       
        <p>Paragraph type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.NoteIconType.Note">
       
        <p>Note type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.NoteIconType.NewParagraph">
       
        <p>NewParagraph type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.NoteIconType.Key">
       
        <p>Key type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.NoteIconType.Help">
       
        <p>Help type.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.enums.NoteWindowPositioningType"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.NoteWindowPositioningType.Auto">
       
        <p>The popup window of note be positioned automatically.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.NoteWindowPositioningType.Absolute">
       
        <p>The popup window of note be absolute positioned.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.NoteWindowPositioningType.NoteRelative">
       
        <p>The popup window of note be positioned relative to the note's position.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.enums.NumberingContinuationType"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.NumberingContinuationType.ContinuationInDocument">
       
        <p>All the foot or end notes'numbers in the same pdf document would be continuerable.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.NumberingContinuationType.ContinuationInSection">
       
        <p>All the foot or end notes'numbers in the same section would be continuerable.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.NumberingContinuationType.ContinuationInPage">
       
        <p>All the footnote numbers in the same page would be continuerable.This type is not suitable for end notes</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.enums.NumberingFormatType"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.NumberingFormatType.Arab">
       
        <p>Arab type,for example, 1,1.1,...</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.NumberingFormatType.RomanUpper">
       
        <p>Roman upper type, for example, I,I.II, ...</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.NumberingFormatType.RomanLower">
       
        <p>Roman lower type, for example, i,i.ii, ...</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.NumberingFormatType.EnglishUpper">
       
        <p>English upper type, for example, A,A.B, ...</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.NumberingFormatType.EnglishLower">
       
        <p>English lower type, for example, a,a.b, ...</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.enums.OpenType">
       
        <p>Enumerates the document open types.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.OpenType.Auto">
       
        <p>Opens automatically.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.OpenType.Bookmarks">
       
        <p>Opens in bookmarks.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.OpenType.Thumbnails">
       
        <p>Opens in thumbnails.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.OpenType.FullScreen">
       
        <p>Opens in full screen.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.OpenType.None">
       
        <p>Opens nothing.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.enums.PageNumberFormatType"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.PageNumberFormatType.Arab">
       
        <p>the format of the page number is Arab</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.PageNumberFormatType.RomanUpper">
       
        <p>the format of the page number is upper Roman case</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.PageNumberFormatType.RomanLower">
       
        <p>the format of the page number is lower Roman case</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.PageNumberFormatType.EnglishUpper">
       
        <p>the format of the page number is upper English case</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.PageNumberFormatType.EnglishLower">
       
        <p>the format of the page number is lower English case</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.enums.PageTransitionType">
       
        <p>Enumerates transition types for page transition effects when revealing the new page.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.PageTransitionType.None">
       
        <p>No transition.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.PageTransitionType.Split">
       
        <p>Two lines sweep across the screen.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.PageTransitionType.Blinds">
       
        <p>Multiple lines,evenly spaced across the screen,synchronously sweep in the same direction.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.PageTransitionType.Box">
       
        <p>A rectangular box sweeps inward from the edges of the page or outward from the center.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.PageTransitionType.Wipe">
       
        <p>A single line sweeps across the screen from one edge to the other.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.PageTransitionType.Dissolve">
       
        <p>The old page dissolves gradually.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.PageTransitionType.Glitter">
       
        <p>Similar to Dissolve except that the effect sweeps across the page in a wide band moving from one side of the screen to the other.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.PageTransitionType.Replace">
       
        <p>The new page simply replaces the old one with no special transition effect.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.enums.PdfConformance"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.PdfConformance.None">
       
        <p>No conformance</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.PdfConformance.PdfA1B">
       
        <p>Part 1 of the PDF/A ISO standard [ISO 19005-1:2005] is a constrained form of Adobe PDF version 1.4 intended to be suitable for long-term preservation of page-oriented documents for which PDF is already being used in practice. Level B conformance (PDF-1b) indicates minimal compliance to ensure that the rendered visual appearance of a conforming file is preservable over the long term. Level A conformance (PDF-1a) indicates complete compliance with the ISO 19005-1 requirements, including those related to structural and semantic properties of documents.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.PdfConformance.PdfA1A">
       
        <p>Part 1 of the PDF/A ISO standard [ISO 19005-1:2005] is a constrained form of Adobe PDF version 1.4 intended to be suitable for long-term preservation of page-oriented documents for which PDF is already being used in practice. Level B conformance (PDF-1b) indicates minimal compliance to ensure that the rendered visual appearance of a conforming file is preservable over the long term. Level A conformance (PDF-1a) indicates complete compliance with the ISO 19005-1 requirements, including those related to structural and semantic properties of documents.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.enums.PositioningType"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.PositioningType.Auto">
       
        <p>Positioning the paragraph automatically by page renderer engine. This means customer positioning is not used.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.PositioningType.PageRelative">
       
        <p>The position of paragraph is page relative.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.PositioningType.ColumnRelative">
       
        <p>The position of paragraph is column relative.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.PositioningType.ParagraphRelative">
       
        <p>The position of paragraph is paragraph relative.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.enums.RenderingMode"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.RenderingMode.FillText"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.RenderingMode.StrokeText"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.RenderingMode.FillStrokeText"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.RenderingMode.InvisibleText"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.RenderingMode.FillClip"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.RenderingMode.StrokeClip"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.RenderingMode.FillStrokeClip"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.RenderingMode.Clip"/>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.enums.TabAlignmentType">
       
        <p>Enumerates the tab alignmenttypes.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.TabAlignmentType.Left"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.TabAlignmentType.Center"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.TabAlignmentType.Right"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.TabAlignmentType.Decimal"/>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.enums.TabLeaderType">
       
        <p>Enumerates the tab leader types.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.TabLeaderType.Solid">
       
        <p>Solid tab leader.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.TabLeaderType.Dash">
       
        <p>Dash tab leader.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.TabLeaderType.Dot">
       
        <p>Dot tab leader.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.TabLeaderType.None">
       
        <p>No tab leader.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.enums.TextAlignmentType"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.TextAlignmentType.Left">
       
        <p>Left alignment.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.TextAlignmentType.Center">
       
        <p>Center alignment.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.TextAlignmentType.Right">
       
        <p>Right alignment.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.TextAlignmentType.Justify">
       
        <p>Justify alignment. Text will be aligned on both left and right margins.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.TextAlignmentType.FullJustify">
       
        <p>Similar to 'Justify' alignment, except that the very last line will only be left-aligned in 'Justify' mode, while in 'FullJustify' mode all lines will be left- and right-aligned.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.enums.TextDirection"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.TextDirection.RIGHT"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.TextDirection.DOWN"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.TextDirection.LEFT"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.TextDirection.UP"/>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.enums.VerticalAlignmentType"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.VerticalAlignmentType.Top">
       
        <p>Top alignment.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.VerticalAlignmentType.Center">
       
        <p>Center alignment type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.VerticalAlignmentType.Bottom">
       
        <p>Bottom alignment type.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.enums.VerticalTextRotationType"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.VerticalTextRotationType.None">
       
        <p>No rotation type is used. This means rotation angle is 0.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.VerticalTextRotationType.ClockWise">
       
        <p>90.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.enums.VerticalTextRotationType.AntiClockWise">
       
        <p>-90.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.FloatingBox">
       
        <p>Represents a FloatingBox {@code Paragraph} in a Pdf document. FloatingBox is custom positioned.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>[Java] //Create pdf document Pdf pdf1 = new Pdf(); //Add a section into the pdf document aspose.pdf.generator.Section section1 = pdf1.getSections().add(); //Create a FloatingBox object FloatingBox FloatingBox1 = new FloatingBox(108, 80); //Add FloatingBox to Paragraphs collection of section object section1.getParagraphs().add(FloatingBox1); // Specify the box horizontal positioning type to measured distance from the top page margin FloatingBox1.setBoxHorizontalPositioning ( BoxHorizontalPositioningType.Margin); // Set the box Horizonatl positioning alignment as Right aligned FloatingBox1.setBoxHorizontalAlignment ( BoxHorizontalAlignmentType.Right); // Specify the box Vertical positioning type to measured distance from the top edge of the page FloatingBox1.getBoxVerticalPositioning ( BoxVerticalPositioningType.Page); // Set the box Vertical positioning alignment as Centered aligned FloatingBox1.setBoxVerticalAlignment ( BoxVerticalAlignmentType.Center); // add a new text paragraph to paragraphs collection of FloatingBox object FloatingBox1.getParagraphs().add(new Text("This is a test for floating text box.")); //Save the pdf document pdf1.save("D:\\pdftest\\FloatingBoxTest_code.pdf"); [XML] &lt;?xml version="1.0" encoding="utf-8" ?&gt; &lt;Pdf xmlns="Aspose.Pdf"&gt; &lt;Section&gt; &lt;FloatingBox Width="1.5inch" Height="80" BoxHorizontalPositioning="Margin" BoxHorizontalAlignment="Right" BoxVerticalPositioning="Page" BoxVerticalAlignment="Center"&gt; &lt;Text&gt;&lt;Segment&gt;This is a test floating text box.&lt;/Segment&gt;&lt;/Text&gt; &lt;/FloatingBox&gt; &lt;/Section&gt; &lt;/Pdf&gt;</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.FloatingBox.getBoxWidth">
       
        <p>Gets or sets a float value that indicates the width of the floating box.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.FloatingBox.setBoxWidth(float)">
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.FloatingBox.getBoxHeight">
       
        <p>Gets or sets a float value that indicates the height of the floating box.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.FloatingBox.setBoxHeight(float)">
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.FloatingBox.getBoxHorizontalAlignment">
       
        <p>Gets or sets a {@code BoxHorizontalAlignmentType} object that indicates the horizontal alignment type of the floating box.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.FloatingBox.setBoxHorizontalAlignment(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.FloatingBox.getBoxHorizontalAlignmentType">
       
        <p>Gets or sets a {@code HorizontalAlignment} object that indicates the horizontal alignment type of the floating box.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.FloatingBox.setBoxHorizontalAlignmentType(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.FloatingBox.getBoxVerticalAlignment">
       
        <p>Gets or sets a {@code BoxVerticalAlignmentType} object that indicates the vertical alignment type of the floating box.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.FloatingBox.setBoxVerticalAlignment(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.FloatingBox.getBoxVerticalAlignmentType">
       
        <p>Gets or sets a {@code VerticalAlignment} object that indicates the vertical alignment type of the floating box.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.FloatingBox.setBoxVerticalAlignmentType(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.FloatingBox.getTextVerticalAlignment">
       
        <p>Gets or sets a {@code VerticalAlignmentType} enum that indicates the vertical alignment type of all paragraphs in the floating box.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.FloatingBox.setTextVerticalAlignment(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.FloatingBox.getTextVerticalAlignmentType">
       
        <p>Gets or sets a {@code VerticalAlignment} enum that indicates the vertical alignment type of all paragraphs in the floating box.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.FloatingBox.setTextVerticalAlignmentType(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.FloatingBox.#ctor(float,float)">
       
        <p>Initializes a new instance of the {@code FloatingBox} class with specified width and height.</p> @param width The width of the box. @param height The height of the box.
      
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.FloatingBox.#ctor"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.FloatingBox.IsNeedRepeating">
       
        <p>Gets or sets a bool value that indicates whether the paragraph need to be repeated on next page. Default value is false.The attribute is only valid when the paragraph itself and the object its ReferenceParagraphID referred to both are included in RepeatingRows.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.FloatingBox.Paragraphs">
       
        <p>Gets or sets a {@code Paragraphs} collection that indicates all paragraphs in the cell.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.FloatingBox.BoxHorizontalPositioning">
       
        <p>Gets or sets a {@code BoxHorizontalPositioningType} object that indicates the horizontal positioning type of the floating box.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.FloatingBox.BoxVerticalPositioning">
       
        <p>Gets or sets a {@code BoxVerticalPositioningType} object that indicates the vertical positioning type of the floating box.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.FloatingBox.IsExtraContentClip">
       
        <p>Gets or sets a value that indicates in case with fixed row height, do content will be truncated if it go out of margin</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.FloatingBox.Border">
       
        <p>Gets or sets a {@code BorderInfo} object that indicates the border info of the floating box.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.FloatingBox.BackgroundColor">
       
        <p>Gets or sets a {@code Aspose.Pdf.Generator.Color} object that indicates the background color of the floating box.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.FloatingBox.Padding">
       
        <p>Gets or sets a {@code MarginInfo} object that indicates the padding of the floating box.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.FloatingBox.VerticalTextRotationAngle">
       
        <p>Gets or sets a {@code VerticalTextRotationType} object that indicates the text rotation angle in floating box or cells.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.FloatingBox.ZIndex">
       
        <p>Gets or sets a int value that indicates the Z-order of the floating box. A floating box with larger ZIndex will be placed over the floating box with smaller ZIndex. ZIndex can be negative. Floating box with negative ZIndex will be placed behind the text in the page.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.FootNote">
       
        <p>Represents the FootNote of Segment{@code Segment}.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>[Java] Pdf pdf1 = new Pdf(); //Create pdf document Pdf pdf1 = new Pdf(); //Add a section into the pdf document aspose.pdf.generator.Section Section1 = pdf1.getSections().add(); //Create a new text paragraph Text text1 = new Text(); // Create a segment object and pass string as argument Segment Segment1 = new Segment("dog"); // Create an FootNote object and pass string as argument to its constructor FootNote FootNote1 = new FootNote("dog is an animal"); // add FootNote to segment object Segment1.setFootNote ( FootNote1); // Add segment to segments collection of Text paragraph text1.getSegments().add(Segment1); //Add text paragraph to the Paragraphs collection of section object Section1.getParagraphs().add(text1); //Save the pdf document pdf1.save("D:\\pdftest\\FootNoteTest_code.pdf"); [XML] &lt;Section PageWidth="595.3" PageHeight="841.9" PageMarginTop="72" PageMarginBottom="72" PageMarginLeft="90" PageMarginRight="90" IsNewPage="true"&gt; &lt;Text IsSpaced="true" Alignment="Justify" LineSpacing="1.58" ID="paraId_1"&gt; &lt;Segment FontName="Times New Roman"&gt;dog&lt;/Segment&gt; &lt;Segment&gt; &lt;FootNote&gt; &lt;Segment&gt;dog is an animal&lt;/Segment&gt; &lt;/FootNote&gt; &lt;/Segment&gt; &lt;/Text&gt; &lt;/Section&gt;</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.FootNote.getTextInfo">
       
        <p>Gets or sets a {@code TextInfo} object that indicates the text information of footnote.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.FootNote.setTextInfo(TextInfo)">
      <param name="TextInfo"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.FootNote.#ctor">
       
        <p>constructor with no arguments for FootNote class .</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.FootNote.#ctor(String)">
       
        <p>constructor with footnote content for FootNote class.The argument note is used for the content of footnote.</p> 
      
      <param name="String"/>
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.FootNote.Paragraphs">
       
        <p>Gets or sets a {@code Paragraph} collection that indicates all paragraphs in the FootNote.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.FootNote.NumberingFormat">
       
        <p>Gets or sets a {@code NumberingFormatType} enumeration value that indicates footnote number format in the Pdf document.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.FootNote.NumberingContinuation">
       
        <p>Gets or sets a {@code NumberingContinuationType} enumeration value that indicates footnote numbering continuation style - such as continuation in pdf or section.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.FootNote.Segments"/>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.FormatArray"/>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.FormatArray.getLength">
       
        <p>Represents an int value that indicates the length of the {@code ListLevelFormat} array. It should be equal to or greater than 1.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.FormatArray.setLength(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.FormatArray.get_Item(int)">
       
        <p>Gets or sets the specified value in terms of index.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.FormatArray.set_Item(int,ListLevelFormat)">
      <param name="int"/>
      <param name="ListLevelFormat"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.FormatArray.#ctor"/>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.FormField">
       
        <p>Represents a formfield {@code Paragraph} in the Pdf document.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>[Java] //Create pdf document Pdf pdf1 = new Pdf(); //Add a section into the pdf document aspose.pdf.generator.Section Section1 = pdf1.getSections().add(); //Create a new FormField object FormField ComboBox1 = new FormField(); // Set the formfield type to Combo box ComboBox1.FormFieldType = FormFieldType.Combo; // set field name ComboBox1.setFieldName ( "ACombo"); // Specify combo box option values ComboBox1.setChoiceOptions ( new String[] { "Red", "Green", "Blue" }); // specify the combo field value to be selected as default ComboBox1.setFieldValue ( "Green"); // set the form fielf widht ComboBox1.setFormWidth ( 80); // set form field height ComboBox1.setFormHeight ( 20); //Add ComboBox to Paragraphs collection of section object Section1.getParagraphs().add(ComboBox1); //Save the pdf document pdf1.save("D:\\pdftest\\FormFieldTest_code.pdf"); [XML] &lt;?xml version="1.0" encoding="utf-8" ?&gt; &lt;Pdf xmlns="Aspose.Pdf"&gt; &lt;Section&gt; &lt;FormField FormFieldType="Combo" FieldName="ACombo" FieldValue="Red" ChoiceOptions="Red Green Blue" FormWidth="80" FormHeight="20" /&gt; &lt;/Section&gt; &lt;/Pdf&gt;</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.FormField.getFormFieldType">
       
        <p>Gets or sets a {@code FormFieldType} enumeration that indicates the formfield type.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.FormField.setFormFieldType(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.FormField.getTopIndex">
       
        <p>Gets or sets a int value that indicates the top index (in the options array) of combo or list field. Default is 0.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.FormField.setTopIndex(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.FormField.getFieldValue">
       
        <p>Gets or sets a string that indicates the value of the field.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.FormField.setFieldValue(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.FormField.getValidators"/>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.FormField.setValidators(ValidatorCollection)">
      <param name="ValidatorCollection"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.FormField.#ctor">
       
        <p>Initializes a new instance of the {@code FormField} class.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.FormField.ComboIsEditable">
       
        <p>Gets or sets a bool value that indicates whether the combo is editable. Default value is true.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.FormField.ChoiceOptions">
       
        <p>Gets or sets a string array that indicates the options of combo or list field.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.FormField.ChoiceSelections">
       
        <p>Gets or sets a int array that indicates the choice selection indexes.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.FormField.FieldName">
       
        <p>Gets or sets a string that indicates the name of the field. Note that each field MUST have a unique name.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.FormField.FormWidth">
       
        <p>Gets or sets a float value that indicates the width of the formfield. Default value is 100 points.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.FormField.FormHeight">
       
        <p>Gets or sets a float value that indicates the height of the formfield. Default value is 30 points.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.FormField.CheckBoxIsChecked">
       
        <p>Gets or sets a bool value that indicates whether the checkbox is checked. Default is false.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.FormField.TextFontName">
       
        <p>Gets or sets a string that indicates the font name of the text field. The core fonts (Courier,Courier-Bold,Courier-BoldOblique,Courier-Oblique,Helvetica,Helvetica-Bold, Helvetica-BoldOblique, Helvetica-Oblique,Symbol,Times-Bold,Times-BoldItalic,Times-Italic, Times-Roman and ZapfDingbats) and Truetype fonts are supported. When using Truetype font, you should use the font family name. If you want the font be bold or italic, set the font name like "Arial,Bold","Arial,Italic" or "Arial,BoldItalic".</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.FormField.TextColor">
       
        <p>Gets or sets a {@code System.Drawing.Color} object that indicates the color of the text field.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.FormField.BackgroundColor">
       
        <p>Gets or sets a {@code System.Drawing.Color} object that indicates the color of the background.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.FormField.BorderColor">
       
        <p>Gets or sets a {@code System.Drawing.Color} object that indicates the color of the border.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.FormField.ButtonColor">
       
        <p>Gets or sets a {@code System.Drawing.Color} object that indicates the color of the button.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.FormField.TextFontSize">
       
        <p>Gets or sets a float value that indicates the font size of the text field. Default is 14 points.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.FormField.TextIsMultiLine">
       
        <p>Gets or sets a bool value that indicate whether the text field can be multiline. Default is false.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.FormField.TextIsPassword">
       
        <p>Gets or sets a bool value that indicates whether the text field is password. If set to true, the field is intended for entering a secure password that should not be echoed visibly to the screen. Default value is false.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.FormField.TextMaxLength">
       
        <p>Gets or sets a int value that indicates the max length of the text can be entered in this field.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.FormField.IsBordered">
       
        <p>Gets or sets a bool value that indicates whether the text field is bordered. Default is false.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.FormField.RadioButtons">
       
        <p>Gets or sets a {@code RadioButtons} collection that indicates the radiobuttons in this field.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.FormField.RadioButtonCheckedIndex">
       
        <p>Gets or sets a int value that indicates the index of the radiobutton that has been checked.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.FormField.IsReadOnly">
       
        <p>Gets or sets a bool value that indicates if the field is readonly.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.FormField.IsMultiSelect">
       
        <p>Gets or sets a bool value that indicates if multi-selecting is allowed.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.Graph">
       
        <p>Represents a graph {@code Paragraph}.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>[Java] Pdf pdf1 = new Pdf(); Section sec1 = pdf1.getSections().add(); Graph graph1 = new Graph(sec1,100,400); sec1.getParagraphs().add(graph1); float[] posArr = new float[]{0,0,200,80,300,40,350,90}; Curve curve1 = new Curve(graph1,posArr); graph1.getShapes().add(curve1); pdf1.save(...); [XML] &lt;?xml version="1.0" encoding="utf-8" ?&gt; &lt;Pdf xmlns="Aspose.Pdf"&gt; &lt;Section&gt; &lt;Graph Height="100" Width="400"&gt; &lt;Curve Position="0 0 200 80 300 40 350 90" /&gt; &lt;/Graph&gt; &lt;/Section&gt; &lt;/Pdf&gt;</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Graph.getAlignment">
       
        <p>Gets or sets a {@code HorizontalAlignmentType} object that indicates the alignment type of the cell.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Graph.setAlignment(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Graph.getHorizontalAlignment">
       
        <p>Gets or sets a {@code Aspose.Pdf.HorizontalAlignment} object that indicates the alignment type of the cell.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Graph.setHorizontalAlignment(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Graph.#ctor">
       
        <p>Initializes a new instance of the {@code Graph} class.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Graph.#ctor(float,float)">
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Graph.#ctor(com.aspose.pdf.generator.legacyxmlmodel.HeaderFooter)">
      <param name="com.aspose.pdf.generator.legacyxmlmodel.HeaderFooter"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Graph.#ctor(HeaderFooter,float,float)">
      <param name="HeaderFooter"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Graph.#ctor(Section)">
       
        <p>Initializes a new instance of the {@code Graph} class.</p> @param parentSection The specified {@code Section} object. 
        <p>
          <hr>This constructor can inherit common property values from the specified {@code Section} object.</hr>
        </p> 
      
      <param name="Section"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Graph.#ctor(Section,float,float)">
       
        <p>Initializes a new instance of the {@code Graph} class.</p> @param parentSection The specified {@code Section} object. @param width The width of the graph. @param height The height of the graph.
        <p>
          <hr>This constructor can inherit common property values from the specified {@code Section} object.</hr>
        </p> 
      
      <param name="Section"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Graph.GraphInfo">
       
        <p>Gets or sets a {@code GraphInfo} object that indicates the graph info.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Graph.TextInfo"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Graph.Shapes">
       
        <p>Gets or sets a {@code Shapes} collection that indicates all shapes in the graph.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Graph.IsNeedRepeating">
       
        <p>Gets or sets a bool value that indicates whether the paragraph need to be repeated on next page. Default value is false.The attribute is only valid when the paragraph itself and the object its ReferenceParagraphID referred to both are included in RepeatingRows.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Graph.Hyperink">
       
        <p>Gets or sets a {@code Hyperlink} object that indicates the hyper link info of the graph.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Graph.Title">
       
        <p>Gets or sets a string value that indicates the title of the graph.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Graph.UseTOCasTargetList">
       
        <p>Get or set a bool value that indicates whether the graph will be referenced in TOC instead of special ImageList</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Graph.GraphNotes">
       
        <p>Gets or sets a {@code GraphNotes} collection that indicates all notes in the graph.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Graph.GraphWidth">
       
        <p>Gets or sets a float value that indicates the graph width. The unit is point. In XML,the default unit is point,but cm and inch are also supported. For example,GraphWidth="10cm" or GraphWidth="5inch".</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Graph.GraphHeight">
       
        <p>Gets or sets a float value that indicates the graph height. The unit is point. In XML,the default unit is point,but cm and inch are also supported. For example,GraphHeight="10cm" or GraphHeight="5inch".</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Graph.ZIndex">
       
        <p>Gets or sets a int value that indicates the Z-order of the graph. A graph with larger ZIndex will be placed over the graph with smaller ZIndex. ZIndex can be negative. Graph with negative ZIndex will be placed behind the text in the page.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.GraphInfo">
       
        <p>Encapsulates info for a {@code Graph} paragraph.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>[Java] Pdf pdf1 = new Pdf(); Section sec1 = pdf1.getSections().add(); Graph graph1 = new Graph(sec1,100,400); sec1.getParagraphs().add(graph1); float[] posArr = new float[]{100,0,300,0}; Line l1 = new Line(graph1,posArr); l1.getGraphInfo().setColor ( new aspose.pdf.generator.Color("Red")); l1.getGraphInfo().setLineWidth ( 3); l1.getGraphInfo().setLineCapMode ( 1); graph1.getShapes().add(l1); posArr = new float[]{100,50,300,50}; Line l2 = new Line(graph1,posArr); l2.getGraphInfo().setColor ( new aspose.pdf.generator.Color(0,128,128)); l2.getGraphInfo().setDashLengthInBlack ( 2); l2.getGraphInfo().setDashLengthInWhite ( 1); graph1.getShapes().add(l2); Circle circle1 = new Circle(graph1,200,50,30); graph1.getShapes().add(circle1); circle1.getGraphInfo().setFillColor ( new aspose.pdf.generator.Color("Green")); circle1.getGraphInfo().setIsFilled ( true); pdf1.save(...); [XML] &lt;?xml version="1.0" encoding="utf-8" ?&gt; &lt;Pdf xmlns="Aspose.Pdf"&gt; &lt;Section&gt; &lt;Graph Height="100" Width="400"&gt; &lt;Line Color="Red" LineWidth="3" LineCapMode="1" Position="100 0 300 0" /&gt; &lt;Line Color="rgb 0 128 128" Dash="2 1" Position="100 50 300 50" /&gt; &lt;Circle CenterPosition="200 50" Radius="30" FillColor="Green" IsFilled="true" /&gt; &lt;/Graph&gt; &lt;/Section&gt; &lt;/Pdf&gt;</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.GraphInfo.getGraphBorder">
       
        <p>Gets or sets a borderinfo value that indicates the border information of the graph.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.GraphInfo.setGraphBorder(BorderInfo)">
      <param name="BorderInfo"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.GraphInfo.getCornerRadius">
       
        <p>Gets or sets Round corner radius.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.GraphInfo.setCornerRadius(float)">
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.GraphInfo.deepClone">
       
        <p>Clones a new GraphInfo object.</p> @return The new object.
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.GraphInfo.getCopy"/>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.GraphInfo.#ctor">
       
        <p>Initializes a new instance of the {@code GraphInfo} class.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.GraphInfo.PolyDashArr">
       
        <p></p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.GraphInfo.LineWidth">
       
        <p>Gets or sets a float value that indicates the line width of the graph.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.GraphInfo.Color">
       
        <p>Indicates the color of the graph.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.GraphInfo.FillColor">
       
        <p>Gets or sets a {@code Color} object that indicates the fill color of the graph.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.GraphInfo.DashLengthInBlack">
       
        <p>Gets or sets a float value that indicates the dash length in black.The unit is point. Refer to the programmer's guide for more info.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.GraphInfo.DashLengthInWhite">
       
        <p>Gets or sets a float value that indicates the dash length in white.The unit is point. Refer to the programmer's guide for more info.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.GraphInfo.IsFilled">
       
        <p>Gets or sets a bool value that indicates whether this shape is filled.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.GraphInfo.IsStroked">
       
        <p>Gets or sets a bool value that indicates whether this shape is stroked.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.GraphInfo.IsAddedArrowAtStart">
       
        <p>Gets or sets a bool value that indicates whether add arrow at the start of line.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.GraphInfo.IsAddedArrowAtEnd">
       
        <p>Gets or sets a bool value that indicates whether add arrow at the end of line.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.GraphInfo.LineJoinMode">
       
        <p>Gets or sets an int value between 0 and 2 that indicates the line join mode. Refer to the programmer's guide for more info.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.GraphInfo.LineCapMode">
       
        <p>Gets or sets an int value between 0 and 2 that indicates the line cap mode. Refer to the programmer's guide for more info.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.GraphInfo.Flatness">
       
        <p>Gets or sets an positive int value that indicates the flatness. Refer to the programmer's guide for more info.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.GraphInfo.MiterLimit">
       
        <p>Gets or sets an int value greater than or equal to 1 that indicates the miter limit. Refer to the programmer's guide for more info.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.GraphInfo.NewOriginX">
       
        <p>Gets or sets a float value that indicates the x-coordinate of the new origin when transforming a coordinate system.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.GraphInfo.NewOriginY">
       
        <p>Gets or sets a float value that indicates the y-coordinate of the new origin when transforming a coordinate system.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.GraphInfo.RotationAngle">
       
        <p>Gets or sets a float value that indicates the rotation angle of the coordinate system when transforming a coordinate system.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.GraphInfo.ScalingRateX">
       
        <p>Gets or sets a float value that indicates the scaling rate of the x-coordinate when transforming a coordinate system.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.GraphInfo.ScalingRateY">
       
        <p>Gets or sets a float value that indicates the scaling rate of the y-coordinate when transforming a coordinate system.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.GraphInfo.SkewAngleX">
       
        <p>Gets or sets a float value that indicates the skew angle of the x-coordinate when transforming a coordinate system.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.GraphInfo.SkewAngleY">
       
        <p>Gets or sets a float value that indicates the skew angle of the y-coordinate when transforming a coordinate system.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.GraphInfo.FillRule">
       
        <p>Gets or sets a string that indicates the graph fill rule.It can be "winding" or "evenodd". Refer to the programmer's guide for more info.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.GraphInfo._BorderStyle"/>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.GraphNote">
       
        <p>Represents a note in a {@code Graph}.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>[Java] Pdf pdf1 = new Pdf(); Section sec1 = pdf1.getSections().add(); Graph graph1 = new Graph(sec1,100,400); sec1.getParagraphs().add(graph1); Circle circle1 = new Circle(graph1,200,50,30); graph1.getShapes().add(circle1); GraphNote note1 = new GraphNote(sec1); note1.setContent ( "This is a circle."); note1.setPositionX ( 160); note1.setPositionY ( 10); graph1.getGraphNotes().add(note1); pdf1.save(...); [XML] &lt;?xml version="1.0" encoding="utf-8" ?&gt; &lt;Pdf xmlns="Aspose.Pdf"&gt; &lt;Section&gt; &lt;Graph Height="100" Width="400"&gt; &lt;Circle CenterPosition="200 50" Radius="30" /&gt; &lt;Note Position="160 10"&gt;This is a circle.&lt;/Note&gt; &lt;/Graph&gt; &lt;/Section&gt; &lt;/Pdf&gt;</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.GraphNote.#ctor">
       
        <p>Initializes a new instance of the {@code GraphNote} class.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.GraphNote.#ctor(Section)">
       
        <p>Initializes a new instance of the {@code GraphNote} class.</p> @param section The section object.
      
      <param name="Section"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.GraphNote.#ctor(Section,String)">
       
        <p>Initializes a new instance of the {@code GraphNote} class.</p> @param section The section object.
      
      <param name="Section"/>
      <param name="String"/>
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.GraphNote.VerticalTextRotationAngle">
       
        <p>Gets or sets a {@code VerticalTextRotationType} object that indicates the text rotation angle</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.GraphNote.Content">
       
        <p>Gets or sets a string that indicates the content of the note.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.GraphNote.TextInfo">
       
        <p>Gets or sets a {@code TextInfo} object that indicates the text info of the note.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.GraphNote.longSideAlignment">
       
        <p>Gets or sets an alignment of text relatively to long side of text.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.GraphNote.Direction">
       
        <p>Gets or sets a direction of a text from it's origin.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.GraphNote.HorizontalScaling">
       
        <p>Gets or sets horizontal scale of a text.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.GraphNote.RotationAngle">
       
        <p>Gets or sets a rotate angle of the GraphNote.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.GraphNote.PositionX">
       
        <p>Gets or sets a float value that indicates the x-coordinate of the beginning position of the note.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.GraphNote.PositionY">
       
        <p>Gets or sets a float value that indicates the y-coordinate of the beginning position of the note.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.GraphNotes">
       
        <p>Represents a collection of {@code GraphNote} objects.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>[Java] Pdf pdf1 = new Pdf(); Section sec1 = pdf1.getSections().add(); Graph graph1 = new Graph(sec1,100,400); sec1.getParagraphs().add(graph1); Circle circle1 = new Circle(graph1,200,50,30); graph1.getShapes().add(circle1); GraphNote note1 = new GraphNote(sec1); note1.setContent ( "This is a circle."); note1.setPositionX ( 160); note1.setPositionY ( 10); graph1.getGraphNotes().add(note1); pdf1.save(...); [XML] &lt;?xml version="1.0" encoding="utf-8" ?&gt; &lt;Pdf xmlns="Aspose.Pdf"&gt; &lt;Section&gt; &lt;Graph Height="100" Width="400"&gt; &lt;Circle CenterPosition="200 50" Radius="30" /&gt; &lt;Note Position="160 10"&gt;This is a circle.&lt;/Note&gt; &lt;/Graph&gt; &lt;/Section&gt; &lt;/Pdf&gt;</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.GraphNotes.add(GraphNote)">
       
        <p>Adds a new {@code GraphNote} object into the collection.</p> @param graphNote The {@code GraphNote} object to be added.
      
      <param name="GraphNote"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.GraphNotes.get_Item(int)">
       
        <p>Gets or sets a {@code GraphNote} object from the collection according to GraphNote index.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.GraphNotes.set_Item(int,GraphNote)">
      <param name="int"/>
      <param name="GraphNote"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.GraphNotes.remove(GraphNote)">
       
        <p>Removes a {@code GraphNote} object from the collection.</p> @param noteToRemove The {@code GraphNote} object to be romoved.
      
      <param name="GraphNote"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.GraphNotes.insert(int,GraphNote)">
       
        <p>Inserts a new {@code GraphNote} object into the collection at specified position.</p> @param index The zero-based index at which new {@code GraphNote} object should be inserted. @param graphNote The {@code GraphNote} object to be inserted.
      
      <param name="int"/>
      <param name="GraphNote"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.GraphNotes.insert(GraphNote,GraphNote)">
       
        <p>Inserts a new {@code GraphNote} object into the collection after specified GraphNote object.</p> @param noteToInsertAfter The {@code GraphNote} object to insert after. @param newNote The {@code GraphNote} object to be inserted.
      
      <param name="GraphNote"/>
      <param name="GraphNote"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.GraphNotes.copyTo(GraphNote[],int)">
       
        <p>Copies the elements to a {@code GraphNote} object array, starting at a specified array index.</p> @param graphNoteArray The {@code GraphNote} object array. @param index The start index.
      
      <param name="GraphNote[]"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.GraphNotes.#ctor">
       
        <p>Initializes a new instance of the {@code GraphNotes} class.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.GrayColorSpace">
       
        <p>Encapsulates the Gray colorspace.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>[Java] Pdf pdf1 = new Pdf(); Section sec1 = pdf1.getSections().add(); Graph graph1 = new Graph(sec1,200,400); sec1.getParagraphs().add(graph1); float[] posArr = new float[]{100,0,300,0}; Line l1 = new Line(graph1,posArr); l1.getGraphInfo().setColor ( new aspose.pdf.generator.Color("Red")); graph1.getShapes().add(l1); posArr = new float[]{100,50,300,50}; Line l2 = new Line(graph1,posArr); l2.getGraphInfo().setColor ( new aspose.pdf.generator.Color(0,128,128)); graph1.getShapes().add(l2); posArr = new float[]{100,100,300,100}; Line l3 = new Line(graph1,posArr); l3.getGraphInfo().setColor ( new aspose.pdf.generator.Color(0,128,64,0)); graph1.getShapes().add(l3); posArr = new float[]{100,150,300,150}; Line l4 = new Line(graph1,posArr); l4.getGraphInfo().setColor ( new aspose.pdf.generator.Color((byte)140)); graph1.getShapes().add(l4); pdf1.save(...); [XML] &lt;?xml version="1.0" encoding="utf-8" ?&gt; &lt;Pdf xmlns="Aspose.Pdf"&gt; &lt;Section&gt; &lt;Graph Height="200" Width="400"&gt; &lt;Line Color="Red" Position="100 0 300 0" /&gt; &lt;Line Color="rgb 0 128 128" Position="100 50 300 50" /&gt; &lt;Line Color="cmyk 0 128 64 0" Position="100 100 300 100" /&gt; &lt;Line Color="gray 140" Position="100 150 300 150" /&gt; &lt;/Graph&gt; &lt;/Section&gt; &lt;/Pdf&gt;</pre> 
              </pre>
            </blockquote>
          </hr>
        </p>
        <p>
          <hr>Note that you can use the {@code Aspose.Pdf.Color(byte)} constructor to create a color object with gray colorspace and need not use this class directly.</hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.GrayColorSpace.getGrayValue">
       
        <p>Represents a {@code byte} value(0-255) that indicates the gray scale.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.GrayColorSpace.setGrayValue(byte)">
      <param name="byte"/>
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.HeaderFooter">
       
        <p>Represents a header or footer of a page in a Pdf document.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>[Java] Pdf pdf = new Pdf(); Section section = new Section(pdf); pdf.getSections().add(section); HeaderFooter hf1 = new HeaderFooter(section); section.setOddHeader ( section.setEvenHeader ( hf1)); hf1.setIsFirstPageOnly ( true); Text text = new Text(hf1); hf1.getParagraphs().add(text); Segment segment = new Segment(text); text.getSegments().add(segment); segment.setContent ( "header for first page"); HeaderFooter hf2 = new HeaderFooter(section); section.setAdditionalOddHeader ( hf2); hf2.setIsSubsequentPagesOnly ( true); text = new Text(hf2); hf2.getParagraphs().add(text); segment = new Segment(text); text.getSegments().add(segment); segment.setContent ( "odd header for subsequent pages"); HeaderFooter hf3 = new HeaderFooter(section); section.setAdditionalEvenHeader ( hf3); hf3.setIsSubsequentPagesOnly ( true); text = new Text(hf3); hf3.getParagraphs().add(text); segment = new Segment(text); text.getSegments().add(segment); segment.setContent ( "even header for subsequent pages"); for(int i = 1; i &lt;= 6; i++) { Text text1 = new Text(section); text1.setIsFirstParagraph ( true); section.getParagraphs().add(text1); Segment segment1 = new Segment(text1); text1.getSegments().add(segment1); segment1.setContent ( "page " + i.toString()); } pdf.save(...); [XML] &lt;?xml version="1.0" encoding="utf-8" ?&gt; &lt;Pdf xmlns="Aspose.Pdf"&gt; &lt;Section &gt; &lt;Header IsFirstPageOnly="true"&gt; &lt;Text&gt; &lt;Segment&gt;header for first page&lt;/Segment&gt; &lt;/Text&gt; &lt;/Header&gt; &lt;Header Type="odd" IsSubsequentPagesOnly="true"&gt; &lt;Text&gt; &lt;Segment&gt;odd header for subsequent pages&lt;/Segment&gt; &lt;/Text&gt; &lt;/Header&gt; &lt;Header Type="even" IsSubsequentPagesOnly="true"&gt; &lt;Text&gt; &lt;Segment&gt;even header for subsequent pages&lt;/Segment&gt; &lt;/Text&gt; &lt;/Header&gt; &lt;Text IsFirstParagraph="true"&gt; &lt;Segment&gt;page1&lt;/Segment&gt; &lt;/Text&gt; &lt;Text IsFirstParagraph="true"&gt; &lt;Segment&gt;page2&lt;/Segment&gt; &lt;/Text&gt; &lt;Text IsFirstParagraph="true"&gt; &lt;Segment&gt;page3&lt;/Segment&gt; &lt;/Text&gt; &lt;Text IsFirstParagraph="true"&gt; &lt;Segment&gt;page4&lt;/Segment&gt; &lt;/Text&gt; &lt;Text IsFirstParagraph="true"&gt; &lt;Segment&gt;page5&lt;/Segment&gt; &lt;/Text&gt; &lt;Text IsFirstParagraph="true"&gt; &lt;Segment&gt;page6&lt;/Segment&gt; &lt;/Text&gt; &lt;/Section&gt; &lt;/Pdf&gt;</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.HeaderFooter.load(XmlTextReader,LoadingContext)">
       
        <p>Clones a new {@code HeaderFooter} object. all format and conent is cloned.</p> @return The new cloned {@code HeaderFooter} object.
      
      <param name="XmlTextReader"/>
      <param name="LoadingContext"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.HeaderFooter.#ctor">
       
        <p>Initializes a new instance of the {@code HeaderFooter} class.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.HeaderFooter.#ctor(Section)">
       
        <p>Initializes a new instance of the {@code HeaderFooter} class.</p> @param section The section object. 
        <p>
          <hr>This constructor can inherit common property values from the specified {@code Section} object.</hr>
        </p> 
      
      <param name="Section"/>
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.HeaderFooter.TextInfo">
       
        <p>Gets or sets a {@code TextInfo} object that indicates the text info of the header or footer.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.HeaderFooter.GraphInfo">
       
        <p>Gets or sets a {@code GraphInfo} object that indicates the graph info of the header or footer.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.HeaderFooter.Paragraphs">
       
        <p>Gets or sets a {@code Paragraphs} collection that indicates all paragraphs in the header or footer.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.HeaderFooter.Margin">
       
        <p>Gets or sets a {@code MarginInfo} object that indicates the margin info of the header or footer.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.HeaderFooter.DistanceFromEdge">
       
        <p>Gets or sets a float value that indicates the Header or Footer's distance from the edge of the page.The unit is point. In XML,the default unit is point,but cm and inch are also supported. For example,"10cm" or "5inch".</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.HeaderFooter.IsFirstPageOnly">
       
        <p>Gets or sets a bool value that indicates whether the header or footer be printed on first page only. The default value is false.If this property is set to true, the {@code IsSubsequentPagesOnly} should be false.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.HeaderFooter.IsLastPageOnly">
       
        <p>Gets or sets a bool value that indicates whether the header or footer be printed on last page only. The default value is false.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.HeaderFooter.IsSubsequentPagesOnly">
       
        <p>Gets or sets a bool value that indicates whether the header or footer be printed not on first page but on subsequent pages only. The default value is false. If this property is set to true, the {@code IsFirstPageOnly} should be false.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.Heading">
       
        <p>Represents a heading in Pdf document.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>[Java] Pdf pdf1 = new Pdf(); Section sec1 = pdf1.getSections().add(); Heading heading1 = new Heading(pdf1,sec1,1); Segment segment1 = new Segment(heading1); heading1.getSegments().add(segment1); heading1.setIsAutoSequence ( true); segment1.setContent ( "this is heading of level 1"); sec1.getParagraphs().add(heading1); //please make sure all properties are set before Add Heading heading2 = new Heading(pdf1,sec1,2); Segment segment2 = new Segment(heading2); heading2.getSegments().add(segment2); heading2.setIsAutoSequence ( true); segment2.setContent ( "this is heading of level 2"); sec1.getParagraphs().add(heading2); //please make sure all properties are set before Add Heading heading3 = new Heading(pdf1,sec1,1); Segment segment3 = new Segment(heading3); heading3.getSegments().add(segment3); heading3.setIsAutoSequence ( false); heading3.setLabelWidth ( 60); heading3.setUserLabel ( "bullet1"); segment3.setContent ( "this is bullet style 1"); sec1.getParagraphs().add(heading3); //please make sure all properties are set before Add pdf1.save(...); [XML] &lt;?xml version="1.0" encoding="utf-8" ?&gt; &lt;Pdf xmlns="Aspose.Pdf"&gt; &lt;Section&gt; &lt;Heading Level="1" IsAutoSequence="true"&gt; &lt;Segment&gt;this is heading of level 1&lt;/Segment&gt; &lt;/Heading&gt; &lt;Heading Level="2" IsAutoSequence="true"&gt; &lt;Segment&gt;this is heading of level 2&lt;/Segment&gt; &lt;/Heading&gt; &lt;Heading Level="1" IsAutoSequence="false" LabelWidth="60" UserLabel="bullet1"&gt; &lt;Segment&gt;this is bullet style 1&lt;/Segment&gt; &lt;/Heading&gt; &lt;/Section&gt; &lt;/Pdf&gt;</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Heading.getLabelWidth">
       
        <p>Gets or sets a float value that indicates the width of the label of the heading. Default value is 30 points.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Heading.setLabelWidth(float)">
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Heading.getLabelColor">
       
        <p>Gets or sets a {@code Color}value that indicates the color of the bullet/label.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Heading.setLabelColor(Color)">
      <param name="Color"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Heading.getLabelAlignment">
       
        <p>Gets or sets a {@code TextAlignmentType} value that indicates the alignment type of Bullet/Label.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Heading.setLabelAlignment(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Heading.getLabelHorizontalAlignment"/>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Heading.setLabelHorizontalAlignment(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Heading.getBulletAlignment">
       
        <p>Gets or sets a {@code TextAlignmentType} value that indicates the alignment type of Bullet/Label. {@code
          <BLOCKQUOTE class="dtBlock"> 
            <Font color="red">NOTE: This property is now obsolete.</Font>
          </BLOCKQUOTE>} {@code 
          <BLOCKQUOTE class="dtBlock">You should use LabelAlignment to set the alignment type of Bullet/Label. It will be removed 12 months later since release 3.6.2.0 in February 2008. Aspose apologizes for any inconvenience you may have experienced.</BLOCKQUOTE>}
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Heading.setBulletAlignment(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Heading.getBulletHorizontalAlignment"/>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Heading.setBulletHorizontalAlignment(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Heading.getBulletColor">
       
        <p>. Gets or sets a {@code Color}value that indicates the color of the bullet/label. {@code 
          <BLOCKQUOTE class="dtBlock"> 
            <Font color="red">NOTE: This property is now obsolete.</Font>
          </BLOCKQUOTE>} {@code 
          <BLOCKQUOTE class="dtBlock">You should use LabelColor to set the color of bullet/label.. It will be removed 12 months later since release 3.6.2.0 in February 2008. Aspose apologizes for any inconvenience you may have experienced.</BLOCKQUOTE>}
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Heading.setBulletColor(Color)">
      <param name="Color"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Heading.getLabelFontName">
       
        <p>Gets or sets a string value that indicates the font name of label.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Heading.setLabelFontName(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Heading.getUserLabel">
       
        <p>Gets or sets a string that indicates the caption label. For example, UserLabel="1.3.5". Set this property to 'bullet1','bullet2'...'bullet7' to use system-defined bullet. To use user defined lebel, Set the {@code BulletFontName} to "Symbol" and "ZapfDingbats" and set this property to the char value of the bullt symbol. For example,Userlabel="44" and BulletFontName="ZapfDingbats". {@code 
          <BLOCKQUOTE class="dtBlock"> 
            <Font color="red">NOTE: This property is now obsolete.</Font>
          </BLOCKQUOTE>} {@code 
          <BLOCKQUOTE class="dtBlock">You should use Label to set the user label. It will be removed 12 months later since release 3.8.0.0 in February 2008. Aspose apologizes for any inconvenience you may have experienced.</BLOCKQUOTE>}
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Heading.setUserLabel(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Heading.isLabelUnicode">
       
        <p>Gets or sets a bool value that indicates whether the bullet/Label uses a unicode character.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Heading.isLabelUnicode(boolean)">
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Heading.clone_Heading_New">
       
        <p>Clones a new {@code Heading} object. Only format info of the Heading is cloned.</p> @return The new cloned {@code Heading} object
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Heading.#ctor(LegacyPdf,Section,int)">
       
        <p>Initializes a new instance of the {@code Heading} class.</p> @param pdf The specified {@code Pdf} object. @param section The specified {@code Section} object. @param level The heading level.
        <p>
          <hr>This constructor can inherit common property values from the specified {@code Section} object.</hr>
        </p> 
      
      <param name="LegacyPdf"/>
      <param name="Section"/>
      <param name="int"/>
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Heading.Level">
       
        <p>Gets or sets an int value that indicates the level of the heading.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Heading.Label">
       
        <p>Gets or sets an string value that indicates the user-defined heading label. If you want to use the charactor in the charactor set, please use #$UNICODE() . Set this property to 'bullet1','bullet2'...'bullet7' to use system-defined bullet. Example 1: Label = #$UNICODE(9633); //It will print Ўх Example 2: Label = 9633 ; //It will print 9633 Example 3: Label = bullet1; //It will print Ўс</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Heading.BulletOffset">
       
        <p>Gets or sets a float value that indicates the offset of the bullet.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Heading.IsLabelBold">
       
        <p>Gets or sets a bool value that indicates whether the number of the heading is bold.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Heading.IsLabelItalic">
       
        <p>Gets or sets a bool value that indicates whether the number of the heading is italic.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Heading.IsLabelUnderline">
       
        <p>Gets or sets a bool value that indicates whether the number of the heading is underline.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Heading.LabelFontSize">
       
        <p>Gets or sets a float value that indicates the font size of label.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Heading.IsAutoSequence">
       
        <p>Gets or sets a bool value that indicates whether the number of the heading is in an automatical sequence.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Heading._HeadingType">
       
        <p>Gets or sets the {@code Aspose.Pdf.Generator.LegacyXmlModel.HeadingType} (style of figures)of this heading.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Heading.ImageLabel">
       
        <p>Gets or sets the an Image that is used as label.If ImageLabel is not null, the ImageLabel substitutes for number heading. The size of the ImageLabel will be adjusted following the Segment.TextInfo.FontSize.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Heading.LabelPattern">
       
        <p>Gets or sets the heading pattern in the "ch(s)%ch(s)" form, ch(s) can be none ,an ASCII or a combination of ASCIIs, % stands for the heading number. For example, "(%)" means "(1.1)" if here % equals 1.1.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Heading.BulletFontName">
       
        <p>Gets or sets a string that indicates the font name for bullet. "Symbol" and "ZapfDingbats" are supported. {@code 
          <BLOCKQUOTE class="dtBlock"> 
            <Font color="red">NOTE: This property is now obsolete.</Font>
          </BLOCKQUOTE>} {@code 
          <BLOCKQUOTE class="dtBlock">You should use LabelFontName to set the font name for bullet. It will be removed 12 months later since release 3.6.2.0 in February 2008. Aspose apologizes for any inconvenience you may have experienced.</BLOCKQUOTE>}
        </p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Heading.IsBulletUnicode">
       
        <p>Gets or sets a bool value that indicates whether the bullet/Label uses a unicode character. {@code
          <BLOCKQUOTE class="dtBlock"> 
            <Font color="red">NOTE: This property is now obsolete.</Font>
          </BLOCKQUOTE>} {@code 
          <BLOCKQUOTE class="dtBlock">You should use isLabelUnicode to set whether the bullet/Label uses a unicode character. It will be removed 12 months later since release 3.6.2.0 in February 2008. Aspose apologizes for any inconvenience you may have experienced.</BLOCKQUOTE>}
        </p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Heading.BulletTTFFile">
       
        <p>Gets or sets a string that indicates the truetype font file name for the bullet. This property is only needed when using truetype font with unicode. If your truetype font has been installed in your system, you can use truetype font with unicode without this property. But using this property will greatly improve the performance.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Heading.StartNumber">
       
        <p>Gets or sets a int number that indicates the start number of this heading when using auto numbering.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Heading.IsPrefixed">
       
        <p>Gets or sets a bool value that indicates if the prefix of the number is shown when using auto sequence. For example,for a label "1.2.5", if this property is set to false, the label will be "5".</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Heading.BackColorInTOC">
       
        <p>Gets or sets a Color of the corresponding line in Table of Contents.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Heading.TOC">
       
        <p>Gets or sets a corresponding Table of Contents.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.Hyperlink">
       
        <p>Represents a link in a Pdf document.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>[Java] Pdf pdf1 = new Pdf(); Section sec1 = pdf1.getSections().add(); Text text1 = new Text(sec1); sec1.getParagraphs().add(text1); Segment segment1 = text1.getSegments().add("this is a local file link"); segment1.getHyperlink ( new Hyperlink()); segment1.getHyperlink().setLinkFile ( "c:/images/apple.jpg"); segment1.getHyperlink().setLinkType ( HyperlinkType.File); Text text2 = new Text(sec1); sec1.getParagraphs().add(text2); Segment segment2 = text2.getSegments().add("this is a web link"); segment2.setyHyperlink ( new Hyperlink()); segment2.getHyperlink().setUrl ( "http://localhost/popup.htm"); segment2.getHyperlink().setLinkType ( HyperlinkType.Web); text1 = new Text(sec1); sec1.getParagraphs().add(text1); segment1 = text1.getSegments().add("this is a local link"); segment1.getTextInfo().setIsUnderline ( true); segment1.getHyperlink().setLinkType ( HyperlinkType.Local); segment1.getHyperlink().setTargetID ( "product1"); Text text3 = new Text(sec1,"product 1 info ..."); sec1.getParagraphs().add(text3); text3.setIsFirstParagraph ( true); text3.setID ( "product1"); pdf1.save(...); [XML] &lt;?xml version="1.0" encoding="utf-8" ?&gt; &lt;Pdf xmlns="Aspose.Pdf"&gt; &lt;Section&gt; &lt;Text&gt; &lt;Segment LinkFile="c:/Images/apple.jpg" LinkType="File"&gt; this is a local file link &lt;/Segment&gt; &lt;/Text&gt; &lt;Text&gt; &lt;Segment Url="http://localhost/popup.htm" LinkType="Web"&gt; this is a web link &lt;/Segment&gt; &lt;/Text&gt; &lt;Text&gt; &lt;Segment TargetID="product1" LinkType="Local" IsUnderline="true"&gt; this is a local link &lt;/Segment&gt; &lt;/Text&gt; &lt;Text IsFirstParagraph="true" ID="product1"&gt; &lt;Segment&gt; product 1 info ... &lt;/Segment&gt; &lt;/Text&gt; &lt;/Section&gt; &lt;/Pdf&gt;</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Hyperlink.addLinkAction(LinkAction)">
       
        <p>Adds link action to list of action that will be executed on click on this link</p> 
      
      <param name="LinkAction"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Hyperlink.getCountOfLinkActions"/>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Hyperlink.getLinkAction(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Hyperlink.completeClone">
       
        <p>Clones a new {@code Hyperlink} object.</p> @return The new created {@code Hyperlink} object.
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Hyperlink.#ctor">
       
        <p>Initializes a new instance of the {@code Hyperlink} class.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Hyperlink.LinkType">
       
        <p>Gets or sets a {@code HyperlinkType} object that indicates the link type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Hyperlink.TargetID">
       
        <p>Gets or sets a string that indicates the link target ID.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Hyperlink._DestinationType">
       
        <p>Gets or sets a {@code DestinationType} that indicates the destination type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Hyperlink.LinkFile">
       
        <p>Gets or sets a string that indicates the link file name.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Hyperlink.LinkPageNumber">
       
        <p>Gets or sets an int value that indicates the page number of the link page.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Hyperlink.Url">
       
        <p>Gets or sets a string that indicates the link url.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Hyperlink.IsLinkToNewWindow">
       
        <p>Gets or sets a boolean value that indicates whether to open file in a new window.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.Image">
       
        <p>Represents an image {@code Paragraph} in a Pdf document.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>[Java] Pdf pdf1 = new Pdf(); Section sec1 = pdf1.getSections().add(); aspose.pdf.generator.Image image1 = new aspose.pdf.generator.Image(sec1); sec1.getParagraphs().add(image1); image1.getImageInfo().setFile ( "C:/Images/Apple.jpg"); image1.getImageInfo().setImageFileType ( ImageFileType.Jpeg); GraphNote note1 = new GraphNote(sec1); note1.setContent ( "this is note1"); note1.setPositionX ( 50); note1.setPositionY ( 100); image1.getImageNotes().add(note1); aspose.pdf.generator.Image image2 = new aspose.pdf.generator.Image(sec1); sec1.getParagraphs().add(image2); image2.getImageInfo().setFile ( "C:/Images/Flower.fax"); image2.getImageInfo().setImageFileType ( ImageFileType.Ccitt); image2.getImageInfo().setCcittSubFormat ( CcittSubFormat.Group31D); image2.getImageInfo().setCcittImageWidth ( 350); image2.getImageInfo().setCcittImageHeight ( 400); pdf1.save(...); [XML] &lt;?xml version="1.0" encoding="utf-8" ?&gt; &lt;Pdf xmlns="Aspose.Pdf"&gt; &lt;Section&gt; &lt;Image File="C:/Images/Flower.jpg" Type="jpeg"&gt; &lt;Note Position="50 100"&gt;this is note1&lt;/Note&gt; &lt;/Image&gt; &lt;Image File="C:/Images/Flower.fax" Type="ccitt" CcittImageWidth="350" CcittImageHeight="400" CcittSubFormat="Group31D"&gt; &lt;/Image&gt; &lt;/Section&gt; &lt;/Pdf&gt;</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Image.load(XmlTextReader,LoadingContext)">
      <param name="XmlTextReader"/>
      <param name="LoadingContext"/>
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Image.ImageInfo">
       
        <p>Gets or sets a {@code ImageInfo} object that indicates the common image info.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Image.Hyperink">
       
        <p>Gets or sets a {@code Hyperlink} object that indicates the hyper link info of the image.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Image.UseTOCasTargetList">
       
        <p>Get or set a bool value that indicates whether the image will be referenced in TOC instead of special ImageList</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Image.Opacity">
       
        <p>Gets or sets a float value between 0.0 and 1.0 that indicates the opacity of the image. The default value is 1.0.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Image.RotatingAngle">
       
        <p>Gets or sets a float value between -90 and 90 that indicates the number of degrees by which the image should be rotated anticlockwise when displayed or printed. Default value is 0.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Image.ImageScale">
       
        <p>Gets or sets a float value that indicates the scale rate of the image when placed into pdf file.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Image.ZIndex">
       
        <p>Gets or sets a int value that indicates the Z-order of the image. A image with larger ZIndex will be placed over the image with smaller ZIndex. ZIndex can be negative. Image with negative ZIndex will be placed behind the text in the page.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Image.IsImageFitToRowHeight">
       
        <p>Gets or sets a bool value that indicates whether the image fit to the size of cell which has the only image paragraph.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Image.IsNeedRepeating">
       
        <p>Gets or sets a bool value that indicates whether the paragraph need to be repeated on next page. Default value is false.The attribute is only valid when the paragraph itself and the object its ReferenceParagraphID referred to both are included in RepeatingRows.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Image.ImageNotes">
       
        <p>Gets or sets a {@code GraphNotes} collection that indicates all notes in the image.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Image.ImageBytesIfAny"/>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.ImageInfo"/>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.ImageInfo.getAlignment">
       
        <p>Gets or sets a {@code HorizontalAlignmentType} object that indicates the alignment type of the cell.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.ImageInfo.setAlignment(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.ImageInfo.getHorizontalAlignment">
       
        <p>Gets or sets a {@code Aspose.Pdf.HorizontalAlignment} object that indicates the alignment type of the cell.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.ImageInfo.setHorizontalAlignment(int)">
      <param name="int"/>
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.ImageInfo.BitsPerComponent"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.ImageInfo.CcittImageHeight"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.ImageInfo.CcittImageWidth"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.ImageInfo._CcittSubFormat"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.ImageInfo.ComponentNumber"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.ImageInfo.File"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.ImageInfo.DefaultFile"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.ImageInfo.FixWidth"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.ImageInfo.FixHeight"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.ImageInfo.IsBlackWhite"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.ImageInfo.IsImageNotFoundErrorIgnored"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.ImageInfo.IsBlack1">
       
        <p>Gets or sets a bool value that indicates whether black is considered as 1 in an image.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.ImageInfo.TiffFrame">
       
        <p>Gets or sets an int value that indicates the valid frame of the TIFF image. The default value is 0. Used for TIFF image only. If this property is set to -1, all frames of the tiff images will be added into the PDF document.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.ImageInfo.OpenType">
       
        <p>Gets or sets a {@code ImageOpenType} that indicates the image open type. URL is supported in Image.ImageInfo.File. Memory image can is supported by Image.ImageInfo.ImageStream. You need not set OpenType any more.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.ImageInfo.Type">
       
        <p>Gets or sets a {@code ImageFileType} object that indicates the image type. If this property is not set, the image type will be get from the file name.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.ImageInfo.TextInfo">
       
        <p>Gets or sets a {@code TextInfo} object that indicates the text info of the image {@code Title}.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.ImageInfo.Title">
       
        <p>Gets or sets a string value that indicates the title of the image.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.ImageInfo.ImageBorder">
       
        <p>Gets or sets a borderinfo value that indicates the border information of the image.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.Index">
       
        <p>Represents an index in a Pdf document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Index.#ctor"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Index.TextInfo">
       
        <p>Gets or sets a {@code TextInfo} object that indicates the text info of the text paragraphs in the Index.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Index.PageInfo">
       
        <p>Gets or sets a {@code PageInfo} that indicates page info of the index.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.JavaScript">
       
        <p>Represents a JavaScript in Pdf document.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>[Java] //Instantiate a PDF Object Pdf pdf = new Pdf(); //Instantiate a Aspose PDF JavaScript Object pdf.setJavaScripts ( new JavaScripts()); //Call the Add method and pass JavaScript statement as an argument, to show Print Dialog pdf.getJavaScripts().add("this.print(true);"); //Call the Add method and JavaScript statement as an argument, to show alert pdf.getJavaScripts().add("app.alert(\"hello world\");"); //Save Pdf Document pdf.save("d:\\test\\test.pdf"); [XML] &lt;Pdf xmlns="Aspose.Pdf"&gt; &lt;JavaScript ID="js1"&gt;this.print(true);&lt;/JavaScript&gt; &lt;JavaScript&gt;app.alert("hello world");&lt;/JavaScript&gt; &lt;/Pdf&gt;</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.JavaScript.#ctor">
       
        <p>Initializes a new instance of the {@code JavaScript} class.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.JavaScript.#ctor(String)">
       
        <p>Initializes a new instance of the {@code JavaScript} class from a script string.</p> @param script The script string.
      
      <param name="String"/>
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.JavaScript.ScriptContent">
       
        <p>Gets or sets a string that indicates the JavaScript.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.JavaScript.ID">
       
        <p>Gets or sets a string that indicates the ID of the JavaScript.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.JavaScripts">
       
        <p>Represents a collection of {@code JavaScript} objects.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>[Java] //Instantiate a PDF Object Pdf pdf = new Pdf(); //Instantiate a Aspose PDF JavaScript Object pdf.setJavaScripts ( new JavaScripts()); //Call the Add method and pass JavaScript statement as an argument, to show Print Dialog pdf.getJavaScripts().add("this.print(true);"); //Call the Add method and JavaScript statement as an argument, to show alert pdf.getJavaScripts().add("app.alert(\"hello world\");"); //Save Pdf Document pdf.save("d:\\test\\test.pdf"); [XML] &lt;Pdf xmlns="Aspose.Pdf"&gt; &lt;JavaScript ID="js1"&gt;this.print(true);&lt;/JavaScript&gt; &lt;JavaScript&gt;app.alert("hello world");&lt;/JavaScript&gt; &lt;/Pdf&gt;</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.JavaScripts.add">
       
        <p>Initializes a new instance of the {@code JavaScript} class and add it to the JavaScripts collection.</p> @return The {@code JavaScript} object that is created.
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.JavaScripts.add(JavaScript)">
       
        <p>Adds a new {@code JavaScript} object into the collection.</p> @param script The {@code JavaScript} object to be added.
      
      <param name="JavaScript"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.JavaScripts.add(String)">
       
        <p>Initializes a new instance of the {@code JavaScript} class and add it to the JavaScripts collection.</p> @return The {@code JavaScript} object that is created. @param script The content of the script.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.JavaScripts.get_Item(int)">
       
        <p>Gets or sets a {@code JavaScript} object from the collection according to JavaScript index.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.JavaScripts.set_Item(int,JavaScript)">
      <param name="int"/>
      <param name="JavaScript"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.JavaScripts.get_Item(String)">
       
        <p>Gets or sets a {@code JavaScript} object from the collection according to JavaScript ID.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.JavaScripts.set_Item(String,JavaScript)">
      <param name="String"/>
      <param name="JavaScript"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.JavaScripts.insert(int,JavaScript)">
       
        <p>Inserts a new {@code JavaScript} object into the collection at specified position.</p> @param index The zero-based index at which {@code JavaScript} object should be inserted. @param js The {@code JavaScript} object to be inserted.
      
      <param name="int"/>
      <param name="JavaScript"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.JavaScripts.remove(JavaScript)">
       
        <p>Removes a {@code JavaScript} object from the collection.</p> @param jsToRemove The {@code JavaScript} object to be romoved.
      
      <param name="JavaScript"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.JavaScripts.indexOf(JavaScript)">
       
        <p>Gets the index of a specified JavaScript in the collection.</p> @return The index value. @param js The specified {@code JavaScript} object.
      
      <param name="JavaScript"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.JavaScripts.#ctor"/>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.LegacyPdf"/>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.LegacyPdf.getBookmarks">
       
        <p>Gets or sets a {@code Bookmarks} object that indicates the bookmarks in the PDF.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.LegacyPdf.setBookmarks(Bookmarks)">
      <param name="Bookmarks"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.LegacyPdf.getWatermarks">
       
        <p>Gets or sets a {@code Watermarks} which will be added upon each page of the PDF document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.LegacyPdf.setWatermarks(Watermarks)">
      <param name="Watermarks"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.LegacyPdf.loadFromXml(InputStream)">
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.LegacyPdf.#ctor"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LegacyPdf.Author">
       
        <p>Gets or sets a string that indicates the author of the Pdf document.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LegacyPdf.Title">
       
        <p>Gets or sets a string that indicates the title of the Pdf document.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LegacyPdf.Creator">
       
        <p>Gets or sets a string that indicates the creator of the Pdf document.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LegacyPdf.Producer">
       
        <p>This field indicates creator of the Pdf document(usually it's tool's name)</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LegacyPdf.Keywords">
       
        <p>Gets or sets a string that indicates key words of the Pdf document.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LegacyPdf.Subject">
       
        <p>Gets or sets a string that indicates the subject of the Pdf document.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LegacyPdf._PageTransitionType">
       
        <p>Gets or sets a {@code PageTransitionType} that indicates the pdf document page transition type (i.e. visual effect with which pages replaces each other in presentation mode).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LegacyPdf.Sections">
       
        <p>Gets or sets a {@code Sections} collection that indicates all sections in the Pdf document.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LegacyPdf.TextInfo">
       
        <p>Gets or sets a {@code TextInfo} object that indicates the text info in the Pdf document.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LegacyPdf.GraphInfo">
       
        <p>Gets or sets a {@code GraphInfo} object that indicates the graph info in the Pdf document, that will be used as default one to all added Graph objects.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LegacyPdf.DocumentAttachments">
       
        <p>Gets or sets a {@code DocumentAttachments} which will be added upon the PDF document.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LegacyPdf.InconsistentXmlImageParamsHandlingType">
       
        <p>During loading of logical model of document from XML with BindXML method can be found inconsistent combinations of image attributes . F.e. setting Height, FixedHeight along with with usage of file-formats where sizes are set inside image bynary content itself, can lead to unexpected or weird distortions of image in result PDF-file. This parameter allows define processing behaviour in such situations. By default it's set as PutToConsistentStateIfPossibleOtherwiseThrowException.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LegacyPdf.Security">
       
        <p>Gets or sets a {@code Aspose.Pdf.Generator.Security} object that indicates the document security information(if any).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LegacyPdf.IsAutoHyphenated">
       
        <p>Gets or sets a bool value that indicates whehter the text is hyphenated automatically. Default value is false.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>Pdf pdf = new Pdf(); pdf.IsAutoHyphenated = true; pdf.HyphenationZoneWidth = 0; pdf.ConsecutiveHyphensLimits = 0; //no limits pdf.HyphenationDictionaryPath = @"c:\temp\Hyphen.xml" pdf.BindXML("C:/xml/Test.xml",null); pdf.Save(C;/Pdf/Test.pdf);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LegacyPdf.IsXmlSchemaCheckedOnBind">
       
        <p>Gets or sets a bool value that indicates whether the error is ignored when unknown element(s) or attribute(s) are used in xml file for this or that entitie's tags. Default is false, i.e. unknown attributes or elements are just ignored and loading does not stop.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LegacyPdf.XmpMetadata">
       
        <p>Gets or sets a {@code XmpMetadata} Object that indicates the XMP metadata to be added into the PDF document.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>[JAva] Pdf pdf = new Pdf(); Section s = pdf.getSections.add(); Text text1 = new Text("This is a test for XMP Metadata"); s.getParagraphs().add(text1); pdf.XmpMetadata = new XmpMetadata(); //core properties pdf.getXmpMetadata().addCreationDate(new Date.toString()); //user properties pdf.getXmpMetadata().addUserProperty("xmlns:dc=\"http://purl.org/dc/elements/1.1/\"","dc:contributor","Aspose"); pdf.save("d:\\test\\test.pdf"); [XML] &lt;Pdf xmlns="Aspose.Pdf"&gt; &lt;XmpMetadata&gt; &lt;MetadataItem Name="CreationDate" Value="2007-7-15 10:51:55" /&gt; &lt;MetadataItem XmlNamespace="xmlns:dc='http://purl.org/dc/elements/1.1/'" Name="dc:contributor" Value="Aspose" /&gt; &lt;/XmpMetadata&gt; &lt;Section&gt; &lt;Text&gt;&lt;Segment&gt;This is a test for XMP Metadata&lt;/Segment&gt;&lt;/Text&gt; &lt;/Section&gt; &lt;/Pdf&gt;</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LegacyPdf.FirstLineIndent">
       
        <p>Gets or sets an int value that indicates the indent of the first line. (size of blank space at the beginning of the text paragraph).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LegacyPdf.IsSpaced">
       
        <p>Gets or sets a bool value that indicates whether the spaces at the begin of the text and returns in the text be shown. For the following XML: 
          <pre>&lt;Text&gt; &lt;Segment&gt;The first line, The second line.&lt;/Segment&gt; &lt;/Text&gt;</pre> If IsSpaced is false, the result will be: 
          <pre>The first line,The second line.</pre> If IsSpaced is true, the result will be: 
          <pre>The first line, The second line.</pre> 
        </p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LegacyPdf.IsPageNumberRestarted"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LegacyPdf.IsRightToLeft">
       
        <p>Gets or sets a bool value that indicates whether the text or heading appear in the pdf is right-to-left aligned. If it is true, all the texts and headings will be processed as right-to-left language previously. If text or heading don't contain any right-to-left lanuage character, they will be processed as usual( left-to-right). This property is used for right-to-left aligned language such as Arabic and Hebrew.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LegacyPdf.IsRtlInSegmentMode">
       
        <p>Gets or sets a bool value that indicates whether the text or heading is processed in segment mode. If it is true(default),segment in text will be processed one by one. If false, all segments in text will be put together, reorder in arabic rule. We recommend set it true when rendering rtl and non-rtl mixed texts.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LegacyPdf.IsWidowOrphanControlEnabled">
       
        <p>Gets or sets a bool value that indicates whether the Widow/Orphan control is enabled. Default is true. If it is true, Widow/Orphan control is enabled and Widows/orphans themselves are eliminated (disabled).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LegacyPdf.IsLandscape">
       
        <p>Gets or sets a bool value that indicates whether the page orientation is landscape. The default is false, portrait.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LegacyPdf.IsWatermarkOnTop">
       
        <p>Gets or sets a bool value that indicates if the watermark is on top of the page.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LegacyPdf.IsTruetypeFontMapCached">
       
        <p>Gets or sets a bool value that indicates whether truetype font map be cached on disk. Truetype font map is a font name to font file name map which is used when using unicode. If unicode is used, setting this property to true can make your application run fast. If this property is set to true and the system's fonts are changed (for example, new fonts are installed), delete the font map file (Aspose.Pdf.Generator.TruetypeFontMap.xml) and it will be generated again automatically.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LegacyPdf.HyphenationDictionaryPath">
       
        <p>Gets or sets a string that indicates the hyphenation dictionary path.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LegacyPdf.HyphenationZoneWidth">
       
        <p>Gets or sets a float value that indicates the hyphenation area width. Default value is 12 points.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LegacyPdf.ConsecutiveHyphensLimits">
       
        <p>Gets or sets an integer value that indicates the consecutive hyphens limits. Default value is zero that means no limits.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LegacyPdf.CompressionLevel">
       
        <p>Gets or sets an int value that indicates the compression level. It can be between 0 (the least compression) and 9 (the most compression) and the default value is 6.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LegacyPdf.BackgroundColor">
       
        <p>Gets or sets a {@code Aspose.Pdf.Generator.Color} object that indicates the background color of the pdf.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LegacyPdf.DefaultFontName">
       
        <p>Gets or sets a string that indicates the default font name. When font name is not set or the font is not found, this font will be used. The default value is "Times-Roman".</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LegacyPdf.TabStopPosition">
       
        <p>Gets or sets the tab stop position. Default value is 36 points (0.5inch).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LegacyPdf.PageNumberFormat">
       
        <p>Gets or sets a {@code PageNumberFormatType} value that indicates the format of the page number .</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LegacyPdf.TruetypeFontMapPath">
       
        <p>Gets or set a string that indicates the path of the truetype font map file. This property is valid only when the "IsTruetypeFontMapCached" property is set to true.</p> @see IsTruetypeFontMapCached
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LegacyPdf.TempFolder"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LegacyPdf.Index">
       
        <p>Gets or sets an {@code Index} object.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LegacyPdf.JavaScripts">
       
        <p>Gets or sets a {@code JavaScripts} object that indicates the JavaScripts to be added into the PDF.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>[Java] Pdf pdf = new Pdf(); pdf.setJavaScripts ( new JavaScripts()); pdf.getJavaScripts().add("this.print(true);"); pdf.getJavaScripts().add("app.alert(\"hello world\");"); pdf.save("d:\\test\\test.pdf"); [XML] &lt;Pdf xmlns="Aspose.Pdf"&gt; &lt;JavaScript ID="js1"&gt;this.print(true);&lt;/JavaScript&gt; &lt;JavaScript&gt;app.alert("hello world");&lt;/JavaScript&gt; &lt;/Pdf&gt;</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LegacyPdf.IsPageNumberForDocument">
       
        <p>Gets or sets a bool value that indicates whether total page number is count for whole document. If this property is set to true, the "$P" symbol will be replaced by the total page number of the document. Otherwise "$P" will be replaced with the total page number of all sections that were not restarted ("IsPageNumberRestarted" is set to true).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LegacyPdf.IsFontNotFoundExceptionThrown">
       
        <p>Gets or sets a bool value that indicates whether throw out exception when font is not found. The default value is false.In this case,if user specified font is not found,default font works.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LegacyPdf.IsCoreFontUsed">
       
        <p>Gets or sets a bool value that indicates whether PDF core fonts are used. Default is true. If this property is set to false, PDF core fonts will be ignored and all font will be used as TrueType font.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LegacyPdf.IsImagesInXmlDeleteNeeded">
       
        <p>Gets or sets a bool value that indicates whether images used in XML be deleted when the PDF document is generated.</p>
        <p>
          <hr>This property is used when integration with Aspose.Word. When converting Word document to PDF, Aspose.Word will save images in Word document as file and add the file name into XML. If this property is set to true,Aspose.Pdf.Generator will delete these image files used in XML.</hr>
        </p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LegacyPdf.IsBookmarked">
       
        <p>Gets or sets a bool value that indicates whether the pdf document is bookmarked when generating PDF document. The default value is false. If this property is set to true, Aspose.Pdf.Generator will create bookmarks for all the {@code Heading}s in the PDF if the relative property {@code BookMarkLevel} is not set.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LegacyPdf.BookmarkLevel">
       
        <p>Gets or sets a int value that indicates how many levels of {@code Heading} of the pdf document is to be bookmarked. The default value is 0, which means every heading of the PDF is to be taged as a bookmark. Only when the relative property {@code IsBookmarked} is set as true, this property is valid. If {@code IsBookmarked} is true and this property is set to a non-integer value levelNumber, Aspose.Pdf.Generator will create bookmarks for the corresponding {@code Heading}s of level 1 to level levelNumber.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LegacyPdf.Conformance"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LegacyPdf.DestinationType">
       
        <p>Gets or sets a {@code DestinationType} value that indicates the document open action. values are : Retain, FitPage, FitWidth, FitHeight,FitBox</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LegacyPdf._OpenType">
       
        <p>Enumerates the document open types.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LegacyPdf.PageDuration">
       
        <p>Gets or sets a int value that indicates the duration in seconds for the current page. This property is used when using auto advancing in presentation mode.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LegacyPdf.LabelWidth">
       
        <p>Gets or sets a float value that indicates the width of the heading label.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LegacyPdf.PageSetup">
       
        <p>Gets or sets a {@code PageSetup} object that indicates default page setup parameters in the Pdf document.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.Line"/>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Line.#ctor">
       
        <p>Initializes a new instance of the {@code Line} class.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Line.#ctor(Graph)">
       
        <p>Initializes a new instance of the {@code Line} class.</p> 
      
      <param name="Graph"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Line.#ctor(float[])">
       
        <p>Initializes a new instance of the {@code Line} class.</p> @param positionArray The line position array.
      
      <param name="float[]"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Line.#ctor(Graph,float[])">
       
        <p>Initializes a new instance of the {@code Line} class.</p> @param graph The specified {@code Graph} object. @param positionArray The line position array.The array is composed by coordinates of each control point of the line. 
        <p>
          <hr>This constructor can inherit common property values from the specified {@code Graph} object.</hr>
        </p> 
      
      <param name="Graph"/>
      <param name="float[]"/>
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Line.PositionArray">
       
        <p>Gets or sets a {@code PositionArray} object that indicates the position array.The array is composed by coordinates of each control point of the line.Note that you can use the {@code Line(Graph,float[])} constructor to create a Line object and need not use this class directly.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.LineAnnot"/>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.LineAnnot.load(XmlTextReader,LoadingContext)">
      <param name="XmlTextReader"/>
      <param name="LoadingContext"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.LineAnnot.#ctor">
       
        <p>Initializes a new instance of the {@code Aspose.Pdf.Generator.LineAnnot} class.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LineAnnot.PosLeftX">
       
        <p>Gets or sets a float value that indicates line start left position.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LineAnnot.PosLeftY">
       
        <p>Gets or sets a float value that indicates line start vertical position.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LineAnnot.PosRightX">
       
        <p>Gets or sets a float value that indicates line end right position.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LineAnnot.PosRightY">
       
        <p>Gets or sets a float value that indicates line end vertical position.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LineAnnot.LineStyle">
       
        <p>Gets or sets a value that indicates line style.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LineAnnot.LineStartStyle">
       
        <p>Gets or sets a value that indicates start style.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LineAnnot.LineEndStyle">
       
        <p>Gets or sets a value that indicates end style.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LineAnnot.ShowCaption">
       
        <p>Gets or sets a value that indicates show caption option.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LineAnnot.IsCaptionTop">
       
        <p>Gets or sets a value that indicates show caption on top of line.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LineAnnot.IsCaptionInLine">
       
        <p>Gets or sets a value that indicates show caption inline.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LineAnnot.CaptionOffsetX">
       
        <p>Gets or sets a float value that indicates the line caption left position.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LineAnnot.CaptionOffsetY">
       
        <p>Gets or sets a float value that indicates the line caption top position.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.LinkAction">
       
        <p>Represents a link action - i.e. one action that can be invoked when user clicks on link.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.LinkAction.deepClone"/>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.LinkAction.#ctor">
       
        <p>initiates new instance of object that indicates the link action type.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.LinkAction.#ctor(int)">
       
        <p>initiates new instance of object with action type of type 'MenuItemType' and specified type of menu action.</p> 
      
      <param name="int"/>
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LinkAction._LinkActionType">
       
        <p>Gets or sets a {@code LinkActionType} object that indicates the link action type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LinkAction.MenuItemType">
       
        <p>Gets or sets a {@code MenuItemType} object that indicates the menu item type. It makes sense when LinkAction is of type 'ExcuteMenuItem'</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LinkAction.FileName">
       
        <p>Gets or sets a string that indicates the file name for OpenFile link action. It makes sense when LinkAction is of type 'OpenFile'</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LinkAction.WebUrl">
       
        <p>Gets or sets a string that indicates the web url for OpenWebLink link action. It makes sense when LinkAction is of type 'OpenWebLink'</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.ListLevelFormat">
       
        <p>An object to define the format of the list of some level.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>[Java] // Create a Pdf object Pdf pdf = new Pdf(); //Create a list section ListSection tocSection = new ListSection("Table Of Contents"); //Set its list type as table of of contents tocSection.setListType ( ListType.TableOfContents); //Define the format of the four levels list by setting the left margins and //text format settings of each level tocSection.getListFormatArray().setLength ( 4); // specify the left margin information for list element at level 0 tocSection.getListFormatArray().get_Item(0).setLeftMargin ( 0); tocSection.getListFormatArray().get_Item(0).getTextInfo().setIsTrueTypeFontBold ( true); tocSection.getListFormatArray().get_Item(0).getTextInfo().setIsTrueTypeFontItalic ( true); tocSection.getListFormatArray().get_Item(0).getTextInfo().setColor ( new aspose.pdf.generator.Color("Navy")); tocSection.getListFormatArray().get_Item(1).setLeftMargin ( 10); tocSection.getListFormatArray().get_Item(1).getTextInfo().setIsUnderline ( true); tocSection.getListFormatArray().get_Item(1).getTextInfo().setFontSize ( 10); tocSection.getListFormatArray().get_Item(2).setLeftMargin ( 20); tocSection.getListFormatArray().get_Item(2).getTextInfo().setIsTrueTypeFontBold ( true); tocSection.getListFormatArray().get_Item(3).setLeftMargin ( 30); tocSection.getListFormatArray().get_Item(3).getTextInfo().setIsTrueTypeFontBold ( true); //Add the list section to the sections collection of the Pdf document pdf.getSections.add(tocSection); //Create a section in the Pdf document aspose.pdf.generator.Section sec1 = pdf.getSections().add(); //Add four headings in the section for (int Level = 1; Level != 5; Level++) { // create heading object and add set its level Heading heading2 = new Heading(pdf, sec1, Level); // create a segment object and Segment segment2 = new Segment(heading2); // add the segment object to segments collection of Heading heading2.getSegments().add(segment2); // Set the property so that number of the heading is in an automatical sequence. heading2.setIsAutoSequence ( true); // Specify the content of Heading segment2.setContent ( "this is heading of level "); segment2.setContent ( segment2.getContent() + Level.ToString()); //Add the heading into Table Of Contents. heading2.setIsInList ( true); // add the heading to paragraphs collection of PDF section sec1.getParagraphs().add(heading2); } // save the PDF document pdf.save("d:/pdftest/ListLevelFormat_Test.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.ListLevelFormat.#ctor"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.ListLevelFormat.TextInfo">
       
        <p>Get or set the {@code TextInfo} object of the list of current level.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.ListLevelFormat.LeftMargin">
       
        <p>Gets or sets a float value that indicates the left margin of the list of current level. The unit is point. In XML,the default unit is point,but cm and inch are also supported. For example,"10cm" or "5inch". {@code
          <BLOCKQUOTE class="dtBlock"> 
            <Font color="red">NOTE: This property is now obsolete.</Font>
          </BLOCKQUOTE>} {@code 
          <BLOCKQUOTE class="dtBlock">Please use Margin property instead. It will be removed 12 months later since release 3.3.1.0 in January 2007. Aspose apologizes for any inconvenience you may have experienced.</BLOCKQUOTE>}
        </p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.ListLevelFormat.Margin">
       
        <p>Gets or sets a {@code MarginInfo} object that indicates the margin of the list item.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.ListLevelFormat._TabLeaderType">
       
        <p>Gets or sets a {@code TabLeaderType} object that indicates the tab leader type for the list. The default value is "Dot".</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.ListLevelFormat.SubsequentLinesIndent">
       
        <p>Gets or sets a int value that indicates how many chars are indented for the subsequent lines in the list item. The default value is 6.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.ListSection">
       
        <p>An object to display different lists.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>[Java] //The ListSection has set a default FormatArray of three levels. //The user can use the default three levels' list without the pain of defining the list's format. //But if you want to define your own list format, you should define it before using the list like the example. pdf = new Pdf(); //Create the Table Of Contents. Add it to the pdf like a common Section. ListSection tocSection = new ListSection("Table Of Contents"); tocSection.setListType ( ListType.TableOfContents); pdf.getSections().add(tocSection); ///create the List of Tables. Add it to the pdf like a common Section. ListSection lotSection = new ListSection("List of Tables"); lotSection.setListType ( ListType.ListOfTables); pdf.Sections.Add(lotSection); ///create the List of Figures. Add it to the pdf like a common Section. ListSection lofSection = new ListSection("List of Figures"); lofSection.setListType ( ListType.ListOfFigures); pdf.getSections().add(lofSection); //Define the format of the four levels' list. tocSection.getListFormatArray().setLength ( 4); tocSection.getListFormatArray().get_Item(0).LeftMargin = 0; tocSection.getListFormatArray().get_Item(0).TextInfo.IsTrueTypeFontBold = true; tocSection.getListFormatArray().get_Item(0).TextInfo.IsTrueTypeFontItalic = true; tocSection.getListFormatArray().get_Item(1).LeftMargin = 10; tocSection.getListFormatArray().get_Item(1).TextInfo.IsUnderline = true; tocSection.getListFormatArray().get_Item(1).TextInfo.FontSize = 10; tocSection.getListFormatArray().get_Item(2).LeftMargin = 20; tocSection.getListFormatArray().get_Item(2).TextInfo.IsTrueTypeFontBold = true; tocSection.getListFormatArray().get_Item(3).LeftMargin = 30; tocSection.getListFormatArray().get_Item(3).TextInfo.IsTrueTypeFontBold = true; //Add four headings. Section sec1 = pdf.getSections().add(); for (int Level = 1;Level != 5; Level++) { Heading heading2 = new Heading(pdf,sec1,Level); Segment segment2 = new Segment(heading2); heading2.getSegments.add(segment2); heading2.setIsAutoSequence ( true); segment2.setContent ( "this is heading of level "); segment2.setContent (segment2.getContent() + Level.ToString()); //Add the heading into Table Of Contents. heading2.setIsInList ( true); sec1.getParagraphs().add(heading2); } //Add one table to the pdf. Table table1 = new aspose.pdf.generator.Table(); sec1.Paragraphs.Add(table1); table1.setColumnWidths ( "70 2cm"0; table1.setTitle ( "Table 1"); Row row1 = table1.getRows().add(); Cell cell1Row1 = row1.getCells.add("ColumnsSpan = 2"); cell1Row1.ColumnsSpan = 2; cell1Row1.setBorder ( new BorderInfo((int)BorderSide.All,0.5f)); Row row2 = table1.getRows().add(); Cell cell1Row2 = row2.getCells().add("cell1"); cell1Row2.setBorder ( new BorderInfo((int)BorderSide.All,0.5f)); Cell cell2Row2 = row2.getCells().add("cell2"); cell2Row2.Border = new BorderInfo((int)BorderSide.All,0.5f,new aspose.pdf.generator.Color("Red")); //Add the table to the List of Tables. table1.setIsInList ( true); //Add one Image to the pdf. aspose.pdf.generator.Image image1 = new aspose.pdf.generator.Image(sec1); sec1.getParagraphs().add(image1); image1.getImageInfo().setFile ( "C:/118528527.jpg"); image1.getImageInfo().setImageFileType ( ImageFileType.Jpeg); GraphNote note1 = new GraphNote(sec1); note1.setContent ( "this is note1"); note1.setPositionX ( 50); note1.setPositionY ( 1000; image1.getImageNotes().add(note1); //Add the Image to the List of Figures. image1.IsInList = true; Graph graph1 = new Graph(sec1,100,400); sec1.getParagraphs().add(graph1); float[] posArr = new float[]{0,0,200,80,300,40,350,90}; Curve curve1 = new Curve(graph1,posArr); graph1.getShapes().add(curve1); //Add the Graph to the List of Figures. graph1.setIsInList ( true); pdf.save("TestTocXml.pdf"); [XML] &lt;?xml version="1.0" encoding="utf-8"?&gt; &lt;Pdf&gt; &lt;ListSection ListType="TableOfContents"&gt; &lt;Title Alignment="Center"&gt; &lt;Segment IsTrueTypeFontBold="true" FontSize="30"&gt; TableOfContents &lt;/Segment&gt; &lt;/Title&gt; &lt;ListLevelFormat Level="1" LeftMargin="0"&gt; &lt;TextInfo IsTrueTypeFontBold="true" IsTrueTypeFontItalic="true"&gt; &lt;/TextInfo&gt; &lt;/ListLevelFormat&gt; &lt;ListLevelFormat Level="2" LeftMargin="10"&gt; &lt;TextInfo IsUnderline="true" FontSize="10"&gt; &lt;/TextInfo&gt; &lt;/ListLevelFormat&gt; &lt;ListLevelFormat Level="3" LeftMargin="20"&gt; &lt;TextInfo IsTrueTypeFontBold="true"&gt; &lt;/TextInfo&gt; &lt;/ListLevelFormat&gt; &lt;ListLevelFormat Level="4" LeftMargin="30"&gt; &lt;TextInfo IsTrueTypeFontBold="true"&gt; &lt;/TextInfo&gt; &lt;/ListLevelFormat&gt; &lt;/ListSection&gt; &lt;ListSection ListType="ListOfTables"&gt; &lt;Title&gt; &lt;Segment IsTrueTypeFontBold="true" FontSize="30"&gt;ListOfTables&lt;/Segment&gt; &lt;/Title&gt; &lt;/ListSection&gt; &lt;ListSection ListType="ListOfFigures"&gt; &lt;Title&gt; &lt;Segment IsTrueTypeFontBold="true" FontSize="30"&gt;ListOfFigures&lt;/Segment&gt; &lt;/Title&gt; &lt;/ListSection&gt; &lt;Section&gt; &lt;Heading level="1" IsAutoSequence="true" IsInList="true"&gt; &lt;Segment&gt;this is heading of level 1&lt;/Segment&gt; &lt;/Heading&gt; &lt;Heading level="2" IsAutoSequence="true" IsInList="true"&gt; &lt;Segment&gt;this is heading of level 2&lt;/Segment&gt; &lt;/Heading&gt; &lt;Heading level="3" IsAutoSequence="true" IsInList="true"&gt; &lt;Segment&gt;this is heading of level 3&lt;/Segment&gt; &lt;/Heading&gt; &lt;Heading level="4" IsAutoSequence="true" IsInList="true"&gt; &lt;Segment&gt;this is heading of level 4&lt;/Segment&gt; &lt;/Heading&gt; &lt;Table ColumnWidths="70 2cm" IsInList="true"&gt; &lt;Row&gt; &lt;Cell ColumnsSpan="2"&gt; &lt;Border&gt; &lt;All LineWidth="0.5"/&gt; &lt;/Border&gt; &lt;Text&gt; &lt;Segment&gt;ColumnsSpan = 2&lt;/Segment&gt; &lt;/Text&gt; &lt;/Cell&gt; &lt;/Row&gt; &lt;Row&gt; &lt;Cell&gt; &lt;Border&gt; &lt;All LineWidth="0.5"/&gt; &lt;/Border&gt; &lt;Text&gt; &lt;Segment&gt;cell1&lt;/Segment&gt; &lt;/Text&gt; &lt;/Cell&gt; &lt;Cell&gt; &lt;Border&gt; &lt;All LineWidth="0.5" Color="Red"/&gt; &lt;/Border&gt; &lt;Text&gt; &lt;Segment&gt;cell2&lt;/Segment&gt; &lt;/Text&gt; &lt;/Cell&gt; &lt;/Row&gt; &lt;/Table&gt; &lt;Image File="C:/118528527.jpg" Type="jpeg" IsInList="true"&gt; &lt;Note Position="50 100"&gt;this is note1&lt;/Note&gt; &lt;Title&gt;mm picture&lt;/Title&gt; &lt;/Image&gt; &lt;Graph Height="100" Width="400" IsInList="true"&gt; &lt;Curve Position="0 0 200 80 300 40 350 90"/&gt; &lt;Title&gt;one curve&lt;/Title&gt; &lt;/Graph&gt; &lt;/Section&gt; &lt;/Pdf&gt;</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.ListSection.#ctor(String)">
       
        <p>Initializes a new instance of the {@code ListSection} class .</p> @param listTitle Title of created section.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.ListSection.#ctor(LegacyPdf)">
       
        <p>Initializes a new instance of the {@code ListSection} class .</p> @param parentDocIfAny Parent legacy document(if any)of created section.
      
      <param name="LegacyPdf"/>
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.ListSection.Title">
       
        <p>Get or set the {@code Text} value of the title of {@code ListSection}.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.ListSection.IsCaptionLabelNeeded">
       
        <p>Gets or sets a bool value that indicates whether caption label is needed in TOC.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.ListSection.ListFormatArray">
       
        <p>Get or set the format of the lists of all levels using the {@code FormatArray}.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.ListSection._ListType">
       
        <p>Get or set the {@code ListType} of the {@code ListSection} object.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.LoadingContext"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LoadingContext.Document"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LoadingContext.CurrentSection"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.LoadingContext.throwExceptionIfUnexpectedElementFound"/>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.MarginInfo">
       
        <p>Encapsulates margin info.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>[Java] LegacyPdf pdf1 = new LegacyPdf(); pdf1.getPageSetup().setPageHeight ( PageSize.A2Height); Section sec1 = pdf1.getSections().add(); Text text1 = new Text(sec1,"this is text content"); text1.getMargin().setTop ( 30); sec1.getParagraphs().add(text1); pdf1.save(...); [XML] &lt;?xml version="1.0" encoding="utf-8" ?&gt; &lt;Pdf xmlns="Aspose.Pdf"&gt; &lt;Section PageHeight="1684"&gt; &lt;Text MarginTop="30"&gt; &lt;Segment&gt;this is text content&lt;/Segment&gt; &lt;/Text&gt; &lt;/Section&gt; &lt;/Pdf&gt;</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.MarginInfo.deepClone">
       
        <p>Clones a new {@code MarginInfo} object.</p> @return The new object.
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.MarginInfo.#ctor">
       
        <p>Initializes a new instance of the {@code MarginInfo} class.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.MarginInfo.Left">
       
        <p>Gets or sets a float value that indicates the left margin. The unit is point. In XML,the default unit is point,but cm and inch are also supported. For example,"10cm" or "5inch".</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.MarginInfo.Right">
       
        <p>Gets or sets a float value that indicates the right margin. The unit is point. In XML,the default unit is point,but cm and inch are also supported. For example,"10cm" or "5inch".</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.MarginInfo.Top">
       
        <p>Gets or sets a float value that indicates the top margin. The unit is point. In XML,the default unit is point,but cm and inch are also supported. For example,"10cm" or "5inch".</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.MarginInfo.Bottom">
       
        <p>Gets or sets a float value that indicates the bottom margin. The unit is point. In XML,the default unit is point,but cm and inch are also supported. For example,"10cm" or "5inch".</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.MarginInfo.Inner">
       
        <p>Gets or sets a float value that indicates the inner margin. The unit is point. In case of mirror margins we can use Inner and Outer instead of Left and Right In XML,the default unit is point,but cm and inch are also supported. For example,"10cm" or "5inch".</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.MarginInfo.Outer">
       
        <p>Gets or sets a float value that indicates the outer margin. The unit is point. In case of mirror margins we can use Inner and Outer instead of Left and Right In XML,the default unit is point,but cm and inch are also supported. For example,"10cm" or "5inch".</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.NonClosedShape">
       
        <p>Defines a {@code Shape} that can be unclosed. For example, Arc, Curve, Line.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.PageGutter">
       
        <p>Encapsulates page gutter.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>[JAva] Pdf pdf1 = new Pdf(); pdf1.getPageSetup().setPageHeight ( PageSize.A2Height); Section sec1 = pdf1.getSections().add(); sec1.getPageInfo().getPageGutter().setPlacement ( GutterPlacementType.Left); sec1.getPageInfo().getPageGutter().setSize ( 50); Text text1 = new Text(sec1,"this is text content"); sec1.getParagraphs.add(text1); pdf1.save(...); [XML] &lt;?xml version="1.0" encoding="utf-8" ?&gt; &lt;Pdf xmlns="Aspose.Pdf"&gt; &lt;Section PageHeight="1684" PageGutterPlacementType = "left" PageGutterSize = "50"&gt; &lt;Text &gt; &lt;Segment&gt;this is text content&lt;/Segment&gt; &lt;/Text&gt; &lt;/Section&gt; &lt;/Pdf&gt;</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.PageGutter.Size">
       
        <p>Gets or sets a float value that indicates the size of page gutter</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.PageGutter.Placement">
       
        <p>Gets or sets a GutterPlacementType{@code GutterPlacementType}. value that indicates the placement of page gutter</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.PageSetup">
       
        <p>Encapsulates info for page setup.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>[Java] Pdf pdf1 = new Pdf(); pdf1.getPageSetup().setPageHeight ( PageSize.A2Height); Section sec1 = pdf1.getSections().add(); Text text1 = new Text(sec1,"this is text content"); text1.getMargin().setTop ( 30); sec1.getParagraphs().add(text1); pdf1.save(...); [XML] &lt;?xml version="1.0" encoding="utf-8" ?&gt; &lt;Pdf xmlns="Aspose.Pdf"&gt; &lt;Section PageHeight="1684"&gt; &lt;Text MarginTop="30"&gt; &lt;Segment&gt;this is text content&lt;/Segment&gt; &lt;/Text&gt; &lt;/Section&gt; &lt;/Pdf&gt;</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.PageSetup.deepClone">
       
        <p>Clones a new {@code PageSetup} object.</p> @return The new cloned {@code PageSetup} object.
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.PageSetup.#ctor">
       
        <p>Initializes a new instance of the {@code PageSetup} class.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.PageSetup.#ctor(Section)">
       
        <p>Initializes a new instance of the {@code PageSetup} class.</p> @param section The section in which this PageSetup is used for.
      
      <param name="Section"/>
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.PageSetup.Margin">
       
        <p>Gets or sets a {@code MarginInfo} object that indicates the page margin info.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.PageSetup.PageWidth">
       
        <p>Gets or sets a float value that indicates the page width.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.PageSetup.PageHeight">
       
        <p>Gets or sets a float value that indicates the page height.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.PageSetup.CropBox">
       
        <p>Gets or sets a {@code RectData} object that indicates the crop box of the page.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.PageSetup.BleedBox">
       
        <p>Gets or sets a {@code RectData} object that indicates the bleed box of the page. The bleed box (PDF 1.3) defines the region to which the contents of the page should be clipped when output in a production environment. This may include any extra Ў°bleed areaЎ± needed to accommodate the physical limitations of cutting, folding, and trimming equipment. The actual printed page may include printing marks that fall outside the bleed box.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.PageSetup.ArtBox">
       
        <p>Gets or sets a {@code RectData} object that indicates the art box of the page. The art box (PDF 1.3) defines the extent of the pageЎЇs meaningful content (including potential white space) as intended by the pageЎЇs creator.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.PageSetup.TrimBox">
       
        <p>Gets or sets a {@code RectData} object that indicates the trim box of the page. The trim box (PDF 1.3) defines the intended dimensions of the finished page after trimming. It may be smaller than the media box, to allow for productionrelated content such as printing instructions, cut marks, or color bars.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.PageSetup.PageBorder">
       
        <p>Gets or sets a {@code PageBorder} object that indicates the page border.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.PageSetup.PageBorderMargin">
       
        <p>Gets or sets a {@code MarginInfo} object that indicates the margin between the page border and the page edge. The default value is half of the page margin.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.PageSetup.PageGutter">
       
        <p>Gets or sets a {@code PageGutter} object that indicates the page gutter.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.PageSize">
       
        <p>Encapsulates predefined page sizes, including A0, A1, A2, A3, A4, A5, A6, B5, Letter, Legal, Ledger and P11x17.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>[Java] Pdf pdf1 = new Pdf(); pdf1.getPageSetup().setPageHeight ( PageSize.A2Height); Section sec1 = pdf1.getSections().add(); Text text1 = new Text(sec1,"this is text content"); text1.getMargin().setTop ( 30); sec1.getParagraphs().add(text1); pdf1.save(...); [XML] &lt;?xml version="1.0" encoding="utf-8" ?&gt; &lt;Pdf xmlns="Aspose.Pdf"&gt; &lt;Section PageHeight="1684"&gt; &lt;Text MarginTop="30"&gt; &lt;Segment&gt;this is text content&lt;/Segment&gt; &lt;/Text&gt; &lt;/Section&gt; &lt;/Pdf&gt;</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.PageSize.#ctor">
       
        <p>Initializes a new instance of the {@code PageSize} class.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.PageSize.A0_WIDTH">
       
        <p>The width of A0.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.PageSize.A0_HEIGHT">
       
        <p>The height of A0.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.PageSize.A1_WIDTH">
       
        <p>The width of A1.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.PageSize.A1_HEIGHT">
       
        <p>The height of A1.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.PageSize.A2_WIDTH">
       
        <p>The width of A2.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.PageSize.A2_HEIGHT">
       
        <p>The height of A2.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.PageSize.A3_WIDTH">
       
        <p>The width of A3.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.PageSize.A3_HEIGHT">
       
        <p>The height of A3.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.PageSize.A4_WIDTH">
       
        <p>The width of A4.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.PageSize.A4_HEIGHT">
       
        <p>The height of A4.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.PageSize.A5_WIDTH">
       
        <p>The width of A5.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.PageSize.A5_HEIGHT">
       
        <p>the height of page A5.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.PageSize.A6_WIDTH">
       
        <p>The width of A6.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.PageSize.A6_HEIGHT">
       
        <p>The height of A6.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.PageSize.B5_WIDTH">
       
        <p>The width of B5.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.PageSize.B5_HEIGHT">
       
        <p>The height of B5.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.PageSize.LETTER_WIDTH">
       
        <p>The width of Letter.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.PageSize.LETTER_HEIGHT">
       
        <p>the height of page Letter.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.PageSize.LEGAL_WIDTH">
       
        <p>The width of Legal.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.PageSize.LEGAL_HEIGHT">
       
        <p>The height of Legal.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.PageSize.LEDGER_WIDTH">
       
        <p>The width of Ledger.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.PageSize.LEDGER_HEIGHT">
       
        <p>The height of Ledger.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.PageSize.P1_1_X_17_WIDTH">
       
        <p>The width of P11x17.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.PageSize.P1_1_X_17_HEIGHT">
       
        <p>The height of P11x17.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.Paragraph"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Paragraph.Margin"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Paragraph.IsInList"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Paragraph.IsDisabled"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Paragraph.Width"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Paragraph.Height"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Paragraph.Left"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Paragraph.Top"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Paragraph._PositioningType"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Paragraph.ReferenceParagraphID"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Paragraph.IsFirstParagraph"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Paragraph.IsFirstParagraphInColumn"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Paragraph.IsKeptTogether"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Paragraph.IsKeptWithNext"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Paragraph.IsOnOddPage"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Paragraph.ID"/>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.Paragraphs"/>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Paragraphs.remove(Paragraph)">
       
        <p>Removes a {@code Paragraph} object from the collection.</p> @param paragraphToRemove The {@code Paragraph} object to be romoved.
      
      <param name="Paragraph"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Paragraphs.get_Item(int)">
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.PathArea">
       
        <p>{@code 
          <p>Path is a {@code ClosedShape} (contour) that consists of several non-closed shapes ({@code NonClosedShape}) such as Lines, Bezier curves, Arc. Other shapes are ignored for writing.</p>} {@code 
          <p>Typical usages are the following:</p>} {@code 
          <xmp>[Java] Pdf pdf1 = new Pdf(); Section sec = pdf1.getSections().add(); Color color = new aspose.pdf.generator.Color("Red"); Graph graph = new Graph(100,400); sec.getParagraphs().add(graph); PathArea path = new PathArea(); graph.getShapes().add(path); path.getGraphInfo().setFillColor ( color); path.getGraphInfo().setIsFilled ( true); Line line = new Line(new float [] {200, 80, 200, 100}); path.getShapes().add(line); Arc arc = new Arc(200, 50, 50, 90, 270); path.getShapes().add(arc); float [] curPos = arc.getEndPosition(); line = new Line(new float [] {curPos[0], curPos[1], 200, 20}); path.getShapes().add(line); arc = new Arc(200, 50, 30, 270, 90); path.getShapes().add(arc); pdf1.save(....);</xmp>}
        </p>
        <p>Represents a path {@code Shape} in a Graph.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.PathArea.getShapes"/>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.PathArea.#ctor">
       
        <p>Initializes a new instance of the {@code PathArea} class.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.PathArea.#ctor(NonClosedShape[])">
       
        <p>Initializes a new instance of the {@code PathArea} class.</p> @param shapeParts The shape array contains path segments set.
      
      <param name="NonClosedShape[]"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.PathArea.#ctor(Graph)">
       
        <p>Initializes a new instance of the {@code PathArea} class.</p> @param parentGraph The graph object. 
        <p>
          <hr>This constructor can inherit common property values from the specified {@code Graph} object.</hr>
        </p> 
      
      <param name="Graph"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.PathArea.#ctor(Graph,NonClosedShape[])">
       
        <p>Initializes a new instance of the {@code PathArea} class.</p> @param parentGraph The graph object. @param shapeParts The shape array contains path segments set.
        <p>
          <hr>This constructor can inherit common property values from the specified {@code Graph} object.</hr>
        </p> 
      
      <param name="Graph"/>
      <param name="NonClosedShape[]"/>
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.PatternColorSpace"/>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.PatternColorSpace.deepClone"/>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.PatternColorSpace.getPatternType">
       
        <p>Returns a pattern type: tiling or shading.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.PatternColorSpace.setPatternType(int)">
       
        <p>Sets a pattern type: tiling or shading.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.PatternColorSpace.getxPos">
       
        <p>Returns translation in x axis of the tile content relative to tile box</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.PatternColorSpace.setxPos(float)">
       
        <p>Sets translation in x axis of the tile content relative to tile box</p> 
      
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.PatternColorSpace.getyPos">
       
        <p>Returns translation in y axis of the tile content relative to tile box</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.PatternColorSpace.setyPos(float)">
       
        <p>Sets translation in y axis of the tile content relative to tile box</p> 
      
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.PatternColorSpace.getxScale">
       
        <p>Returns scale in x axis of the tile content relative to tile box</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.PatternColorSpace.setxScale(float)">
       
        <p>Sets scale in x axis of the tile content relative to tile box</p> 
      
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.PatternColorSpace.getyScale">
       
        <p>Returns scale in y axis of the tile content relative to tile box</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.PatternColorSpace.setyScale(float)">
       
        <p>Sets scale in y axis of the tile content relative to tile box</p> 
      
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.PatternColorSpace.getRotationAngle">
       
        <p>Returns rotation angle of the tile content relative to tile box</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.PatternColorSpace.setRotationAngle(float)">
       
        <p>Sets rotation angle of the tile content relative to tile box</p> 
      
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.PatternColorSpace.getSkewX">
       
        <p>Returns skew of x axis of the tile content relative to tile box</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.PatternColorSpace.setSkewX(float)">
       
        <p>Sets skew of x axis of the tile content relative to tile box</p> 
      
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.PatternColorSpace.getSkewY">
       
        <p>Returns skew of y axis of the tile content relative to tile box</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.PatternColorSpace.setSkewY(float)">
       
        <p>Sets skew of y axis of the tile content relative to tile box</p> 
      
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.PatternColorSpace.#ctor(int)">
       
        <p>Initializes a new instance of the {@code T:Aspose.Pdf.PatternColorSpace} class with {@code T:Aspose.Pdf.PatternType}.</p> 
      
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.PatternType"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.PatternType.Unknown"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.PatternType.Tiling"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.PatternType.Shading"/>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.PositionArray">
       
        <p>Encapsulates a position array used in the {@code Line}.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>[Java] //Instantiate a Pdf document object Pdf pdf1 = new Pdf(); //Add a section to the Pdf document aspose.pdf.generator.Section sec1 = pdf1.getSections().add(); //Create a graph object in the section with Width=100 and Height=400 Graph graph1 = new Graph(sec1,100,400); //Add the graph object to the paragraphs collection of the section sec1.getParagraphs().add(graph1); //Create an array containing the (X,Y) values of 4 control points //required to position a curve float[] posArr = new float[]{0,0,200,80,300,40,350,90}; //Create a curve in the graph with the coordinates given as an array to //the constructor of curve class Curve curve1 = new Curve(graph1,posArr); //Add the curve shape into the shapes collection of the graph graph1.getShapes().add(curve1); //Save the Pdf pdf1.save("d:/pdftest/PositionArrayTest.pdf"); [XML] &lt;?xml version="1.0" encoding="utf-8" ?&gt; &lt;Pdf xmlns="Aspose.Pdf"&gt; &lt;Section&gt; &lt;Graph Height="100" Width="400"&gt; &lt;Curve Position="0 0 200 80 300 40 350 90" /&gt; &lt;/Graph&gt; &lt;/Section&gt; &lt;/Pdf&gt;</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.PositionArray.getLength">
       
        <p>Represents an int value that indicates the length of the position array. It should be equal to or greater than 4.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.PositionArray.setLength(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.PositionArray.get_Item(int)">
       
        <p>Gets or sets the specified value in terms of index.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.PositionArray.set_Item(int,float)">
      <param name="int"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.PositionArray.#ctor"/>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.RadioButton">
       
        <p>Represents a radiobutton item in a radiobutton field.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>[Java] //Instantiate the Pdf document and add a section to it Pdf pdf1 = new Pdf(); Section sec1 = pdf1.getSections().add(); //Create a table, set its column widths and add it to paragraphs collection //of the section Table tab1 = new Table(); tab1.setColumnWidths ( "120 120 120"); sec1.getParagraphs().add(tab1); //Add a row to the table Row r1 = tab1.getRows().add(); //Add 1st cell to the row, set its padding and set the ID of the first paragraph //in the cell to "text1" Cell c1 = r1.getCells().add("item1"); c1.getPadding().setLeft ( 30); c1.getParagraphs().get_Item(0).setID ( "text1"); //Add 2nd cell to the row, set its padding and set the ID of the first paragraph //in the cell to "text2" Cell c2 = r1.getCells().add("item2"); c2.getPadding().setLeft ( 30); c2.getParagraphs().get_Item(0).setID ( "text2"); //Add 3rd cell to the row, set its padding and set the ID of the first paragraph //in the cell to "text3" Cell c3 = r1.getCells().add("item3"); c3.getPadding().setLeft ( 30); c3.getParagraphs().get_Item(0).setID ( "text3"); //Create a form field of RadioButton type. Set its field name and button color. //Then set the index of the radio button value to be checked FormField radio = new FormField(); radio.setFormFieldType ( FormFieldType.RadioButton); radio.setFieldName ( "ARadio"0; radio.setButtonColor ( Color.fromName("Red")); radio.setRadioButtonCheckedIndex ( 0); //Create 1st radio button instance and add it to above created radio form field. //Set its width and height. The position of the radio button is set to be //relative to the paragraph. Link this radio button with the paragraph with ID //equal to "text1". RadioButton bt1 = radio.getRadioButtons().add(); bt1.setButtonHeight ( 12); bt1.setButtonWidth ( 12); bt1.setPositioningType ( PositioningType.ParagraphRelative); bt1.setReferenceParagraphID ( "text1"); bt1.setLeft ( -20); bt1.setTop ( 0); //Create 2nd radio button instance and add it to above created radio form field. //Set its width and height. The position of the radio button is set to be //relative to the paragraph. Link this radio button with the paragraph with ID //equal to "text2". RadioButton bt2 = radio.getRadioButtons().add(); bt2.setButtonHeight ( 12); bt2.setButtonWidth ( 12); bt2.setPositioningType ( PositioningType.ParagraphRelative); bt2.setReferenceParagraphID ( "text2"); bt2.setLeft ( -20); bt2.setTop ( 0); //Create 3rd radio button instance and add it to above created radio form field. //Set its width and height. The position of the radio button is set to be //relative to the paragraph. Link this radio button with the paragraph with ID //equal to "text3". RadioButton bt3 = radio.getRadioButtons().add(); bt3.setButtonHeight ( 12); bt3.setButtonWidth ( 12); bt3.setPositioningType ( PositioningType.ParagraphRelative); bt3.setReferenceParagraphID ( "text3"); bt3.setLeft ( -20); bt3.setTop ( 0); //Add the radio form field to the paragraphs collection of the section sec1.getParagraphs().add(radio); //Save the Pdf pdf1.save(...); [XML] &lt;?xml version="1.0" encoding="utf-8" ?&gt; &lt;Pdf xmlns="Aspose.Pdf"&gt; &lt;Section&gt; &lt;Table ColumnWidths="120 120 120"&gt; &lt;Row&gt; &lt;Cell PaddingLeft="30"&gt; &lt;Text ID="text1"&gt; &lt;Segment&gt;item1&lt;/Segment&gt; &lt;/Text&gt; &lt;/Cell&gt; &lt;Cell PaddingLeft="30"&gt; &lt;Text ID="text2"&gt; &lt;Segment&gt;item2&lt;/Segment&gt; &lt;/Text&gt; &lt;/Cell&gt; &lt;Cell PaddingLeft="30"&gt; &lt;Text ID="text3"&gt; &lt;Segment&gt;item3&lt;/Segment&gt; &lt;/Text&gt; &lt;/Cell&gt; &lt;/Row&gt; &lt;/Table&gt; &lt;FormField FormFieldType="RadioButton" RadioButtonCheckedIndex="0" FieldName="aRadioutton" ButtonColor="Red"&gt; &lt;RadioButton ButtonWidth="12" ButtonHeight="12" PositioningType="ParagraphRelative" ReferenceParagraphID="text1" Left="-20" Top="0"&gt; &lt;/RadioButton&gt; &lt;RadioButton ButtonWidth="12" ButtonHeight="12" PositioningType="ParagraphRelative" ReferenceParagraphID="text2" Left="-20" Top="0"&gt; &lt;/RadioButton&gt; &lt;RadioButton ButtonWidth="12" ButtonHeight="12" PositioningType="ParagraphRelative" ReferenceParagraphID="text3" Left="-20" Top="0"&gt; &lt;/RadioButton&gt; &lt;/FormField&gt; &lt;/Section&gt; &lt;/Pdf&gt;</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.RadioButton.getParentFormField">
       
        <p>returns instanse of FormField (if any), part of which this RadioButton is</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.RadioButton.load(XmlTextReader,LoadingContext)">
       
        <p>loads parameters of current instanse from legacy XML</p> 
      
      <param name="XmlTextReader"/>
      <param name="LoadingContext"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.RadioButton.#ctor">
       
        <p>Initializes a new instance of the {@code RadioButton} class.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.RadioButton.#ctor(FormField)">
       
        <p>Initializes a new instance of the {@code RadioButton} class.</p> 
      
      <param name="FormField"/>
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.RadioButton.ButtonWidth">
       
        <p>Gets or sets a float value that indicates the width of the RadioButton. Default value is 100 points.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.RadioButton.ButtonHeight">
       
        <p>Gets or sets a float value that indicates the height of the RadioButton. Default value is 100 points.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.RadioButtons">
       
        <p>Represents a collection of {@code RadioButton} objects.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>[Java] //Instantiate the Pdf document and add a section to it Pdf pdf1 = new Pdf(); Section sec1 = pdf1.getSections().add(); //Create a table, set its column widths and add it to paragraphs collection //of the section Table tab1 = new Table(); tab1.ColumnWidths = "120 120 120"; sec1.getParagraphs().add(tab1); //Add a row to the table Row r1 = tab1.getRows().add(); //Add 1st cell to the row, set its padding and set the ID of the first paragraph //in the cell to "text1" Cell c1 = r1.getCells().add("item1"); c1.getPadding().setLeft ( 30); c1.getParagraphs().get(1).setID ( "text1"); //Add 2nd cell to the row, set its padding and set the ID of the first paragraph //in the cell to "text2" Cell c2 = r1.getCells().add("item2"); c2.getPadding().setLeft ( 30); c2.getParagraphs().get(0).setID ( "text2"); //Add 3rd cell to the row, set its padding and set the ID of the first paragraph //in the cell to "text3" Cell c3 = r1.getCells().add("item3"); c3.getPadding().setLeft ( 30); c3.getParagraphs().get(0).setID ( "text3"); //Create a form field of RadioButton type. Set its field name and button color. //Then set the index of the radio button value to be checked FormField radio = new FormField(); radio.setFormFieldType ( FormFieldType.RadioButton); radio.setFieldName ( "ARadio"); radio.setButtonColor ( Color.FromName("Red")); radio.setRadioButtonCheckedIndex ( 0); //Create 1st radio button instance and add it to above created radio form field. //Set its width and height. The position of the radio button is set to be //relative to the paragraph. Link this radio button with the paragraph with ID //equal to "text1". RadioButton bt1 = radio.getRadioButtons().add(); bt1.setButtonHeight ( 12); bt1.setButtonWidth ( 12); bt1.setPositioningType ( PositioningType.ParagraphRelative); bt1.setReferenceParagraphID ( "text1"); bt1.setLeft ( -20); bt1.setTop ( 0); //Create 2nd radio button instance and add it to above created radio form field. //Set its width and height. The position of the radio button is set to be //relative to the paragraph. Link this radio button with the paragraph with ID //equal to "text2". RadioButton bt2 = radio.getRadioButtons().add(); bt2.setButtonHeight ( 12); bt2.setButtonWidth ( 12); bt2.setPositioningType ( PositioningType.ParagraphRelative); bt2.setReferenceParagraphID ( "text2"); bt2.setLeft ( -20); bt2.setTop ( 0); //Create 3rd radio button instance and add it to above created radio form field. //Set its width and height. The position of the radio button is set to be //relative to the paragraph. Link this radio button with the paragraph with ID //equal to "text3". RadioButton bt3 = radio.getRadioButtons().add(); bt3.setButtonHeight ( 12); bt3.settButtonWidth ( 12); bt3.setPositioningType ( PositioningType.ParagraphRelative); bt3.setReferenceParagraphID ( "text3"); bt3.setLeft ( -20); bt3.setTop ( 0); //Add the radio form field to the paragraphs collection of the section sec1.getParagraphs().add(radio); //Save the Pdf pdf1.save(...); [XML] &lt;?xml version="1.0" encoding="utf-8" ?&gt; &lt;Pdf xmlns="Aspose.Pdf"&gt; &lt;Section&gt; &lt;Table ColumnWidths="120 120 120"&gt; &lt;Row&gt; &lt;Cell PaddingLeft="30"&gt; &lt;Text ID="text1"&gt; &lt;Segment&gt;item1&lt;/Segment&gt; &lt;/Text&gt; &lt;/Cell&gt; &lt;Cell PaddingLeft="30"&gt; &lt;Text ID="text2"&gt; &lt;Segment&gt;item2&lt;/Segment&gt; &lt;/Text&gt; &lt;/Cell&gt; &lt;Cell PaddingLeft="30"&gt; &lt;Text ID="text3"&gt; &lt;Segment&gt;item3&lt;/Segment&gt; &lt;/Text&gt; &lt;/Cell&gt; &lt;/Row&gt; &lt;/Table&gt; &lt;FormField FormFieldType="RadioButton" RadioButtonCheckedIndex="0" FieldName="aRadioutton" ButtonColor="Red"&gt; &lt;RadioButton ButtonWidth="12" ButtonHeight="12" PositioningType="ParagraphRelative" ReferenceParagraphID="text1" Left="-20" Top="0"&gt; &lt;/RadioButton&gt; &lt;RadioButton ButtonWidth="12" ButtonHeight="12" PositioningType="ParagraphRelative" ReferenceParagraphID="text2" Left="-20" Top="0"&gt; &lt;/RadioButton&gt; &lt;RadioButton ButtonWidth="12" ButtonHeight="12" PositioningType="ParagraphRelative" ReferenceParagraphID="text3" Left="-20" Top="0"&gt; &lt;/RadioButton&gt; &lt;/FormField&gt; &lt;/Section&gt; &lt;/Pdf&gt;</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.RadioButtons.add(RadioButton)">
       
        <p>Adds a new {@code RadioButton} object into the collection.</p> @param button
      
      <param name="RadioButton"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.RadioButtons.add">
       
        <p>Initializes a new instance of the {@code RadioButton} class and add it to the RadioButtons collection.</p> @return The new {@code RadioButton} object.
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.RadioButtons.remove(RadioButton)">
       
        <p>Removes a {@code RadioButton} object from the collection.</p> @param button The {@code RadioButton} object to be removed.
      
      <param name="RadioButton"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.RadioButtons.insert(int,RadioButton)">
       
        <p>Inserts a new {@code RadioButton} object into the collection at specified position.</p> @param index The zero-based index at which {@code RadioButton} object should be inserted. @param button The {@code RadioButton} object to be inserted.
      
      <param name="int"/>
      <param name="RadioButton"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.RadioButtons.insert(RadioButton,RadioButton)">
       
        <p>Inserts a new {@code RadioButton} object into the collection after specified RadioButton object.</p> @param buttonToInsertAfter The {@code RadioButton} object to insert after. @param newButton The {@code RadioButton} object to be inserted.
      
      <param name="RadioButton"/>
      <param name="RadioButton"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.RadioButtons.indexOf(RadioButton)">
       
        <p>Gets the index of a specified section in the collection.</p> @return The index value. @param button The specified section.
      
      <param name="RadioButton"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.RadioButtons.get_Item(int)">
       
        <p>Gets or sets a {@code RadioButton} object from the collection according to RadioButton index.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.RadioButtons.set_Item(int,RadioButton)">
      <param name="int"/>
      <param name="RadioButton"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.RadioButtons.get_Item(String)">
       
        <p>Gets or sets a {@code RadioButton} object from the collection according to RadioButton ID.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.RadioButtons.set_Item(String,RadioButton)">
      <param name="String"/>
      <param name="RadioButton"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.RadioButtons.#ctor">
       
        <p>Initializes a new instance of the {@code RadioButtons} class.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.Rectangle">
       
        <p>Represents a rectangle {@code Shape} in a Pdf document.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>[Java] Pdf pdf1 = new Pdf(); Section sec1 = pdf1.getSections().add(); Graph graph1 = new Graph(sec1,400,100); sec1.getParagraphs().add(graph1); aspose.pdf.generator.Rectangle rect1 = new aspose.Pdf.Generator.Rectangle(graph1,50,10,100,50); graph1.getShapes().add(rect1); pdf1.save(...); [XML] &lt;?xml version="1.0" encoding="utf-8" ?&gt; &lt;Pdf xmlns="Aspose.Pdf"&gt; &lt;Section&gt; &lt;Graph Width="400" Height="100"&gt; &lt;Rectangle Position="50 10 100 50" /&gt; &lt;/Graph&gt; &lt;/Section&gt; &lt;/Pdf&gt;</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Rectangle.#ctor">
       
        <p>Initializes a new instance of the {@code Rectangle} class.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Rectangle.#ctor(float,float,float,float)">
       
        <p>Initializes a new instance of the {@code Rectangle} class.</p> @param left The left position of the rectangle. @param bottom The bottom position of the rectangle. @param height The height of the rectangle. @param width The width of the rectangle.
      
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Rectangle.#ctor(Graph)">
       
        <p>Initializes a new instance of the {@code Rectangle} class.</p> @param parentGraph The specified {@code Graph} object. 
        <p>
          <hr>This constructor can inherit common property values from the specified {@code Graph} object.</hr>
        </p> 
      
      <param name="Graph"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Rectangle.#ctor(Graph,float,float,float,float)">
       
        <p>Initializes a new instance of the {@code Rectangle} class.</p> @param parentGraph The specified {@code Graph} object. @param left The left position of the rectangle. @param bottom The bottom position of the rectangle. @param height The height of the rectangle. @param width The width of the rectangle.
        <p>
          <hr>This constructor can inherit common property values from the specified {@code Graph} object.</hr>
        </p> 
      
      <param name="Graph"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Rectangle.Left">
       
        <p>Gets or sets a float value that indicates the left position of the rectangle.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Rectangle.Bottom">
       
        <p>Gets or sets a float value that indicates the bottom position of the rectangle.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Rectangle.Width">
       
        <p>Gets or sets a float value that indicates the width of the rectangle.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Rectangle.Height">
       
        <p>Gets or sets a float value that indicates the height of the rectangle.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Rectangle.RadiusForRoundCorner">
       
        <p>Gets or sets a float value that indicates the radius for the round corner.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.RectangleArea">
       
        <p>Represents rectangle area via left,top,height,width set of data</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.RectangleArea.#ctor">
       
        <p>Initializes a new instance of the {@code RectangleArea} class.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.RectangleArea.#ctor(float,float,float,float)">
       
        <p>Initializes a new instance of the {@code RectangleArea} class.</p> @param left The left position of the rectangle area. @param top The top position of the rectangle area. @param width The width of the rectangle area. @param height The height of the rectangle area.
      
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.RectangleArea.Left">
       
        <p>Gets or sets a float value that indicates the left position of the rectangle area.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.RectangleArea.Width">
       
        <p>Gets or sets a float value that indicates the width of the rectangle area.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.RectangleArea.Height">
       
        <p>Gets or sets a float value that indicates the height of the rectangle area.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.RectangleArea.Top">
       
        <p>Gets or sets a float value that indicates the top position of the rectangle area.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.RectData">
       
        <p>Represents a rectangle data structure which specifies the low-left and up-right coordinates.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>[Java] Pdf pdf1 = new Pdf(); RectData rect1 = new RectData(); rect1.setLowerLeftX ( 100); rect1.setLowerLeftY ( 100); rect1.setUperRightX ( PageSize.A4Width); rect1.setUperRightY ( PageSize.A4Height); pdf1.getPageSetup().setCropBox ( rect1); Section sec1 = pdf1.getSections().add(); Text text1 = new Text(sec1,"this is text content"); text1.getMargin().setTop ( 30); sec1.getParagraphs().add(text1); pdf1.save(...); [XML] &lt;?xml version="1.0" encoding="utf-8" ?&gt; &lt;Pdf xmlns="Aspose.Pdf" CropBox="100 100 595 842"&gt; &lt;Section&gt; &lt;Text MarginTop="30"&gt; &lt;Segment&gt;this is text content&lt;/Segment&gt; &lt;/Text&gt; &lt;/Section&gt; &lt;/Pdf&gt;</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.RectData.getLowerLeftX">
       
        <p>Gets or sets a float value that indicates the x-coordinate of the lower-left point.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.RectData.setLowerLeftX(float)">
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.RectData.getLowerLeftY">
       
        <p>Gets or sets a float value that indicates the y-coordinate of the lower-left point.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.RectData.setLowerLeftY(float)">
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.RectData.getUperRightX">
       
        <p>Gets or sets a float value that indicates the x-coordinate of the upper-right point.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.RectData.setUperRightX(float)">
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.RectData.getUperRightY">
       
        <p>Gets or sets a float value that indicates the y-coordinate of the upper-right point.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.RectData.setUperRightY(float)">
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.RectData.deepClone">
       
        <p>Clones a new {@code RectData} object.</p> @return The new cloned {@code RectData} object.
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.Row">
       
        <p>Repserents a row in a {@code Aspose.Pdf.Generator.Table}.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>[Java] Pdf pdf1 = new Pdf(); Section sec1 = pdf1.getSections().add(); aspose.pdf.generator.Table table1 = new aspose.pdf.generator.Table(); sec1.getParagraphs().add(table1); table1.setColumnWidths ( "70 2cm"); Row row1 = table1.getRows().add(); Cell cell1Row1 = row1.getCells().add("ColumnsSpan = 2"); cell1Row1.setColumnsSpan ( 2); cell1Row1.setBorder ( new BorderInfo((int)BorderSide.All,0.5F)); Row row2 = table1.getRows().add(); Cell cell1Row2 = row2.getCells().add("cell1"); cell1Row2.setBorder ( new BorderInfo((int)BorderSide.All,0.5F)); Cell cell2Row2 = row2.getCells().add("cell2"); cell2Row2.setBorder ( new BorderInfo((int)BorderSide.All,0.5F,new aspose.pdf.generator.Color("Red"))); pdf1.save(...); [XML] &lt;Pdf xmlns="Aspose.Pdf"&gt; &lt;Section&gt; &lt;Table ColumnWidths="70 2cm"&gt; &lt;Row&gt; &lt;Cell ColumnsSpan="2"&gt; &lt;Border&gt; &lt;All LineWidth="0.5"&gt;&lt;/All&gt; &lt;/Border&gt; &lt;Text&gt; &lt;Segment&gt;ColumnsSpan = 2&lt;/Segment&gt; &lt;/Text&gt; &lt;/Cell&gt; &lt;/Row&gt; &lt;Row&gt; &lt;Cell&gt; &lt;Border&gt; &lt;All LineWidth="0.5"&gt;&lt;/All&gt; &lt;/Border&gt; &lt;Text&gt; &lt;Segment&gt;cell1&lt;/Segment&gt; &lt;/Text&gt; &lt;/Cell&gt; &lt;Cell&gt; &lt;Border&gt; &lt;All LineWidth="0.5" Color="Red"&gt;&lt;/All&gt; &lt;/Border&gt; &lt;Text&gt; &lt;Segment&gt;cell2&lt;/Segment&gt; &lt;/Text&gt; &lt;/Cell&gt; &lt;/Row&gt; &lt;/Table&gt; &lt;/Section&gt; &lt;/Pdf&gt;</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Row.getVerticalAlignment">
       
        <p>Gets or sets a {@code VerticalAlignmentType} object that indicates the vertical alignment type.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Row.setVerticalAlignment(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Row.getVerticalAlignmentType">
       
        <p>Gets or sets a {@code Aspose.Pdf.VerticalAlignment} object that indicates the vertical alignment type.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Row.setVerticalAlignmentType(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Row.addCell"/>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Row.getCell(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Row.getCellCount"/>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Row.#ctor(Table)">
       
        <p>Initializes a new instance of the {@code Row} class in a table.</p> @param table The {@code Table} object where the row is in.
      
      <param name="Table"/>
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Row.Border">
       
        <p>Gets or sets a {@code BorderInfo} object that indicates the row border info.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Row.Cells">
       
        <p>Gets or sets a {@code Cells} collection that indicates all cells in the row.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Row.ID">
       
        <p>Gets or sets a string that indicates the ID of the row.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Row.DefaultCellTextInfo">
       
        <p>Gets or sets a {@code TextInfo} object that indicates the text format info of the row. If you want to set text format for all cells that have already been added to the row, please do not set it directly but follow the method in the example.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>[Java] TextInfo info = (TextInfo)row.getDefaultCellTextInfo().clone(); info.setBackgroundColor ( new Color("Blue")); row.setDefaultCellTextInfo ( info);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Row.DefaultCellBorder"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Row.DefaultRowCellPadding">
       
        <p>Gets or sets a {@code MarginInfo} object that indicates the default cell padding in the row.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Row.FixedRowHeight">
       
        <p>Gets or sets a float value that indicates the fixed row height. If the fixed row height is set, the property of IsBroken is disabled unless the real height of the row is out of the margin bound. When the value is too small, it will be enlarged automatically.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Row.IsDisabled">
       
        <p>Gets or sets a bool value that indicates whether this row is disabled. The default value is false. If this property is set to true, this row will not be rendered.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Row.IsInNewPage">
       
        <p>Gets or sets a bool value that indicates whether to split the table from this row and display the subsequent rows on the next page. The property doesn't support nested table.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Row.BackgroundColor">
       
        <p>Gets or sets a {@code Aspose.Pdf.Generator.Color} object that indicates the background color of the row.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Row.IsBroken">
       
        <p>Gets or sets a bool value that indicates whether the row can be broken or not when the row spans two pages. Default value is true.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.Rows">
       
        <p>Represents a collection of {@code Row} objects.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>[Java] Pdf pdf1 = new Pdf(); Section sec1 = pdf1.getSections().add(); aspose.pdf.generator.Table table1 = new aspose.pdf.generator.Table(); sec1.getParagraphs().add(table1); table1.setColumnWidths ( "70 2cm"); Row row1 = table1.getRows().add(); Cell cell1Row1 = row1.getCells().add("ColumnsSpan = 2"); cell1Row1.setColumnsSpan ( 2); cell1Row1.setBorder ( new BorderInfo((int)BorderSide.All,0.5F)); Row row2 = table1.getRows().add(); Cell cell1Row2 = row2.getCells().add("cell1"); cell1Row2.Border = new BorderInfo((int)BorderSide.All,0.5F); Cell cell2Row2 = row2.getCells().add("cell2"); cell2Row2.Border = new BorderInfo((int)BorderSide.All,0.5F,new aspose.pdf.generator.Color("Red")); pdf1.save(...); [XML] &lt;Pdf xmlns="Aspose.Pdf"&gt; &lt;Section&gt; &lt;Table ColumnWidths="70 2cm"&gt; &lt;Row&gt; &lt;Cell ColumnsSpan="2"&gt; &lt;Border&gt; &lt;All LineWidth="0.5"&gt;&lt;/All&gt; &lt;/Border&gt; &lt;Text&gt; &lt;Segment&gt;ColumnsSpan = 2&lt;/Segment&gt; &lt;/Text&gt; &lt;/Cell&gt; &lt;/Row&gt; &lt;Row&gt; &lt;Cell&gt; &lt;Border&gt; &lt;All LineWidth="0.5"&gt;&lt;/All&gt; &lt;/Border&gt; &lt;Text&gt; &lt;Segment&gt;cell1&lt;/Segment&gt; &lt;/Text&gt; &lt;/Cell&gt; &lt;Cell&gt; &lt;Border&gt; &lt;All LineWidth="0.5" Color="Red"&gt;&lt;/All&gt; &lt;/Border&gt; &lt;Text&gt; &lt;Segment&gt;cell2&lt;/Segment&gt; &lt;/Text&gt; &lt;/Cell&gt; &lt;/Row&gt; &lt;/Table&gt; &lt;/Section&gt; &lt;/Pdf&gt;</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Rows.add(Row)">
       
        <p>Adds a new {@code Row} object into the collection.</p> @param row The {@code Row} object to be added.
      
      <param name="Row"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Rows.add">
       
        <p>Initializes a new instance of the {@code Row} class and add it to the Rows collection.</p> @return The new {@code Row} object.
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Rows.get_Item(int)">
       
        <p>Gets or sets a {@code Row} object from the collection according to Row index.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Rows.set_Item(int,Row)">
      <param name="int"/>
      <param name="Row"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Rows.get_Item(String)">
       
        <p>Gets or sets a {@code Row} object from the collection according to Row ID.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Rows.set_Item(String,Row)">
      <param name="String"/>
      <param name="Row"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Rows.insert(int,Row)">
       
        <p>Inserts a new {@code Row} object into the collection at specified position.</p> @param index The zero-based index at which {@code Row} object should be inserted. @param row The {@code Row} object to be inserted.
      
      <param name="int"/>
      <param name="Row"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Rows.insert(Row,Row)">
       
        <p>Inserts a new {@code Row} object into the collection after specified Cell object.</p> @param rowToInsertAfter The {@code Row} object to insert after. @param newRow The {@code Row} object to be inserted.
      
      <param name="Row"/>
      <param name="Row"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Rows.indexOf(Row)">
       
        <p>Gets the index of a specified row in the collection.</p> @return The index value. @param row The specified row.
      
      <param name="Row"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Rows.remove(Row)">
       
        <p>Removes a {@code Row} object from the collection.</p> @param rowToRemove The {@code Row} object to be romoved.
      
      <param name="Row"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Rows.copyTo(Row[],int)">
       
        <p>Copies the elements to a {@code Row} object array, starting at a specified array index.</p> @param rowArray The {@code Row} object array. @param index The start index.
      
      <param name="Row[]"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Rows.#ctor">
       
        <p>Initializes a new instance of the {@code Rows} class.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Rows.#ctor(com.aspose.pdf.generator.legacyxmlmodel.Table)">
       
        <p>Initializes a new instance of the {@code Rows} class.</p> 
      
      <param name="com.aspose.pdf.generator.legacyxmlmodel.Table"/>
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.Section"/>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Section.#ctor">
       
        <p>Initializes a new instance of the {@code Section} class.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Section.#ctor(com.aspose.pdf.generator.legacyxmlmodel.LegacyPdf)">
       
        <p>Initializes a new instance of the {@code Section} class.</p> @param pdf The pdf document object. 
        <p>
          <hr>This constructor can inherit common property values from the specified {@code Pdf} object.</hr>
        </p> 
      
      <param name="com.aspose.pdf.generator.legacyxmlmodel.LegacyPdf"/>
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Section.TextInfo"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Section.Paragraphs"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Section.IsLandscape"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Section.FirstLineIndent"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Section.IsSpaced"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Section.IsNewColumn"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Section.IsDisabled"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Section.IsPageNumberRestarted"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Section.IsNewPage"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Section.StartingPageNumber"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Section.ID"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Section.BackgroundImageFile"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Section.BackgroundImageType"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Section.BackgroundImageFixedWidth"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Section.IsBackgroundImageBlackWhite"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Section.PageRotatingAngle"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Section.ColumnCount"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Section.ColumnWidths"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Section.ColumnSpacing"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Section.HasColumnLine"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Section.IsAutoHyphenated">
       
        <p>Gets or sets a int value that indicates the starting page number of the section. Default is 1.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Section.IsWidowOrphanControlEnabled">
       
        <p>Gets or sets a bool value that indicates whether the Widow/Orphan control is enabled. Default is true. If it is true, Widow/Orphan control is enabled and Widows/orphans themselves are eliminated (disabled).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Section.BackgroundColor">
       
        <p>Gets or sets a {@code Aspose.Pdf.Color} object that indicates the background color of the section.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Section.GraphInfo">
       
        <p>Gets or sets a {@code GraphInfo} object that indicates the graph info in the Pdf document, that will be used as default one to all added Graph objects.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Section.PageInfo"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Section.FirstPageInfo"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Section.OddFooter">
       
        <p>Gets or sets a {@code HeaderFooter} object that indicates the footer that will be shown on odd pages of section.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Section.AdditionalOddFooter">
       
        <p>Gets or sets a {@code HeaderFooter} object that indicates the odd footer of the section. If the first page needs one footer style, the subsequent pages need another footer style, the additional footer is needed.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Section.OddHeader">
       
        <p>Gets or sets a {@code HeaderFooter} object that indicates the header that will be shown on odd pages of section.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Section.AdditionalOddHeader">
       
        <p>Gets or sets a {@code HeaderFooter} object that indicates the additional odd header of the section. If the first page needs one header style, the subsequent pages need another header style, the additional header is needed.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Section.EvenFooter">
       
        <p>Gets or sets a {@code HeaderFooter} object that indicates the footer that will be shown on even pages of document.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Section.AdditionalEvenFooter">
       
        <p>Gets or sets a {@code HeaderFooter} object that indicates the additional even footer of the section. If the first page needs one footer style, the subsequent pages need another footer style, the additional footer is needed.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Section.EvenHeader">
       
        <p>Gets or sets a {@code HeaderFooter} object that indicates header that will be shown on event pages of section.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Section.AdditionalEvenHeader">
       
        <p>Gets or sets a {@code HeaderFooter} object that indicates the additional even header of the section. If the first page needs one header style, the subsequent pages need another header style, the additional header is needed.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.Sections"/>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Sections.add(Section)">
      <param name="Section"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Sections.getCount"/>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Sections.get_Item(int)">
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.Segment">
       
        <p>Represents a segment in a {@code Text} paragraph.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>[Java] Pdf pdf1 = new Pdf(); Section sec1 = pdf1.getSections().add(); Text text1 = new Text(sec1,"seg1 "); sec1.getParagraphs().add(text1); Segment seg2 = text1.getSegments().add("seg2"); seg2.getTextInfo().setColor ( new aspose.pdf.generator.Color("Red")); seg2.getTextInfo().setFontSize ( 16); pdf1.save(...); [XML] &lt;?xml version="1.0" encoding="utf-8" ?&gt; &lt;Pdf xmlns="Aspose.Pdf"&gt; &lt;Section&gt; &lt;Text&gt; &lt;Segment&gt;seg1 &lt;/Segment&gt; &lt;Segment Color="Red" FontSize="16"&gt;seg2 &lt;/Segment&gt; &lt;/Text&gt; &lt;/Section&gt; &lt;/Pdf&gt;</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Segment.isAutoHyphenated">
       
        <p>Gets or sets a bool value that indicates whehter the text is hyphenated automatically.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Segment.isAutoHyphenated(boolean)">
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Segment.getTextInfo">
       
        <p>Gets or sets a {@code TextInfo} object that indicates the text info of the segment.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Segment.setTextInfo(TextInfo)">
      <param name="TextInfo"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Segment.getFootNote">
       
        <p>get or set the FootNote object that indicates the footnote of the current segment.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Segment.setFootNote(FootNote)">
      <param name="FootNote"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Segment.getEndNote">
       
        <p>get or set the EndNote object that indicates the endnote of the current segment.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Segment.setEndNote(EndNote)">
      <param name="EndNote"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Segment.getContent">
       
        <p>Gets or sets a string that indicates the content of the text segment.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Segment.setContent(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Segment.getDateFormat">
       
        <p>Gets or sets a string that indicates the date format of the replaceable date symbol($D). It's value can be "d", "D", "f", "F","g", "G","m","r","s","t", "T","u", "U","y","dddd, MMMM dd yyyy","ddd, MMM d \"'\"yy","dddd, MMMM dd","M/yy","dd-MM-yy". The default value is "d". Please refer to example of DateTime.ToString() in MSDN.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Segment.setDateFormat(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Segment.isSymbolReplaceable">
       
        <p>Whether replace symbols like $p or not.</p>
        <p>Gets or sets a bool value that indicates whether a symbol like $p is replaceable or not. Default is true.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Segment.isSymbolReplaceable(boolean)">
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Segment.getID">
       
        <p>Gets or sets a string that indicates the ID of the segment.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Segment.setID(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Segment.getHyperlink">
       
        <p>Gets or sets a {@code Hyperlink} object that indicates the hyper link info of the segment.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Segment.setHyperlink(Hyperlink)">
      <param name="Hyperlink"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Segment.getInlineParagraph">
       
        <p>Gets or sets a {@code Paragraph} object that indicates the inline paragraph. If this property is set, the segment become the inline paragraph of Text and the {@code Content} is disabled. {@code Image}, {@code Graph}, {@code FormField} and {@code Attachment} can be used as inline paragraph.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>[Java] Pdf p = new Pdf(); Section sec1 = p.getSections().add(); Text text1 = new Text(); sec1.getParagraphs().add(text1); text1.getSegments().add("This is a test for inline"); Segment seg2 = text1.getSegments().add(); Image img1 = new Image(); img1.getImageInfo().setFile ( "c:/images/logo.gif"); seg2.setInlineParagraph ( img1); p.save("d:/test/test.pdf"); [XML] &lt;Pdf xmlns="Aspose.Pdf"&gt; &lt;Section&gt; &lt;Text&gt; &lt;Segment FontSize="16"&gt;This is a inline image: &lt;/Segment&gt; &lt;Segment&gt; &lt;Image File="c:\images\logo.gif" /&gt; &lt;/Segment&gt; &lt;/Text&gt; &lt;/Section&gt; &lt;/Pdf&gt;</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Segment.setInlineParagraph(Paragraph)">
      <param name="Paragraph"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Segment.isNumeric">
       
        <p>Whether the segment is numeric</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Segment.load(XmlTextReader,LoadingContext)">
      <param name="XmlTextReader"/>
      <param name="LoadingContext"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Segment.#ctor"/>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Segment.#ctor(String)">
       
        <p>Initializes a new instance of the {@code Segment} class.</p> @param content The content of the segment.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Segment.#ctor(String,TextInfo)">
       
        <p>Initializes a new instance of the {@code Segment} class.</p> @param content The content of the segment. @param info The text format info of the segment.
      
      <param name="String"/>
      <param name="TextInfo"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Segment.#ctor(Text)">
       
        <p>Initializes a new instance of the {@code Segment} class.</p> @param text 
        <p>
          <hr>This constructor can inherit common property values from the specified {@code Text} object.</hr>
        </p> 
      
      <param name="Text"/>
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.Segments">
       
        <p>Represents a collection of {@code Segment} objects.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>[Java] Pdf pdf1 = new Pdf(); Section sec1 = pdf1.getSections().add(); Text text1 = new Text(sec1,"seg1 "); sec1.getParagraphs().add(text1); Segment seg2 = text1.getSegments().add("seg2"); seg2.getTextInfo().setColor ( new aspose.pdf.generator.Color("Red")); seg2.getTextInfo().setFontSize ( 16); pdf1.save(...); [XML] &lt;?xml version="1.0" encoding="utf-8" ?&gt; &lt;Pdf xmlns="Aspose.Pdf"&gt; &lt;Section&gt; &lt;Text&gt; &lt;Segment&gt;seg1 &lt;/Segment&gt; &lt;Segment Color="Red" FontSize="16"&gt;seg2 &lt;/Segment&gt; &lt;/Text&gt; &lt;/Section&gt; &lt;/Pdf&gt;</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Segments.add(Segment)">
       
        <p>Adds a new {@code Segment} object into the collection.</p> @param segment The {@code Segment} object to be added.
      
      <param name="Segment"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Segments.add(String)">
       
        <p>Initializes a new instance of the {@code Segment} class and add it to the Segments collection</p> @return The {@code Segment} object. @param segmentString The string content of the segment.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Segments.add">
       
        <p>Initializes a new instance of the {@code Segment} class and add it to the Segments collection</p> @return The {@code Segment} object.
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Segments.insert(int,Segment)">
       
        <p>Inserts a new {@code Segment} object into the collection at specified position.</p> @param index The zero-based index at which the {@code Segment} object should be inserted. @param segment The {@code Segment} object to be inserted.
      
      <param name="int"/>
      <param name="Segment"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Segments.insert(Segment,Segment)">
       
        <p>Inserts a new {@code Segment} object into the collection after specified Segment object.</p> @param segmentToInsertAfter The {@code Segment} object to insert after. @param newSegment The {@code Segment} object to be inserted.
      
      <param name="Segment"/>
      <param name="Segment"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Segments.remove(Segment)">
       
        <p>Removes a {@code Segment} object from the collection.</p> @param segmentToRemove The {@code Segment} object to be romoved.
      
      <param name="Segment"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Segments.indexOf(Segment)">
       
        <p>Gets the index of a specified {@code Segment} object in the collection.</p> @return The index value. @param segment The specified {@code Segment} object.
      
      <param name="Segment"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Segments.copyTo(Segment[],int)">
       
        <p>Copies the elements to a {@code Segment} object array, starting at a specified array index.</p> @param segmentArray The {@code Segment} object array. @param index The start index.
      
      <param name="Segment[]"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Segments.get_Item(int)">
       
        <p>Gets or sets a {@code Segment} object from the collection according to Segment index.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Segments.set_Item(int,Segment)">
      <param name="int"/>
      <param name="Segment"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Segments.get_Item(String)">
       
        <p>Gets or sets a {@code Segment} object from the collection according to Segment ID.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Segments.set_Item(String,Segment)">
      <param name="String"/>
      <param name="Segment"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Segments.#ctor">
       
        <p>Initializes a new instance of the {@code Segments} class.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.Shape"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Shape.ID">
       
        <p>Gets or sets a string that indicates the ID of the shape.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Shape.GraphInfo"/>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.Shapes">
       
        <p>Represents a collection of {@code Shape} objects.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>[Java] Pdf pdf1 = new Pdf(); Section sec1 = pdf1.getSections().add(); Graph graph1 = new Graph(sec1,100,400); sec1.getParagraphs().add(graph1); float[] posArr = new float[]{0,0,200,80,300,40,350,90}; Curve curve1 = new Curve(graph1,posArr); graph1.getShapes().add(curve1); pdf1.save(...); [XML] &lt;?xml version="1.0" encoding="utf-8" ?&gt; &lt;Pdf xmlns="Aspose.Pdf"&gt; &lt;Section&gt; &lt;Graph Height="100" Width="400"&gt; &lt;Curve Position="0 0 200 80 300 40 350 90" /&gt; &lt;/Graph&gt; &lt;/Section&gt; &lt;/Pdf&gt;</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Shapes.add(Shape)">
       
        <p>Adds a new {@code Shape} object into the collection.</p> @param shape The {@code Shape} object to be added.
      
      <param name="Shape"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Shapes.remove(Shape)">
       
        <p>Removes a {@code Shape} object from the collection.</p> @param shapeToRemove The {@code Shape} object to be romoved.
      
      <param name="Shape"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Shapes.copyTo(Shape[],int)">
       
        <p>Copies the elements to a {@code Shape} object array, starting at a specified array index.</p> @param shapeArray The shapes array. @param index The start index.
      
      <param name="Shape[]"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Shapes.indexOf(Shape)">
       
        <p>Gets the index of a specified {@code Shape} object in the collection.</p> @return The index value. @param shape The specified {@code Shape} object.
      
      <param name="Shape"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Shapes.get_Item(int)">
       
        <p>Gets or sets a {@code Shape} object from the collection according to Shape index.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Shapes.set_Item(int,Shape)">
      <param name="int"/>
      <param name="Shape"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Shapes.get_Item(String)">
       
        <p>Gets or sets a {@code Shape} object from the collection according to Shape ID.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Shapes.set_Item(String,Shape)">
      <param name="String"/>
      <param name="Shape"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Shapes.#ctor">
       
        <p>Initializes a new instance of the {@code Shapes} class.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.SquareNote"/>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.SquareNote.load(XmlTextReader,LoadingContext)">
      <param name="XmlTextReader"/>
      <param name="LoadingContext"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.SquareNote.#ctor">
       
        <p>Initializes a new instance of the {@code SquareNote} class.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.SquareNote.BorderStyle">
       
        <p>Gets or sets a value that indicates border style.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.SquareNote.FillColor">
       
        <p>Gets or sets a value that indicates fill color.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.Table">
       
        <p>Represents a table {@code Paragraph} in a Pdf document.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>[Java] Pdf pdf1 = new Pdf(); Section sec1 = pdf1.getSections().add(); aspose.pdf.generator.Table table1 = new aspose.pdf.generator.Table(); sec1.getParagraphs().add(table1); table1.setColumnWidths ( "70 2cm"); Row row1 = table1.getRows().add(); Cell cell1Row1 = row1.getCells().add("ColumnsSpan = 2"); cell1Row1.setColumnsSpan ( 2); cell1Row1.setBorder ( new BorderInfo((int)BorderSide.All,0.5F)); Row row2 = table1.getRows().add(); Cell cell1Row2 = row2.getCells().add("cell1"); cell1Row2.setBorder ( new BorderInfo((int)BorderSide.All,0.5F)); Cell cell2Row2 = row2.getCells().add("cell2"); cell2Row2.setBorder ( new BorderInfo((int)BorderSide.All,0.5F,new aspose.pdf.generator.Color("Red"))); pdf1.save(...); [XML] &lt;Pdf xmlns="Aspose.Pdf"&gt; &lt;Section&gt; &lt;Table ColumnWidths="70 2cm"&gt; &lt;Row&gt; &lt;Cell ColumnsSpan="2"&gt; &lt;Border&gt; &lt;All LineWidth="0.5"&gt;&lt;/All&gt; &lt;/Border&gt; &lt;Text&gt; &lt;Segment&gt;ColumnsSpan = 2&lt;/Segment&gt; &lt;/Text&gt; &lt;/Cell&gt; &lt;/Row&gt; &lt;Row&gt; &lt;Cell&gt; &lt;Border&gt; &lt;All LineWidth="0.5"&gt;&lt;/All&gt; &lt;/Border&gt; &lt;Text&gt; &lt;Segment&gt;cell1&lt;/Segment&gt; &lt;/Text&gt; &lt;/Cell&gt; &lt;Cell&gt; &lt;Border&gt; &lt;All LineWidth="0.5" Color="Red"&gt;&lt;/All&gt; &lt;/Border&gt; &lt;Text&gt; &lt;Segment&gt;cell2&lt;/Segment&gt; &lt;/Text&gt; &lt;/Cell&gt; &lt;/Row&gt; &lt;/Table&gt; &lt;/Section&gt; &lt;/Pdf&gt;</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Table.isRowBroken">
       
        <p>Gets or sets a bool value that indicates whether the row can be broken or not when its table is broken. Default value is true.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Table.isRowBroken(boolean)">
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Table.getColumnCount">
       
        <p>Gets or sets an int value that indicates the total column number.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Table.setColumnCount(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Table.getAlignment">
       
        <p>Gets or sets a {@code HorizontalAlignmentType} that indicates the paragraph alignment type.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Table.setAlignment(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Table.getHorizontalAlignment">
       
        <p>Gets or sets a {@code Aspose.Pdf.HorizontalAlignment} that indicates the paragraph alignment type.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Table.setHorizontalAlignment(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Table.getVerticalAlignment"/>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Table.setVerticalAlignment(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Table.getVerticalAlignmentType">
       
        <p>Gets or sets a {@code Aspose.Pdf.VerticalAlignment} object that indicates the vertical alignment type of all cells in the table.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Table.setVerticalAlignmentType(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Table.deepClone">
       
        <p>Clones a new {@code Table} object. Table properties are cloned but rows in table is not cloned.</p> @return The new table
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Table.setColumnTextInfo(int,TextInfo)">
       
        <p>Sets the text format info of specified column.</p> @param columnNumber The number of the column to be set. @param textInfo The text info object to set.
      
      <param name="int"/>
      <param name="TextInfo"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Table.setTextNameForTextualChildren(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Table.setFontSizeForTextualChildren(float)">
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Table.toNewParagraph"/>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Table.getRowsCount">
      / * 
        <p>/ * Imports one-dimensional array of data into table. Import goes one cell per each array's item and / * starts from row and column defined in parameters. During import, if detected that necessary rows / * are still absent(i.e. target table is too small to absorb all data), necessary rows will be created / *</p> / * @param importedArray imported data, nulls will be imported as empty strings / * @param firstFilledRow define number of first target row in target table from wich import will start. / * If amount of rows in target table less then required, missing rows will be created first. / * @param firstFilledColumn specifies number of first target column in target table , column must be present in target table before start of import / * @param isLeftColumnsFilled If 'isLeftColumnsFilled'=false, then in second and all subsequent filled rows cells that are on the left hand from / * firstFilledColumn will be skipped /
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Table.addRow"/>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Table.getRow(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Table.#ctor">
       
        <p>Initializes a new instance of the {@code Table} class.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Table.#ctor(Section)">
       
        <p>Initializes a new instance of the {@code Table} class in the {@code Section}.</p> @param section The section object where the table is in.
      
      <param name="Section"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Table.#ctor(com.aspose.pdf.generator.legacyxmlmodel.Cell)">
       
        <p>Initializes a new instance of the {@code Table} class in the {@code Cell}.</p> @param cell The cell object where the table is in.
      
      <param name="com.aspose.pdf.generator.legacyxmlmodel.Cell"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Table.#ctor(com.aspose.pdf.generator.legacyxmlmodel.HeaderFooter)">
       
        <p>Initializes a new instance of the {@code Table} class in the {@code HeaderFooter}.</p> @param parentHeaderOrFooter The header or footer object where the table is in.
      
      <param name="com.aspose.pdf.generator.legacyxmlmodel.HeaderFooter"/>
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Table.IsFitToPage">
       
        <p>Gets or sets a bool value that indicates whether the table need to be placed on single page. Default value is false.The attribute is only valid when the table is the first paragraph on a page;</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Table.FromRSItemType">
       
        <p>indicate that where of the report items in reporting service the current table is transfered from.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Table.IsNeedRepeating">
       
        <p>Gets or sets a bool value that indicates whether the paragraph need to be repeated on next page. Default value is false.The attribute is only valid when the paragraph itself and the object its ReferenceParagraphID referred to both are included in RepeatingRows.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Table.ColumnWidths">
       
        <p>Gets or sets a string that contains the width of each columns in this table. The value of each column should be separated by blank.The default unit is point, but cm,inch and percentage of available width are also supported.For example,"120 2.5cm 1.5inch", or "60% 40%", The max column number is 1024,</p>
        <p>
          <hr>If this property is set, the FitWidth property of the {@code Cell} object needs not set.</hr>
        </p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Table.IsBroken">
       
        <p>Gets or sets a bool value that indicates whether the table is allowed to be broken or not when crossing pages.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Table.IsVerticalBroken">
       
        <p>Gets or sets a bool value that indicates whether the table is broken vertically as the table is printed out of the right page margin.If The sub-table can be place in the same page,it will be placed after the original table in the same page. If The sub-table can't be place in the same page,it will be placed after the original table in the next page. The default value is false.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Table.IsOriginalVerticalBrokenTable">
       
        <p>Gets or sets a bool value that indicates whether the table is the original vertical broken table</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Table.IsVerticalBrokenInSamePage">
       
        <p>Gets or sets a bool value that indicates whether the vertically broken table is in the same page.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Table.IsFirstRowRepeated">
       
        <p>Gets or sets a bool value that indicates whether the first row is repeated when its table is broken.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Table.RepeatingRows">
       
        <p>Gets or sets a int value that indicates how many rows from the first row will be repeated when the table is broken across pages.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Table.UseTOCasTargetList">
       
        <p>Get or set a bool value that indicates whether the table will be referenced in TOC instead of special TableList</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Table.IsFixedRowHeightContentClip">
       
        <p>Gets or sets a value that indicates in case with fixed row height, do content will be truncated if it go out of margin</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Table.RepeatingRowStyle">
       
        <p>Text formatting style for table repeating rows</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Table.CornerStyle">
       
        <p>The border corner style.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Table.Border">
       
        <p>Gets or sets a {@code BorderInfo} object that indicates the table border info.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Table.Title">
       
        <p>Gets or sets a string value that indicates the title of the table.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Table.Rows">
       
        <p>Gets or sets a {@code Rows} collection that indicates all rows in the table.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Table.FixedWidth">
       
        <p>Gets or sets a float value that indicates the fixed width of the table. {@code
          <BLOCKQUOTE class="dtBlock"> 
            <Font color="red">NOTE: This member is now obsolete.</Font>
          </BLOCKQUOTE>} {@code 
          <BLOCKQUOTE class="dtBlock">You should use {@code ColumnWidths} to set the column width of the table. It will be removed 12 months later since release 3.0.0.0 in April 2006. Aspose apologizes for any inconvenience you may have experienced.</BLOCKQUOTE>}
        </p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Table.ColumnAdjustment">
       
        <p>Gets or sets a {@code ColumnAdjustmentType} that indicates how to determine the width of columns.Default is Customized which means the column width are specified by manual.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Table.DefaultCellBorder">
       
        <p>Gets or sets a {@code BorderInfo} object that indicates the default border style for all cells in this table.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Table.DefaultCellTextInfo">
       
        <p>Gets or sets a {@code TextInfo} object that indicates the default cell text format info.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Table.DefaultCellPadding">
       
        <p>Gets or sets a {@code MarginInfo} object that indicates the default cell padding in the table.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Table.DefaultColumnWidth">
       
        <p>Get or sets default column width in the table. The default unit is point, but cm and inch are also supported. For example,FitWidth="2cm" or FitWidth="2inch".</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Table.IsSingleHeaderShown">
       
        <p>A bool value that indicates whether table with only a header(IsFirstRowRepeated=true and Rows.Count=1) be shown. The default value is true.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Table.BackgroundColor">
       
        <p>Gets or sets a {@code Aspose.Pdf.Generator.LegacyXmlModel.Color} object that indicates the background color of the table.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Table.BreakText">
       
        <p>Gets or sets a {@code Aspose.Pdf.Generator.LegacyXmlModel.Text} object that will appear in the end of the table if it is continued to the next page.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Table.IsEmptyRowAtBottomShown">
       
        <p>Gets or sets a bool value that indicates if the empty row at the bottom of the table be shown in the PDF. When a table is larger and can't be display in one page, the table will be splited into more tables. Sometimes the broken table has a empty row at the bottom. This property is used to control the displaying of the empty row. The default value is false.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Table.IsWordWrapped">
       
        <p>Gets or sets a boolean value that indicates the alignment type of the cell.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.Table.RSItemType"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Table.RSItemType.Table">
       
        <p>from the table element of RS</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Table.RSItemType.Matrix">
       
        <p>from the matrix element of RS</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Table.RSItemType.TextBox">
       
        <p>from the text box element of RS</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Table.RSItemType.List">
       
        <p>from the list element of RS</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Table.RSItemType.Rectangle">
       
        <p>from the rectangle element of RS</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Table.RSItemType.SubReport">
       
        <p>from the subreport element of RS</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Table.RSItemType.Image">
       
        <p>from the image element of RS</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Table.RSItemType.Chart">
       
        <p>from the chart element of RS</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Table.RSItemType.GaugePanel">
       
        <p>from the gauge panel element of RS,used for RS2008</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Table.RSItemType.Body"/>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.TabStop">
       
        <p>Represents a custom Tab stop position in a paragraph.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>[Java] //Create a text object Text t1 = new Text("This #$TAB is a example for custom TAB stop positions."); //Assign an instance of TabStops to the TabStops property of text object t1.setTabStops ( new TabStops()); //Call Add method of TabStops and pass a specified position as argument t1.getTabStops().add(150); //Call Add method with specified position and tab leader type as Dot t1.getTabStops().add(350,TabLeaderType.Dot); [XML] &lt;Text&gt; &lt;TabStops&gt; &lt;TabStop Position="150" /&gt; &lt;TabStop Position="350" LeaderType="Dot" /&gt; &lt;/TabStops&gt; &lt;Segment&gt; This is a example for custom TAB stop positions. &lt;/Segment&gt; &lt;/Text&gt;</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.TabStop.#ctor">
       
        <p>Initializes a new instance of the {@code TabStop} class.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.TabStop.Position">
       
        <p>Gets or sets a float value that indicates the tab stop position.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.TabStop.LeaderType">
       
        <p>Gets or sets a {@code TabLeaderType} enum that indicates the tab leader type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.TabStop.AlignmentType"/>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.TabStops">
       
        <p>Represents a collection of {@code TabStop} objects.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>[Java] //Create a text object Text t1 = new Text("This #$TAB is a example for custom TAB stop positions."); //Assign an instance of TabStops to the TabStops property of text object t1.setTabStops ( new TabStops()); //Call Add method of TabStops and pass a specified position as argument t1.getTabStops().add(150); //Call Add method with specified position and tab leader type as Dot t1.getTabStops().add(350,TabLeaderType.Dot); [XML] &lt;Text&gt; &lt;TabStops&gt; &lt;TabStop Position="150" /&gt; &lt;TabStop Position="350" LeaderType="Dot" /&gt; &lt;/TabStops&gt; &lt;Segment&gt; This is a example for custom TAB stop positions. &lt;/Segment&gt; &lt;/Text&gt;</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.TabStops.add">
       
        <p>Initializes a new instance of the {@code TabStop} class and add it to the TabStops collection.</p> @return The new {@code TabStop} object.
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.TabStops.add(float)">
       
        <p>Initializes a new instance of the {@code TabStop} class with specified position and add it to the TabStops collection.</p> @return The new {@code TabStop} object. @param position The position of the tab stop.
      
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.TabStops.getCount">
       
        <p>Initializes a new instance of the {@code TabStop} class with specified position and add it to the TabStops collection.</p> @return The new {@code TabStop} object. @param position The position of the tab stop.
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.TabStops.add(String)">
       
        <p>Initializes a new instance of the {@code TabStop} class with specified position as raw value(like '5.0inch') and add it to the TabStops collection.</p> @return The new {@code TabStop} object. @param position The position of the tab stop.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.TabStops.add(float,int)">
       
        <p>Initializes a new instance of the {@code TabStop} class with specified position and leader type and add it to the TabStops collection.</p> @return The new {@code TabStop} object. @param position The position of the tab stop. @param leaderType The leader type of the tab stop.
      
      <param name="float"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.TabStops.remove(TabStop)">
       
        <p>Removes a {@code TabStop} object from the collection.</p> @param stop
      
      <param name="TabStop"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.TabStops.deepClone">
       
        <p>Clones a new {@code TabStops} objects.</p> @return The new {@code TabStops} object.
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.TabStops.get_Item(int)">
       
        <p>Gets or sets a {@code TabStop} object from the collection according to TabStop index.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.TabStops.set_Item(int,TabStop)">
      <param name="int"/>
      <param name="TabStop"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.TabStops.#ctor">
       
        <p>Initializes a new instance of the {@code TabStops} class.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.Text">
       
        <p>Represents a text {@code Paragraph} in a Pdf document.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>[Java] Pdf pdf1 = new Pdf(); pdf1.getPageSetup().setPageHeight ( PageSize.A2Height); Section sec1 = pdf1.getSections().add(); Text text1 = new Text(sec1,"this is text content"); text1.getMargin().setTop ( 30); sec1.getParagraphs().add(text1); pdf1.save(...); [XML] &lt;?xml version="1.0" encoding="utf-8" ?&gt; &lt;Pdf xmlns="Aspose.Pdf"&gt; &lt;Section PageHeight="1684"&gt; &lt;Text MarginTop="30"&gt; &lt;Segment&gt;this is text content&lt;/Segment&gt; &lt;/Text&gt; &lt;/Section&gt; &lt;/Pdf&gt;</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Text.getTextInfo">
       
        <p>Gets or sets a {@code TextInfo} object that indicates the text info of the text paragraph.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Text.setTextInfo(TextInfo)">
      <param name="TextInfo"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Text.deepClone">
       
        <p>Clones a new {@code Text} object. Only format info of the text is cloned.</p> @return The new cloned {@code Text} object
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Text.getInlineRadioButtonCheckedIndex">
       
        <p>Gets or sets a int value that indicates the index of the inlineRadioButton that has been checked.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Text.setInlineRadioButtonCheckedIndex(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Text.setTextNameForTextualChildren(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Text.setFontSizeForTextualChildren(float)">
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Text.#ctor">
       
        <p>Initializes a new instance of the {@code Text} class.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Text.#ctor(String)">
       
        <p>Initializes a new instance of the {@code Text} class.</p> @param content The content of the first segment of the text.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Text.#ctor(String,TextInfo)">
       
        <p>Initializes a new instance of the {@code Text} class.</p> @param content The content of the first segment of the text. @param info The text format info of the first segment of the text.
      
      <param name="String"/>
      <param name="TextInfo"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Text.#ctor(Section)">
       
        <p>Initializes a new instance of the {@code Text} class.</p> @param section The specified {@code Section} object. 
        <p>
          <hr>This constructor can inherit common property values from the specified {@code Section} object.</hr>
        </p> 
      
      <param name="Section"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Text.#ctor(Section,String)">
       
        <p>Initializes a new instance of the {@code Text} class.</p> @param section The specified {@code Section} object. @param content The content of the first segment of the text.
        <p>
          <hr>This constructor can inherit common property values from the specified {@code Section} object.</hr>
        </p> 
      
      <param name="Section"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Text.#ctor(HeaderFooter)">
       
        <p>Initializes a new instance of the {@code Text} class.</p> @param hf The specified {@code HeaderFooter} object. 
        <p>
          <hr>This constructor can inherit common property values from the specified {@code HeaderFooter} object.</hr>
        </p> 
      
      <param name="HeaderFooter"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Text.#ctor(HeaderFooter,String)">
       
        <p>Initializes a new instance of the {@code Text} class.</p> @param hf The specified {@code HeaderFooter} object. @param content The content of the first segment of the text.
        <p>
          <hr>This constructor can inherit common property values from the specified {@code HeaderFooter} object.</hr>
        </p> 
      
      <param name="HeaderFooter"/>
      <param name="String"/>
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Text.IfHtmlTagSupportedCssWinsOnFirstLevelChildren">
       
        <p>For historical reasons in HTML to PDF conversion children of first level that created during HTML to PDF conversion inherites main font properties from parent textbox, this parameters allows to set it to TRUE and take values from CSS even for first level children</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Text.Opacity">
       
        <p>Gets or sets a float value between 0.0 and 1.0 that indicates the opacity of the text. The default value is 1.0.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Text.IsAutoHyphenated">
       
        <p>Gets or sets a bool value that indicates whehter the text is hyphenated automatically.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Text.TabStops">
       
        <p>Gets or sets a {@code TabStops} that indicates the tab stop positions in the text paragraph.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Text.Segments">
       
        <p>Gets or sets a {@code Segments} collection that indicates all segments in the text paragraph.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Text.FirstLineIndent">
       
        <p>Gets or sets an float value that indicates the indent of the first line in a text paragraph.The unit is point.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Text.IsSpaced">
       
        <p>Gets or sets a bool value that indicates whether the spaces at the begin of the text and returns in the text be shown. For the following XML: 
          <pre>&lt;Text&gt; &lt;Segment&gt;The first line, The second line.&lt;/Segment&gt; &lt;/Text&gt;</pre> If IsSpaced is false, the result will be: 
          <pre>The first line,The second line.</pre> If IsSpaced is true, the result will be: 
          <pre>The first line, The second line.</pre> 
        </p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Text.IsSvgEmbedded">
       
        <p>Gets or sets a bool value that indicates whether SVG areas supported.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Text.IsWidowOrphanControlEnabled">
       
        <p>Gets or sets a bool value that indicates whether the Widow/Orphan control is enabled. Default is true. If it is true, Widow/Orphan control is enabled and Widows/orphans themselves are eliminated (disabled).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Text.IsAlignedByWord">
       
        <p>Gets or sets a bool value that indicates whether the text is aligned by word. This property should be set to false when using Asian language such as chinese.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Text.TextWidth">
       
        <p>Gets or sets a float value that indicates the width paragraph.The unit is point.</p>
        <p>
          <hr>The property is used for custom positioning. You need not use this property if you want the paragraph be auto aligned.</hr>
        </p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Text.RotatingAngle">
       
        <p>Gets or sets a float value that indicates the number of degrees by which the text should be rotated anticlockwise when displayed or printed. Default value is 0.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>[Java] Pdf pdf1 = new Pdf(); Section sec1 = pdf1.getSections().add(); Text t1 = new Text("Hello world"); t1.setPositioningType ( PositioningType.PageRelative); t1.setTop ( 200); t1.setLeft ( 100); t1.setRotatingAngle ( 30); sec1.getParagraphs().add(t1); pdf1.save("e:/temp/test.pdf"); [XML] &lt;?xml version="1.0" encoding="utf-8" ?&gt; &lt;Pdf xmlns="Aspose.Pdf" CompressionLevel="0"&gt; &lt;Section&gt; &lt;Text RotatingAngle="30" Left="100" Top="200" PositioningType="PageRelative"&gt; &lt;Segment&gt;Hello world&lt;/Segment&gt; &lt;/Text&gt; &lt;/Section&gt; &lt;/Pdf&gt;</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Text.WrapLines">
       
        <p>Gets or sets a maximum count of wrapped lines in text. All lines over this value will be cutted. Default value is 0 (text is uncutted).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Text.IsFitToPage">
       
        <p>Gets or sets a bool value that indicates whether the paragraph need to be placed on single page. Default value is false.The attribute is only valid when the paragraph is the first paragraph on a page;</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Text.IsNeedRepeating">
       
        <p>Gets or sets a bool value that indicates whether the paragraph need to be repeated on next page. Default value is false.The attribute is only valid when the paragraph itself and the object its ReferenceParagraphID referred to both are included in RepeatingRows.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Text.IsHtmlTagSupported">
       
        <p>Gets or sets a bool value that indicates whether the HTML tags in text is supported. Default is false.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Text.UseTextInfoStyle">
       
        <p>Gets or sets a bool value that indicates whether to use style from TextInfo</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Text.IsHtml5Supported">
       
        <p>Gets or sets a bool value that indicates whether the HTML 5 tags in text is supported. Default is false.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Text.IfHtmlTagSupportedOverwrightHtmlFontNames"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Text.IfHtmlTagSupportedOverwrightHtmlFontSizes"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Text.InlineRadioButtonFieldName">
       
        <p>Gets or sets a string that indicates the name of inlineRadioButton's the field. Note that each field MUST have a unique name.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Text.InlineRadioButtonBackgroundColor">
       
        <p>Gets or sets a {@code System.Drawing.Color} object that indicates the color of the inlineRadiobutton's background.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Text.InlineRadioButtonColor">
       
        <p>Gets or sets a {@code System.Drawing.Color} object that indicates the color of the inline radio button.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.Text.ZIndex">
       
        <p>Gets or sets a int value that indicates the Z-order of the text. A text with larger ZIndex will be placed over the paragraphs with smaller ZIndex. ZIndex can be negative. Text with negative ZIndex will be placed behind the text in the page.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.TextInfo"/>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.TextInfo.getAlignment"/>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.TextInfo.setAlignment(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.TextInfo.getAlignmentType"/>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.TextInfo.setAlignmentType(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.TextInfo.deepClone">
       
        <p>Clone a new {@code TextInfo} object.</p> @return The new {@code TextInfo} object.
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.TextInfo.FontSize"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.TextInfo.FontName"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.TextInfo.TruetypeFontFileName"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.TextInfo.IsUnicode"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.TextInfo.FontAfmFile"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.TextInfo.FontPfmFile"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.TextInfo.FontOutlineFile"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.TextInfo.FontEncodingFile"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.TextInfo.IsTrueTypeFontBold"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.TextInfo.IsTrueTypeFontItalic"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.TextInfo.FontEncoding"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.TextInfo.IsFontEmbedded"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.TextInfo.IsUnderline"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.TextInfo.IsOverline"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.TextInfo.IsStrikeOut"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.TextInfo.CharSpace"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.TextInfo.WordSpace"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.TextInfo.LineSpacing"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.TextInfo._RenderingMode"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.TextInfo.Color"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.TextInfo.BackgroundColor"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.TextInfo.IsRightToLeft"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.TextInfo.StrokeWidth"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.TextInfo.StrokeColor"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.TextInfo.IsBaseline"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.TextInfo.IsRoman"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.TextInfo.IsCapRoman"/>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.TextInfo.TextBorder"/>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.TextMarkupNote"/>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.TextMarkupNote.#ctor">
       
        <p>Initializes a new instance of the {@code SquareNote} class.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.TextMarkupNote.MarkupArea">
       
        <p>Gets or sets a rectangle value that indicates text markup area.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.TextMarkupNote._MarkupStyle">
       
        <p>Gets or sets a rectangle value that indicates text markup style.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.TextMarkupNote.FillColor">
       
        <p>Gets or sets a value that indicates fill color.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.TitleInfoXmlAdapter">
       
        <p>This is "artificial" class which logically represents Title- node in source XML</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.TitleInfoXmlAdapter.#ctor(TextInfo,TextInfo)">
      <param name="TextInfo"/>
      <param name="TextInfo"/>
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.TitleInfoXmlAdapter.TextInfo">
       
        <p>Gets or sets a {@code TextInfo} object that indicates the text info of the image {@code Title}.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.generator.legacyxmlmodel.TitleInfoXmlAdapter.Caption"/>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.ValidatorCollection"/>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.ValidatorCollection.add(BaseValidator)">
       
        <p>Adds a new object derived from {@code BaseValidator} object into the collection.</p> @param validator The object derived from{@code BaseValidator} object to be added.
      
      <param name="BaseValidator"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.ValidatorCollection.insert(int,BaseValidator)">
      <param name="int"/>
      <param name="BaseValidator"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.ValidatorCollection.get_Item(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.ValidatorCollection.set_Item(int,BaseValidator)">
      <param name="int"/>
      <param name="BaseValidator"/>
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.Watermarks">
       
        <p>Represents a collection of {@code FloatingBox},which lay upon other content for the identification purpose as watermark, Only {@code Image},{@code Graph} and {@code Text} are allowed in {@code FloatingBox}. are added on each page.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>[Java] Pdf pdf1 = new Pdf(); aspose.pdf.generator.Section sec1 = pdf1.getSections().add(); aspose.pdf.generator.Text text1 = new Text(sec1,"This is text in section1."); text1.setLeft ( 30); text1.setTop ( 100); sec1.getParagraphs().add(text1); aspose.pdf.generator.Section sec2 = pdf1.getSections().add(); aspose.pdf.generator.Text text2 = new Text(sec2,"This is text in section2."); text2.setLeft ( 30); text2.setTop ( 100); sec2.getParagraphs().add(text2); //image watermark aspose.pdf.generator.Image image1 = new aspose.pdf.generator.Image(); image1.getImageInfo().setFile ( "world.jpg"); image1.getImageInfo().setImageFileType ( ImageFileType.Jpeg); image1.setImageScale ( 0.1f); FloatingBox watermark1 = new FloatingBox(200,100); watermark1.setBoxHorizontalPositioning ( BoxHorizontalPositioningType.Page); watermark1.setBoxHorizontalAlignment ( BoxHorizontalAlignmentType.Center); watermark1.setBoxVerticalPositioning ( BoxVerticalPositioningType.Page); watermark1.setBoxVerticalAlignment ( BoxVerticalAlignmentType.Center); watermark1.getParagraphs().add(image1); //graph watermark Graph graph1 = new Graph(400,100); float[] posArr = new float[]{0,0,200,80,300,40,350,90}; Curve curve1 = new Curve(graph1,posArr); graph1.getShapes().add(curve1); FloatingBox watermark2 = new FloatingBox(400,100); watermark2.getParagraphs().add(graph1); //text watermark Text text3 = new Text("Text Watermark"); FloatingBox watermark3 = new FloatingBox(100,100); watermark3.setLeft ( 50); watermark3.setTop ( 500); watermark3.getParagraphs().add(text3); pdf1.getWatermarks().add(watermark1); pdf1.getWatermarks().add(watermark2); pdf1.getWatermarks().add(watermark3); pdf1.save("WatermarkExample.pdf"); [XML] &lt;Pdf xmlns="Aspose.Pdf" &gt; &lt;Section ID="section1"&gt; &lt;Text Left="30" Top="100"&gt; &lt;Segment&gt;This is text in section1.&lt;/Segment&gt; &lt;/Text&gt; &lt;/Section&gt; &lt;Section ID="section2"&gt; &lt;Text Left="30" Top="100"&gt; &lt;Segment&gt;"This is text in section2."&lt;/Segment&gt; &lt;/Text&gt; &lt;/Section&gt; &lt;Watermark Width="200" Height="100" BoxHorizontalPositioning="Page" BoxHorizontalAlignment="Center" BoxVerticalPositioning="Page" BoxVerticalAlignment="Center"&gt; &lt;Image File="world.jpg" Type="jpeg" ImageScale="0.1" /&gt; &lt;/Watermark&gt; &lt;Watermark Width="400" Height="100"&gt; &lt;Graph Width="400" Height="100"&gt; &lt;Curve Position="0 0 200 80 300 40 350 90" /&gt; &lt;/Graph&gt; &lt;/Watermark&gt; &lt;Watermark Width="100" Height="100" Left ="50" Top="500"&gt; &lt;Text &gt; &lt;Segment IsUnicode="true" FontSize="12"&gt;Text Watermark&lt;/Segment&gt; &lt;/Text&gt; &lt;/Watermark&gt; &lt;/Pdf&gt;</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Watermarks.add(FloatingBox)">
       
        <p>Adds a new {@code FloatingBox} object into the collection.</p> @param newWatermark The {@code FloatingBox} object to be added.
      
      <param name="FloatingBox"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Watermarks.insert(FloatingBox,FloatingBox)">
       
        <p>Inserts a new {@code FloatingBox} object into the collection after specified {@code FloatingBox} object.</p> @param watermarkToInsertAfter The {@code FloatingBox} object to insert after. If this object is null, the new object will be inserted as the first member. @param newWatermark The {@code FloatingBox} object to be inserted.
      
      <param name="FloatingBox"/>
      <param name="FloatingBox"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Watermarks.get_Item(int)">
       
        <p>Gets or sets a {@code Watermarks} object from the collection according to object index.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.Watermarks.#ctor"/>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.XmlBoundEntity"/>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.XmlBoundEntity.load(XmlTextReader,LoadingContext)">
      <param name="XmlTextReader"/>
      <param name="LoadingContext"/>
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.XmlEntityWithInternals">
       
        <p>This class represents XML-entities that are compound, so they must be able to load it part's from XML</p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.XmlEntityWithInternals.load(XmlTextReader,LoadingContext)">
      <param name="XmlTextReader"/>
      <param name="LoadingContext"/>
    </member>
    <member name="T:com.aspose.pdf.generator.legacyxmlmodel.XmpMetadata">
       
        <p>Represents the XmpMetadata of a pdf document.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>[Java] Pdf pdf = new Pdf(); Section s = pdf.getSections().add(); Text text1 = new Text("This is a test for XMP Metadata"); s.getParagraphs().add(text1); pdf.XmpMetadata = new XmpMetadata(); //core properties pdf.getXmpMetadata().addCreationDate(new Date().toString()); //user properties pdf.getXmpMetadata().addUserProperty("xmlns:dc=\"http://purl.org/dc/elements/1.1/\"","dc:contributor","Aspose"); pdf.save("d:\\test\\test.pdf"); [XML] &lt;Pdf xmlns="Aspose.Pdf"&gt; &lt;XmpMetadata&gt; &lt;MetadataItem Name="CreationDate" Value="2007-7-15 10:51:55" /&gt; &lt;MetadataItem XmlNamespace="xmlns:dc='http://purl.org/dc/elements/1.1/'" Name="dc:contributor" Value="Aspose" /&gt; &lt;/XmpMetadata&gt; &lt;Section&gt; &lt;Text&gt;&lt;Segment&gt;This is a test for XMP Metadata&lt;/Segment&gt;&lt;/Text&gt; &lt;/Section&gt; &lt;/Pdf&gt;</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.XmpMetadata.addCreationDate(String)">
       
        <p>Adds the CreationDate property. It will be added into "xmlns:xap='http://ns.adobe.com/xap/1.0/'" namespace.</p> @param date The value of the property.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.XmpMetadata.addCreatorTool(String)">
       
        <p>Adds the CreatorTool property. It will be added into "xmlns:xap='http://ns.adobe.com/xap/1.0/'" namespace.</p> @param tool The value of the property.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.XmpMetadata.addModifyDate(String)">
       
        <p>Adds the ModifyDate property. It will be added into "xmlns:xap='http://ns.adobe.com/xap/1.0/'" namespace.</p> @param date The value of the property.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.XmpMetadata.addMetaDataDate(String)">
       
        <p>Adds the MetaDataDate property. It will be added into "xmlns:xap='http://ns.adobe.com/xap/1.0/'" namespace.</p> @param date The value of the property.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.XmpMetadata.addUserProperty(String,String,String)">
       
        <p>Adds a user defined property.</p> @param xmlns The xml namespace. @param name The name of the property. @param val The value of the property.
      
      <param name="String"/>
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.generator.legacyxmlmodel.XmpMetadata.#ctor">
       
        <p>Represents a constructor of the XmpMetadata object.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.GoToAction">
       
        <p>Represents a go-to action that changes the view to a specified destination (page, location, and magnification factor).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.GoToAction.getDestination">
      / * 
        <p>/ * Action properties. / *</p> /
      
    </member>
    <member name="M:com.aspose.pdf.GoToAction.setDestination(IAppointment)">
       
        <p>Sets the destination to jump to.</p> 
      
      <param name="IAppointment"/>
    </member>
    <member name="M:com.aspose.pdf.GoToAction.#ctor(int)">
       
        <p>Constructor.</p> @param page
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.GoToAction.#ctor(Page)">
       
        <p>Constructor.</p> @param page Aspose.Pdf.Page destination object to jump to.
      
      <param name="Page"/>
    </member>
    <member name="M:com.aspose.pdf.GoToAction.#ctor(Page,int,double)">
       
        <p></p> @param page @param type @param values
      
      <param name="Page"/>
      <param name="int"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.GoToAction.#ctor(ExplicitDestination)">
       
        <p>Constructor.</p> @param destination Explicit destination.
      
      <param name="ExplicitDestination"/>
    </member>
    <member name="M:com.aspose.pdf.GoToAction.#ctor">
       
        <p>Constructor.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.GoToRemoteAction">
       
        <p>Represents a remote go-to action that is similar to an ordinary go-to action but jumps to a destination in another PDF file instead of the current file.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.GoToRemoteAction.getFile">
       
        <p>Gets the specification of the file in which the destination is located.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.GoToRemoteAction.setFile(FileSpecification)">
       
        <p>Sets the specification of the file in which the destination is located.</p> 
      
      <param name="FileSpecification"/>
    </member>
    <member name="M:com.aspose.pdf.GoToRemoteAction.getNewWindow">
       
        <p>Gets a flag specifying whether to open the destination document in a new window.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.GoToRemoteAction.setNewWindow(int)">
       
        <p>Sets a flag specifying whether to open the destination document in a new window.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.GoToRemoteAction.getDestination">
       
        <p>Gets or sets the destination to jump to.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.GoToRemoteAction.setDestination(IAppointment)">
      <param name="IAppointment"/>
    </member>
    <member name="M:com.aspose.pdf.GoToRemoteAction.#ctor(String,int)">
       
        <p></p> @param remotePdf @param remotePageNumber
      
      <param name="String"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.GoToRemoteAction.#ctor(String,ExplicitDestination)">
       
        <p></p> @param remotePdf @param destination
      
      <param name="String"/>
      <param name="ExplicitDestination"/>
    </member>
    <member name="T:com.aspose.pdf.GoToURIAction">
       
        <p>Represents a URI action causes a URI to be resolved.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.GoToURIAction.getURI">
       
        <p>Gets the uniform resource identifier to resolve.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.GoToURIAction.setURI(String)">
       
        <p>Sets the uniform resource identifier to resolve.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.GoToURIAction.#ctor">
       
        <p>Constructor.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.GoToURIAction.#ctor(String)">
       
        <p>Constructor.</p> @param uri
      
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.GraphInfo">
       
        <p>Represents graphics info.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.GraphInfo.getLineWidth">
       
        <p>Gets or sets a float value that indicates the line width of the graph.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.GraphInfo.setLineWidth(float)">
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.GraphInfo.getColor">
       
        <p>Gets or sets a {@code Color} object that indicates the color of the graph.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.GraphInfo.setColor(Color)">
      <param name="Color"/>
    </member>
    <member name="M:com.aspose.pdf.GraphInfo.getFillColor">
       
        <p>Gets or sets a {@code Color} object that indicates the fill color of the graph.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.GraphInfo.setFillColor(Color)">
      <param name="Color"/>
    </member>
    <member name="M:com.aspose.pdf.GraphInfo.isDoubled">
       
        <p>Gets or sets is border doubled.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.GraphInfo.isDoubled(boolean)">
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.GraphInfo.deepClone">
       
        <p>Clone the table.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.Group">
       
        <p>A group attributes class specifying the attributes of the page’s page group for use in the transparent imaging model.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Group.getColorSpace">
       
        <p>The group color space.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Group.setColorSpace(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Group.isKnockout">
       
        <p>If this flag is false, later objects within the group are composited with earlier ones with which they overlap; if true, they are composited with the group’s initial backdrop and overwrite (“knock out”) any earlier overlapping objects.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Group.isKnockout(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Group.#ctor(Page)">
       
        <p>The constructor.</p> @param page The page.
      
      <param name="Page"/>
    </member>
    <member name="T:com.aspose.pdf.HeaderArtifact">
      Class describes Heaader artifact. This artifacgt may be used to set heading of the page.
    </member>
    <member name="M:com.aspose.pdf.HeaderArtifact.#ctor">
      Creates Header Artifact instance.
    </member>
    <member name="T:com.aspose.pdf.HeaderFooter">
       
        <p>Class represents header or footer pdf page.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.HeaderFooter.getParagraphs">
       
        <p>Gets the paragraphs.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.HeaderFooter.setParagraphs(Paragraphs)">
       
        <p>Sets the paragraphs.</p> 
      
      <param name="Paragraphs"/>
    </member>
    <member name="M:com.aspose.pdf.HeaderFooter.getMargin">
       
        <p>Gets or sets the margin info.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.HeaderFooter.setMargin(MarginInfo)">
      <param name="MarginInfo"/>
    </member>
    <member name="M:com.aspose.pdf.HeaderFooter.deepClone">
       
        <p>Clones a new {@code MarginInfo} object.</p> @return The new object.
      
    </member>
    <member name="T:com.aspose.pdf.Heading">
       
        <p>Represents heading.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Heading.getTocPage">
       
        <p>Gets the page that contains this heading.</p>Value: The page.
      
    </member>
    <member name="M:com.aspose.pdf.Heading.setTocPage(Page)">
      <param name="Page"/>
    </member>
    <member name="M:com.aspose.pdf.Heading.getTop">
       
        <p>Gets the top Y of this headings(for internal use).</p>Value: The top Y.
      
    </member>
    <member name="M:com.aspose.pdf.Heading.setTop(double)">
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Heading.isAutoSequence">
       
        <p>Gets the heading should be numered automatically.</p>Value: The IsAutoSequens.
      
    </member>
    <member name="M:com.aspose.pdf.Heading.isAutoSequence(boolean)">
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Heading.isInList">
       
        <p>Gets the heading should be in toc list.</p>Value: The IsInList.
      
    </member>
    <member name="M:com.aspose.pdf.Heading.isInList(boolean)">
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Heading.getDestinationPage">
       
        <p>Gets the destination page.</p>Value: The destination page.
      
    </member>
    <member name="M:com.aspose.pdf.Heading.setDestinationPage(Page)">
      <param name="Page"/>
    </member>
    <member name="M:com.aspose.pdf.Heading.getLevel">
       
        <p>Gets the level.</p>Value: The heading level.
      
    </member>
    <member name="M:com.aspose.pdf.Heading.setLevel(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Heading.getStyle">
       
        <p>Gets or sets style.</p>Value: The heading style.
      
    </member>
    <member name="M:com.aspose.pdf.Heading.setStyle(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Heading.#ctor(int)">
       
        <p>Initializes a new instance of the Cell class.</p> @param level The headings level.
      
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.HighlightAnnotation">
       
        <p>Represents a highlight annotation that highlights a range of text in the document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.HighlightAnnotation.writeXfdf(XmlWriter)">
      <param name="XmlWriter"/>
    </member>
    <member name="M:com.aspose.pdf.HighlightAnnotation.accept(AnnotationSelector)">
       
        <p>Accepts visitor object to process the annotation.</p> @param visitor Visitor object.
      
      <param name="AnnotationSelector"/>
    </member>
    <member name="M:com.aspose.pdf.HighlightAnnotation.#ctor(Page,Rectangle)">
       
        <p>Creates new Highlight annotation on the specified page.</p> @param page The document's page where annotation should be created. @param rect The annotation rectangle, defining the location of the annotation on the page.
      
      <param name="Page"/>
      <param name="Rectangle"/>
    </member>
    <member name="T:com.aspose.pdf.HighlightingMode">
       
        <p>Enumerates the annotation�s highlighting mode, the visual effect to be used when the mouse button is pressed or held down inside its active area.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HighlightingMode.None">
       
        <p>No highlighting.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HighlightingMode.Invert">
       
        <p>Invert the contents of the annotation rectangle.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HighlightingMode.Outline">
       
        <p>Invert the annotation�s border.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HighlightingMode.Push">
       
        <p>Display the annotation�s down appearance, if any. If no down appearance is defined, offset the contents of the annotation rectangle to appear as if it were being pushed below the surface of the page.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HighlightingMode.Toggle">
       
        <p>Same as Push (which is preferred).</p> 
      
    </member>
    <member name="T:com.aspose.pdf.HtmlDocumentType">
       
        <p>Represents enumeration of the Html document types.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HtmlDocumentType.Xhtml">
       
        <p>The XHtml Document Type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HtmlDocumentType.Html5">
       
        <p>The HTML5 Document Type.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.HtmlDocumentTypeInternal"/>
    <member name="M:com.aspose.pdf.HtmlDocumentTypeInternal.toString(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlDocumentTypeInternal.getNames"/>
    <member name="F:com.aspose.pdf.HtmlDocumentTypeInternal.temp"/>
    <member name="F:com.aspose.pdf.HtmlDocumentTypeInternal.HTML20Strict"/>
    <member name="F:com.aspose.pdf.HtmlDocumentTypeInternal.Html32Final"/>
    <member name="F:com.aspose.pdf.HtmlDocumentTypeInternal.Html401Frameset"/>
    <member name="F:com.aspose.pdf.HtmlDocumentTypeInternal.Html401Loose"/>
    <member name="F:com.aspose.pdf.HtmlDocumentTypeInternal.Html401Strict"/>
    <member name="F:com.aspose.pdf.HtmlDocumentTypeInternal.Html5"/>
    <member name="F:com.aspose.pdf.HtmlDocumentTypeInternal.Undefined"/>
    <member name="F:com.aspose.pdf.HtmlDocumentTypeInternal.Unknown"/>
    <member name="F:com.aspose.pdf.HtmlDocumentTypeInternal.Xhtml10Frameset"/>
    <member name="F:com.aspose.pdf.HtmlDocumentTypeInternal.Xhtml10Strict"/>
    <member name="F:com.aspose.pdf.HtmlDocumentTypeInternal.Xhtml10Transitional"/>
    <member name="F:com.aspose.pdf.HtmlDocumentTypeInternal.XHtml11"/>
    <member name="T:com.aspose.pdf.HtmlLoadOptions">
       
        <p>Represents options for loading/importing html file into pdf document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.HtmlLoadOptions.isUseNewConversionEngine"/>
    <member name="M:com.aspose.pdf.HtmlLoadOptions.setUseNewConversionEngine(boolean)">
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlLoadOptions.getBasePath">
       
        <p>The base path/url for the html file.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.HtmlLoadOptions.#ctor">
       
        <p>Creates load options for converting html into pdf document with empty base path.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.HtmlLoadOptions.#ctor(String)">
       
        <p>Creates load options for converting html into pdf document with defined base path.</p> @param basePath The base path/url for the html file.
      
      <param name="String"/>
    </member>
    <member name="F:com.aspose.pdf.HtmlLoadOptions.useNewConversionEngine">
       
        <p>Defines whether should be used old or new HTML-&gt;PDF conversion engine.</p>
        <p>
          <hr>Default value is true. Note that new conversion engine is in B-testing stage, so the property may be used to turn old engine back for backward compatibility.</hr>
        </p> 
      
    </member>
    <member name="T:com.aspose.pdf.HtmlSaveOptions">
       
        <p>Save options for export to Html format</p> 
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.getDocumentType">
       
        <p>Gets the {@code HtmlDocumentTypeInternal}.</p> @return The {@code HtmlDocumentTypeInternal}.
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.setDocumentType(int)">
      Sets the {@code HtmlDocumentTypeInternal}. @param The {@code HtmlDocumentTypeInternal}.
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.getCompressSvgGraphicsIfAny">
       
        <p>Gets or sets the flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving</p>Value: The {@code HtmlDocumentType}.
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.setCompressSvgGraphicsIfAny(boolean)">
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.getSplitCssIntoPages">
       
        <p>When multipage-mode selected(i.e 'SplitIntoPages' is 'true'), then this attribute defines whether should be created separate CSS-file for each result HTML page. By default this attribute is false, so, will be created one big common CSS for all created pages. Summary size of all CSSes generated in this mode(one CSS per page) usually much more than size of one big CSS file, because in former case CSS classes are duplicates in such case in several CSS files for each page. So, this setting is worse to be used only when You are interested in future processing of each HTML page independently, and therefore size of CSS of each one page taken apart is the most critical issue.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.setSplitCssIntoPages(boolean)">
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.getSplitIntoPages">
       
        <p>Gets or sets the flag that indicates whether each page of source document will be converted into it's own target HTML document, i.e whether result HTML will be splitted into several HTML-pages.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.setSplitIntoPages(boolean)">
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.getFixedLayout">
       
        <p>Gets a value indicating whether that HTML is created as fixed layout.</p>Value: {@code true} if [fixed layout]; otherwise, {@code false}.
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.setFixedLayout(boolean)">
       
        <p>Sets a value indicating whether that HTML is created as fixed layout.</p>Value: {@code true} if [fixed layout]; otherwise, {@code false}.
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.getAdditionalMarginWidthInPoints">
       
        <p>If attribute 'SplitOnPages=false', than whole HTML representing all input PDF pages wont be not split into different HTML pages, but will be put into one big result HTML file. But each source PDF page will be represented with it's own rectangle area in HTML (if necessary that areas can be bordered to show page paper edges with special attribute 'PageBorderIfAny'. This parameter defines width of margin that will be forcebly left around that output HTML-areas that represent pages of source PDF document.In essence it defines guaranteed interval between HTML-representations of PDF "paper" pages such mode of conversion.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.setAdditionalMarginWidthInPoints(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.#ctor">
       
        <p>Initializes a new instance of the 
          <see cref="HtmlSaveOptions"/> class.
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.#ctor(int)">
       
        <p>Initializes a new instance of the {@code HtmlSaveOptions} class.</p> @param documentType The {@code HtmlDocumentTypeInternal}.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.#ctor(boolean)">
       
        <p>Initializes a new instance of the {@code HtmlSaveOptions} class.</p> @param fixedLayout
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.#ctor(int,boolean)">
       
        <p>Initializes a new instance of the {@code HtmlSaveOptions} class.</p> @param documentType The {@code HtmlDocumentTypeInternal}. @param fixedLayout if set to {@code true} HTML is created as fixed layout.
      
      <param name="int"/>
      <param name="boolean"/>
    </member>
    <member name="F:com.aspose.pdf.HtmlSaveOptions.FontSavingMode">
       
        <p>Defines font saving mode that will be used during saving of PDF to desirable format</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HtmlSaveOptions.PageBorderIfAny">
       
        <p>This attribute represents set of settings used for drawing border (if any) in result HTML document around area that represent source PDF page. In essence it concerns of showing of page's paper edges, not page border referenced in PDF page itself.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HtmlSaveOptions.ExplicitListOfSavedPages">
       
        <p>With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. If this list is null (as it is by default), all pages will be converted. If any page number of this list will go out of range of present pages(1-[amountOfPagesInDocument]) exception will be thrown.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HtmlSaveOptions.CustomResourceSavingStrategy">
       
        <p>This field can contain saving strategy that must be used (if present) during conversion for customized handling of created referenced resource files (like images and fonts) related to nodes of saved HTML. That strategy must process resources and return string that represents desirable URL of saved resource in generated HTML.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HtmlSaveOptions.CustomCssSavingStrategy">
       
        <p>This field can contain saving strategy that must be used (if present) during conversion of Pdf to Html for handling of saving of CSSes related to created HTML document as whole or to it's pages(if several HTMLpages are generated) If You want handle CSS file in some specific way, that just please create relevant method and assygn delegate created from it to this property.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HtmlSaveOptions.CustomStrategyOfCssUrlCreation"/>
    <member name="F:com.aspose.pdf.HtmlSaveOptions.SpecialFolderForSvgImages">
       
        <p>Gets or sets path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HtmlSaveOptions.SpecialFolderForAllImages">
       
        <p>Gets or sets path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HtmlSaveOptions.CssClassNamesPrefix">
       
        <p>When PDFtoHTML converter generates result CSSs, CSS class names (something like ".stl_01 {}" ... ".stl_NN {}) are generated and used in result CSS. This property allows forcebly set class name prefix For example, if You want that all class names start with 'my_prefix_' (i.e. were something like 'my_prefix_1' ... 'my_prefix_NNN' ) , then just assygn 'my_prefix_' to this property before conversion. If this property will stay untouched(i.e. null will be leaved as value ), then converter will generate class names itself (it wil be something like ".stl_01 {}" ... ".stl_NN {}")</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HtmlSaveOptions.RasterImagesSavingMode">
       
        <p>Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HtmlSaveOptions.RemoveEmptyAreasOnTopAndBottom">
       
        <p>Defines whether in created HTML will be removed top and bottom empty area without any content (if any).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HtmlSaveOptions.PagesFlowTypeDependsOnViewersScreenSize">
       
        <p>If attribute 'SplitOnPages=false', than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. Suppose width of screen on viewer side is big enough to put 2 or more pages one near other in horizontal direction. If this flag set to true, then this opportunity will be used (as many pages will be shown in horizontal direction one near another as it possible, then next horizontal group of pages will be shown under first one ). Otherwise pages will flow in such way: next page goes always under previous one.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.HtmlSaveOptions.FontSavingModes">
       
        <p>Enumerates modes that can be used for saving of fonts referenced in saved PDF</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HtmlSaveOptions.FontSavingModes.AlwaysSaveAsWOFF">
       
        <p>all referenced fonts will be saved and referenced as WOFF-fonts</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HtmlSaveOptions.FontSavingModes.AlwaysSaveAsTTF">
       
        <p>all referenced fonts will be saved and referenced as TTF-fonts</p> 
      
    </member>
    <member name="T:com.aspose.pdf.HtmlSaveOptions.CssSavingInfo">
       
        <p>This class represents set of data that related to custom saving of CSS during conversion of PDF to HTML format</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HtmlSaveOptions.CssSavingInfo.CssNumber">
       
        <p>Set by converter. During conversion several CSS-files are created . This properties shows ordinal of saved CSS-file during conversion. It can be used in logic of custom code to decide how to process or where to save CSS content</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HtmlSaveOptions.CssSavingInfo.SupposedURL">
       
        <p>Set by converter. Supposed file name that goes from converter to code of custom method Can be used in custom code to decide how to process or where to save content</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HtmlSaveOptions.CssSavingInfo.ContentStream">
       
        <p>Set by converter. Represents binary content of saved CSS</p> 
      
    </member>
    <member name="T:com.aspose.pdf.HtmlSaveOptions.CssUrlRequestInfo">
       
        <p>Represents set of data that related to request from converter to</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HtmlSaveOptions.CssUrlRequestInfo.CustomProcessingCancelled">
       
        <p>Should be set by custom code if it cannot or should not define URL that will be used in generated HTML for referencing of that CSS. If it's 'true', then CSS file will be saved in standard way in standard place.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.HtmlSaveOptions.HtmlImageSavingInfo">
       
        <p>This class represents set of data that related to external resource image file's saving during PDF to HTML conversion.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.HtmlSaveOptions.HtmlImageSavingInfo.#ctor">
       
        <p>creates new instance of HtmlImageSavingInfo</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HtmlSaveOptions.HtmlImageSavingInfo.ImageType">
       
        <p>Represents type os saved image referenced in HTML. Set by converter and can be used in custom code to decide what should be done</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HtmlSaveOptions.HtmlImageSavingInfo.ParentType">
       
        <p>Saved image can pertain to HTML itself or can be extracted. from SVG embedded to HTML. This property can tell to custom code what's that type of parent of processed image. It set by converter and can be used in custom code to decide what should be done with that image (f.e. custom code can decide where to save image or how it must be referenced in parent's content).</p> 
      
    </member>
    <member name="T:com.aspose.pdf.HtmlSaveOptions.ResourceSavingStrategy">
       
        <p>To this property You can assygn delegate created from custom method that implements processing of external resource(Font or Image) that was extracted from PDF and must be saved as external resource during conversion of PDF to HTML. In such case processing (like saving in stream or disk) can be done in that custom code and that custom code must return path(or any another string without quotemarks) that will be afterwards incorporated into generated HTML instead of original supposed path to that image resource. In such case All the necessary actions for saving of image must be undertaken in code of supplied method, because saving of result in code of converter will be not in use . If processing for this or that file for some reason must be done by converter's code itself, not in custom code, please set in custom code flag 'CustomProcessingCancelled' of 'resourceSavingInfo' parameter's variable It signals to converter that all the necessary steps for processing of that resource must be done in converter itself as if there was no any external custom code .</p> 
      
    </member>
    <member name="T:com.aspose.pdf.HtmlSaveOptions.CssSavingStrategy">
       
        <p>You can assygn to this property custom strategy that implements processing or/and saving of external resource(f.e. Font or Image) that was extracted from PDF and must be saved as external resourceL. In such case processing (like saving to stream or disk) can be done in that custom code and that custom code must return URL(or any another string containing supposed ) that URL will be afterwards used in generated HTML instead of original supposed path as URL of that resource. In such case all the necessary actions for saving of image must be undertaken in code of supplied method, because saving of result in code of converter usually won't be in use . If processing for this or that file for some reason must be done by converter's code itself in standard way, not in custom code, please set in custom code flag 'CustomProcessingCancelled' of 'resourceSavingInfo' parameter's variable It signals to converter that all the necessary steps for processing of that resource must be done in converter itself as if there was no any external custom code .</p> 
      
    </member>
    <member name="T:com.aspose.pdf.HtmlSaveOptions.CssUrlMakingStrategy">
       
        <p>You can assygn to this property delegate created from custom method that implements creation of URL of CSS referenced in generated CSS document. F.e. if You want to make CSS referenced in HTML f.e. as "otherPage.ASPX?CssID=zjjkklj" Then such custom strategy must return "otherPage.ASPX?CssID=zjjkklj"</p> 
      
    </member>
    <member name="T:com.aspose.pdf.HtmlSaveOptions.HtmlImageType">
       
        <p>enumerates possible types of image files that can be saved as external resources during Pdf to Html conversion</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HtmlSaveOptions.HtmlImageType.Jpeg">
       
        <p>Jpeg</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HtmlSaveOptions.HtmlImageType.Png">
       
        <p>Png</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HtmlSaveOptions.HtmlImageType.Bmp">
       
        <p>Bmp</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HtmlSaveOptions.HtmlImageType.Gif">
       
        <p>Gif</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HtmlSaveOptions.HtmlImageType.Tiff">
       
        <p>Tiff</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HtmlSaveOptions.HtmlImageType.Svg">
       
        <p>Svg</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HtmlSaveOptions.HtmlImageType.ZippedSvg">
       
        <p>Zipped Svg</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HtmlSaveOptions.HtmlImageType.Unknown">
       
        <p>Unknown - means that converter cannot detect type of content itself</p> 
      
    </member>
    <member name="T:com.aspose.pdf.HtmlSaveOptions.ImageParentTypes">
       
        <p>Enumerates possible types of image's parents Image can pertain to HTML page or to SVG parent image</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HtmlSaveOptions.ImageParentTypes.HtmlPage">
       
        <p>Image pertains to HTML page itself</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HtmlSaveOptions.ImageParentTypes.SvgImage">
       
        <p>Image was embedded in SVG image</p> 
      
    </member>
    <member name="T:com.aspose.pdf.HtmlSaveOptions.RasterImagesSavingModes">
       
        <p>Converted PDF can contain raster images(.png, *.jpeg etc.) This enum defines methods of how raster images can be handled during conversion of PDF to HTML</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HtmlSaveOptions.RasterImagesSavingModes.AsPngImagesEmbeddedIntoSvg">
       
        <p>for each distinct raster file will be generated wrapper SVG image, and raster image will be embedded as Base64 encoded strings into that SVG image</p> 
      
    </member>
    <member name="F:com.aspose.pdf.HtmlSaveOptions.RasterImagesSavingModes.AsExternalPngFilesReferencedViaSvg">
       
        <p>distinct raster images will be put apart as PNG files but will be referenced through wrapping SVG images, i.e. will be generated one PNG file and one SVG for each raster image, and each of such SVGs will contain links to relevant PNG file</p> 
      
    </member>
    <member name="T:com.aspose.pdf.Hyperlink">
      Represents abstract hyperlink.
    </member>
    <member name="T:com.aspose.pdf.IAnnotationVisitor">
       
        <p>Defines Visitor for visiting different document annotations.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.IAnnotationVisitor.visit(LinkAnnotation)">
      Visit/select link annotation. @param link LinkAnnotation object example/template.
      <param name="LinkAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.IAnnotationVisitor.visit(FileAttachmentAnnotation)">
      Visit/select attachment annotation. @param attachment FileAttachmentAnnotation object example/template.
      <param name="FileAttachmentAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.IAnnotationVisitor.visit(TextAnnotation)">
      Visit/select text annotation. @param text TextAnnotation object example/template.
      <param name="TextAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.IAnnotationVisitor.visit(FreeTextAnnotation)">
      Visit/select freetext annotation. @param freetext FreeTextAnnotation object example/template.
      <param name="FreeTextAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.IAnnotationVisitor.visit(HighlightAnnotation)">
      Visit/select highlight annotation. @param highlight HighlightAnnotation object example/template.
      <param name="HighlightAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.IAnnotationVisitor.visit(UnderlineAnnotation)">
      Visit/select underline annotation. @param underline UnderlineAnnotation object example/template.
      <param name="UnderlineAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.IAnnotationVisitor.visit(StrikeOutAnnotation)">
      Visit/select strikeOut annotation. @param strikeOut StrikeOutAnnotation object example/template.
      <param name="StrikeOutAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.IAnnotationVisitor.visit(SquigglyAnnotation)">
      Visit/select squiggly annotation. @param squiggly SquigglyAnnotation object example/template.
      <param name="SquigglyAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.IAnnotationVisitor.visit(PopupAnnotation)">
      Visit/select popup annotation. @param popup PopupAnnotation object example/template.
      <param name="PopupAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.IAnnotationVisitor.visit(LineAnnotation)">
      Visit/select line annotation. @param line LineAnnotation object example/template.
      <param name="LineAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.IAnnotationVisitor.visit(CircleAnnotation)">
      Visit/select circle annotation. @param circle CircleAnnotation object example/template.
      <param name="CircleAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.IAnnotationVisitor.visit(SquareAnnotation)">
      Visit/select square annotation. @param square SquareAnnotation object example/template.
      <param name="SquareAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.IAnnotationVisitor.visit(InkAnnotation)">
      Visit/select ink annotation. @param ink InkAnnotation object example/template.
      <param name="InkAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.IAnnotationVisitor.visit(PolylineAnnotation)">
      Visit/select polyline annotation. @param polyline PolylineAnnotation object example/template.
      <param name="PolylineAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.IAnnotationVisitor.visit(PolygonAnnotation)">
      Visit/select polygon annotation. @param polygon PolygonAnnotation object example/template.
      <param name="PolygonAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.IAnnotationVisitor.visit(CaretAnnotation)">
      Visit/select caret annotation. @param caret CaretAnnotation object example/template.
      <param name="CaretAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.IAnnotationVisitor.visit(StampAnnotation)">
      Visit/select stamp annotation. @param stamp StampAnnotation object example/template.
      <param name="StampAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.IAnnotationVisitor.visit(WidgetAnnotation)">
      Visit/select widget annotation. @param widget WidgetAnnotation object example/template.
      <param name="WidgetAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.IAnnotationVisitor.visit(MovieAnnotation)">
      Visit/select movie annotation. @param movie MovieAnnotation object example/template.
      <param name="MovieAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.IAnnotationVisitor.visit(ScreenAnnotation)">
      Visit/select screen annotation. @param screen ScreenAnnotation object example/template.
      <param name="ScreenAnnotation"/>
    </member>
    <member name="T:com.aspose.pdf.IAppointment">
       
        <p>Represents general interface for actions and destinations.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.Id">
       
        <p>Represents file identifier structure.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">Document doc = new Document("example.pdf"); String original = doc.getId().getOriginal(); String modified = doc.getId().getModified();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.Id.getOriginal">
       
        <p>Permanent identifier based on the contents of the document at the time it was originally created.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Id.getModified">
       
        <p>Changing identifier based on the document's contents at the time it was last updated.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.IDocument">
       
        <p>interface representing PDF document</p> 
      
    </member>
    <member name="M:com.aspose.pdf.IDocument.getEngineDoc">
       
        <p>Instance of IPdfDocument used to access to internal document structure.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.IDocument.getVersion">
       
        <p>Gets a version of Pdf from Pdf file header.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.IDocument.getOpenAction">
       
        <p>Gets action performed at document opening.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre>Example demonstrates how to get CenterWindow flag: 
                <pre lang="JAva">Document document = new Document("sample.pdf"); IAppointment value = document.getOpenAction();</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.IDocument.setOpenAction(IAppointment)">&lt;p&gt; Sets action performed at document opening. 
      <param name="IAppointment"/>
    </member>
    <member name="M:com.aspose.pdf.IDocument.getOptimizeSize">
      Gets optimization flag. When pages are added to document, equal resource streams in resultant file are merged into one PDF object if this flag set. This allows to decrease resultant file size but may cause slower execution and larger memory requirements. Default value: false. @return
    </member>
    <member name="M:com.aspose.pdf.IDocument.setOptimizeSize(boolean)">
      Sets optimization flag. When pages are added to document, equal resource streams in resultant file are merged into one PDF object if this flag set. This allows to decrease resultant file size but may cause slower execution and larger memory requirements. Default value: false. @return
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.IDocument.getHideToolBar">
       
        <p>Gets flag specifying whether toolbar should be hidden when document is active.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre>Example demonstrates how to get HideToolBar flag: 
                <pre lang="Java">Document document = new Document("sample.pdf"); booleanvalue = document.getHideToolBar();</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.IDocument.setHideToolBar(boolean)">&lt;p&gt; Set flag specifying whether toolbar should be hidden when document is active. 
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.IDocument.getHideMenubar">
       
        <p>Gets flag specifying whether menu bar should be hidden when document is active.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre>Example demonstrates how to get HideMenubar flag: 
                <pre lang="Java">Document document = new Document("sample.pdf"); booleanvalue = document.getHideMenubar();</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.IDocument.setHideMenubar(boolean)">&lt;p&gt; Sets flag specifying whether menu bar should be hidden when document is active. 
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.IDocument.getHideWindowUI">
       
        <p>Gets or sets flag specifying whether user interface elements should be hidden when document is active.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre>Example demonstrates how to get HideWindowUI flag: 
                <pre lang="JAva">Document document = new Document("sample.pdf"); booleanvalue = document.getHideWindowUI();</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.IDocument.setHideWindowUI(boolean)">&lt;p&gt; Sets flag specifying whether user interface elements should be hidden when document is active. 
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.IDocument.getFitWindow">
       
        <p>Gets flag specifying whether document window must be resized to fit the first displayed page.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre>Example demonstrates how to get FitWindow flag: 
                <pre lang="Java">Document document = new Document("sample.pdf"); booleanvalue = document.getFitWindow();</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.IDocument.setFitWindow(boolean)">&lt;p&gt; Sets flag specifying whether document window must be resized to fit the first displayed page. 
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.IDocument.getCenterWindow">
       
        <p>Gets flag specifying whether position of the document's window will be centerd on the screen.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre>Example demonstrates how to get CenterWindow flag: 
                <pre lang="Java">Document document = new Document("sample.pdf"); booleanvalue = document.getCenterWindow();</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.IDocument.setCenterWindow(boolean)">&lt;p&gt; Sets flag specifying whether position of the document's window will be centerd on the screen. 
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.IDocument.getDisplayDocTitle">
       
        <p>Gets flag specifying whether document's window title bar should display document title.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre>Example demonstrates how to get DisplayDocTitle flag: 
                <pre lang="Java">Document document = new Document("sample.pdf"); booleanvalue = document.getDisplayDocTitle();</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.IDocument.setDisplayDocTitle(boolean)">&lt;p&gt; Sets flag specifying whether document's window title bar should display document title. 
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.IDocument.getPages">
       
        <p>Gets collection of document pages. Note that pages are numbered from 1 in collection.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre>Example below demonstrates how to operate with the document pages: How to obtain number of pages and how to obtain rectangle of starting page of the document.
                <pre lang="Java">Document document = new Document("sample.pdf"); Pages pages = document.getPages(); System.out.println("Document contains " + pages.size()); Page page = pages.get_Item(1); Rectangle rect = page.getRect();</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.IDocument.getOutlines">
       
        <p>Gets document outlines.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.IDocument.getActions">
       
        <p>Gets document actions. This property is instance of DocumentActions class which allows to get/set BeforClosing, BeforSaving, etc. actions.</p>  
        <p> 
          <hr> 
            <blockquote> 
              <pre>This example demonstrates how to obtain after open action of the document: 
                <pre lang="Java">Document document = new Document("PdfWithOpenAction.pdf"); DocumentActions actions = document.getActions(); com.aspose.pdf.Action afterSavingAction = actions.getAfterSaving();</pre> 
              </pre>
            </blockquote> 
          </hr> 
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.IDocument.getForm">
       
        <p>Gets Acro Form of the document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.IDocument.getEmbeddedFiles">
       
        <p>Gets collection of files embedded to document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.IDocument.getDirection">
       
        <p>Gets reading order of text: L2R (left to right) or R2L (right to left).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.IDocument.setDirection(int)">
       
        <p>Sets reading order of text: L2R (left to right) or R2L (right to left).</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.IDocument.getPageMode">
       
        <p>Gets page mode, specifying how document should be displayed when opened.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.IDocument.setPageMode(int)">
       
        <p>Sets page mode, specifying how document should be displayed when opened.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.IDocument.getNonFullScreenPageMode">
       
        <p>Gets page mode, specifying how to display the document on exiting full-screen mode.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.IDocument.setNonFullScreenPageMode(int)">
       
        <p>Sets page mode, specifying how to display the document on exiting full-screen mode.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.IDocument.getPageLayout">
       
        <p>Gets page layout which shall be used when the document is opened.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.IDocument.setPageLayout(int)">
       
        <p>Sets page layout which shall be used when the document is opened.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.IDocument.getFileName">
       
        <p>Name of the PDF file that caused this document</p> 
      
    </member>
    <member name="M:com.aspose.pdf.IDocument.getPageInfo">
      Gets the page info.(for generator only) @return The page info.
    </member>
    <member name="M:com.aspose.pdf.IDocument.setPageInfo(PageInfo)">
      Sets the page info.(for generator only)
      <param name="PageInfo"/>
    </member>
    <member name="M:com.aspose.pdf.IDocument.getFontReplaceBehavior">
      Gets the TextEditOptions.FontReplace
    </member>
    <member name="M:com.aspose.pdf.IDocument.getInfo">
       
        <p>Gets document info.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.IDocument.getMetadata">
       
        <p>Document metadata. (A PDF document may include general information, such as the document�s title, author, and creation and modification dates. Such global information about the document (as opposed to its content or structure) is called metadata and is intended to assist in cataloguing and searching for documents in external databases.)</p> 
      
    </member>
    <member name="M:com.aspose.pdf.IDocument.getLogicalStructure">
       
        <p>Gets logical structure of the document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.IDocument.saveInternal(Stream)">
       
        <p>Stores document into stream.</p> @param output Stream where document shell be stored.
      
      <param name="Stream"/>
    </member>
    <member name="M:com.aspose.pdf.IDocument.save(OutputStream)">
       
        <p>Stores document into stream.</p> @param output Stream where document shell be stored.
      
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.IDocument.save(String)">
       
        <p>Saves document into the specified file.</p> @param outputFileName Path to file where the document will be stored.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.IDocument.save(FileStream)">
      <param name="FileStream"/>
    </member>
    <member name="M:com.aspose.pdf.IDocument.exportAnnotationsToXfdf(String)">
       
        <p>Exports all document annotations to XFDF file</p> @param fileName XFDF file name
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.IDocument.sendTo(DocumentDevice,OutputStream)">
      <param name="DocumentDevice"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.IDocument.sendTo(DocumentDevice,int,int,OutputStream)">
       
        <p>Sends the certain pages of the document to the document device for processing.</p> @param device Document device which is used to process the document. @param fromPage The first page for processing. @param toPage The last page for processing. @param output Output stream contains the results of the document pages processing with given device.
      
      <param name="DocumentDevice"/>
      <param name="int"/>
      <param name="int"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.IDocument.sendTo(DocumentDevice,String)">
       
        <p>Sends the whole document to the document device for processing.</p> @param device Document device which is used to process the document. @param outputFileName Output file name with the results of processing.
      
      <param name="DocumentDevice"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.IDocument.sendTo(DocumentDevice,int,int,String)">
       
        <p>Sends the whole document to the document device for processing.</p> @param device Document device which is used to process the document. @param fromPage The first page for processing. @param toPage The last page for processing. @param outputFileName Output file name with the results of processing.
      
      <param name="DocumentDevice"/>
      <param name="int"/>
      <param name="int"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.IDocument.removeMetadata">
       
        <p>Removes metadata from the document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.IDocument.importAnnotationsFromXfdf(String)">
       
        <p>Imports annotations from XFDF file to document.</p> @param fileName XFDF file name
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.IDocument.validate(String,int)">
       
        <p>Validate document into the specified file.</p> @param outputLogFileName Path to file where the comments will be stored. @param format Pdf format. @throws Exception
      
      <param name="String"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.IDocument.convert(String,int,int)">
       
        <p>Convert document and save errors into the specified file.</p> @param outputLogFileName Path to file where the comments will be stored. @param format Pdf format. @param action Action for objects that can not be converted @throws Exception
      
      <param name="String"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.IDocument.convertInternal(Stream,int,int)">
       
        <p>Convert document and save errors into the specified stream.</p> @param outputLogStream Stream where the comments will be stored. @param format Pdf format. @param action Action for objects that can not be converted @throws Exception
      
      <param name="Stream"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.IDocument.convert(OutputStream,int,int)">
      <param name="OutputStream"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.IDocument.flatten">
       
        <p>Removes all fields from the document and place their values instead.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.IDocument.getCryptoAlgorithm">
       
        <p>Gets security settings if document is encrypted. If document is not encrypted then corresponding exception will be raised in .net 1.1 or CryptoAlgorithm will be null for other .net versions.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.IDocument.encrypt(String,String,int,int)">
       
        <p>Encrypts the document. Call then Save to get encrypted version of the document.</p> @param userPassword User password. @param ownerPassword Owner password. @param permissions Document permissions, see {@code Permissions} for details. @param cryptoAlgorithm Cryptographic algorithm, see {@code CryptoAlgorithm} for details.
      
      <param name="String"/>
      <param name="String"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.IDocument.changePasswords(String,String,String)">
       
        <p>Changes document passwords. This action can be done only using owner password/&gt;.</p> @param ownerPassword Owner password. @param newUserPassword New user password. @param newOwnerPassword New owner password.
      
      <param name="String"/>
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.IDocument.isLinearized">
       
        <p>Gets or sets a value indicating whether document is linearized.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.IDocument.isLinearized(boolean)">
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.IDocument.decrypt">
       
        <p>Decrypts the document. Call then Save to obtain decrypted version of the document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.IDocument.getPermissions">
       
        <p>Gets permissions of the document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.IDocument.isEncrypted">
       
        <p>Gets encrypted status of the document. True if document is encrypted.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.IDocument.optimize">
       
        <p>Linearize document in order to - open the first page as quickly as possible; - display next page or follow by link to the next page as quickly as possible; - display the page incrementally as it arrives when data for a page is delivered over a slow channel (display the most useful data first); - permit user interaction, such as following a link, to be performed even before the entire page has been received and displayed. Invoking this method doesn't actually saves the document. On the contrary the document only is prepared to have optimized structure, call then Save to get optimized document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.IDocument.save">
       
        <p>Save document incrementally (i.e. using incremental update technque).</p>  
        <p> 
          <hr>In order to save document incremetally we should open the document file for writing. Therefore Document must be initialized with writable stream like in the next code snippet: Document doc = new Document(new FileStream("document.pdf", FileMode.Open, FileAccess.ReadWrite)); // make some changes and save the document incrementally doc.Save();</hr> 
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.IDocument.save(OutputStream,int)">
      <param name="OutputStream"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.IDocument.save(String,SaveOptions)">
       
        <p>Saves the document with a new name setting its save options.</p> @param outputFileName Path to file where the document will be stored. @param options Save options.
      
      <param name="String"/>
      <param name="SaveOptions"/>
    </member>
    <member name="M:com.aspose.pdf.IDocument.save(OutputStream,SaveOptions)">
      <param name="OutputStream"/>
      <param name="SaveOptions"/>
    </member>
    <member name="M:com.aspose.pdf.IDocument.getId">
      / * 
        <p>/ * Saves the document to a response stream with a save options. / *</p> / * @param response Encapsulates HTTP-response information. / * @param outputFileName Simple file name, i.e. without path. / * @param disposition Represents a MIME protocol Content-Disposition / header. / * @param options Save options. /
      
    </member>
    <member name="M:com.aspose.pdf.IDocument.getMetadataStream">
       
        <p>Returns raw metadata stream</p> @return
      
    </member>
    <member name="M:com.aspose.pdf.IDocument.updatePages"/>
    <member name="M:com.aspose.pdf.IDocument.suppressUpdate"/>
    <member name="M:com.aspose.pdf.IDocument.resumeUpdate"/>
    <member name="M:com.aspose.pdf.IDocument.dispose">
      / * 
        <p>/ * Set delayed updates mode for pages of the document. In delayed updates / * mode page contents resource is not updated until delayed updates mode is / * off. this allows increase performance of page update. / *</p> /
      
    </member>
    <member name="M:com.aspose.pdf.IDocument.getBackground">
       
        <p>Gets the background color of the document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.IDocument.setBackground(java.awt.Color)">
       
        <p>Sets the background color of the document.</p> 
      
      <param name="java.awt.Color"/>
    </member>
    <member name="M:com.aspose.pdf.IDocument.optimizeResources">
       
        <p>Optimize resources in the document: 1. Resources which are not used on the document pages are removed; 2. Equal resources are joined into one object; 3. Unused objects are deleted.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.IDocument.freeMemory">
       
        <p>Clears memory</p> 
      
    </member>
    <member name="T:com.aspose.pdf.IIndexBitmapConverter">
       
        <p>This interface declared for customization algorithms of quantization. Users can implement their own realization of this algorithms (for example algorithms based on unmanaged code).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.IIndexBitmapConverter.get1BppImage(Bitmap)">
      <param name="Bitmap"/>
    </member>
    <member name="M:com.aspose.pdf.IIndexBitmapConverter.get4BppImage(Bitmap)">
      <param name="Bitmap"/>
    </member>
    <member name="M:com.aspose.pdf.IIndexBitmapConverter.get8BppImage(Bitmap)">
      <param name="Bitmap"/>
    </member>
    <member name="T:com.aspose.pdf.Image">
      Represents image.
    </member>
    <member name="M:com.aspose.pdf.Image.getFile">
      Gets the image file. @return
    </member>
    <member name="M:com.aspose.pdf.Image.setFile(String)">
      Sets the image file. @return
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Image.getFixWidth">
      Gets the image width. @return
    </member>
    <member name="M:com.aspose.pdf.Image.setFixWidth(double)">
      Sets the image width. @return
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Image.getFixHeight">
      Gets the image height. @return
    </member>
    <member name="M:com.aspose.pdf.Image.setFixHeight(double)">
      Sets the image height. @return
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Image.getHyperlink">
      Gets the image hyperlink.
    </member>
    <member name="M:com.aspose.pdf.Image.setHyperlink(Hyperlink)">
      Sets the image hyperlink.
      <param name="Hyperlink"/>
    </member>
    <member name="M:com.aspose.pdf.Image.getImageScale">
       
        <p>Gets the image scale.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Image.setImageScale(double)">
       
        <p>Sets the image scale.</p> 
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Image.getImageStream">
      Gets the image stream. @return
    </member>
    <member name="M:com.aspose.pdf.Image.setImageStream(InputStream)">
      Sets the image stream. @return
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.Image.deepClone">
      Clone the image.
    </member>
    <member name="T:com.aspose.pdf.ImageFormatInternal"/>
    <member name="M:com.aspose.pdf.ImageFormatInternal.toString(ImageFormat)">
      <param name="ImageFormat"/>
    </member>
    <member name="M:com.aspose.pdf.ImageFormatInternal.isBitmapType(ImageFormat)">
      <param name="ImageFormat"/>
    </member>
    <member name="M:com.aspose.pdf.ImageFormatInternal.isMetafileType(ImageFormat)">
      <param name="ImageFormat"/>
    </member>
    <member name="M:com.aspose.pdf.ImageFormatInternal.isUnknownType(ImageFormat)">
      <param name="ImageFormat"/>
    </member>
    <member name="M:com.aspose.pdf.ImageFormatInternal.getNames"/>
    <member name="F:com.aspose.pdf.ImageFormatInternal.Bmp"/>
    <member name="F:com.aspose.pdf.ImageFormatInternal.Emf"/>
    <member name="F:com.aspose.pdf.ImageFormatInternal.Exif"/>
    <member name="F:com.aspose.pdf.ImageFormatInternal.Gif"/>
    <member name="F:com.aspose.pdf.ImageFormatInternal.Jpeg"/>
    <member name="F:com.aspose.pdf.ImageFormatInternal.MemoryBmp"/>
    <member name="F:com.aspose.pdf.ImageFormatInternal.Png"/>
    <member name="F:com.aspose.pdf.ImageFormatInternal.Tiff"/>
    <member name="F:com.aspose.pdf.ImageFormatInternal.Wmf"/>
    <member name="T:com.aspose.pdf.ImagePlacement">&lt;p&gt; Represents characteristics of an image placed to Pdf document page. &lt;/p&gt;&lt;p&gt;&lt;hr&gt;&lt;blockquote&gt;&lt;pre&gt; The example demonstrates how to find images on the first PDF document page and get images as bitmaps with visible dimensions. &lt;pre lang="Java"&gt; // Open document Document doc = new Document("D:\\Tests\\input.pdf"); // Create ImagePlacementAbsorber object to perform image placement search ImagePlacementAbsorber abs = new ImagePlacementAbsorber(); // Accept the absorber for first page doc.getPages().get_Item(1).accept(abs); // Retrieve images with visible dimensions for (ImagePlacement imagePlacement : (Iterable&lt;ImagePlacement&gt;)abs.getImagePlacements()) { BufferedImage scaledImage; ByteArrayOutputStream imageStream = new ByteArrayOutputStream()) // Retrieve image from resources imagePlacement.getImage().save(imageStream, ImageFormatInternal.Png); BufferedImage resourceImage = (BufferedImage) ImageIO.read(imageStream); // Create new bitmap with actual dimensions scaledImage = new BufferedImage(resourceImage, (int)imagePlacement.getRectangle().getWidth(), (int)imagePlacement.getRectangle().getHeight()); } &lt;/pre&gt; &lt;/pre&gt;&lt;/blockquote&gt;&lt;/hr&gt;&lt;/p&gt;&lt;p&gt;&lt;hr&gt; When an image is placed to a page it may have dimensions other than physical dimensions defined in {@code Resources}. The object {@code ImagePlacement} is intended to provide such information like dimensions, resolution and so on. &lt;/hr&gt;&lt;/p&gt;</member>
    <member name="M:com.aspose.pdf.ImagePlacement.getRectangle">
       
        <p>Gets rectangle of the Image.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ImagePlacement.getRotation">
       
        <p>Gets rotation angle of the Image.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ImagePlacement.getResolution">
       
        <p>Gets resolution of the Image.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ImagePlacement.getImage">
       
        <p>Gets related XImage resource object.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ImagePlacement.getPage">
       
        <p>Gets the page containing the image.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ImagePlacement.getCompositingParameters">
       
        <p>Gets compositing parameters of graphics state active for the image placed to the page.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ImagePlacement.save(OutputStream)">
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.ImagePlacement.save(OutputStream,ImageFormat)">
      <param name="OutputStream"/>
      <param name="ImageFormat"/>
    </member>
    <member name="T:com.aspose.pdf.ImagePlacementAbsorber">&lt;p&gt; Represents an absorber object of image placement objects. Performs search of image usages and provides access to search results via {@code ImagePlacementAbsorber.ImagePlacements} collection. &lt;/p&gt;&lt;p&gt;&lt;hr&gt;&lt;blockquote&gt;&lt;pre&gt; The example demonstrates how to find images on the first PDF document page and get the image placement properties. &lt;pre lang="Java"&gt; // Open document Document doc = new Document("D:\\Tests\\input.pdf"); // Create ImagePlacementAbsorber object to perform image placement search ImagePlacementAbsorber abs = new ImagePlacementAbsorber(); // Accept the absorber for first page doc.getPages().get_Item(1).accept(abs); // Display image placement properties for all placements for (ImagePlacement imagePlacement : (Iterable&lt;ImagePlacement&gt;)abs.getImagePlacements()) { System.out.println("image width:" + imagePlacement.getRectangle().getWidth()); System.out.println("image height:" + imagePlacement.getRectangle().getHeight()); System.out.println("image LLX:" + imagePlacement.getRectangle(0).getX()); System.out.println("image LLY:" + imagePlacement.getRectangle.getY()); System.out.println("image horizontal resolution:" + imagePlacement.getResolution().getX()); System.out.println("image vertical resolution:" + imagePlacement.getResolution().getY()); } &lt;/pre&gt; &lt;/pre&gt;&lt;/blockquote&gt;&lt;/hr&gt;&lt;/p&gt;&lt;p&gt;&lt;hr&gt; The {@code ImagePlacementAbsorber} object is basically used in images search scenario. When the search is completed the occurrences are represented with {@code ImagePlacement} objects that the {@code ImagePlacementAbsorber.ImagePlacements} collection contains. The {@code ImagePlacement} object provides access to the image placement properties: dimensions, resolution etc. &lt;/hr&gt;&lt;/p&gt;</member>
    <member name="M:com.aspose.pdf.ImagePlacementAbsorber.getImagePlacements">
       
        <p>Gets collection of image placement occurrences that are presented with {@code ImagePlacement} objects.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ImagePlacementAbsorber.visit(Page)">
       
        <p>Performs search on the specified page.</p> 
      
      <param name="Page"/>
    </member>
    <member name="M:com.aspose.pdf.ImagePlacementAbsorber.visit(IDocument)">
       
        <p>Performs search on the specified document.</p> 
      
      <param name="IDocument"/>
    </member>
    <member name="M:com.aspose.pdf.ImagePlacementAbsorber.#ctor">
       
        <p>Initializes new instance of the {@code ImagePlacementAbsorber} object.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.ImagePlacementCollection">
       
        <p>Represents an image placements collection</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ImagePlacementCollection.size">
       
        <p>Gets the number of {@code ImagePlacement} object elements actually contained in the collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ImagePlacementCollection.getSyncRoot">
       
        <p>Gets an object that can be used to synchronize access to the collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ImagePlacementCollection.isSynchronized">
       
        <p>Gets a value indicating whether access to the collection is synchronized (thread safe).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ImagePlacementCollection.iterator">
       
        <p>Returns an enumerator for the entire collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ImagePlacementCollection.copyTo(Array,int)">
       
        <p>Copies the entire collection to a compatible one-dimensional Array, starting at the specified index of the target array</p> 
      
      <param name="Array"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.ImagePlacementCollection.get_Item(int)">
       
        <p>Gets the text fragment element at the specified index.</p> @return @param index
      
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.ImageStamp">
       
        <p>Reresents graphic stamp.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ImageStamp.getImage"/>
    <member name="M:com.aspose.pdf.ImageStamp.getWidth">
       
        <p>Gets image width. Setting this property allos to scal image horizontally.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ImageStamp.setWidth(double)">
       
        <p>Sets image width. Setting this property allos to scal image horizontally.</p> 
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.ImageStamp.getHeight">
       
        <p>Gets image height. Setting this image allows to scale image vertically.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ImageStamp.setHeight(double)">
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.ImageStamp.put(Page)">
       
        <p>Adds graphic stamp on the page.</p> @param page Page for stamping.
      
      <param name="Page"/>
    </member>
    <member name="M:com.aspose.pdf.ImageStamp.close"/>
    <member name="M:com.aspose.pdf.ImageStamp.#ctor(Stream)">
       
        <p>Initializes a new instance of the {@code ImageStamp} class.</p> @param image Stream which contains image data.
      
      <param name="Stream"/>
    </member>
    <member name="M:com.aspose.pdf.ImageStamp.#ctor(InputStream)">
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.ImageStamp.#ctor(String)">
       
        <p>Creates image stamp by image in the specified file.</p> @param fileName
      
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.ImportFormat">
       
        <p>Specifies import format.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ImportFormat.Cgm">
       
        <p>Computer Graphics Metafile format.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.ImportOptions">
       
        <p>ImportOptions type hold level of abstraction on individual import options.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ImportOptions.getImportFormat">
       
        <p>Import format.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.InkAnnotation">
       
        <p>Represents a freehand "scribble" composed of one or more disjoint paths.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.InkAnnotation.accept(AnnotationSelector)">
       
        <p>Accepts visitor object to process the annotation.</p> @param visitor Visitor object.
      
      <param name="AnnotationSelector"/>
    </member>
    <member name="M:com.aspose.pdf.InkAnnotation.getInkList">
       
        <p>Gets or sets list of gestures that are independent lines which are represented by Point[] arrays.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.InkAnnotation.setInkList(IList)">
      <param name="IList"/>
    </member>
    <member name="M:com.aspose.pdf.InkAnnotation.#ctor(Page,Rectangle,IList)">
       
        <p>Creates new Ink annotation on the specified page.</p> @param page The document's page where annotation should be created. @param rect The annotation rectangle, defining the location of the annotation on the page. @param inkList An array of Point[] arrays, each representing a stroked path.
      
      <param name="Page"/>
      <param name="Rectangle"/>
      <param name="IList"/>
    </member>
    <member name="T:com.aspose.pdf.InvalidCgmFileFormatException">
       
        <p>The exception that is thrown when a Cgm file is invalid.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.InvalidCgmFileFormatException.#ctor(String)">
       
        <p>Initializes a new instance of the {@code InvalidCgmFileFormatException} class.</p> @param message The message.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.InvalidCgmFileFormatException.#ctor(String,Exception)">
       
        <p>Initializes a new instance of the {@code InvalidCgmFileFormatException} class with a specified error message and a reference to the inner exception that is the cause of this exception.</p> @param message The error message that explains the reason for the exception. @param innerException The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.
      
      <param name="String"/>
      <param name="Exception"/>
    </member>
    <member name="M:com.aspose.pdf.InvalidCgmFileFormatException.#ctor(Exception)">
       
        <p>Initializes a new instance of the {@code InvalidCgmFileFormatException} class with a specified error message and a reference to the inner exception that is the cause of this exception.</p> @param innerException The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.
      
      <param name="Exception"/>
    </member>
    <member name="T:com.aspose.pdf.InvalidFormTypeOperationException">
       
        <p>The exception that is thrown when an operation with form type is not valid.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.InvalidFormTypeOperationException.#ctor(String)">
       
        <p>Initializes a new instance of the {@code InvalidFormTypeOperationException} class.</p> @param message The message.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.InvalidFormTypeOperationException.#ctor(String,Exception)">
       
        <p>Initializes a new instance of the {@code InvalidFormTypeOperationException} class with a specified error message and a reference to the inner exception that is the cause of this exception.</p> @param message The error message that explains the reason for the exception. @param innerException The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.
      
      <param name="String"/>
      <param name="Exception"/>
    </member>
    <member name="M:com.aspose.pdf.InvalidFormTypeOperationException.#ctor(Exception)">
       
        <p>Initializes a new instance of the {@code InvalidFormTypeOperationException} class with a specified error message and a reference to the inner exception that is the cause of this exception.</p> @param innerException The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.
      
      <param name="Exception"/>
    </member>
    <member name="T:com.aspose.pdf.IOperatorSelector">
       
        <p>Defines Visitor for visiting different pdf operators.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.Fill)">
      Visit/select f operator. @param f Fill path operator (nonzero winding number rule).
      <param name="Operator.Fill"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.ObsoleteFill)">
      Visit/select F operator. @param F Fill path operator (nonzero winding number rule).
      <param name="Operator.ObsoleteFill"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.EOFill)">
      Visit/select operator f*. @param f_ Fill path operator (even-odd rule).
      <param name="Operator.EOFill"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.SetGrayStroke)">
      Visit/select G operator. @param G Set gray level operator (for stroking operations).
      <param name="Operator.SetGrayStroke"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.SetGray)">
      Visit/select g operator. @param g Set gray level operator (for nonstroking operations).
      <param name="Operator.SetGray"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.GS)">
      Visit/select gs operator. @param gs Set graphics state operator.
      <param name="Operator.GS"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.ClosePath)">
      Visit/select h operator. @param h Close subpath operator.
      <param name="Operator.ClosePath"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.SetFlat)">
      Visit/select i operator. @param i Set flatness tolerance operator.
      <param name="Operator.SetFlat"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.ID)">
      Visit/select ID operator. @param ID Begin inline image data operator.
      <param name="Operator.ID"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.SetColorRenderingIntent)">
      Visit/select ri operator. @param ri Set color rendering intent operator.
      <param name="Operator.SetColorRenderingIntent"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.SetLineCap)">
      Visit/select J operator. @param J Set line cap style operator.
      <param name="Operator.SetLineCap"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.SetMiterLimit)">
      Visit/select M operator. @param M Set miter limit operator.
      <param name="Operator.SetMiterLimit"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.MP)">
      Visit/select MP operator. @param MP Define marked-content point operator.
      <param name="Operator.MP"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.EndPath)">
      Visit/select n operator. @param n End path operator (without filling or stroking).
      <param name="Operator.EndPath"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.GSave)">
      Visit/select q operator. @param q Save graphics state operator.
      <param name="Operator.GSave"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.GRestore)">
      Visit/select Q operator. @param Q Restore graphics state operator.
      <param name="Operator.GRestore"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.Re)">
      Visit/select re operator. @param re Append rectangle to path operator.
      <param name="Operator.Re"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.SetRGBColorStroke)">
      Visit/select RG operator. @param RG Set RGB color operator (for stroking operations).
      <param name="Operator.SetRGBColorStroke"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.SetRGBColor)">
      Visit/select rg operator. @param rg Set RGB color operator (for nonstroking operations).
      <param name="Operator.SetRGBColor"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.SetCMYKColorStroke)">
      Visit/select K operator. @param K Set CMYK color operator (for stroking operations).
      <param name="Operator.SetCMYKColorStroke"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.SetCMYKColor)">
      Visit/select k operator. @param k Set CMYK color operator (for nonstroking operations).
      <param name="Operator.SetCMYKColor"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.LineTo)">
      Visit/select l operator. @param l Append straight line segment to path operator.
      <param name="Operator.LineTo"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.MoveTo)">
      Visit/select m operator. @param m Begin new subpath operator.
      <param name="Operator.MoveTo"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.SetWordSpacing)">
      Visit/select Tw operator. @param Tw Set word spacing operator.
      <param name="Operator.SetWordSpacing"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.ClosePathStroke)">
      Visit/select s operator. @param s Close and stroke path operator.
      <param name="Operator.ClosePathStroke"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.MoveTextPositionSetLeading)">
      Visit/select TD operator. @param TD Move text position and set leading operator.
      <param name="Operator.MoveTextPositionSetLeading"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.SelectFont)">
      Visit/select Tf operator. @param Tf Set text font and size operator.
      <param name="Operator.SelectFont"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.ShowText)">
      Visit/select Tj operator. @param Tj Show text operator.
      <param name="Operator.ShowText"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.SetGlyphsPositionShowText)">
      Visit/select TJ operator. @param TJ Show text operator (allowing individual glyph positioning).
      <param name="Operator.SetGlyphsPositionShowText"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.SetTextLeading)">
      Visit/select TL operator. @param TL Set text leading operator.
      <param name="Operator.SetTextLeading"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.SetTextMatrix)">
      Visit/select Tm operator. @param Tm Set text matrix and text line matrix operator.
      <param name="Operator.SetTextMatrix"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.SetTextRenderingMode)">
      Visit/select Tr operator. @param Tr Set text rendering mode operator.
      <param name="Operator.SetTextRenderingMode"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.SetTextRise)">
      Visit/select Ts operator. @param Ts Set text rise operator.
      <param name="Operator.SetTextRise"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.Stroke)">
      Visit/select S operator. @param S Stroke path operator.
      <param name="Operator.Stroke"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.SetColorStroke)">
      Visit/select SC operator. @param SC Set color operator (for stroking operations).
      <param name="Operator.SetColorStroke"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.SetColor)">
      Visit/select sc operator. @param sc Set color operator (for nonstroking operations).
      <param name="Operator.SetColor"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.SetAdvancedColorStroke)">
      Visit/select SCN operator. @param SCN Set color operator (for stroking operations, ICCBasedand special colour spaces).
      <param name="Operator.SetAdvancedColorStroke"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.SetAdvancedColor)">
      Visit/select scn operator. @param scn Set color operator (for nonstroking operations, ICCBased and special colour spaces).
      <param name="Operator.SetAdvancedColor"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.ShFill)">
      Visit/select sh operator. @param sh Paint area defined by shading pattern operator.
      <param name="Operator.ShFill"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.MoveToNextLine)">
      Visit/select T* operator. @param T_ Move to start of next text line operator.
      <param name="Operator.MoveToNextLine"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.SetCharacterSpacing)">
      Visit/select Tc operator. @param Tc Set character spacing operator.
      <param name="Operator.SetCharacterSpacing"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.MoveTextPosition)">
      Visit/select Td operator. @param Td Move text position operator.
      <param name="Operator.MoveTextPosition"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.CurveTo2)">
      Visit/select y operator. @param y Append curved segment to path operator (final point replicated).
      <param name="Operator.CurveTo2"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.EOClip)">
      Visit/select W* operator. @param W_ Set clipping path operator (even-odd rule).
      <param name="Operator.EOClip"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.SetHorizontalTextScaling)">
      Visit/select Tz operator. @param Tz Set horizontal text scaling operator.
      <param name="Operator.SetHorizontalTextScaling"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.CurveTo1)">
      Visit/select v operator. @param v Append curved segment to path operator (initial point replicated).
      <param name="Operator.CurveTo1"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.Clip)">
      Visit/select W operator. @param W Set clipping path operator (nonzero winding number rule).
      <param name="Operator.Clip"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.SetLineWidth)">
      Visit/select w operator. @param w Set line width operator.
      <param name="Operator.SetLineWidth"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.SetLineJoin)">
      Visit/select j operator. @param j Set line join style operator.
      <param name="Operator.SetLineJoin"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.EX)">
      Visit/select EX operator. @param EX End compatibility section operator.
      <param name="Operator.EX"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.ET)">
      Visit/select ET operator. @param ET End text object operator.
      <param name="Operator.ET"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.EMC)">
      Visit/select EMC operator. @param EMC End marked-content sequence operator.
      <param name="Operator.EMC"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.EI)">
      Visit/select EI operator. @param EI End inline image object operator.
      <param name="Operator.EI"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.DP)">
      Visit/select DP operator. @param DP Define marked-content point operator (with property list).
      <param name="Operator.DP"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.Do)">
      Visit/select Do operator. @param Do Invoke named XObject operator.
      <param name="Operator.Do"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.SetDash)">
      Visit/select d operator. @param d Set line dash pattern operator.
      <param name="Operator.SetDash"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.SetCharWidth)">
      Visit/select d0 operator. @param d0 Set glyph width in Type 3 font operator.
      <param name="Operator.SetCharWidth"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.SetCharWidthBoundingBox)">
      Visit/select d1 operator. @param d1 Set glyph width and bounding box in Type 3 font operator.
      <param name="Operator.SetCharWidthBoundingBox"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.SetColorSpaceStroke)">
      Visit/select CS operator. @param CS Set color space operator (for stroking operations).
      <param name="Operator.SetColorSpaceStroke"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.SetColorSpace)">
      Visit/select cs operator. @param cs Set color space operator (for nonstroking operations).
      <param name="Operator.SetColorSpace"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.ConcatenateMatrix)">
      Visit/select cm operator. @param cm Concatenate matrix to current transformation matrix operator.
      <param name="Operator.ConcatenateMatrix"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.CurveTo)">
      Visit/select c operator. @param c Append curved segment to path operator (three control points).
      <param name="Operator.CurveTo"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.BX)">
      Visit/select BX operator. @param BX Begin compatibility section operator.
      <param name="Operator.BX"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.BT)">
      Visit/select BT operator. @param BT Begin text object operator.
      <param name="Operator.BT"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.BMC)">
      Visit/select BMC operator. @param BMC Begin marked-content sequence operator.
      <param name="Operator.BMC"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.BI)">
      Visit/select BI operator. @param BI Begin inline image object operator.
      <param name="Operator.BI"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.BDC)">
      Visit/select BDC operator. @param BDC Begin marked-content sequence operator (with property list).
      <param name="Operator.BDC"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.FillStroke)">
      Visit/select B operator. @param B Fill and stroke path operator (nonzero winding number rule).
      <param name="Operator.FillStroke"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.ClosePathFillStroke)">
      Visit/select b operator. @param b Close, fill, and stroke path operator (nonzero winding number rule).
      <param name="Operator.ClosePathFillStroke"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.EOFillStroke)">
      Visit/select B* operator. @param B_ Fill and stroke path operator (even-odd rule).
      <param name="Operator.EOFillStroke"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.ClosePathEOFillStroke)">
      Visit/select b* operator. @param b_ Close, fill, and stroke path operator (even-odd rule).
      <param name="Operator.ClosePathEOFillStroke"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.MoveToNextLineShowText)">
      Visit/select ' operator. @param _ Move to next line and show text operator.
      <param name="Operator.MoveToNextLineShowText"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.SetSpacingMoveToNextLineShowText)">
      Visit/select '' operator. @param __ Set word and character spacing, move to next line, and show text operator.
      <param name="Operator.SetSpacingMoveToNextLineShowText"/>
    </member>
    <member name="M:com.aspose.pdf.IOperatorSelector.visit(Operator.TextOperator)">
      Visit/select any text operator operator. @param textOperator General text operator which is used to select the set of corresponding pdf operators.
      <param name="Operator.TextOperator"/>
    </member>
    <member name="T:com.aspose.pdf.IWarningCallback">
       
        <p>Interface for user's callback mechanism support.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.IWarningCallback.warning(WarningInfo)">
      The callback method for some program notifications. @param warning the warning information for some happened warning @return the result of further program workflow
      <param name="WarningInfo"/>
    </member>
    <member name="T:com.aspose.pdf.JavascriptAction">
       
        <p>Class representing javascript action.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.JavascriptAction.getScript">
       
        <p>Gets or sets javascript code.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.JavascriptAction.setScript(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.JavascriptAction.#ctor(String)">
       
        <p>Creates PDF dictionary which describes action.</p>
        <p>Constructor.</p> @return PDF dictionary. @param trailer Trailerable object @param javaScript JavaScript code.
      
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.Justification">
       
        <p>Enumerates the forms of quadding (justification) to be used in displaying the annotation�s text.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.Justification.Left">
       
        <p>Left justification.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.Justification.Center">
       
        <p>Center justification.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.Justification.Right">
       
        <p>Right justification.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.LatexLoadOptions">
       
        <p>Represents options for loading/importing TeX file into PDF document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.LatexLoadOptions.getTextFontName">
       
        <p>Sets/Gets name of the font used for rendering math formulas.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.LatexLoadOptions.setTextFontName(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.LatexLoadOptions.getWarningCallback">
       
        <p>Sets/Gets callback object for info/errors notification.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.LatexLoadOptions.setWarningCallback(IWarningCallback)">
      <param name="IWarningCallback"/>
    </member>
    <member name="M:com.aspose.pdf.LatexLoadOptions.getMathFontName">
       
        <p>Sets/Gets name of the font used for rendering math formulas.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.LatexLoadOptions.setMathFontName(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.LatexLoadOptions.getSpecSymbolsFontName">
       
        <p>Sets/Gets name of the font used for rendering special symbols, e.g. \sigma, \textbraceright, \vdots, etc.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.LatexLoadOptions.setSpecSymbolsFontName(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.LatexLoadOptions.#ctor">
       
        <p>Creates default load options for converting TeX file into PDF document.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.LaTeXSaveOptions">
       
        <p>Save options for export to TeX format</p> 
      
    </member>
    <member name="M:com.aspose.pdf.LaTeXSaveOptions.getOutDirectoryPath">
       
        <p>Property for {@code _outDirectoryPath} parameter.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.LaTeXSaveOptions.setOutDirectoryPath(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.LaTeXSaveOptions.#ctor">
       
        <p>Initializes a new instance of the {@code LaTeXSaveOptions} class.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.LaunchAction">
       
        <p>Represents a launch action that launches an application or opens or prints a document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.LaunchAction.getFile">
       
        <p>Gets the application to be launched or the document to be opened or printed.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.LaunchAction.setFile(String)">
       
        <p>Sets the application to be launched or the document to be opened or printed.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.LaunchAction.getNewWindow">
      / * 
        <p>/ * Gets a parameter string to be passed to the application designated by the File property. / *</p> /
      
    </member>
    <member name="M:com.aspose.pdf.LaunchAction.setNewWindow(int)">
      Sets a flag specifying whether to open the destination document in a new window (affect PDF documents only). ExtendedBoolean
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.LaunchAction.#ctor(String)">
       
        <p>Creates a launch action.</p> @param The file to be launched.
      
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.LevelFormat">
      Represents format of the table of contents.
    </member>
    <member name="M:com.aspose.pdf.LevelFormat.getTextState">
      Gets or sets a list level text state @return
    </member>
    <member name="M:com.aspose.pdf.LevelFormat.setTextState(TextState)">
      <param name="TextState"/>
    </member>
    <member name="M:com.aspose.pdf.LevelFormat.getMargin">
       
        <p>Gets or sets a list level margin</p> 
      
    </member>
    <member name="M:com.aspose.pdf.LevelFormat.setMargin(MarginInfo)">
      <param name="MarginInfo"/>
    </member>
    <member name="M:com.aspose.pdf.LevelFormat.getSubsequentLinesIndent">
       
        <p>Gets or sets a subsequent lines indent</p> 
      
    </member>
    <member name="M:com.aspose.pdf.LevelFormat.setSubsequentLinesIndent(float)">
      <param name="float"/>
    </member>
    <member name="T:com.aspose.pdf.License">&lt;p&gt; Provides methods to license the component. &lt;/p&gt;&lt;p&gt;&lt;hr&gt;&lt;blockquote&gt;&lt;pre&gt; In this example, an attempt will be made to find a license file named MyLicense.lic in the folder that contains the component jar file: &lt;pre&gt; License license = new License(); license.setLicense("MyLicense.lic"); &lt;/pre&gt;&lt;/blockquote&gt;&lt;/hr&gt;&lt;/p&gt;</member>
    <member name="M:com.aspose.pdf.License.getEmbedded">
       
        <p>License number was added as embedded resource.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.License.setEmbedded(boolean)">
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.License.setLicense(String)">&lt;p&gt; Licenses the component. &lt;/p&gt;&lt;p&gt;&lt;hr&gt;&lt;blockquote&gt; In this example, an attempt will be made to find a license file named MyLicense.lic in the folder that contains the component, in the folder that contains the calling assembly, in the folder of the entry assembly and then in the embedded resources of the calling assembly. &lt;pre&gt; [Java] License license = new License(); license.setLicense("MyLicense.lic"); &lt;/pre&gt; &lt;/pre&gt;&lt;/blockquote&gt;&lt;/hr&gt;&lt;/p&gt; @param licenseName Can be a full or short file name or name of an embedded resource. Use an empty string to switch to evaluation mode. &lt;p&gt;&lt;hr&gt; &lt;p&gt;Tries to find the license in the following locations:&lt;/p&gt; &lt;p&gt;1. Explicit path.&lt;/p&gt; &lt;p&gt;2. The folder of the component assembly.&lt;/p&gt; &lt;p&gt;3. The folder of the client's calling assembly.&lt;/p&gt; &lt;p&gt;4. The folder of the entry assembly.&lt;/p&gt; &lt;p&gt;5. An embedded resource in the client's calling assembly.&lt;/p&gt; &lt;p&gt;2. The folder of the component jar file.&lt;/p&gt; &lt;/hr&gt;&lt;/p&gt; 
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.License.setLicense(InputStream)">
       
        <p>Licenses the component.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre>[Java] License license = new License(); license.setLicense(myStream);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param stream A stream that contains the license. 
        <p>
          <hr> 
            <p>Use this method to load a license from a stream.</p> 
          </hr>
        </p>
        <javaName>void setLicense(java.io.InputStream stream)</javaName> 
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.License.#ctor">
       
        <p>Initializes a new instance of this class.</p>
        <p>
          <hr>
            <blockquote>
              <pre>In this example, an attempt will be made to find a license file named MyLicense.lic in the folder that contains the component, in the folder that contains the calling assembly, in the folder of the entry assembly and then in the embedded resources of the calling assembly. 
                <pre>[Java] License license = new License(); license.setLicense("MyLicense.lic");</pre> {@code 
                <java>the component jar file: 
                  <pre>License license = new License(); license.setLicense("MyLicense.lic");</pre> 
                </java>}
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="T:com.aspose.pdf.LineAnnotation">
       
        <p>Class representing line annotation.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.LineAnnotation.writeXfdf(XmlWriter)">
      <param name="XmlWriter"/>
    </member>
    <member name="M:com.aspose.pdf.LineAnnotation.getStarting">
       
        <p>Gets starting point of line.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.LineAnnotation.setStarting(Point)">
       
        <p>Sets starting point of line.</p> 
      
      <param name="Point"/>
    </member>
    <member name="M:com.aspose.pdf.LineAnnotation.getStartingStyle">
       
        <p>Gets line ending style for line starting point.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.LineAnnotation.setStartingStyle(int)">
       
        <p>Sets line ending style for line starting point.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.LineAnnotation.getEnding">
       
        <p>Gets line ending point.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.LineAnnotation.setEnding(Point)">
       
        <p>Sets line ending point.</p> 
      
      <param name="Point"/>
    </member>
    <member name="M:com.aspose.pdf.LineAnnotation.getEndingStyle">
       
        <p>Gets ending style for end point of line.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.LineAnnotation.setEndingStyle(int)">
       
        <p>Sets ending style for end point of line.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.LineAnnotation.getInteriorColor">
       
        <p>Gets interior color of the annotation.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.LineAnnotation.setInteriorColor(Color)">
       
        <p>Sets interior color of the annotation.</p> 
      
      <param name="Color"/>
    </member>
    <member name="M:com.aspose.pdf.LineAnnotation.getLeaderLine">
       
        <p>Gets leader line length.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.LineAnnotation.setLeaderLine(double)">
       
        <p>Sets leader line length.</p> 
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.LineAnnotation.getLeaderLineExtension">
       
        <p>Gets length of leader line extension.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.LineAnnotation.setLeaderLineExtension(double)">
       
        <p>Sets length of leader line extension.</p> 
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.LineAnnotation.getShowCaption">
       
        <p>Gets boolean flag which determinies is contents must be shown as caption.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.LineAnnotation.setShowCaption(boolean)">
       
        <p>Sets boolean flag which determinies is contents must be shown as caption.</p> 
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.LineAnnotation.getLeaderLineOffset">
       
        <p>Gets leader line offset.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.LineAnnotation.setLeaderLineOffset(double)">
       
        <p>Sets leader line offset.</p> 
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.LineAnnotation.getCaptionOffset">
       
        <p>Gets caption text offset from its normal position.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.LineAnnotation.setCaptionOffset(Point)">
       
        <p>Sets caption text offset from its normal position.</p> 
      
      <param name="Point"/>
    </member>
    <member name="M:com.aspose.pdf.LineAnnotation.getCaptionPosition">
       
        <p>Gets annotation caption position.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.LineAnnotation.setCaptionPosition(int)">
       
        <p>Sets annotation caption position.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.LineAnnotation.accept(AnnotationSelector)">
       
        <p>Accepts visitor to annotation processing.</p> @param visitor Visitor object
      
      <param name="AnnotationSelector"/>
    </member>
    <member name="M:com.aspose.pdf.LineAnnotation.getIntent">
       
        <p>Gets the intent of the line annotation.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.LineAnnotation.setIntent(int)">
       
        <p>Sets the intent of the line annotation.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.LineAnnotation.#ctor(Page,Rectangle,Point,Point)">
       
        <p>Creates new Line annotation on the specified page.</p> @param page The document's page where annotation should be created. @param rect The annotation rectangle, defining the location of the annotation on the page. @param start A point, specifying the starting coordinate of the line. @param end A point, specifying the ending coordinate of the line.
      
      <param name="Page"/>
      <param name="Rectangle"/>
      <param name="Point"/>
      <param name="Point"/>
    </member>
    <member name="T:com.aspose.pdf.LineEnding">
       
        <p>Enumerates the line ending styles to be used in drawing the line.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.LineEnding.None">
       
        <p>No line ending.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.LineEnding.Square">
       
        <p>A square filled with the annotation�s interior color, if any.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.LineEnding.Circle">
       
        <p>A circle filled with the annotation�s interior color, if any.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.LineEnding.Diamond">
       
        <p>A diamond shape filled with the annotation�s interior color, if any.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.LineEnding.OpenArrow">
       
        <p>Two short lines meeting in an acute angle to form an open arrowhead.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.LineEnding.ClosedArrow">
       
        <p>Two short lines meeting in an acute angle as in the OpenArrow style and connected by a third line to form a triangular closed arrowhead filled with the annotation�s interior color, if any.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.LineEnding.Butt">
       
        <p>A short line at the endpoint perpendicular to the line itself.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.LineEnding.ROpenArrow">
       
        <p>Two short lines in the reverse direction from OpenArrow.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.LineEnding.RClosedArrow">
       
        <p>A triangular closed arrowhead in the reverse direction from ClosedArrow.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.LineEnding.Slash">
       
        <p>A short line at the endpoint approximately 30 degrees clockwise from perpendicular to the line itself.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.LineEndingConverter"/>
    <member name="M:com.aspose.pdf.LineEndingConverter.toString(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.LineEndingConverter.toEnum(String)">
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.LineIntent">
       
        <p>Enumerates the intents of the line annotation.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.LineIntent.Undefined">
       
        <p>Undefined state.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.LineIntent.LineArrow">
       
        <p>Means that the annotation is intended to function as an arrow.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.LineIntent.LineDimension">
       
        <p>Means that the annotation is intended to function as a dimension line.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.LinkAnnotation">
       
        <p>Represents either a hypertext link to a destination elsewhere in the document or an action to be performed.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.LinkAnnotation.getAction">
       
        <p>Get an action to be performed when the link annotation is activated.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.LinkAnnotation.setAction(PdfAction)">
       
        <p>Set an action to be performed when the link annotation is activated.</p> 
      
      <param name="PdfAction"/>
    </member>
    <member name="M:com.aspose.pdf.LinkAnnotation.getDestination">
       
        <p>Get a destination to be displayed when the annotation is activated.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.LinkAnnotation.setDestination(IAppointment)">
       
        <p>Set a destination to be displayed when the annotation is activated.</p> 
      
      <param name="IAppointment"/>
    </member>
    <member name="M:com.aspose.pdf.LinkAnnotation.accept(AnnotationSelector)">
       
        <p>Accepts visitor object to process the annotation.</p> @param visitor Visitor object.
      
      <param name="AnnotationSelector"/>
    </member>
    <member name="M:com.aspose.pdf.LinkAnnotation.getHighlighting">
       
        <p>Get the visual effect to be used when the mouse button is pressed or held down inside its active area.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.LinkAnnotation.setHighlighting(int)">
       
        <p>Set the visual effect to be used when the mouse button is pressed or held down inside its active area.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.LinkAnnotation.#ctor(Page,Rectangle)">
       
        <p>Creates new Link annotation on the specified page.</p> @param page The document's page where annotation should be created. @param rect The annotation rectangle, defining the location of the annotation on the page.
      
      <param name="Page"/>
      <param name="Rectangle"/>
    </member>
    <member name="T:com.aspose.pdf.ListBoxField">
       
        <p>Class represents ListBox field.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ListBoxField.getTopIndex">
       
        <p>Gets index of the top visible element of the list.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ListBoxField.setTopIndex(int)">
       
        <p>Sets index of the top visible element of the list.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.ListBoxField.setSelected(int)">
       
        <p>Gets index of the selected item. Items are numbered from 1.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.ListBoxField.setSelectedItems(int[])">
       
        <p>Gets array of the selected items in the multiselect list. For single-select list returns array with single item.</p> 
      
      <param name="int[]"/>
    </member>
    <member name="M:com.aspose.pdf.ListBoxField.#ctor">
       
        <p>Constructor for ListBoxField to be used in Generator.</p> @param page
      
    </member>
    <member name="M:com.aspose.pdf.ListBoxField.#ctor(Page,Rectangle)">
       
        <p>Creates new ListBox field.</p> @param page Page where list box will be placed. @param rect Rectangle where list box will be placed on the page.
      
      <param name="Page"/>
      <param name="Rectangle"/>
    </member>
    <member name="T:com.aspose.pdf.LoadFormat">
       
        <p>Specifies load format.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.LoadFormat.CGM"/>
    <member name="F:com.aspose.pdf.LoadFormat.HTML"/>
    <member name="F:com.aspose.pdf.LoadFormat.EPUB"/>
    <member name="F:com.aspose.pdf.LoadFormat.XML"/>
    <member name="F:com.aspose.pdf.LoadFormat.XSLFO"/>
    <member name="F:com.aspose.pdf.LoadFormat.PCL"/>
    <member name="F:com.aspose.pdf.LoadFormat.XPS"/>
    <member name="F:com.aspose.pdf.LoadFormat.TEX"/>
    <member name="F:com.aspose.pdf.LoadFormat.SVG"/>
    <member name="F:com.aspose.pdf.LoadFormat.MHT"/>
    <member name="T:com.aspose.pdf.LoadOptions">
       
        <p>LoadOptions type holds level of abstraction on individual load options</p> 
      
    </member>
    <member name="M:com.aspose.pdf.LoadOptions.getWarningHandler">
       
        <p>Callback to handle any warnings generated. The WarningHandler returns ReturnAction enum item specifying either Continue or Abort. Continue is the default action and the Load operation continues, however the user may also return Abort in which case the Load operation should cease.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.LoadOptions.setWarningHandler(IWarningCallback)">
      <param name="IWarningCallback"/>
    </member>
    <member name="M:com.aspose.pdf.LoadOptions.getLoadFormat">
       
        <p>Represents file format which {@code LoadOptions} describes.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.LoadOptions.ApsIntermediateFileIfAny"/>
    <member name="F:com.aspose.pdf.LoadOptions.XpsIntermediateFileIfAny"/>
    <member name="T:com.aspose.pdf.MarginInfo">
       
        <p>This class represents a margin for different objects.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.MarginInfo.getLeft">
       
        <p>Gets or sets a float value that indicates the left margin. The unit is point. In XML,the default unit is point,but cm and inch are also supported. For example,"10cm" or "5inch".</p> 
      
    </member>
    <member name="M:com.aspose.pdf.MarginInfo.setLeft(double)">
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.MarginInfo.getRight">
       
        <p>Gets or sets a float value that indicates the right margin. The unit is point. In XML,the default unit is point,but cm and inch are also supported. For example,"10cm" or "5inch".</p> 
      
    </member>
    <member name="M:com.aspose.pdf.MarginInfo.setRight(double)">
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.MarginInfo.getTop">
       
        <p>Gets or sets a float value that indicates the top margin. The unit is point. In XML,the default unit is point,but cm and inch are also supported. For example,"10cm" or "5inch".</p> 
      
    </member>
    <member name="M:com.aspose.pdf.MarginInfo.setTop(double)">
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.MarginInfo.getBottom">
       
        <p>Gets or sets a float value that indicates the bottom margin. The unit is point. In XML,the default unit is point,but cm and inch are also supported. For example,"10cm" or "5inch".</p> 
      
    </member>
    <member name="M:com.aspose.pdf.MarginInfo.setBottom(double)">
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.MarginInfo.deepClone">
       
        <p>Clones a new {@code MarginInfo} object.</p> @return The new object.
      
    </member>
    <member name="M:com.aspose.pdf.MarginInfo.#ctor">
       
        <p>Initializes a new instance of the {@code MarginInfo} class.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.MarginInfo.#ctor(double,double,double,double)">
       
        <p>Constructor of Rectangle.</p> @param left Left margin. @param bottom Bottom margin @param right Right margin. @param top Top margin.
      
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.MarkupAnnotation">
       
        <p>Abstract class representing markup annotation.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.MarkupAnnotation.getTitle">
       
        <p>Gets a text that shall be displayed in title bar of annotation.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.MarkupAnnotation.setTitle(String)">
       
        <p>Sets a text that shall be displayed in title bar of annotation.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.MarkupAnnotation.getRichText">
       
        <p>Gets a rich text string to be displayed in the pop-up window when the annotation is opened.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.MarkupAnnotation.setRichText(String)">
       
        <p>Sets a rich text string to be displayed in the pop-up window when the annotation is opened.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.MarkupAnnotation.getCreationDate">
       
        <p>Gets date and time when annotation was created.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.MarkupAnnotation.getSubject">
       
        <p>Gets text representing desciption of the object.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.MarkupAnnotation.setSubject(String)">
       
        <p>Sets text representing desciption of the object.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.MarkupAnnotation.getPopup"/>
    <member name="M:com.aspose.pdf.MarkupAnnotation.setPopup(PopupAnnotation)">
      <param name="PopupAnnotation"/>
    </member>
    <member name="M:com.aspose.pdf.MarkupAnnotation.getOpacity">
       
        <p>Gets the constant opacity value to be used in painting the annotation.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.MarkupAnnotation.setOpacity(double)">
       
        <p>Sets the constant opacity value to be used in painting the annotation.</p> 
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.MarkupAnnotation.getInReplyTo">
       
        <p>A reference to the annotation that this annotation is "in reply to". Both annotations must be on the same page of the document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.MarkupAnnotation.setInReplyTo(Annotation)">
      <param name="Annotation"/>
    </member>
    <member name="M:com.aspose.pdf.MarkupAnnotation.getReplyType">
       
        <p>A string specifying the relationship (the "reply type") between this annotation and one specified by InReplyTo.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.MarkupAnnotation.setReplyType(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.MarkupAnnotation.#ctor"/>
    <member name="T:com.aspose.pdf.Matrix">
       
        <p>Class represents transformation matrix.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Matrix.getA">
       
        <p>Get A member of the transformation matrix.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Matrix.setA(double)">
       
        <p>Set A member of the transformation matrix.</p> 
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Matrix.getB">
       
        <p>Get B member of the transformation matrix.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Matrix.setB(double)">
       
        <p>Set B member of the transformation matrix.</p> 
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Matrix.getC">
       
        <p>Get C member of the transformation matrix.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Matrix.setC(double)">
       
        <p>Set C member of the transformation matrix.</p> 
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Matrix.getD">
       
        <p>Set D member of the transformation matrix.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Matrix.setD(double)">
       
        <p>Get D member of the transformation matrix.</p> 
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Matrix.getE">
       
        <p>Get E member of the transformation matrix.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Matrix.setE(double)">
       
        <p>Set E member of the transformation matrix.</p> 
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Matrix.getF">
       
        <p>Get F member of the transformation matrix.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Matrix.setF(double)">
       
        <p>Set F member of the transformation matrix.</p> 
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Matrix.toString">
       
        <p>Returns text reporesentation of the matrix.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Matrix.equals(Object)">
       
        <p>Compares matrix agains other object.</p> @return Returns true is other object is Matrix and all matrix member are equal to correspondim members of the matrix @param obj
      
      <param name="Object"/>
    </member>
    <member name="M:com.aspose.pdf.Matrix.getMatrix(ITrailerable)">
       
        <p>Translates matrix into PDF array obect.</p> @return Result of converting @param trailer Trailerable object
      
      <param name="ITrailerable"/>
    </member>
    <member name="M:com.aspose.pdf.Matrix.rotation(double)">
       
        <p>Creates matrix for given rotation angle.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">Matrix m = Matrix.Rotation(Math.PI / 2);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return Transformation matrix. @param alpha Rotation angle in radians.
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Matrix.getAngle(int)">
       
        <p>Transaltes rotation into angle (degrees)</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">double angle = Matrix.getAngle(Rotation.on90); Matrix m = Matrix.rotation(angle);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return @param rotation
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Matrix.multiply(Matrix)">
       
        <p>Multiplies the matrix by other matrix.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">Matrix a = new Matrix(new double[] { 1, 0, 0, 1, 10, 20 }); Matrix b = new Matrix(new double[] { 0, -1, 1, 0, 0, 0 } ); Matrix c= a.multiply(b);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return Result of multiplication. @param other Multiplier matrix.
      
      <param name="Matrix"/>
    </member>
    <member name="M:com.aspose.pdf.Matrix.transform(Point)">
       
        <p>Transforms point using this matrix.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="JAva">Matrix m = new Matrix(new double[] { 1, 0, 0, 1, 10, 20 } ); Point p = new Point(5, 5); Point p1 = m.transform(p);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return Transformation result. @param p Point which will be transformed.
      
      <param name="Point"/>
    </member>
    <member name="M:com.aspose.pdf.Matrix.transform(com.aspose.pdf.Rectangle)">
       
        <p>Transformes rectangle. If angle is not 90 * N degrees then bounding rectangle is returned.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">Matrix m = new Matrix(new double[] { 1, 0, 0, 1, 10, 20 } ); Rectangle r = new Rectangle(0, 0, 100, 100); Rectangle r1 = m.transform(r1);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return Transformed rectangle. @param rect Rectangle to be transformed.
      
      <param name="com.aspose.pdf.Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.Matrix.reverse">
       
        <p>Calculates reverse matrix.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">Matrix m = Matrix.rotation(Math.PI / 2); Matrix m1 = m.reverse();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return Reverse matrix.
      
    </member>
    <member name="M:com.aspose.pdf.Matrix.hashCode">
       
        <p>Hash-code for object.</p> @return Hash-code.
      
    </member>
    <member name="M:com.aspose.pdf.Matrix.#ctor">
       
        <p>Constructor creates stanrard 1 to 1 matrix: [ A B C D E F ] = [ 1, 0, 0, 1, 0, 0]</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">Matrix m = new Matrix();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.Matrix.#ctor(double[])">
       
        <p>Constructor accepts a matrix with following array representation: [ A B C D E F ]</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">double[] c = new double[] { 1, 0, 0, 1, 10, 20 }; Matrix m = new Matrix(c);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param matrixArray
      
      <param name="double[]"/>
    </member>
    <member name="M:com.aspose.pdf.Matrix.#ctor(Matrix)">
       
        <p>Constructor accepts a matrix to create a copy</p> @param matrix
      
      <param name="Matrix"/>
    </member>
    <member name="M:com.aspose.pdf.Matrix.#ctor(double,double,double,double,double,double)">
       
        <p>Initializes transformation matrix with specified coefficients.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">Matrix m = new Matrix(1, 0, 0, 1, 3, 3);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param a A @param b B @param c C @param d D @param e E @param f F
      
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.Metadata">
       
        <p>Provides access to XMP metadata stream.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Metadata.registerNamespaceUri(String,String)">
       
        <p>Registers namespace URI.</p> @param prefix Prefix. @param namespaceUri Namespace URI.
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Metadata.registerNamespaceUri(String,String,String)">
       
        <p>Registers namespace URI.</p> @param prefix Prefix. @param namespaceUri Namespace URI.
      
      <param name="String"/>
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Metadata.getNamespaceUriByPrefix(String)">
       
        <p>Returns namespace URI by prefix.</p> @return Namespace URI. @param prefix Prefix.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Metadata.getPrefixByNamespaceUri(String)">
       
        <p>Returns prefix by namespace URI.</p> @return Prefix. @param namespaceUri Namespace URI.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Metadata.addItem(Object,Object)">
       
        <p>Adds value to metadata.</p> @param key Key name. @param value Value which will be added.
      
      <param name="Object"/>
      <param name="Object"/>
    </member>
    <member name="M:com.aspose.pdf.Metadata.add(String,XmpPdfAExtensionObject)">
       
        <p>Adds pdf extension to metadata.</p> @param prefix The prefix of extension. @param value Value which will be added.
      
      <param name="String"/>
      <param name="XmpPdfAExtensionObject"/>
    </member>
    <member name="M:com.aspose.pdf.Metadata.clear">
       
        <p>Clears metadata.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Metadata.contains(Object)">
       
        <p>Checks does key is contained in metadata.</p> @return True if key is contained in the metadata. @param key Key name.
      
      <param name="Object"/>
    </member>
    <member name="M:com.aspose.pdf.Metadata.iterator">
       
        <p>Returns dictionary enumerator.</p> @return Enumerator.
      
    </member>
    <member name="M:com.aspose.pdf.Metadata.isFixedSize">
       
        <p>Checks if colleciton has fixed size.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Metadata.isReadOnly">
       
        <p>Checks if collection is read-only.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Metadata.getKeys">
       
        <p>Gets collection of metadata keys.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Metadata.removeItem(Object)">
       
        <p>Removes entry from metadata.</p> @param key
      
      <param name="Object"/>
    </member>
    <member name="M:com.aspose.pdf.Metadata.getValues">
       
        <p>Gets values in the metadata.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Metadata.getExtensionFields">
       
        <p>Gets the dictionary of extension fields.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Metadata.get_Item(Object)">
       
        <p>Gets data from metadata.</p> @return Metadata object. @param key Key name.
      
      <param name="Object"/>
    </member>
    <member name="M:com.aspose.pdf.Metadata.set_Item(Object,Object)">
       
        <p>Sets data from metadata.</p> @return Metadata object. @param key Key name.
      
      <param name="Object"/>
      <param name="Object"/>
    </member>
    <member name="M:com.aspose.pdf.Metadata.size">
       
        <p>Gets count of elements in the collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Metadata.isSynchronized">
       
        <p>Checks if collection is synchronized.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Metadata.getSyncRoot">
       
        <p>Gets collection synchronization object.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Metadata.iteratorIE">
       
        <p>Gets enumerator of the collection.</p> @return
      
    </member>
    <member name="M:com.aspose.pdf.Metadata.copyTo(Array,int)">
       
        <p>Copies elements of the collection into array.</p> @param array Destination array. @param index Starting index.
      
      <param name="Array"/>
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.MhtLoadOptions">
       
        <p>Represents options for loading/importing of .mht-file into pdf document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.MhtLoadOptions.#ctor">
       
        <p>Creates load options for converting html into pdf document with empty base path.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.MobiXmlSaveOptions">
       
        <p>Save options for export to Xml format</p> 
      
    </member>
    <member name="M:com.aspose.pdf.MobiXmlSaveOptions.#ctor">
       
        <p>Constructor</p> 
      
    </member>
    <member name="T:com.aspose.pdf.MovieAnnotation">
       
        <p>Represents a movie annotation that contains animated graphics and sound to be presented on the computer screen and through the speakers. When the annotation is activated, the movie is played.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.MovieAnnotation.getTitle">
       
        <p>Gets the title of the movie annotation.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.MovieAnnotation.setTitle(String)">
       
        <p>Sets the title of the movie annotation.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.MovieAnnotation.getFile">
       
        <p>Gets a file specification identifying a self-describing movie file.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.MovieAnnotation.setFile(FileSpecification)">
       
        <p>Sets a file specification identifying a self-describing movie file.</p> 
      
      <param name="FileSpecification"/>
    </member>
    <member name="M:com.aspose.pdf.MovieAnnotation.getAspect">
       
        <p>Gets the width and height of the movie�s bounding box, in pixels, specified as [ width height ].</p> 
      
    </member>
    <member name="M:com.aspose.pdf.MovieAnnotation.setAspect(Point)">
       
        <p>Sets the width and height of the movie�s bounding box, in pixels, specified as [ width height ].</p> 
      
      <param name="Point"/>
    </member>
    <member name="M:com.aspose.pdf.MovieAnnotation.accept(AnnotationSelector)">
       
        <p>Accepts visitor object to process the annotation.</p> @param visitor Visitor object.
      
      <param name="AnnotationSelector"/>
    </member>
    <member name="M:com.aspose.pdf.MovieAnnotation.#ctor(Page,Rectangle,String)">
       
        <p>Creates new Sound annotation on the specified page.</p> @param page The document's page where annotation should be created. @param rect The annotation rectangle, defining the location of the annotation on the page. @param movieFile A movie file to be played when the annotation is activated.
      
      <param name="Page"/>
      <param name="Rectangle"/>
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.NamedAction">
       
        <p>Represents named actions that PDF viewer applications are expected to support.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.NamedAction.getName">
       
        <p>Gets the action to be performed.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.NamedAction.setName(String)">
       
        <p>Sets the action to be performed.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.NamedAction.#ctor(int)">
       
        <p>Constructor.</p> @param action
      
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.NamedDestination">
       
        <p>Instead of being defined directly with the explicit syntax, a destination may be referred to indirectly by means of a name object or a byte string.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.NamedDestination.getName"/>
    <member name="M:com.aspose.pdf.NamedDestination.toString">
       
        <p>Converts destination to string value.</p> @return String value.
      
    </member>
    <member name="T:com.aspose.pdf.NewParagraphPlacementInfo">
      This class represents a placement info for new paragraph.
    </member>
    <member name="M:com.aspose.pdf.NewParagraphPlacementInfo.getStartNewPage">
      Gets a is this paragraph will start new page
    </member>
    <member name="M:com.aspose.pdf.NewParagraphPlacementInfo.setStartNewPage(boolean)">
      Sets a is this paragraph will start new page
      <param name="boolean"/>
    </member>
    <member name="T:com.aspose.pdf.NumberFormatInfoInternal"/>
    <member name="T:com.aspose.pdf.NumberingStyle">
      Enumeration of supported page numbering style for PageLabel class.
    </member>
    <member name="F:com.aspose.pdf.NumberingStyle.NumeralsArabic">
      Arabic decimal numbers.
    </member>
    <member name="F:com.aspose.pdf.NumberingStyle.NumeralsRomanUppercase">
      Uppercase roman numbers (I, II, III...).
    </member>
    <member name="F:com.aspose.pdf.NumberingStyle.NumeralsRomanLowercase">
      Lowercase roman numbers (i, ii, iii...).
    </member>
    <member name="F:com.aspose.pdf.NumberingStyle.LettersUppercase">
      Uppercase latin letters (A, B, C...).
    </member>
    <member name="F:com.aspose.pdf.NumberingStyle.LettersLowercase">
      Lowercase latin letters (a, b, c...).
    </member>
    <member name="F:com.aspose.pdf.NumberingStyle.None">
      No numbering.
    </member>
    <member name="T:com.aspose.pdf.NumberTree">
      Class represeting Number tree structure of PDF file. 7.9.7Number Trees
    </member>
    <member name="M:com.aspose.pdf.NumberTree.update(int,IPdfDictionary)">
      <param name="int"/>
      <param name="IPdfDictionary"/>
    </member>
    <member name="M:com.aspose.pdf.NumberTree.remove(int)">
      Remove key from number tree. @param key @return
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.NumberTree.get(int)">
      Gets item by key. @param key @return
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.NumberTree.getKeys">
      Gets all keys in the tree. @return
    </member>
    <member name="M:com.aspose.pdf.NumberTree.#ctor(IPdfDictionary)">
      <param name="IPdfDictionary"/>
    </member>
    <member name="T:com.aspose.pdf.Operator">
       
        <p>Abstract class representing operator.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.getCommandName">
       
        <p>Gets operator name.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.getParameters">
       
        <p>Gets array of operator parameters.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.getCommand"/>
    <member name="M:com.aspose.pdf.Operator.getIndex">
       
        <p>Get Operator index in page operators list.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.setIndex(int)">
       
        <p>Set Operator index in page operators list.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.reset"/>
    <member name="M:com.aspose.pdf.Operator.create(ICommand)">
       
        <p>Creates operator from Pdf.Kit.Engine.ICommand instance.</p> @return Created operator @param index Index of operator in operators list @param command Pdf.Kit.Engine.ICommand instance representing this operator
      
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.create(int,ICommand)">
       
        <p>Creates operator from Pdf.Kit.Engine.ICommand instance.</p> @return Created operator @param index Index of operator in operators list @param command Pdf.Kit.Engine.ICommand instance representing this operator
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.accept(IOperatorSelector)">
       
        <p>Accepts visitor IOperatorSelector which provides operators processing.</p> @param visitor Visitor object
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.toString">
       
        <p>Translates command and parameters into string representation.</p> @return Operator text
      
    </member>
    <member name="M:com.aspose.pdf.Operator.isTextShowOperator(Operator)">
       
        <p>Determines if the operator is operator which responsible for text output (Tj, TJ, etc)</p> @return True if this is text output operator @param op Operator object
      
      <param name="Operator"/>
    </member>
    <member name="T:com.aspose.pdf.Operator.ClosePathFillStroke">
       
        <p>Class representing b operator (close, fill and stroke path with nonzer winding rule).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.ClosePathFillStroke.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.ClosePathFillStroke.toString">
       
        <p>Returns string representation of operator.</p> @return String representation
      
    </member>
    <member name="M:com.aspose.pdf.Operator.ClosePathFillStroke.getCommandName"/>
    <member name="M:com.aspose.pdf.Operator.ClosePathFillStroke.#ctor">
       
        <p>Initializes operator.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.Operator.FillStroke">
       
        <p>Class representing B operator (fill and stroke path using nonzero winding rule)</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.FillStroke.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.FillStroke.toString">
       
        <p>Returns text representation of operator.</p> @return Text representation of operator.
      
    </member>
    <member name="M:com.aspose.pdf.Operator.FillStroke.getCommandName"/>
    <member name="M:com.aspose.pdf.Operator.FillStroke.#ctor">
       
        <p>Initializes operator.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.Operator.ClosePathEOFillStroke">
       
        <p>Class representing b* operator (close, fill and stroke path using even-odd rule).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.ClosePathEOFillStroke.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.ClosePathEOFillStroke.toString">
       
        <p>Returns text representation of operator.</p> @return Text representation of operator.
      
    </member>
    <member name="M:com.aspose.pdf.Operator.ClosePathEOFillStroke.getCommandName"/>
    <member name="M:com.aspose.pdf.Operator.ClosePathEOFillStroke.#ctor">
       
        <p>Initializes operator.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.Operator.EOFillStroke">
       
        <p>Class representing B* operator (fill and stroke path usign even-odd rule).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.EOFillStroke.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="T:com.aspose.pdf.Operator.BDC">
       
        <p>class representing BDC operator (Begin marked-content sequence)</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.BDC.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.BDC.getTag">
      Gets marked content tag @return
    </member>
    <member name="M:com.aspose.pdf.Operator.BDC.setTag(String)">
      Sets marked content tag @param value
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.BDC.getPropertiesDictionary"/>
    <member name="M:com.aspose.pdf.Operator.BDC.setPropertiesDictionary(IPdfDictionary)">
      <param name="IPdfDictionary"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.BDC.getPropertiesName"/>
    <member name="M:com.aspose.pdf.Operator.BDC.setPropertiesName(IPdfName)">
      <param name="IPdfName"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.BDC.toString"/>
    <member name="M:com.aspose.pdf.Operator.BDC.toCommand"/>
    <member name="M:com.aspose.pdf.Operator.BDC.fromCommand(ICommand)">
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.BDC.#ctor(String)">
      Initializes operator. @param tag
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.BDC.#ctor(int,ICommand)">
       
        <p>Constructor for operator class. Initializes operator.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.BDC.#ctor(String,IPdfDictionary)">
      <param name="String"/>
      <param name="IPdfDictionary"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.BDC.#ctor(String,IPdfName)">
      <param name="String"/>
      <param name="IPdfName"/>
    </member>
    <member name="T:com.aspose.pdf.Operator.BI">
       
        <p>Class representing BI operator (Begin inline image obect).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.BI.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.BI.#ctor">
       
        <p>Initializes operator.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.Operator.BMC">
       
        <p>Class representing BMC operator (Begin marked-content sequence).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.BMC.getTag">
       
        <p>Gets marked content tag</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.BMC.setTag(String)">
       
        <p>Sets marked content tag</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.BMC.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.BMC.toString">
       
        <p>Returns text representation of operator.</p> @return Text representation of operator.
      
    </member>
    <member name="M:com.aspose.pdf.Operator.BMC.#ctor(String)">
       
        <p>Constructor for writing program.</p> 
      
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.Operator.TextOperator">
       
        <p>Abstract base class for text-related operators (TJ, Tj, Tm, BT, ET, etc).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.TextOperator.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.TextOperator.#ctor">
       
        <p>Constructor for new operator.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.TextOperator.#ctor(TextProperties)">
       
        <p>Text operator which accepts text properties.</p> @param textProperties Text properties.
      
      <param name="TextProperties"/>
    </member>
    <member name="T:com.aspose.pdf.Operator.BlockTextOperator">
       
        <p>Abstract base class for text block operators i.e. Begin and End text operators (BT/ET)</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.BlockTextOperator.#ctor">
       
        <p>Constructor for new operator.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.BlockTextOperator.#ctor(TextProperties)">
       
        <p>Constructor for BlockTextOperator which accepts TextProperties.</p> @param textProperties
      
      <param name="TextProperties"/>
    </member>
    <member name="T:com.aspose.pdf.Operator.TextShowOperator">
       
        <p>Abvstract base class for all operators which used to out text (Tj, TJ, etc).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.TextShowOperator.getText">
       
        <p>Gets text which operator out on the page.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.TextShowOperator.setText(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.TextShowOperator.#ctor">
       
        <p>Constructor for new TextShowOperator.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.TextShowOperator.#ctor(TextProperties)">
       
        <p>Constructor for TextShowOperator which allows to pass TextProperties.</p> @param textProperties
      
      <param name="TextProperties"/>
    </member>
    <member name="T:com.aspose.pdf.Operator.TextStateOperator">
       
        <p>Abstract base class for operators which changes current text state (Tc, Tf, TL, etc).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.TextStateOperator.#ctor">
       
        <p>Constructor for new TextStateOperator.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.TextStateOperator.#ctor(TextProperties)">
       
        <p>Constructor for TextStateoperator which allows to pass TextProperties.</p> @param textProperties
      
      <param name="TextProperties"/>
    </member>
    <member name="T:com.aspose.pdf.Operator.TextPlaceOperator">
       
        <p>Abstract base class for operators which changes text position (Tm, Td, etc).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.TextPlaceOperator.#ctor">
       
        <p>Constructor for new TextPlaceOperator.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.TextPlaceOperator.#ctor(TextProperties)">
       
        <p>Constructor for TextPlaceOperator which accepts TextProperties.</p> @param textProperties
      
      <param name="TextProperties"/>
    </member>
    <member name="T:com.aspose.pdf.Operator.BT">
       
        <p>Class representing BT operator (Begin of text block).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.BT.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.BT.toString">
       
        <p>Produces text code of operator.</p> @return Text representation of operator.
      
    </member>
    <member name="M:com.aspose.pdf.Operator.BT.#ctor">
       
        <p>Constructor for writing program.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.Operator.BX">
       
        <p>Class representing BX operator (begin compatibility section).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.BX.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.BX.toString">
       
        <p>Returns text representation of operator.</p> @return Text representation of operator.
      
    </member>
    <member name="M:com.aspose.pdf.Operator.BX.getCommandName"/>
    <member name="M:com.aspose.pdf.Operator.BX.#ctor">
       
        <p>Initializes operator.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.Operator.CurveTo">
       
        <p>Class representing c operator (append curve to path).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.CurveTo.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.CurveTo.toString">
       
        <p>Returns text representation of operator.</p> @return Text representation of operator.
      
    </member>
    <member name="M:com.aspose.pdf.Operator.CurveTo.#ctor(double,double,double,double,double,double)">
       
        <p>Initizlizes curve operator.</p> @param x1 Abscissa of first point. @param y1 Ordinate of first point. @param x2 Abscissa of second point. @param y2 Ordinate of second point. @param x3 Abscissa of third point. @param y3 Ordinate of third point.
      
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.Operator.ConcatenateMatrix">
       
        <p>Class representing cm operator (concatenate matrix to current transformation matrix).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.ConcatenateMatrix.getMatrix">
       
        <p>Matrix argument of the operator.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.ConcatenateMatrix.setMatrix(Matrix)">
      <param name="Matrix"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.ConcatenateMatrix.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.ConcatenateMatrix.toString">
       
        <p>Returns text representation of operator.</p> @return Text representation of representation
      
    </member>
    <member name="M:com.aspose.pdf.Operator.ConcatenateMatrix.#ctor(double,double,double,double,double,double)">
       
        <p>Constructor for operator class.</p> @param a A coefficient @param b B coefficient @param c C coefficient @param d D coefficient @param e E coefficient @param f F coefficient
      
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.ConcatenateMatrix.#ctor(Matrix)">
       
        <p>Initializes operator by matrix.</p> @param m
      
      <param name="Matrix"/>
    </member>
    <member name="T:com.aspose.pdf.Operator.SetColorSpaceStroke">
       
        <p>Class representing CS operator (set color for stroking operations).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SetColorSpaceStroke.getName">
       
        <p>Gets color space name.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SetColorSpaceStroke.setName(String)">
       
        <p>Sets color space name.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.SetColorSpaceStroke.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="T:com.aspose.pdf.Operator.SetColorSpace">
       
        <p>Class representing cs operator (set colorspace for non-stroking operations)</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SetColorSpace.getName">
       
        <p>Gets color space name.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SetColorSpace.setName(String)">
       
        <p>Sets color space name.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.SetColorSpace.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.SetColorSpace.getCommandName"/>
    <member name="T:com.aspose.pdf.Operator.SetDash">
       
        <p>Class representing d operator (set line dash pattern).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SetDash.getPattern">
       
        <p>Dash pattern. Array�s elements shall be numbers that specify the lengths of alternating dashes and gaps. In case of one element array dash and gap lengths are equal.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SetDash.setPattern(int[])">
      <param name="int[]"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.SetDash.getPhase">
       
        <p>Dash phase. Before beginning to stroke a path, the dash array shall be cycled through, adding up the lengths of dashes and gaps. When the accumulated length equals the value specified by the dash phase, stroking of the path shall begin, and the dash array shall be used cyclically from that point onward.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SetDash.setPhase(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.SetDash.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.SetDash.toString">
       
        <p>Gets operator string representation.</p> @return [x1 x2] y d, where x1 - dash length, x2 - gap length, y - phase.
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SetDash.#ctor(int[],int)">
       
        <p>Creates set dash pattern operator.</p> @param pattern Array which defines dash pattern. @param phase
      
      <param name="int[]"/>
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.Operator.SetCharWidth">
       
        <p>Class representing d0 operator (set glyph width).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SetCharWidth.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="T:com.aspose.pdf.Operator.SetCharWidthBoundingBox">
       
        <p>Class representing d1 operator (set glyph and bounding box).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SetCharWidthBoundingBox.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="T:com.aspose.pdf.Operator.Do">
       
        <p>Class representing Do operator (Invoke XObject).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.Do.getName">
       
        <p>Name of XObject argument of the operator.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.Do.setName(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.Do.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.Do.toString">
       
        <p>Returns text representation of operator.</p> @return Text representation of operator.
      
    </member>
    <member name="M:com.aspose.pdf.Operator.Do.getCommandName"/>
    <member name="M:com.aspose.pdf.Operator.Do.#ctor(String)">
       
        <p>Constructs new Do operator.</p> @param name Name of invoked XObject.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.Do.#ctor">
       
        <p>Constructs new Do operator. Used for retrieving all Do operators, i.e. without checking their argument names.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.Operator.DP">
       
        <p>Class represeting DP operator (designamte marked content point).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.DP.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.DP.getTag">
      Gets marked content tag @return
    </member>
    <member name="M:com.aspose.pdf.Operator.DP.setTag(String)">
      Sets marked content tag @param value
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.DP.getPropertiesDictionary"/>
    <member name="M:com.aspose.pdf.Operator.DP.setPropertiesDictionary(IPdfDictionary)">
      <param name="IPdfDictionary"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.DP.getPropertiesName"/>
    <member name="M:com.aspose.pdf.Operator.DP.setPropertiesName(IPdfName)">
      <param name="IPdfName"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.DP.toString"/>
    <member name="M:com.aspose.pdf.Operator.DP.toCommand"/>
    <member name="M:com.aspose.pdf.Operator.DP.fromCommand(ICommand)">
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.DP.#ctor(String)">
      Initializes operator. @param tag
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.DP.#ctor(int,ICommand)">
       
        <p>Constructor for operator class. Initializes operator.</p> @param index Index of operator. @param command Operator command.
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.DP.#ctor(String,IPdfDictionary)">
      <param name="String"/>
      <param name="IPdfDictionary"/>
    </member>
    <member name="T:com.aspose.pdf.Operator.EI">
       
        <p>Class representing EI operator (End inline image object).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.EI.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="T:com.aspose.pdf.Operator.EMC">
       
        <p>Clsss representing EMC oeprator (End of marked-content sequence).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.EMC.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.EMC.toString">
       
        <p>Returns text representation of operator.</p> @return Text representation of the operator.
      
    </member>
    <member name="M:com.aspose.pdf.Operator.EMC.#ctor">
       
        <p>Constructor for writing program.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.Operator.ET">
       
        <p>Class representing operator ET (End of text block).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.ET.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.ET.toString">
       
        <p>Produces text code of operator.</p> @return Text representation of operator.
      
    </member>
    <member name="M:com.aspose.pdf.Operator.ET.#ctor">
       
        <p>Constructor for writing program.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.Operator.EX">
       
        <p>Class representing EX operator (End of compatibility section).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.EX.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.EX.#ctor">
       
        <p>Initializes operator.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.Operator.Fill">
       
        <p>Class representing f operator (fill path with nonzero winding number rule).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.Fill.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.Fill.toString">
       
        <p>Returns text representation of operator.</p> @return Text representation of operator.
      
    </member>
    <member name="M:com.aspose.pdf.Operator.Fill.#ctor">
       
        <p>Initilizes new f operator.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.Operator.ObsoleteFill">
       
        <p>Class representing F oeprator (fill path using nonzero winding rule).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.ObsoleteFill.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="T:com.aspose.pdf.Operator.EOFill">
       
        <p>Class representing f* operator (fill path using even-odd rule).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.EOFill.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.EOFill.#ctor">
       
        <p>Initializes operator.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.Operator.SetGrayStroke">
       
        <p>Class representing gray level for stroking operations.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SetGrayStroke.getColor">
       
        <p>Returns color specified by operator.</p> @return Color specified by operator.
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SetGrayStroke.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.SetGrayStroke.toString">
       
        <p>Returns text representation of operator.</p> @return Text representation of operator.
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SetGrayStroke.#ctor(double)">
       
        <p>Initializes operator with the specified color.</p> @param gray
      
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.Operator.SetGray">
       
        <p>Set gray level for non-stroking operations.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SetGray.getColor">
       
        <p>Returns color specified by operator.</p> @return Color specified by operator.
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SetGray.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.SetGray.toString">
       
        <p>Returns string represnetation of operator.</p> @return String representation of operator.
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SetGray.#ctor(double)">
       
        <p>Constructor for writing program.</p> @param gray The level of gray value.
      
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.Operator.GS">
       
        <p>Class representing gs operator (set parameters from graphic state parameter dictionary).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.GS.getName">
       
        <p>Gets or sets name of graphic state resource.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.GS.setName(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.GS.toString">
       
        <p>Returns string represnetation of operator.</p> @return String representation of operator.
      
    </member>
    <member name="M:com.aspose.pdf.Operator.GS.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.GS.#ctor(String)">
       
        <p>Initializes gs operator.</p> @param name Name of graphic state.
      
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.Operator.ClosePath">
       
        <p>Class representing h operator (close path).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.ClosePath.getCommandName"/>
    <member name="M:com.aspose.pdf.Operator.ClosePath.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.ClosePath.#ctor">
       
        <p>Initializes operator.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.Operator.SetFlat">
       
        <p>Class representing i operator (set flatness toleracne).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SetFlat.getFlatness">
       
        <p>Gets the flatness.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SetFlat.setFlatness(double)">
       
        <p>Sets the flatness.</p> 
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.SetFlat.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.SetFlat.#ctor(double)">
       
        <p>Initializes operator.</p> 
      
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.Operator.ID">
       
        <p>Class representing ID operator (Begin inline image data).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.ID.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.ID.getCommandName"/>
    <member name="T:com.aspose.pdf.Operator.SetLineJoin">
       
        <p>Class representing j operator (set line join style).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SetLineJoin.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="T:com.aspose.pdf.Operator.SetLineCap">
       
        <p>Class representing J operator (set line cap style).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SetLineCap.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="T:com.aspose.pdf.Operator.SetCMYKColorStroke">
       
        <p>Class representing K operator (set CMYK color for stroking operations).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SetCMYKColorStroke.getColor">
       
        <p>Returns color</p> @return
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SetCMYKColorStroke.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.SetCMYKColorStroke.#ctor(double,double,double,double)">
       
        <p>Initializes operator.</p> 
      
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.Operator.SetCMYKColor">
       
        <p>Class representing k operator (set CMYK color for non-stroknig operations).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SetCMYKColor.getColor">
       
        <p>Returns color.</p> @return Color.
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SetCMYKColor.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.SetCMYKColor.#ctor(double,double,double,double)">
       
        <p>Initializes operator.</p> 
      
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.Operator.LineTo">
       
        <p>Class representing l operator (add line to the path).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.LineTo.getX">
       
        <p>X coordinate of line point.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.LineTo.setX(double)">
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.LineTo.getY">
       
        <p>Y coordinate of line point.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.LineTo.setY(double)">
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.LineTo.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.LineTo.toString">
       
        <p>Returns text representation of the operator.</p> @return
      
    </member>
    <member name="M:com.aspose.pdf.Operator.LineTo.#ctor(double,double)">
       
        <p>Initializes line operator.</p> @param x X coordinate. @param y Y coordinate.
      
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.Operator.MoveTo">
       
        <p>Class representing m operator (move to and begin new subpath).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.MoveTo.getX">
       
        <p>X coordinate</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.MoveTo.setX(double)">
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.MoveTo.getY">
       
        <p>Y coordinate</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.MoveTo.setY(double)">
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.MoveTo.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.MoveTo.toString">
       
        <p>Returns text representation of the operator.</p> @return Text representation of the operator.
      
    </member>
    <member name="M:com.aspose.pdf.Operator.MoveTo.#ctor(double,double)">
       
        <p>Inintalizes new {@code Operator.m} (move to) operator.</p> @param x x value. @param y y value.
      
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.Operator.SetMiterLimit">
       
        <p>Class representing M operator (set miter limit).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SetMiterLimit.getMiterLimit">
       
        <p>Gets or sets the miter limit.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SetMiterLimit.setMiterLimit(double)">
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.SetMiterLimit.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.SetMiterLimit.#ctor(double)">
       
        <p>Initializes operator.</p> @param miterLimit Mitel limit.
      
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.Operator.MP">
       
        <p>Class representing MP operator (define marked-content point).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.MP.getTag">
       
        <p>Gets marked content tag</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.MP.setTag(String)">
       
        <p>Sets marked content tag</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.MP.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.MP.#ctor(String)">
       
        <p>Initializes operator.</p> 
      
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.Operator.EndPath">
       
        <p>Class representing n operator (end path without filling or stroking).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.EndPath.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.EndPath.toString">
       
        <p>Text representation of operator.</p> @return Text representation of operator.
      
    </member>
    <member name="M:com.aspose.pdf.Operator.EndPath.#ctor">
       
        <p>Constructor for writing program.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.Operator.GSave">
       
        <p>Class representing q operator (save graphics state).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.GSave.toString">
       
        <p>Returns text of the operator.</p> @return
      
    </member>
    <member name="M:com.aspose.pdf.Operator.GSave.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.GSave.#ctor">
       
        <p>Constructor for q operator.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.Operator.GRestore">
       
        <p>Class representing Q operator (restore graphics state).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.GRestore.toString">
       
        <p>Returns text of the operator.</p> @return
      
    </member>
    <member name="M:com.aspose.pdf.Operator.GRestore.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.GRestore.#ctor">
       
        <p>Constructor for Q operator.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.Operator.Re">
       
        <p>Class representing re operator (add rectangle to the path).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.Re.getX">
       
        <p>X coordinate of most left side of rectangle.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.Re.setX(double)">
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.Re.getY">
       
        <p>Y corrdinate of bottom side of rectangle.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.Re.setY(double)">
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.Re.getWidth">
       
        <p>Width of the rectangle.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.Re.setWidth(double)">
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.Re.getHeight">
       
        <p>Height of the rectangle.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.Re.setHeight(double)">
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.Re.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.Re.toString">
       
        <p>Returns text representation of the operator.</p> @return Text representation of the operator.
      
    </member>
    <member name="M:com.aspose.pdf.Operator.Re.#ctor">
       
        <p>Constructor for extracting goals.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.Re.#ctor(double,double,double,double)">
       
        <p>Constructor for writing program.</p> 
      
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.Operator.SetColorOperator">
       
        <p>Class representing set color operation.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SetColorOperator.getColor">
       
        <p>Retirns color specified by the operator.</p> @return
      
    </member>
    <member name="T:com.aspose.pdf.Operator.SetRGBColorStroke">
       
        <p>Class representing RG operator (set RGB color for stroking operators).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SetRGBColorStroke.getColor">
       
        <p>Returns color specified by operator.</p> @return Operator color.
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SetRGBColorStroke.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.SetRGBColorStroke.toString">
       
        <p>Returns text representation of operator.</p> @return Text representation of operator.
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SetRGBColorStroke.#ctor(double,double,double)">
       
        <p>Constructor for writing program.</p> 
      
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.SetRGBColorStroke.#ctor(java.awt.Color)">
       
        <p>Initializes operator with color.</p> @param color Operator color.
      
      <param name="java.awt.Color"/>
    </member>
    <member name="T:com.aspose.pdf.Operator.SetRGBColor">
       
        <p>Class representing rg operator (set RGB color for non-stroknig operators).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SetRGBColor.getColor">
       
        <p>Returns color specified by operator.</p> @return Operator color.
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SetRGBColor.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.SetRGBColor.toString">
       
        <p>Returns text representation of the operator.</p> @return
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SetRGBColor.#ctor(double,double,double)">
       
        <p>Constructor for writing program.</p> 
      
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.SetRGBColor.#ctor(java.awt.Color)">
       
        <p>Initializes operator with color.</p> @param color Specfied color.
      
      <param name="java.awt.Color"/>
    </member>
    <member name="T:com.aspose.pdf.Operator.SetColorRenderingIntent">
       
        <p>Class representing ri operator (set color rendering intent).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SetColorRenderingIntent.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="T:com.aspose.pdf.Operator.ClosePathStroke">
       
        <p>Class representing s operator (Close and stroke path).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.ClosePathStroke.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.ClosePathStroke.toString">
       
        <p>Returns text representation of the operator.</p> @return Text representation of the operator.
      
    </member>
    <member name="M:com.aspose.pdf.Operator.ClosePathStroke.#ctor">
       
        <p>Initializes operator.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.Operator.Stroke">
       
        <p>Class representing S operator (stroke path).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.Stroke.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.Stroke.toString">
       
        <p>Returns text representation of the operator.</p> @return Text representation of the operator.
      
    </member>
    <member name="M:com.aspose.pdf.Operator.Stroke.#ctor">
       
        <p>Initializes operator.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.Operator.SetColorStroke">
       
        <p>Class representing SC operator set color for stroking color operators.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SetColorStroke.getColor">
       
        <p>Returns color specified by operator.</p> @return Color specified by operator.
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SetColorStroke.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.SetColorStroke.#ctor">
       
        <p>Initializes operator.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.Operator.SetColor">
       
        <p>Represents class for sc operator (set color for non-stroknig operations).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SetColor.getColor">
       
        <p>Returns color specified by the operator.</p> @return Operator color.
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SetColor.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.SetColor.#ctor">
       
        <p>Initializes operator.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.Operator.SetAdvancedColorStroke">
       
        <p>Class representing SCN operator (set color for stroking operations).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SetAdvancedColorStroke.getColor">
       
        <p>Returns color specified by operator.</p> @return Color specifid by operator.
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SetAdvancedColorStroke.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.SetAdvancedColorStroke.#ctor">
       
        <p>Initializes operator.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.Operator.SetAdvancedColor">
       
        <p>Class representing scn operator (set color for non-stroking operations).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SetAdvancedColor.getColor">
       
        <p>Retuns color specified by operator.</p> @return Color set by operator.
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SetAdvancedColor.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.SetAdvancedColor.#ctor">
       
        <p>Initializes operator.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.Operator.ShFill">
       
        <p>Class representing sh operator (paint area with shadeing pattern).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.ShFill.getName">
       
        <p>Gets or sets the shading name.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.ShFill.setName(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.ShFill.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="T:com.aspose.pdf.Operator.MoveToNextLine">
       
        <p>Class representing T* operator (Move to start of the next line).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.MoveToNextLine.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.MoveToNextLine.toString">
       
        <p>Returns text of the operator.</p> @return
      
    </member>
    <member name="M:com.aspose.pdf.Operator.MoveToNextLine.#ctor">
       
        <p>Constructor for writing program.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.Operator.SetCharacterSpacing">
       
        <p>Class representing Tc operator (set character spacing).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SetCharacterSpacing.getCharSpacing">
       
        <p>Gets or sets the character spacing.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SetCharacterSpacing.setCharSpacing(double)">
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.SetCharacterSpacing.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.SetCharacterSpacing.#ctor(double)">
       
        <p>Initializes operator.</p> @param charSpacing Character spacing.
      
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.Operator.MoveTextPosition">
       
        <p>Class representing Td operator (move text position).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.MoveTextPosition.getX">
       
        <p>X coordinate of text position.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.MoveTextPosition.setX(double)">
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.MoveTextPosition.getY">
       
        <p>Y coordinate of text position.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.MoveTextPosition.setY(double)">
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.MoveTextPosition.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.MoveTextPosition.toString">
       
        <p>Returns text representation of operator.</p> @return Text representation of operator.
      
    </member>
    <member name="M:com.aspose.pdf.Operator.MoveTextPosition.#ctor(double,double)">
       
        <p>Constructor for writing program.</p> 
      
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.Operator.MoveTextPositionSetLeading">
       
        <p>Class representing TD operator (move position and set leading).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.MoveTextPositionSetLeading.getX">
       
        <p>X coordinate of text position.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.MoveTextPositionSetLeading.setX(double)">
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.MoveTextPositionSetLeading.getY">
       
        <p>Y coordinate of text position.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.MoveTextPositionSetLeading.setY(double)">
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.MoveTextPositionSetLeading.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.MoveTextPositionSetLeading.#ctor(double,double)">
       
        <p>Initializes operator.</p> 
      
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.Operator.SelectFont">
       
        <p>Class representing Tf operator (set text font and size).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SelectFont.getName">
       
        <p>Name of font.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SelectFont.getSize">
       
        <p>Size of text.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SelectFont.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.SelectFont.toString">
       
        <p>Returns text representation of operator.</p> @return Text representation of operator.
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SelectFont.#ctor(String,double)">
       
        <p>Constructor for writin program.</p> @param resName The name of font resource, e.g. F1, F2 etc. @param size Size of the font.
      
      <param name="String"/>
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.Operator.ShowText">
       
        <p>Class representing Tj operator (show text).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.ShowText.getText">
       
        <p>Text of operator.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.ShowText.setText(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.ShowText.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.ShowText.toString">
       
        <p>Produces text code of operator.</p> @return Text representation of operator.
      
    </member>
    <member name="M:com.aspose.pdf.Operator.ShowText.#ctor(int,ICommand)">
      / * 
        <p>/ * Text of operator. / *</p> /
      
      <param name="int"/>
      <param name="ICommand"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.ShowText.#ctor(int,String)">
       
        <p>Constructor of Tj opearor.</p> @param index Index of operator in operators list. @param text argument of the operator.
      
      <param name="int"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.ShowText.#ctor(String)">
       
        <p>Constructor for writing program.</p> @param text argument of the operator.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.ShowText.#ctor(String,com.aspose.pdf.Font)">
      <param name="String"/>
      <param name="com.aspose.pdf.Font"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.ShowText.#ctor">
       
        <p>Constructor of Tj operator.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.Operator.SetGlyphsPositionShowText">
       
        <p>Class representing TJ operator (show text with glyph positioning).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SetGlyphsPositionShowText.getText">
       
        <p>Gets text from operator argument (glyph positioning is ignored).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SetGlyphsPositionShowText.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.SetGlyphsPositionShowText.toString">
       
        <p>Returns text representation of operator.</p> @return Text representation of operator.
      
    </member>
    <member name="T:com.aspose.pdf.Operator.SetTextLeading">
       
        <p>Class represenging TL operator (set text leading).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SetTextLeading.getLeading">
       
        <p>Gets the text leading.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SetTextLeading.setLeading(double)">
       
        <p>Sets the text leading.</p> 
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.SetTextLeading.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.SetTextLeading.toString">
       
        <p>Produces text code of operator.</p> @return Text representation of operator.
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SetTextLeading.#ctor(double)">
       
        <p>Constructor for text leadign operator.</p> @param leading Text leading.
      
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.Operator.SetTextMatrix">
       
        <p>Class representig Tm operator (set text matrix).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SetTextMatrix.getMatrix">
       
        <p>Matrix argument of the operator.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SetTextMatrix.setMatrix(Matrix)">
      <param name="Matrix"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.SetTextMatrix.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.SetTextMatrix.toString">
       
        <p>Returns text representation of operator.</p> @return Text representation of operator.
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SetTextMatrix.#ctor(double,double,double,double,double,double)">
       
        <p>Constructor for writing program.</p> 
      
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.SetTextMatrix.#ctor(Matrix)">
       
        <p>Initializes operator by matrix.</p> @param m
      
      <param name="Matrix"/>
    </member>
    <member name="T:com.aspose.pdf.Operator.SetTextRenderingMode">
       
        <p>Class representing Tr operator (set text rendering mode).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SetTextRenderingMode.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="T:com.aspose.pdf.Operator.SetTextRise">
       
        <p>Class representing Ts operator (set text rise).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SetTextRise.getTextRise">
       
        <p>Gets or sets the text rise.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SetTextRise.setTextRise(double)">
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.SetTextRise.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.SetTextRise.#ctor(double)">
       
        <p>Initializes operator.</p> @param textRise Text rise.
      
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.Operator.SetWordSpacing">
       
        <p>Class representing Tw operator (set word spacing).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SetWordSpacing.getWordSpacing">
       
        <p>Gets or sets the word spacing.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SetWordSpacing.setWordSpacing(double)">
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.SetWordSpacing.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.SetWordSpacing.#ctor(double)">
       
        <p>Initializes operator.</p> @param wordSpacing Word spacing.
      
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.Operator.SetHorizontalTextScaling">
       
        <p>Class representing Tz operator (set horizontal text scaling).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SetHorizontalTextScaling.getHorizontalScaling">
       
        <p>Gets or sets the horizontal scaling.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SetHorizontalTextScaling.setHorizontalScaling(double)">
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.SetHorizontalTextScaling.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.SetHorizontalTextScaling.#ctor(double)">
       
        <p>Initializes operator.</p> @param horizintalScaling Horizontal scaling.
      
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.Operator.CurveTo1">
       
        <p>Class representing v operator (append curve to path, initial point replicated).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.CurveTo1.accept(IOperatorSelector)">
       
        <p>Accepts operator selector.</p> @param visitor
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.CurveTo1.#ctor(double,double,double,double)">
       
        <p>Initializes curve operator.</p> @param x2 Abscissa of second point. @param y2 Ordinate of second point. @param x3 Abscissa of third point. @param y3 Ordinate of third point.
      
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.Operator.SetLineWidth">
       
        <p>Class representing w operator (set line width).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SetLineWidth.getWidth">
       
        <p>Gets or sets width of the line.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SetLineWidth.setWidth(double)">
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.SetLineWidth.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.SetLineWidth.toString">
       
        <p>Returns text representation of operator.</p> @return Text representation.
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SetLineWidth.#ctor(double)">
       
        <p>Initializes operator with width value.</p> @param width Value of width.
      
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.Operator.Clip">
       
        <p>Class representing W operator (set clipping path using non-zero winding rule).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.Clip.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.Clip.toString">
       
        <p>Returns text representation of operators.</p> @return
      
    </member>
    <member name="M:com.aspose.pdf.Operator.Clip.#ctor">
       
        <p>Constructor for writing program.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.Operator.EOClip">
       
        <p>Class representing W* operator (set clipping path using even-odd rule).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.EOClip.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="T:com.aspose.pdf.Operator.CurveTo2">
       
        <p>Class representing y operator (append curve to path, final point replicated).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.CurveTo2.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.CurveTo2.#ctor(double,double,double,double)">
       
        <p>Initializes curve operator.</p> @param x1 Abscissa of second point. @param y1 Ordinate of second point. @param x3 Abscissa of third point. @param y3 Ordinate of third point.
      
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.Operator.MoveToNextLineShowText">
       
        <p>Class representing ' operator (move to next line and show text).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.MoveToNextLineShowText.getText">
       
        <p>Gets operator text.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.MoveToNextLineShowText.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.Operator.MoveToNextLineShowText.#ctor">
       
        <p>Initializesoperator.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.Operator.SetSpacingMoveToNextLineShowText">
       
        <p>Class representing " operator (set word and character spacing, move to the next line and show text).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SetSpacingMoveToNextLineShowText.getAw">
       
        <p>Gets word spacing.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SetSpacingMoveToNextLineShowText.getAc">
       
        <p>Get character spacing.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SetSpacingMoveToNextLineShowText.getText">
       
        <p>Gets text of operator.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Operator.SetSpacingMoveToNextLineShowText.accept(IOperatorSelector)">
       
        <p>Accepts visitor object to process operator.</p> @param visitor Visitor object.
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="T:com.aspose.pdf.OperatorCollection">
       
        <p>Class represents collection of operators</p> 
      
    </member>
    <member name="M:com.aspose.pdf.OperatorCollection.setData(IPdfPrimitive)">
      <param name="IPdfPrimitive"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorCollection.updateData">
       
        <p>Update object stream.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.OperatorCollection.size">
       
        <p>Gets count of operators in the collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.OperatorCollection.isSynchronized">
       
        <p>Returns true if object is synchronized.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.OperatorCollection.getSyncRoot">
       
        <p>Gets synchronization object.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.OperatorCollection.copyTo(Array,int)">
       
        <p>Copies operators into operators list.</p> @param array Array with operators which must to be copied. This array must be Object[] or Operator[]. @param index Starting index from which operators will be copied
      
      <param name="Array"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorCollection.iterator">
       
        <p>Returns enumerator for collection</p> @return Collection enumerator
      
    </member>
    <member name="M:com.aspose.pdf.OperatorCollection.accept(IOperatorSelector)">
       
        <p>Accepts IOperatorSelector visitor object to process operators.</p> @param visitor Visitor object
      
      <param name="IOperatorSelector"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorCollection.add(Operator)">
       
        <p>Adds new operator into collection.</p>
        <p>
          <hr>
            <blockquote>
              <pre>Example demonstrates how to add operators to the end of page.contents. 
                <pre lang="Java">Document doc = new Document("input.pdf"); doc.getPages().get(1).getContents().add(new Operator.q()); doc.getPages().get(1).getContents().add(new Operator.Q());</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param op Operator which must be added
      
      <param name="Operator"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorCollection.delete(int)">
       
        <p>Deletes operator from collection.</p>
        <p>
          <hr>
            <blockquote>
              <pre>Example demonstrates how to delete operator by its index. 
                <pre lang="Java">Document doc = new Document("input.pdf"); OperatorCollection oc = doc.getPages(1).getContents(); oc.delete(3);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param index Index of operator which must be deleted. Operators numbering starts from 1.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorCollection.deleteUnrestricted(int)">
      internal unrestricted version of Delete(index) @param index
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorCollection.insert(int,Operator)">
       
        <p>Inserts operator into collection.</p>
        <p>
          <hr>
            <blockquote>
              <pre>Example demonstrates how to insert operator to the page contents. 
                <pre lang="Java">Document doc = new Document("input.pdf"); OperatorCollection oc = doc.getPages(1).getContents(); oc.insert(1, new Operator.q()); oc.add(new Operator.Q());</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param index Index where new operator must be added @param op Operator which will be insterted
      
      <param name="int"/>
      <param name="Operator"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorCollection.replace(Iterable)">
       
        <p>Replace operators in collection with other operators.</p> @param operators Operators list which will replace operators currently contained in the collection. Eash operator from the list must have correct index in range [1..N] where N is count of operators in the collection
      
      <param name="Iterable"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorCollection.replace(Operator[])">
      <param name="Operator[]"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorCollection.add(Operator[])">
       
        <p>Add operators at the end of the contents operators.</p>
        <p>
          <hr>
            <blockquote>
              <pre>Example demonstrates how to add operator to the end of page contents. 
                <pre lang="Java">Document doc = new Document("input.pdf"); OperatorCollection oc = doc.getPages().get(1).getContents(); oc.add(new Operator[] { new Operator.q(), new Operator.Q() } );</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param ops Array of operators to be added. Each operator can have any index (by default -1) because they come to the end of the contents operators i.e. indices are assigned automatically.
      
      <param name="Operator[]"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorCollection.insert(int,Operator[])">
       
        <p>Insert operators at the the given position.</p>
        <p>
          <hr>
            <blockquote>
              <pre>Example demonstrates how to insert operator to the page contents. 
                <pre lang="JAva">Document doc = new Document("input.pdf"); OperatorCollection oc = doc.getPages().get(1).getContents(); oc.insert(1, new Operator[] { new Operator.q(), new Operator.Q() } );</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param at Index from which operators are being started to insert. @param ops Array of operators to be inserted. Each operator can have any index (by default -1) because their indices adjusted automatically starting from {@code at}.
      
      <param name="int"/>
      <param name="Operator[]"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorCollection.get_Item(int)">
       
        <p>Gets operator by its index.</p>
        <p>
          <hr>
            <blockquote>
              <pre>Example demonstrates how to get operator of page contents by index. 
                <pre lang="Java">Document doc = new Document("input.pdf"); OperatorCollection oc = doc.getPages().get(1).getContents(); Operator first = oc.get_Item(1);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @return Operator from requested index @param index Index of operator. Numbering is starts from 1.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorCollection.set_Item(int,Operator)">
      <param name="int"/>
      <param name="Operator"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorCollection.getUnrestricted(int)">
      Internal unrestricted version of indexer @param index @return
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorCollection.delete(Operator[])">
       
        <p>Deletes operators from collection.</p>
        <p>
          <hr>
            <blockquote>
              <pre>Example demonstrates how to remove operator from page contents. 
                <pre lang="Java">Document doc = new Document("input.pdf"); OperatorCollection oc = doc.getPages().get(1).getContents(); oc.delete(new Operator[] { oc[1] } );</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param ops Array of operators to delete
      
      <param name="Operator[]"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorCollection.delete(Iterable)">
       
        <p>Deletes operators from collection.</p>
        <p>
          <hr>
            <blockquote>
              <pre>Example demonstrates how to remove operator from page contents. 
                <pre lang="Java">Document doc = new Document("input.pdf"); OperatorCollection oc = doc.getPages().get(1).getContents(); ArrayList opList = new ArrayList(); opList.add(oc[1]); oc.delete(opList);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param list The list of operators to delete
      
      <param name="Iterable"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorCollection.insert(int,Iterable)">
       
        <p>Insert operators at the the given position.</p>
        <p>
          <hr>
            <blockquote>
              <pre>Example demonstrates how to insert operators to page contents. 
                <pre lang="Java">Document doc = new Document("input.pdf"); OperatorCollection oc = doc.getPages().get(1).getContents(); ArrayList opList = new ArrayList(); opList.add(new Operator.q()); opList.add(new Operator.Q()); oc.insert(1, opList);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param at Index from which operators are being started to insert. @param ops Array of operators to be inserted.
      
      <param name="int"/>
      <param name="Iterable"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorCollection.clear">
       
        <p>Removes all operators from list.</p>
        <p>
          <hr>
            <blockquote>
              <pre>Example demonstrates how to clear page contents. 
                <pre lang="Java">Document doc = new Document("input.pdf"); doc.getPages().get(1).clear();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.OperatorCollection.toString">
       
        <p>Returns text representation of the operator.</p> @return Text representation of operator.
      
    </member>
    <member name="M:com.aspose.pdf.OperatorCollection.add(Iterable)">
       
        <p>Adds to collection all operators from other collection.</p>
        <p>
          <hr>
            <blockquote>
              <pre>Example demonstrates how to add operator collection to the page contents. 
                <pre lang="Java">Document doc = new Document("input.pdf"); OperatorCollection oc = doc.getPages(1).getContents(); ArrayList opList = new ArrayList(); opList.add(new Operator.q()); opList.add(new Operator.Q()); oc.add(opList);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param ops collection whitch contains operators which will be added.
      
      <param name="Iterable"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorCollection.isBracketed">
       
        <p>Gets bracketed status of operator sequence i.e. is this operators are inside of q - Q blocks</p> 
      
    </member>
    <member name="M:com.aspose.pdf.OperatorCollection.suppressUpdate">
      Suppresses update contents data The contents stream is not updated until ResumeUpdate is called
    </member>
    <member name="M:com.aspose.pdf.OperatorCollection.resumeUpdate">
      Resumes document update. Updates contents stream in case there are any pending changes.
    </member>
    <member name="M:com.aspose.pdf.OperatorCollection.cancelUpdate">
      Cancels last update. This method may be called when the change should not raise contents update.
    </member>
    <member name="M:com.aspose.pdf.OperatorCollection.#ctor(IPdfPrimitive)">
       
        <p>Constructor of OperatorCollection. Constructs operators from primitive contains operators list.</p> @param contents
      
      <param name="IPdfPrimitive"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorCollection.#ctor(ITrailerable,IPdfPrimitive)">
      Constructor of OperatorCollection. Constructs operators from primitive contains operators list. @param trailerable @param contents
      <param name="ITrailerable"/>
      <param name="IPdfPrimitive"/>
    </member>
    <member name="T:com.aspose.pdf.OperatorSelector">
       
        <p>This class is used for selecting operators using Visitor template idea.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.SetLineJoin)">
       
        <p>Visit/select j operator.</p> @param j Set line join style operator.
      
      <param name="Operator.SetLineJoin"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.EX)">
       
        <p>Visit/select EX operator.</p> @param EX End compatibility section operator.
      
      <param name="Operator.EX"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.ET)">
       
        <p>Visit/select ET operator.</p> @param ET End text object operator.
      
      <param name="Operator.ET"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.EMC)">
       
        <p>Visit/select EMC operator.</p> @param EMC End marked-content sequence operator.
      
      <param name="Operator.EMC"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.EI)">
       
        <p>Visit/select EI operator.</p> @param EI End inline image object operator.
      
      <param name="Operator.EI"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.DP)">
       
        <p>Visit/select DP operator.</p> @param DP Define marked-content point operator (with property list).
      
      <param name="Operator.DP"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.Do)">
       
        <p>Visit/select Do operator.</p> @param Do Invoke named XObject operator.
      
      <param name="Operator.Do"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.SetCharWidthBoundingBox)">
       
        <p>Visit/select d1 operator.</p> @param d1 Set glyph width and bounding box in Type 3 font operator.
      
      <param name="Operator.SetCharWidthBoundingBox"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.SetCharWidth)">
       
        <p>Visit/select d0 operator.</p> @param d0 Set glyph width in Type 3 font operator.
      
      <param name="Operator.SetCharWidth"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.SetDash)">
       
        <p>Visit/select d operator.</p> @param d Set line dash pattern operator.
      
      <param name="Operator.SetDash"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.SetColorSpaceStroke)">
       
        <p>Visit/select CS operator.</p> @param CS Set color space operator (for stroking operations).
      
      <param name="Operator.SetColorSpaceStroke"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.SetColorSpace)">
       
        <p>Visit/select cs operator.</p> @param cs Set color space operator (for nonstroking operations).
      
      <param name="Operator.SetColorSpace"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.ConcatenateMatrix)">
       
        <p>Visit/select cm operator.</p> @param cm Concatenate matrix to current transformation matrix operator.
      
      <param name="Operator.ConcatenateMatrix"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.CurveTo)">
       
        <p>Visit/select c operator.</p> @param c Append curved segment to path operator (three control points).
      
      <param name="Operator.CurveTo"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.BX)">
       
        <p>Visit/select BX operator.</p> @param BX Begin compatibility section operator.
      
      <param name="Operator.BX"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.BT)">
       
        <p>Visit/select BT operator.</p> @param BT Begin text object operator.
      
      <param name="Operator.BT"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.BMC)">
       
        <p>Visit/select BMC operator.</p> @param BMC Begin marked-content sequence operator.
      
      <param name="Operator.BMC"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.BI)">
       
        <p>Visit/select BI operator.</p> @param BI Begin inline image object operator.
      
      <param name="Operator.BI"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.BDC)">
       
        <p>Visit/select BDC operator.</p> @param BDC Begin marked-content sequence operator (with property list).
      
      <param name="Operator.BDC"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.FillStroke)">
       
        <p>Visit/select B operator.</p> @param B Fill and stroke path operator (nonzero winding number rule).
      
      <param name="Operator.FillStroke"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.ClosePathFillStroke)">
       
        <p>Visit/select b operator.</p> @param b Close, fill, and stroke path operator (nonzero winding number rule).
      
      <param name="Operator.ClosePathFillStroke"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.EOFillStroke)">
       
        <p>Visit/select B* operator.</p> @param B_ Fill and stroke path operator (even-odd rule).
      
      <param name="Operator.EOFillStroke"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.ClosePathEOFillStroke)">
       
        <p>Visit/select b* operator.</p> @param b_ Close, fill, and stroke path operator (even-odd rule).
      
      <param name="Operator.ClosePathEOFillStroke"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.MoveToNextLineShowText)">
       
        <p>Visit/select ' operator.</p> @param _ Move to next line and show text operator.
      
      <param name="Operator.MoveToNextLineShowText"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.SetSpacingMoveToNextLineShowText)">
       
        <p>Visit/select '' operator.</p> @param __ Set word and character spacing, move to next line, and show text operator.
      
      <param name="Operator.SetSpacingMoveToNextLineShowText"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.EOFill)">
       
        <p>Visit/select operator f*.</p> @param f_ Fill path operator (even-odd rule).
      
      <param name="Operator.EOFill"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.Fill)">
       
        <p>Visit/select f operator.</p> @param f Fill path operator (nonzero winding number rule).
      
      <param name="Operator.Fill"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.ObsoleteFill)">
       
        <p>Visit/select F operator.</p> @param F Fill path operator (nonzero winding number rule).
      
      <param name="Operator.ObsoleteFill"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.SetGray)">
       
        <p>Visit/select g operator.</p> @param g Set gray level operator (for nonstroking operations).
      
      <param name="Operator.SetGray"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.SetGrayStroke)">
       
        <p>Visit/select G operator.</p> @param G Set gray level operator (for stroking operations).
      
      <param name="Operator.SetGrayStroke"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.GS)">
       
        <p>Visit/select gs operator.</p> @param gs Set graphics state operator.
      
      <param name="Operator.GS"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.ClosePath)">
       
        <p>Visit/select h operator.</p> @param h Close subpath operator.
      
      <param name="Operator.ClosePath"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.SetFlat)">
       
        <p>Visit/select i operator.</p> @param i Set flatness tolerance operator.
      
      <param name="Operator.SetFlat"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.ID)">
       
        <p>Visit/select ID operator.</p> @param ID Begin inline image data operator.
      
      <param name="Operator.ID"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.SetLineCap)">
       
        <p>Visit/select J operator.</p> @param J Set line cap style operator.
      
      <param name="Operator.SetLineCap"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.SetCMYKColor)">
       
        <p>Visit/select k operator.</p> @param k Set CMYK color operator (for nonstroking operations).
      
      <param name="Operator.SetCMYKColor"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.SetCMYKColorStroke)">
       
        <p>Visit/select K operator.</p> @param K Set CMYK color operator (for stroking operations).
      
      <param name="Operator.SetCMYKColorStroke"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.LineTo)">
       
        <p>Visit/select l operator.</p> @param l Append straight line segment to path operator.
      
      <param name="Operator.LineTo"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.MoveTo)">
       
        <p>Visit/select m operator.</p> @param m Begin new subpath operator.
      
      <param name="Operator.MoveTo"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.SetMiterLimit)">
       
        <p>Visit/select M operator.</p> @param M Set miter limit operator.
      
      <param name="Operator.SetMiterLimit"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.MP)">
       
        <p>Visit/select MP operator.</p> @param MP Define marked-content point operator.
      
      <param name="Operator.MP"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.EndPath)">
       
        <p>Visit/select n operator.</p> @param n End path operator (without filling or stroking).
      
      <param name="Operator.EndPath"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.GSave)">
       
        <p>Visit/select q operator.</p> @param q Save graphics state operator.
      
      <param name="Operator.GSave"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.GRestore)">
       
        <p>Visit/select Q operator.</p> @param Q Restore graphics state operator.
      
      <param name="Operator.GRestore"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.Re)">
       
        <p>Visit/select re operator.</p> @param re Append rectangle to path operator.
      
      <param name="Operator.Re"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.SetRGBColor)">
       
        <p>Visit/select rg operator.</p> @param rg Set RGB color operator (for nonstroking operations).
      
      <param name="Operator.SetRGBColor"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.SetRGBColorStroke)">
       
        <p>Visit/select RG operator.</p> @param RG Set RGB color operator (for stroking operations).
      
      <param name="Operator.SetRGBColorStroke"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.SetColorRenderingIntent)">
       
        <p>Visit/select ri operator.</p> @param ri Set color rendering intent operator.
      
      <param name="Operator.SetColorRenderingIntent"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.ClosePathStroke)">
       
        <p>Visit/select s operator.</p> @param s Close and stroke path operator.
      
      <param name="Operator.ClosePathStroke"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.Stroke)">
       
        <p>Visit/select S operator.</p> @param S Stroke path operator.
      
      <param name="Operator.Stroke"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.SetColor)">
       
        <p>Visit/select sc operator.</p> @param sc Set color operator (for nonstroking operations).
      
      <param name="Operator.SetColor"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.SetColorStroke)">
       
        <p>Visit/select SC operator.</p> @param SC Set color operator (for stroking operations).
      
      <param name="Operator.SetColorStroke"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.SetAdvancedColor)">
       
        <p>Visit/select scn operator.</p> @param scn Set color operator (for nonstroking operations, ICCBased and special colour spaces).
      
      <param name="Operator.SetAdvancedColor"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.SetAdvancedColorStroke)">
       
        <p>Visit/select SCN operator.</p> @param SCN Set color operator (for stroking operations, ICCBasedand special colour spaces).
      
      <param name="Operator.SetAdvancedColorStroke"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.ShFill)">
       
        <p>Visit/select sh operator.</p> @param sh Paint area defined by shading pattern operator.
      
      <param name="Operator.ShFill"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.MoveToNextLine)">
       
        <p>Visit/select T* operator.</p> @param T_ Move to start of next text line operator.
      
      <param name="Operator.MoveToNextLine"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.SetCharacterSpacing)">
       
        <p>Visit/select Tc operator.</p> @param Tc Set character spacing operator.
      
      <param name="Operator.SetCharacterSpacing"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.MoveTextPosition)">
       
        <p>Visit/select Td operator.</p> @param Td Move text position operator.
      
      <param name="Operator.MoveTextPosition"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.MoveTextPositionSetLeading)">
       
        <p>Visit/select TD operator.</p> @param TD Move text position and set leading operator.
      
      <param name="Operator.MoveTextPositionSetLeading"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.SelectFont)">
       
        <p>Visit/select Tf operator.</p> @param Tf Set text font and size operator.
      
      <param name="Operator.SelectFont"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.ShowText)">
       
        <p>Visit/select Tj operator.</p> @param Tj Show text operator.
      
      <param name="Operator.ShowText"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.SetGlyphsPositionShowText)">
       
        <p>Visit/select TJ operator.</p> @param TJ Show text operator (allowing individual glyph positioning).
      
      <param name="Operator.SetGlyphsPositionShowText"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.SetTextLeading)">
       
        <p>Visit/select TL operator.</p> @param TL Set text leading operator.
      
      <param name="Operator.SetTextLeading"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.SetTextMatrix)">
       
        <p>Visit/select Tm operator.</p> @param Tm Set text matrix and text line matrix operator.
      
      <param name="Operator.SetTextMatrix"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.SetTextRenderingMode)">
       
        <p>Visit/select Tr operator.</p> @param Tr Set text rendering mode operator.
      
      <param name="Operator.SetTextRenderingMode"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.SetTextRise)">
       
        <p>Visit/select Ts operator.</p> @param Ts Set text rise operator.
      
      <param name="Operator.SetTextRise"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.SetWordSpacing)">
       
        <p>Visit/select Tw operator.</p> @param Tw Set word spacing operator.
      
      <param name="Operator.SetWordSpacing"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.SetHorizontalTextScaling)">
       
        <p>Visit/select Tz operator.</p> @param Tz Set horizontal text scaling operator.
      
      <param name="Operator.SetHorizontalTextScaling"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.CurveTo1)">
       
        <p>Visit/select v operator.</p> @param v Append curved segment to path operator (initial point replicated).
      
      <param name="Operator.CurveTo1"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.EOClip)">
       
        <p>Visit/select W* operator.</p> @param W_ Set clipping path operator (even-odd rule).
      
      <param name="Operator.EOClip"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.SetLineWidth)">
       
        <p>Visit/select w operator.</p> @param w Set line width operator.
      
      <param name="Operator.SetLineWidth"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.Clip)">
       
        <p>Visit/select W operator.</p> @param W Set clipping path operator (nonzero winding number rule).
      
      <param name="Operator.Clip"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.CurveTo2)">
       
        <p>Visit/select y operator.</p> @param y Append curved segment to path operator (final point replicated).
      
      <param name="Operator.CurveTo2"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.visit(Operator.TextOperator)">
       
        <p>Visit/select any text operator operator.</p> @param textOperator General text operator which is used to select the set of corresponding pdf operators.
      
      <param name="Operator.TextOperator"/>
    </member>
    <member name="M:com.aspose.pdf.OperatorSelector.#ctor(Operator)">
       
        <p>Initializes new {@code OperatorSelector}.</p> @param op The operator to visit/select.
      
      <param name="Operator"/>
    </member>
    <member name="T:com.aspose.pdf.Option">
       
        <p>Class represents option of choice field.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Option.getValue">
       
        <p>Gets or sets option export value.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Option.setValue(String)">
       
        <p>Sets option export value.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Option.getName">
       
        <p>Gets name of option.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Option.setName(String)">
       
        <p>Sets name of option.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Option.getSelected">
       
        <p>Gets selected status of option. Returns true if option is selected.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Option.setSelected(boolean)">
       
        <p>Sets selected status of option. Returns true if option is selected.</p> 
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Option.getIndex">
       
        <p>Gets index of the option.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Option.hasExportValue"/>
    <member name="T:com.aspose.pdf.OptionCollection">
       
        <p>Class representing collection of options of the choice field.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.OptionCollection.isSynchronized">
       
        <p>Returns true of object is synchronized.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.OptionCollection.getSyncRoot">
       
        <p>Synchronization object of the collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.OptionCollection.size">
       
        <p>Gets number of options.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.OptionCollection.copyTo(Array,int)">
       
        <p>Copies options into array.</p> @param array Array where options wil lbe copied. @param index Startign index in array.
      
      <param name="Array"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.OptionCollection.iterator">
       
        <p>Returns enumerator for options in collection.</p> @return Options enumerator.
      
    </member>
    <member name="M:com.aspose.pdf.OptionCollection.get(int)">
       
        <p>Gets option by index.</p> @return Retreived option. @param index Option index. Index should be in range [1..n] where n is options count.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.OptionCollection.get(String)">
       
        <p>Gets option from colleciton by option name.</p> @return Retreived option. @param name Option name.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.OptionCollection.get_Item(int)">
       
        <p>Gets option by index.</p> @return Option on the specified index. @param index Index of the option.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.OptionCollection.get_Item(String)">
       
        <p>Gets option by its name.</p> @return Found option. @param name Name of the option.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.OptionCollection.deleteOption(String)">
       
        <p>Deletes option by its name.</p> @param name Name of the option to delete.
      
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.OutlineCollection">
       
        <p>Represents document outline hierarchy.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.OutlineCollection.size">
       
        <p>Gets the total number of outline items (bookmarks) at all levels of the document outline.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.OutlineCollection.getFirst">
       
        <p>Gets an outline item representing the first top-level item in the outline.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.OutlineCollection.getLast">
       
        <p>Gets an outline item representing the last top-level item in the outline.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.OutlineCollection.isSynchronized">
       
        <p>Gets a value indicating whether access to this collection is synchronized (thread safe).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.OutlineCollection.getSyncRoot">
       
        <p>Gets an object that can be used to synchronize access to this collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.OutlineCollection.add(OutlineItemCollection)">
       
        <p>Adds outline item to collection.</p> @param outline The outline item to be added.
      
      <param name="OutlineItemCollection"/>
    </member>
    <member name="M:com.aspose.pdf.OutlineCollection.delete">
       
        <p>Deletes all outline items from the document outline.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.OutlineCollection.delete(String)">
       
        <p>Deletes the outline item with specified title from the document outline.</p> @param name The title of outline item to be deleted
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.OutlineCollection.copyTo(Array,int)">
       
        <p>Copies the outline items to an System.Array, starting at a particular System.Array index.</p> @param array The one-dimensional System.Array that is the destination. Must have zero-based indexing. @param index The zero-based index in array at which copying begins.
      
      <param name="Array"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.OutlineCollection.iterator">
       
        <p>Returns an enumerator that iterates through the collection.</p> @return An System.Collections.IEnumerator object that can be used to iterate through the collection.
      
    </member>
    <member name="M:com.aspose.pdf.OutlineCollection.get_Item(int)">
       
        <p>Gets outline item from collection by index.</p> @return @param index
      
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.OutlineItemCollection">
       
        <p>Represents outline entry in outline hierarchy of PDF document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.getEngineDict"/>
    <member name="M:com.aspose.pdf.OutlineItemCollection.getEngineObj"/>
    <member name="M:com.aspose.pdf.OutlineItemCollection.getTitle">
       
        <p>Gets the title for this outline item.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.setTitle(String)">
       
        <p>Sets the title for this outline item.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.getDestination">
       
        <p>Gets the destination for this outline item.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.setDestination(IAppointment)">
       
        <p>Sets the destination for this outline item.</p> 
      
      <param name="IAppointment"/>
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.getAction">
       
        <p>Gets the action for this outline item.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.setAction(PdfAction)">
       
        <p>Sets the action for this outline item.</p> 
      
      <param name="PdfAction"/>
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.getColor">
       
        <p>Gets the color for the title text of this outline item.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.setColor(java.awt.Color)">
       
        <p>Sets the color for the title text of this outline item.</p> 
      
      <param name="java.awt.Color"/>
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.getItalic">
       
        <p>Gets italic flag for the title text of this outline item</p> 
      
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.setItalic(boolean)">
       
        <p>Sets italic flag for the title text of this outline item</p> 
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.getBold">
       
        <p>Gets bold flag for the title text of this outline item</p> 
      
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.setBold(boolean)">
       
        <p>Sets bold flag for the title text of this outline item</p> 
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.getFirst">
       
        <p>Gets the outline item representing the first top-level item in the outline hierarchy.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.getLast">
       
        <p>Gets the outline item representing the last top-level item in the outline hierarchy.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.getPrev">
       
        <p>Gets the outline item representing previous item relatively this item in the outline hierarchy.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.getNext">
       
        <p>Gets the outline item representing next item relatively this item in the outline hierarchy.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.getParent">
       
        <p>Gets the parent object of this outline item in the outline hierarchy.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.size">
       
        <p>Gets the total number of outline items at all levels in the document outline hierarchy.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.isSynchronized">
       
        <p>Gets the value indicating whether access to this collection is synchronized (thread safe).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.getSyncRoot">
       
        <p>Gets the object that can be used to synchronize access to this collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.getOpen">
       
        <p>Get open status (true/false) for outline item.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.setOpen(boolean)">
       
        <p>Sets open status (true/false) for outline item.</p> 
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.delete">
       
        <p>Deletes this outline item from the document outline hierarchy.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.delete(String)">
       
        <p>Deletes outline entry with specified name from the document outline hierarchy.</p> @param name Title of outline entry will be deleted.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.copyTo(Array,int)">
       
        <p>Copies the outline entries to an System.Array, starting at a particular System.Array index.</p> @param array The one-dimensional System.Array that is the destination. Must have zero-based indexing. @param index The zero-based index in array at which copying begins.
      
      <param name="Array"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.iterator">
       
        <p>Returns an enumerator that iterates through the collection.</p> @return An System.Collections.IEnumerator object that can be used to iterate through the collection.
      
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.add(OutlineItemCollection)">
       
        <p>Adds outline item to collection.</p> @param outline The outline item to be added.
      
      <param name="OutlineItemCollection"/>
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.insert(int,OutlineItemCollection)">
       
        <p>Inserts the outline item into collection at the specified place.</p> @param index The index specifying place for inserting. @param outline The outline item should be inserted.
      
      <param name="int"/>
      <param name="OutlineItemCollection"/>
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.get_Item(int)">
       
        <p>Gets outline item from the collection using index.</p> @return @param index
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.getLevel">
       
        <p>Gets hierarchy level of outline item.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.#ctor(IPdfObject)">
       
        <p>Initializes new instance of this class using internal engine outline entry object.</p> @param outline Internal engine object of outline entry.
      
      <param name="IPdfObject"/>
    </member>
    <member name="M:com.aspose.pdf.OutlineItemCollection.#ctor(OutlineCollection)">
       
        <p>Initializes outline item instance using root hierarchy object.</p> @param outlines
      
      <param name="OutlineCollection"/>
    </member>
    <member name="F:com.aspose.pdf.OutlineItemCollection.document"/>
    <member name="T:com.aspose.pdf.Page">
       
        <p>Class representing page of PDF document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Page.getTocInfo">
      The table of contents info. @return The table of contents info - default null. If it set this page will contain table of contents.
    </member>
    <member name="M:com.aspose.pdf.Page.setTocInfo(TocInfo)">
      <param name="TocInfo"/>
    </member>
    <member name="M:com.aspose.pdf.Page.getHeader">
      The page header. @return The page header.
    </member>
    <member name="M:com.aspose.pdf.Page.setHeader(HeaderFooter)">
      <param name="HeaderFooter"/>
    </member>
    <member name="M:com.aspose.pdf.Page.getFooter">
      The page header. @return The page header.
    </member>
    <member name="M:com.aspose.pdf.Page.setFooter(HeaderFooter)">
      <param name="HeaderFooter"/>
    </member>
    <member name="M:com.aspose.pdf.Page.getParagraphs">
      Gets the paragraphs. @return The paragraphs.
    </member>
    <member name="M:com.aspose.pdf.Page.setParagraphs(Paragraphs)">
      <param name="Paragraphs"/>
    </member>
    <member name="M:com.aspose.pdf.Page.getPageInfo">
      Gets the page info.(for generator only) @return The page info.
    </member>
    <member name="M:com.aspose.pdf.Page.setPageInfo(PageInfo)">
      Sets the page info.(for generator only) @param value The page info.
      <param name="PageInfo"/>
    </member>
    <member name="M:com.aspose.pdf.Page.getDocument"/>
    <member name="M:com.aspose.pdf.Page.getRect">
       
        <p>Gets or sets rectangle of the page. Page crop box is returned if specified, otherwise page media box is returned.</p>
        <p>
          <hr>
            <blockquote>
              <pre>Example demonstrates how to get page rectangle: 
                <pre lang="Java">Document document = new Document("sample.pdf"); Page page = document.getPages().get(1); Rectangle pageRect = page.getRect();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.Page.getRect_Rename_Namesake">
       
        <p>Gets or sets rectangle of the page. Page crop box is returned if specified, otherwise page media box is returned. Please note that this property don't consider page rotation. To get page rectangle considering rotation please use ActualRect.</p>
        <p>
          <hr>
            <blockquote>
              <pre>Example demonstrates how to get page rectangle: 
                <pre lang="Java">Document document = new Document("sample.pdf"); Page page = document.getPages().get_Item(1); Rectangle pageRect = page.getRect();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.Page.setRect(Rectangle)">
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.Page.getColorType">
       
        <p>Sets color type of the pages based on information getting from operators SetColor and images.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Page.getPageRect(boolean)">
       
        <p>Returns rectangle of the page.</p> @return Rectangle of the page. @param considerRotation If true then rotation of the page will be considered in rect calculation.
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Page.getTabOrder">
       
        <p>Gets or sets tab order of the page. Possible values: Row, Column. Default, Manual</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Page.setTabOrder(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Page.getDuration">
       
        <p>Gets of set page display duration. This is time in seconds that page shall be displayed during presentation. Returs -1 if duration is not defined.</p>
        <p>
          <hr>
            <blockquote>
              <pre>Example demonstrates how to get page duration 
                <pre lang="Java">Document document = new Document("sample.pdf"); Page page = document.getPages().get(1); int pageRect = page.getDuration();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.Page.setDuration(double)">
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Page.getContents">&lt;p&gt; Gets collection of operators in the content stream of the page. {@code OperatorCollection} &lt;/p&gt;&lt;p&gt;&lt;hr&gt;&lt;blockquote&gt;&lt;pre&gt; Example is demonstrates how to scan operators stream of page. &lt;pre lang="Java"&gt; Document document = new Document("sample.pdf"); Operators contents = document.getPages().get_Item(1).getContents(); for(Operator op : (Iterable&lt;Operator&gt;)contents) { System.out.println(op); } &lt;/pre&gt; &lt;/pre&gt;&lt;/blockquote&gt;&lt;/hr&gt;&lt;/p&gt;</member>
    <member name="M:com.aspose.pdf.Page.getGroup">
       
        <p>Gets a group attributes class specifying the attributes of the page�s page group for use in the transparent imaging model.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Page.setGroup(Group)">
       
        <p>Sets a group attributes class specifying the attributes of the page�s page group for use in the transparent imaging model.</p> 
      
      <param name="Group"/>
    </member>
    <member name="M:com.aspose.pdf.Page.getAnnotations">
       
        <p>Gets collection of page annotations. {@code Annotations}</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Page.getResources">&lt;p&gt; Gets page resources. Resources object contains collections of images, forms and fonts. {@code Resources} &lt;/p&gt;&lt;p&gt;&lt;hr&gt;&lt;blockquote&gt;&lt;pre&gt; Example demonstrates scan through page images: &lt;pre lang="Java"&gt; Document document = new Document("sample.pdf"); DocumentActions actions = document.getActions(); Resources resources = document.getPages().get(1).getResources(); for(XImage image : (Ierable&lt;XImage&gt;)resources.getImages()) { System.out.println(image.getWidth() + ":" + image.getHeight()); } &lt;/pre&gt; &lt;/pre&gt;&lt;/blockquote&gt;&lt;/hr&gt;&lt;/p&gt;</member>
    <member name="M:com.aspose.pdf.Page.getRotate">
       
        <p>Gets rotation of the page.</p>
        <p>
          <hr>
            <blockquote>
              <pre>Example demonstrates how to determine page rotation. 
                <pre lang="Java">Document document = new Document("sample.pdf"); System.out.println(document.getPages().get(1).getRotate());</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.Page.setRotate(int)">
      Sets rotation of the page.
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Page.getTrimBox">
       
        <p>Gets or sets trim box of the page.</p>
        <p>
          <hr>
            <blockquote>
              <pre>Example demonstrates how to get trim box of the page: 
                <pre lang="JAva">Document document = new Document("sample.pdf"); Rectangle trimBox = document.getPages().get(1).getTrimBox();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.Page.setTrimBox(Rectangle)">
      Sets trim box of the page.
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.Page.getArtBox">
       
        <p>Gets art box of the page.</p>
        <p>
          <hr>
            <blockquote>
              <pre>Example demonstrates how to get art box of the page: 
                <pre lang="JAva">Document document = new Document("sample.pdf"); Rectangle artBox = document.getPages().get(1).getArtBox();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.Page.setArtBox(Rectangle)">
      Sets art box of the page.
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.Page.getBleedBox">
       
        <p>Gets bleed box of the page.</p>
        <p>
          <hr>
            <blockquote>
              <pre>Example demonstrates how to get bleed box of the page: 
                <pre lang="Java">Document document = new Document("sample.pdf"); Rectangle bleedBox = document.getPages().get(1).getBleedBox();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.Page.setBleedBox(Rectangle)">
      Sets bleed box of the page.
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.Page.getCropBox">
       
        <p>Gets crop box of the page.</p>
        <p>
          <hr>
            <blockquote>
              <pre>Example demonstrates how to get crop box of the page: 
                <pre lang="Java">Document document = new Document("sample.pdf"); Rectangle cropBox = document.getPages().get(1).getCropBox();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.Page.setCropBox(Rectangle)">
      Sets crop box of the page.
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.Page.getMediaBox">
       
        <p>Gets media box of the page.</p>
        <p>
          <hr>
            <blockquote>
              <pre>Example demonstrates how to get media box of the page: 
                <pre lang="Java">Document document = new Document("sample.pdf"); Rectangle mediaBox = document.getPages().get(1).getMediaBox();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.Page.setMediaBox(Rectangle)">
      Sets media box of the page.
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.Page.sendTo(PageDevice,OutputStream)">
      <param name="PageDevice"/>
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.Page.accept(AnnotationSelector)">
       
        <p>Accepts {@code AnnotationSelector} visitor object that provides functionality to work with annotations.</p> @param visitor
      
      <param name="AnnotationSelector"/>
    </member>
    <member name="M:com.aspose.pdf.Page.rotationToInt(int)">
       
        <p>Translates rotation enumeration member into integer value.</p> @return Corresponding integer value @param rotation Rotation enumeratioom member.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Page.intToRotation(int)">
       
        <p>Translates integer value into corresponding rotation enumeration member.</p> @return Rotation enumeration member @param rotation Integer value to convert
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Page.addStamp(Stamp)">
       
        <p>Put stamp into page. Stamp can be page number, image or simple text, e.g. some logo.</p> @param stamp Stamp to add on the page. Each stamp has its coordinates and corresponding properties regarding to the kind of stamp, i.e. image or text value.
      
      <param name="Stamp"/>
    </member>
    <member name="M:com.aspose.pdf.Page.addImageInternal(Stream,Rectangle)">
      Adds image onto the page and locates it in the middle of specified rectangle saving image's proportion. @param imageStream The stream of the image. @param imageRect The position of the image.
      <param name="Stream"/>
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.Page.addImage(InputStream,Rectangle)">
      Adds image onto the page and locates it in the middle of specified rectangle saving image's proportion. @param imageStream The stream of the image. @param imageRect The position of the image.
      <param name="InputStream"/>
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.Page.addImageInternal(String,Stream,Rectangle)">
      Adds searchable image onto the page and locates it in the middle of specified rectangle saving image's proportion. @param hocr The hocr of the image. @param imageStream The stream of the image. @param imageRect The position of the image.
      <param name="String"/>
      <param name="Stream"/>
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.Page.addImage(String,InputStream,Rectangle)">
      Adds searchable image onto the page and locates it in the middle of specified rectangle saving image's proportion. @param hocr The hocr of the image. @param imageStream The stream of the image. @param imageRect The position of the image.
      <param name="String"/>
      <param name="InputStream"/>
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.Page.addImage(InputStream,Rectangle,int,int,boolean)">
      <param name="InputStream"/>
      <param name="Rectangle"/>
      <param name="int"/>
      <param name="int"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Page.addImage(String,Rectangle)">
      Adds image onto the page and locates it in the middle of specified rectangle saving image's proportion. @param imagePath The path to image. @param rectangle The position of the image.
      <param name="String"/>
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.Page.addImage(Stream,Rectangle,CompositingParameters)">
      Adds image onto the page and locates it in the middle of specified rectangle saving image's proportion. @param stream The stream of the image. @param rectangle The position of the image. @param compositingParameters The compositing parameters.
      <param name="Stream"/>
      <param name="Rectangle"/>
      <param name="CompositingParameters"/>
    </member>
    <member name="M:com.aspose.pdf.Page.sendTo(PageDevice,String)">
       
        <p>Sends page to process with given page device.</p> @param device The device to process page. @param outputFileName File which is used with device to save its output.
      
      <param name="PageDevice"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Page.flatten">
       
        <p>Removes all fields located on the page and place their values instead.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Page.accept(TextFragmentAbsorber)">
       
        <p>Accepts {@code TextFragmentAbsorber} visitor object that provides functionality to work with text objects.</p> @param visitor
      
      <param name="TextFragmentAbsorber"/>
    </member>
    <member name="M:com.aspose.pdf.Page.accept(ImagePlacementAbsorber)">
       
        <p>Accepts {@code ImagePlacementAbsorber} visitor object that provides functionality to work with image placement objects.</p> @param visitor
      
      <param name="ImagePlacementAbsorber"/>
    </member>
    <member name="M:com.aspose.pdf.Page.accept(TextAbsorber)">
       
        <p>Accepts {@code TextAbsorber} visitor object that provides functionality to work with text objects.</p> @param visitor
      
      <param name="TextAbsorber"/>
    </member>
    <member name="M:com.aspose.pdf.Page.setPageSize(double,double)">
       
        <p>Sets page size for page.</p> @param width Page width @param height Page size
      
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Page.setTransition(IPdfDictionary)">
       
        <p></p> @param transition
      
      <param name="IPdfDictionary"/>
    </member>
    <member name="M:com.aspose.pdf.Page.getNumber">
       
        <p>Get number of the page.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Page.getContentsAppender">
       
        <p>Gets current contents appender. {@code ContentsAppender}</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Page.getBackground">
       
        <p>Gets the background color of the page.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Page.setBackground(java.awt.Color)">
       
        <p>Sets the background color of the page.</p> 
      
      <param name="java.awt.Color"/>
    </member>
    <member name="M:com.aspose.pdf.Page.setBackground(Color)">
       
        <p>Sets the background color of the page.</p> 
      
      <param name="Color"/>
    </member>
    <member name="M:com.aspose.pdf.Page.getWatermark">
       
        <p>Gets the watermark of the page.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Page.setWatermark(Watermark)">
       
        <p>Sets the watermark of the page.</p> 
      
      <param name="Watermark"/>
    </member>
    <member name="M:com.aspose.pdf.Page.removeObjectReferences(String)">
       
        <p>Remove references to XObject from page contents (i.e. all Do operators which use name of object).</p> @param name
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Page.removeObjectReferences(OperatorCollection,String)">
      <param name="OperatorCollection"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Page.findReferences(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Page.findReferences(OperatorCollection,String)">
       
        <p>Returns list of operators which uses resource with specified name.</p> @return @param name
      
      <param name="OperatorCollection"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Page.clearContents"/>
    <member name="M:com.aspose.pdf.Page.getArtifacts">
       
        <p>Gets collection of artifacts on the page.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Page.getActions">
       
        <p>Gets collection of page properties.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Page.makeGrayscale">
       
        <p>Converts images on page as grayscaled.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Page.freeMemory">
       
        <p>Clears cached data</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Page.#ctor(IPage)">
      <param name="IPage"/>
    </member>
    <member name="F:com.aspose.pdf.Page.OnBeforePageGenerate"/>
    <member name="F:com.aspose.pdf.Page.EnginePage"/>
    <member name="T:com.aspose.pdf.Page.BeforePageGenerate">
       
        <p>Procedure for customize header and footer.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.PageActionCollection">
      This class describes page actions
    </member>
    <member name="M:com.aspose.pdf.PageActionCollection.getOnOpen"/>
    <member name="M:com.aspose.pdf.PageActionCollection.setOnOpen(PdfAction)">
      <param name="PdfAction"/>
    </member>
    <member name="M:com.aspose.pdf.PageActionCollection.getOnClose"/>
    <member name="M:com.aspose.pdf.PageActionCollection.setOnClose(PdfAction)">
      <param name="PdfAction"/>
    </member>
    <member name="T:com.aspose.pdf.PageCollection">
       
        <p>Collection of PDF document pages.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PageCollection.size">
       
        <p>Gets count of pages in the document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PageCollection.isSynchronized">
       
        <p>Returns true of object is synchorinzed.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PageCollection.getSyncRoot">
       
        <p>Gets synchronization object of the collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PageCollection.add(Page)">
       
        <p>Adds page to collection.</p> @param entity Page which should be added.
      
      <param name="Page"/>
    </member>
    <member name="M:com.aspose.pdf.PageCollection.delete(int)">
       
        <p>Delete specified page.</p> @param index Number of page that will be deleted. Pages numbers start from 1.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.PageCollection.delete">
       
        <p>Deletes all pages from collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PageCollection.indexOf(Page)">
       
        <p>Returns index of the specified page.</p> @param entity Page object. Pages numbers start from 1. 
        <p>
          <hr>Pages numbers start from 1. Returns 0 in case collection doesn't contain the page.</hr>
        </p> 
      
      <param name="Page"/>
    </member>
    <member name="M:com.aspose.pdf.PageCollection.getUnrestricted(int)">
       
        <p>Returns page by its index. {@code Page}</p> @return Requested page @param index Index of requested page. Pages are numbered from 1.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.PageCollection.copyTo(Array,int)">
       
        <p>Copyies pages into document.</p> @param array Array containing Pages object to insert into document. It must be Object[] or Page[]. @param index Starting index where pages will be inserted
      
      <param name="Array"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.PageCollection.iterator">
       
        <p>Returns enumerator of pages.</p> @return Enumerator of pages
      
    </member>
    <member name="M:com.aspose.pdf.PageCollection.accept(AnnotationSelector)">
       
        <p>Accepts {@code AnnotationSelector} visitor object that provides functionality to work with annotations.</p> @param visitor AnnotationSelector Visitor
      
      <param name="AnnotationSelector"/>
    </member>
    <member name="M:com.aspose.pdf.PageCollection.delete(int[])">
       
        <p>Delete pages specified which numbers are specified in array.</p> @param pages Array of pages to be deleted.
      
      <param name="int[]"/>
    </member>
    <member name="M:com.aspose.pdf.PageCollection.insert(int)">
       
        <p>Insert empty apge into collection at the specified position.</p> @param pageNumber Position of the new page.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.PageCollection.add">
       
        <p>Adds empty page</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PageCollection.add(ICollection)">
       
        <p>Adds to collection all pages from list.</p> @param pages List which contains all pages which must be added.
      
      <param name="ICollection"/>
    </member>
    <member name="M:com.aspose.pdf.PageCollection.insert(int,Page)">
       
        <p>Inserts page into page collection at specified place.</p> @param pageNumber Required page index in collection. @param entity Page to be inserted.
      
      <param name="int"/>
      <param name="Page"/>
    </member>
    <member name="M:com.aspose.pdf.PageCollection.get_Item(int)">
       
        <p>Gets page by index.</p> @return Retreived page. @param index Index of page.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.PageCollection.accept(ImagePlacementAbsorber)">
       
        <p>Accepts {@code ImagePlacementAbsorber} visitor object that provides functionality to work with image placement objects.</p> @param visitor
      
      <param name="ImagePlacementAbsorber"/>
    </member>
    <member name="M:com.aspose.pdf.PageCollection.accept(TextFragmentAbsorber)">
       
        <p>Accepts {@code TextFragmentAbsorber} visitor object that provides functionality to work with text objects.</p> @param visitor
      
      <param name="TextFragmentAbsorber"/>
    </member>
    <member name="M:com.aspose.pdf.PageCollection.accept(TextAbsorber)">
       
        <p>Accepts {@code TextAbsorber} visitor object that provides functionality to work with text objects.</p> @param visitor
      
      <param name="TextAbsorber"/>
    </member>
    <member name="M:com.aspose.pdf.PageCollection.add(Page[])">
       
        <p>Adds to collection all pages from array.</p> @param pages Array of pages which will be added.
      
      <param name="Page[]"/>
    </member>
    <member name="M:com.aspose.pdf.PageCollection.insert(int,ICollection)">
       
        <p>Inserts pages from the collection into document.</p> @param pageNumber Starting position of the new pages. @param pages Pages collection.
      
      <param name="int"/>
      <param name="ICollection"/>
    </member>
    <member name="M:com.aspose.pdf.PageCollection.insert(int,Page[])">
       
        <p>Inserts pages of the array into document.</p> @param pageNumber Starting number of the new pages. @param pages Array of pages which will be inserted.
      
      <param name="int"/>
      <param name="Page[]"/>
    </member>
    <member name="M:com.aspose.pdf.PageCollection.flatten">
       
        <p>Removes all fields located on the pages and place their values instead.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PageCollection.freeMemory">
       
        <p>Clears cached data</p> 
      
    </member>
    <member name="T:com.aspose.pdf.PageCoordinateType">
       
        <p>Describes page coordinate type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PageCoordinateType.MediaBox">
       
        <p>The MediaBox is used to specify the width and height of the page. For the average user, this probably equals the actual page size. The MediaBox is the largest page box in a PDF. The other page boxes can equal the size of the MediaBox but they cannot be larger.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PageCoordinateType.CropBox">
       
        <p>The CropBox defines the region to which the page contents are to be clipped. Acrobat uses this size for screen display and printing.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.PageInfo">
       
        <p>Represents the page information.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PageInfo.deepClone">
       
        <p>Clone page info.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PageInfo.getHeight">
      Gets or sets page height. @return
    </member>
    <member name="M:com.aspose.pdf.PageInfo.setHeight(double)">
      Sets or sets page height. @return
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.PageInfo.isLandscape">
      Gets is page landscaped. @return
    </member>
    <member name="M:com.aspose.pdf.PageInfo.isLandscape(boolean)">
      Sets is page landscaped. @return
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.PageInfo.getMargin">
      Gets page margin. @return
    </member>
    <member name="M:com.aspose.pdf.PageInfo.setMargin(MarginInfo)">
      Sets page margin. @return
      <param name="MarginInfo"/>
    </member>
    <member name="M:com.aspose.pdf.PageInfo.getWidth">
      Gets page width. @return
    </member>
    <member name="M:com.aspose.pdf.PageInfo.setWidth(double)">
      Sets page width. @return
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.PageInfo.#ctor"/>
    <member name="T:com.aspose.pdf.PageLabel">
      Class representing Page Label range.
    </member>
    <member name="M:com.aspose.pdf.PageLabel.getStartingValue">
      Gets or sets starting value of the page numbering range. @return
    </member>
    <member name="M:com.aspose.pdf.PageLabel.setStartingValue(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.PageLabel.getNumberingStyle">
      Gets numbering style. @return
    </member>
    <member name="M:com.aspose.pdf.PageLabel.setNumberingStyle(int)">
      Sets numbering style. @param value
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.PageLabel.getPrefix">
      Gets or sets page number prefix. @return
    </member>
    <member name="M:com.aspose.pdf.PageLabel.setPrefix(String)">
      Sets or sets page number prefix. @return
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.PageLabel.#ctor">
      * Constructor for page label.
    </member>
    <member name="T:com.aspose.pdf.PageLabelCollection">
      Class represeingting page label collection.
    </member>
    <member name="M:com.aspose.pdf.PageLabelCollection.getLabel(int)">
      Gets page label by page index (page index is started from 0). @param pageIndex @return
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.PageLabelCollection.updateLabel(int,PageLabel)">
      Update label for given page index (page index is started from 0). @param pageIndex @param pageLabel
      <param name="int"/>
      <param name="PageLabel"/>
    </member>
    <member name="M:com.aspose.pdf.PageLabelCollection.removeLabel(int)">
      Remove label by page index (page index is started from 0). @param pageIndex @return
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.PageLabelCollection.getPages">
      Gets page indexes in collection. @return
    </member>
    <member name="T:com.aspose.pdf.PageLayout">
       
        <p>Descibes page layout.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PageLayout.SinglePage">
       
        <p>Single page.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PageLayout.OneColumn">
       
        <p>Display the pages in one column.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PageLayout.TwoColumnLeft">
       
        <p>Display the pages in two columns, with odd-numbered pages on the left.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PageLayout.TwoColumnRight">
       
        <p>Display the pages in two columns, with odd-numbered pages on the right.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PageLayout.TwoPageLeft">
       
        <p>Display the pages two at a time, with odd-numbered pages on the left.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PageLayout.TwoPageRight">
       
        <p>Display the pages two at a time, with odd-numbered pages on the right.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.PageMode">
       
        <p>Class descibes used components of the document page.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PageMode.UseNone">
       
        <p>Dont use any components.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PageMode.UseOutlines">
       
        <p>Document outline visible.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PageMode.UseThumbs">
       
        <p>Thumbnail images visible.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PageMode.FullScreen">
       
        <p>FullScreenFull-screen mode, with no menu bar, window controls, or any other window visible.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PageMode.UseOC">
       
        <p>Optional content group panel visible.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PageMode.UseAttachments">
       
        <p>Attachments panel visible.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.PageNumberStamp">
       
        <p>Represents page number stamp and used to number pages.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PageNumberStamp.getFormat">
       
        <p>String value for stamping page numbers. Value must include char '#' which is replaced with the page number in the process of stamping.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PageNumberStamp.setFormat(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.PageNumberStamp.getStartingNumber">
       
        <p>Gets value of the number of starting page. Other pages will be numbered starting from this value.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PageNumberStamp.setStartingNumber(int)">
       
        <p>Sets value of the number of starting page. Other pages will be numbered starting from this value.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.PageNumberStamp.put(Page)">
       
        <p>Adds page number.</p> @param page Page for stamping.
      
      <param name="Page"/>
    </member>
    <member name="M:com.aspose.pdf.PageNumberStamp.#ctor(String)">
       
        <p>Initializes a new instance of the {@code PageNumberStamp} class.</p> @param format String value used for stamping. See {@code Format} property for details.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.PageNumberStamp.#ctor">
       
        <p>Initializes a new instance of the {@code PageNumberStamp} class. Format is set to "#".</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PageNumberStamp.#ctor(FormattedText)">
       
        <p>Creates PageNumberStamp by formatted text.</p> @param formattedText Formatted text which used to create Page Number Stamp.
      
      <param name="FormattedText"/>
    </member>
    <member name="T:com.aspose.pdf.PageSize">
       
        <p>Class representing size of page in PDF document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PageSize.getWidth">
       
        <p>Gets or sets page width.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PageSize.setWidth(float)">
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.PageSize.getHeight">
       
        <p>Gets or sets page height.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PageSize.setHeight(float)">
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.PageSize.isLandscape">
       
        <p>Gets page orientation. Returns true of this is landscape orientation and false if this is portrait.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PageSize.isLandscape(boolean)">
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.PageSize.getA0">
       
        <p>A0 size (1189x840 mm).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PageSize.getA1">
       
        <p>A1 size (840x594 mm).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PageSize.getA2">
       
        <p>A2 size (594x420 mm).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PageSize.getA3">
       
        <p>A3 size (420x297 mm).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PageSize.getA4">
       
        <p>A4 size (297x210 mm).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PageSize.getA5">
       
        <p>A5 size (210x148 mm).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PageSize.getA6">
       
        <p>A6 size (148x105 mm).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PageSize.getB5">
       
        <p>B5 size (250x176 mm).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PageSize.getPageLetter">
       
        <p>Letter size (279x216 mm).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PageSize.getPageLegal">
       
        <p>Legal size (356x216 mm).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PageSize.getPageLedger">
       
        <p>Ledger size (432x279 mm).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PageSize.getP11x17">
       
        <p>11x17 inches format.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PageSize.#ctor(float,float)">
       
        <p>Constructor for PageSize.</p> @param x Width of the page. @param y Height of the page.
      
      <param name="float"/>
      <param name="float"/>
    </member>
    <member name="F:com.aspose.pdf.PageSize.LEAVE_INTACT"/>
    <member name="T:com.aspose.pdf.Paragraphs"/>
    <member name="M:com.aspose.pdf.Paragraphs.add(BaseParagraph)">
      Add paragraph to collection. @param paragraph
      <param name="BaseParagraph"/>
    </member>
    <member name="M:com.aspose.pdf.Paragraphs.add(BaseParagraph,NewParagraphPlacementInfo)">
      Add paragraph to collection. @param paragraph @param placementInfo
      <param name="BaseParagraph"/>
      <param name="NewParagraphPlacementInfo"/>
    </member>
    <member name="M:com.aspose.pdf.Paragraphs.getRange(int,int)">
      Remove paragraphs range. @param index The first paragraph index. @param count The paragraphs count. @return
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Paragraphs.removeRange(int,int)">
      Remove paragraphs range. @param index The first paragraph index. @param count The paragraphs count.
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Paragraphs.remove(BaseParagraph)">
      Remove paragraph from collection. @param paragraph
      <param name="BaseParagraph"/>
    </member>
    <member name="M:com.aspose.pdf.Paragraphs.insert(int,BaseParagraph)">
      Insert paragraph to collection. @param index @param paragraph
      <param name="int"/>
      <param name="BaseParagraph"/>
    </member>
    <member name="M:com.aspose.pdf.Paragraphs.getCount">
      Get paragraphs count. @return
    </member>
    <member name="M:com.aspose.pdf.Paragraphs.clear">
      Clear paragraphs.
    </member>
    <member name="M:com.aspose.pdf.Paragraphs.get_Item(int)">
      Get paragraphs from collection. @param index The paragraph index. @return
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Paragraphs.set_Item(int,BaseParagraph)">
      <param name="int"/>
      <param name="BaseParagraph"/>
    </member>
    <member name="M:com.aspose.pdf.Paragraphs.iterator"/>
    <member name="T:com.aspose.pdf.PasswordBoxField">
       
        <p>Class descibes text field for entering password.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.PasswordType">
       
        <p>This enum represents known password types used for password protected pdf documents.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PasswordType.None">
       
        <p>Pdf document is not password protected.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PasswordType.User">
       
        <p>Pdf document was opened using document open password (restricted access).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PasswordType.Owner">
       
        <p>Pdf document was opened using change permissions password (full access).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PasswordType.Inaccessible">
       
        <p>Pdf document is password protected but both user and owner passwords are not empty and none of the passwords was defined or supplied password was incorrect. So it impossible to deduce the type of the password.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.PclLoadOptions">
       
        <p>Represents options for loading/importing PCL file into pdf document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PclLoadOptions.#ctor">
       
        <p>Creates {@code PclLoadOptions} object.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.PdfAction">
       
        <p>Represents Action in PDF document</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PdfAction.getNext">
       
        <p>Next actions in sequence.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PdfAction.execute(IDocument)">
      <param name="IDocument"/>
    </member>
    <member name="M:com.aspose.pdf.PdfAction.createAction(IPdfDictionary)">
      <param name="IPdfDictionary"/>
    </member>
    <member name="T:com.aspose.pdf.PdfDocumentBuilder"/>
    <member name="M:com.aspose.pdf.PdfDocumentBuilder.getDocument"/>
    <member name="M:com.aspose.pdf.PdfDocumentBuilder.save(String)">
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.PdfFormat">
       
        <p>This class represents an pdf format.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PdfFormat.PDF_A_1A"/>
    <member name="F:com.aspose.pdf.PdfFormat.PDF_A_1B"/>
    <member name="F:com.aspose.pdf.PdfFormat.PDF_A_2B"/>
    <member name="F:com.aspose.pdf.PdfFormat.Tagged_PDF"/>
    <member name="F:com.aspose.pdf.PdfFormat.v_1_3"/>
    <member name="F:com.aspose.pdf.PdfFormat.v_1_4"/>
    <member name="F:com.aspose.pdf.PdfFormat.v_1_5"/>
    <member name="F:com.aspose.pdf.PdfFormat.v_1_6"/>
    <member name="F:com.aspose.pdf.PdfFormat.v_1_7"/>
    <member name="F:com.aspose.pdf.PdfFormat.PDF_X_1A"/>
    <member name="T:com.aspose.pdf.PdfPageStamp">
       
        <p>Class represents stamp which uses PDF page as stamp.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PdfPageStamp.getPdfPage">
       
        <p>Gets page which will be used as stamp.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PdfPageStamp.setPdfPage(Page)">
       
        <p>Sets page which will be used as stamp.</p> 
      
      <param name="Page"/>
    </member>
    <member name="M:com.aspose.pdf.PdfPageStamp.put(Page)">
       
        <p>Put stamp on the specified page.</p> @param page Page where stamp will be placed.
      
      <param name="Page"/>
    </member>
    <member name="M:com.aspose.pdf.PdfPageStamp.close"/>
    <member name="M:com.aspose.pdf.PdfPageStamp.#ctor(Page)">
       
        <p>Constructor of PdfPageStamp.</p> @param pdfPage Page which is used for stamping.
      
      <param name="Page"/>
    </member>
    <member name="M:com.aspose.pdf.PdfPageStamp.#ctor(String,int)">
       
        <p>Creates Pdf page stamp from specifed page of the document in specified file.</p> @param fileName Name and page of PDF file. @param pageIndex Index of the page.
      
      <param name="String"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.PdfPageStamp.#ctor(InputStream,int)">
      <param name="InputStream"/>
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.PdfSaveOptions">
       
        <p>Save options for export to Pdf format</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PdfSaveOptions.#ctor">
       
        <p>Constructor</p> 
      
    </member>
    <member name="T:com.aspose.pdf.Permissions">
       
        <p>This enum represents user's permissions for a pdf.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.Permissions.PrintDocument">
       
        <p>(Security handlers of revision 2) Print the document. (Security handlers of revision 3 or greater) Print the document (possibly not at the highest quality level, depending on whether {@code PrintingQuality} is also set).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.Permissions.ModifyContent">
       
        <p>Modify the contents of the document by operations other than those controlled by {@code ModifyTextAnnotations}, {@code FillForm}, and 11.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.Permissions.ExtractContent">
       
        <p>(Security handlers of revision 2) Copy or otherwise extract text and graphics from the document, including extracting text and graphics (in support of accessibility to users with disabilities or for other purposes). (Security handlers of revision 3 or greater) Copy or otherwise extract text and graphics from the document by operations other than that controlled by {@code ExtractContentWithDisabilities}.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.Permissions.ModifyTextAnnotations">
       
        <p>Add or modify text annotations, fill in interactive form fields, and, if {@code ModifyContent} is also set, create or modify interactive form fields (including signature fields).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.Permissions.FillForm">
       
        <p>(Security handlers of revision 3 or greater) Fill in existing interactive form fields (including signature fields), even if {@code ModifyTextAnnotations} is clear.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.Permissions.ExtractContentWithDisabilities">
       
        <p>(Security handlers of revision 3 or greater) Extract text and graphics (in support of accessibility to users with disabilities or for other purposes).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.Permissions.AssembleDocument">
       
        <p>(Security handlers of revision 3 or greater) Assemble the document (insert, rotate, or delete pages and create bookmarks or thumbnail images), even if {@code ModifyContent} is clear.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.Permissions.PrintingQuality">
       
        <p>(Security handlers of revision 3 or greater) Print the document to a representation from which a faithful digital copy of the PDF content could be generated. When this bit is clear (and bit 3 is set), printing is limited to a low-level representation of the appearance, possibly of degraded quality.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.PKCS1">
       
        <p>Represents signature object regarding PKCS#1 standard. RSA encryption algorithm and SHA-1 digest method are used for signing.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PKCS1.#ctor(InputStream)">
       
        <p>Initializes new instance of the {@code PKCS1} class.</p> @param image This image will define signature appearance on the page.
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.PKCS1.#ctor">
       
        <p>Inititalizes new instance of the {@code PKCS1} class.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PKCS1.#ctor(String,String)">
       
        <p>Inititalizes new instance of the {@code PKCS1} class.</p> @param pfx Pfx file which contains certificate for signing. @param password
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.PKCS1.#ctor(Stream,String)">
       
        <p>Inititalizes new instance of the {@code PKCS1} class.</p> @param pfx Stream with certificate data organized as pfx. @param password Password to get access to the private key in the certificate.
      
      <param name="Stream"/>
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.PKCS7">
       
        <p>Represents the PKCS#7 object that conform to the PKCS#7 specification in Internet RFC 2315, PKCS #7: Cryptographic Message Syntax, Version 1.5. The SHA1 digest of the document's byte range is encapsulated in the PKCS#7 SignedData field.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PKCS7.#ctor">
       
        <p>Inititalizes new instance of the {@code PKCS7} class.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PKCS7.#ctor(String,String)">
       
        <p>Inititalizes new instance of the {@code PKCS7} class.</p> @param pfx Pfx file which contains certificate for signing. @param password
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.PKCS7.#ctor(InputStream,String)">
       
        <p>Inititalizes new instance of the {@code PKCS7} class.</p> @param pfx Stream with certificate data organized as pfx. @param password Password to get access to the private key in the certificate.
      
      <param name="InputStream"/>
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.PKCS7Detached">
       
        <p>Represents the PKCS#7 object that conform to the PKCS#7 specification in Internet RFC 2315, PKCS #7: Cryptographic Message Syntax, Version 1.5. The original signed message digest over the document's byte range is incorporated as the normal PKCS#7 SignedData field. No data shall is encapsulated in the PKCS#7 SignedData field.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PKCS7Detached.#ctor(InputStream)">
       
        <p>Initializes new instance of the {@code PKCS7Detached} class.</p> @param image This image will define signature appearance on the page.
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.PKCS7Detached.#ctor">
       
        <p>Inititalizes new instance of the {@code PKCS7Detached} class.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PKCS7Detached.#ctor(String,String)">
       
        <p>Inititalizes new instance of the {@code PKCS7Detached} class.</p> @param pfx Pfx file which contains certificate for signing. @param password
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.PKCS7Detached.#ctor(Stream,String)">
       
        <p>Inititalizes new instance of the {@code PKCS7Detached} class.</p> @param pfx Stream with certificate data organized as pfx. @param password Password to get access to the private key in the certificate.
      
      <param name="Stream"/>
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.Point">
       
        <p>Represent point with fractional coordinates.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Point.getX">
       
        <p>X value.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Point.setX(double)">
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Point.getY">
       
        <p>Y value.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Point.setY(double)">
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Point.getTrivial">
       
        <p>Gets point with zero coordinates.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Point.toPoint">
       
        <p>Converts point into System.Drawing.PointF object.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Point.#ctor(double,double)">
       
        <p>Initializes new instance of the {@code Point}.</p> @param x x value. @param y y value.
      
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.PolyAnnotation">
       
        <p>Abstract base class for poly- annotations.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PolyAnnotation.getVertices">
       
        <p>Gets an array of points representing the horizontal and vertical coordinates of each vertex.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PolyAnnotation.setVertices(Point[])">
       
        <p>Sets an array of points representing the horizontal and vertical coordinates of each vertex.</p> 
      
      <param name="Point[]"/>
    </member>
    <member name="M:com.aspose.pdf.PolyAnnotation.getInteriorColor">
       
        <p>Getsthe interior color with which to fill the annotation�s line endings.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PolyAnnotation.setInteriorColor(Color)">
       
        <p>Sets the interior color with which to fill the annotation�s line endings.</p> 
      
      <param name="Color"/>
    </member>
    <member name="M:com.aspose.pdf.PolyAnnotation.getStartingStyle">
       
        <p>Gets the style of first line ending.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PolyAnnotation.setStartingStyle(int)">
       
        <p>Sets the style of first line ending.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.PolyAnnotation.getEndingStyle">
       
        <p>Gets the style of second line ending.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PolyAnnotation.setEndingStyle(int)">
       
        <p>Sets the style of second line ending.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.PolyAnnotation.getIntent">
       
        <p>Gets the intent of the polygon or polyline annotation.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PolyAnnotation.setIntent(int)">
       
        <p>Sets the intent of the polygon or polyline annotation.</p> 
      
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.PolygonAnnotation">
       
        <p>Class representing polygon annotation.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PolygonAnnotation.writeXfdf(XmlWriter)">
      <param name="XmlWriter"/>
    </member>
    <member name="M:com.aspose.pdf.PolygonAnnotation.accept(AnnotationSelector)">
       
        <p>Accepts visitor object for annotation processing.</p> @param visitor Visitor object.
      
      <param name="AnnotationSelector"/>
    </member>
    <member name="M:com.aspose.pdf.PolygonAnnotation.#ctor(Page,Rectangle,Point[])">
       
        <p>Creates new Polygon annotation on the specified page.</p> @param page The document's page where annotation should be created. @param rect The annotation rectangle, defining the location of the annotation on the page. @param vertices An array of polygon vertices points.
      
      <param name="Page"/>
      <param name="Rectangle"/>
      <param name="Point[]"/>
    </member>
    <member name="T:com.aspose.pdf.PolyIntent">
       
        <p>Enumerates the intents of the polygon or polyline annotation.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PolyIntent.Undefined">
       
        <p>Undefined state.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PolyIntent.PolygonCloud">
       
        <p>Means that the annotation is intended to function as a cloud object.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PolyIntent.PolyLineDimension">
       
        <p>Indicates that the polyline annotation is intended to function as a dimension.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PolyIntent.PolygonDimension">
       
        <p>Indicates that the polygon annotation is intended to function as a dimension.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.PolylineAnnotation">
       
        <p>Represents polyline annotation that is similar to polygon, except that the first and last vertex are not implicitly connected.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PolylineAnnotation.writeXfdf(XmlWriter)">
      <param name="XmlWriter"/>
    </member>
    <member name="M:com.aspose.pdf.PolylineAnnotation.accept(AnnotationSelector)">
       
        <p>Accepts visitor object to process the annotation.</p> @param visitor Visitor object.
      
      <param name="AnnotationSelector"/>
    </member>
    <member name="M:com.aspose.pdf.PolylineAnnotation.#ctor(Page,Rectangle,Point[])">
       
        <p>Creates new Polyline annotation on the specified page.</p> @param page The document's page where annotation should be created. @param rect The annotation rectangle, defining the location of the annotation on the page. @param vertices An array of polygon vertices points.
      
      <param name="Page"/>
      <param name="Rectangle"/>
      <param name="Point[]"/>
    </member>
    <member name="T:com.aspose.pdf.PopupAnnotation">
       
        <p>Represents the pop-up annotation that displays text in a pop-up window for entry and editing.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PopupAnnotation.writeXfdf(XmlWriter)">
      <param name="XmlWriter"/>
    </member>
    <member name="M:com.aspose.pdf.PopupAnnotation.getOpen">
       
        <p>Gets a flag specifying whether the pop-up annotation should initially be displayed open.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.PopupAnnotation.setOpen(boolean)">
       
        <p>Sets a flag specifying whether the pop-up annotation should initially be displayed open.</p> 
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.PopupAnnotation.accept(AnnotationSelector)">
       
        <p>Accepts visitor object to process the annotation.</p> @param visitor Visitor object.
      
      <param name="AnnotationSelector"/>
    </member>
    <member name="M:com.aspose.pdf.PopupAnnotation.#ctor(Page,Rectangle)">
       
        <p>Creates new Popup annotation on the specified page.</p> @param page The document's page where annotation should be created. @param rect The annotation rectangle, defining the location of the annotation on the page.
      
      <param name="Page"/>
      <param name="Rectangle"/>
    </member>
    <member name="T:com.aspose.pdf.Position">
       
        <p>Represents a position object</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Position.getXIndent">
       
        <p>Gets the X coordinate of the object</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Position.setXIndent(double)">
       
        <p>Sets the X coordinate of the object</p> 
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Position.getYIndent">
       
        <p>Gets the X coordinate of the object</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Position.setYIndent(double)">
       
        <p>Sets the X coordinate of the object</p> 
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Position.toString">
       
        <p>Gets string representation for the current {@code Position} object.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Position.equals(Object)">
       
        <p>Determines whether the specified object is equal to the current {@code Position} object.</p> 
      
      <param name="Object"/>
    </member>
    <member name="M:com.aspose.pdf.Position.#ctor(double,double)">
       
        <p>Initializes a new instance of {@code Position} class</p> 
      
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.PredefinedAction">
       
        <p>Defines different actions which can be triggered from a PDF file.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.FirstPage">
       
        <p>A named action to go to the first page.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.LastPage">
       
        <p>A named action to go to the last page.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.NextPage">
       
        <p>A named action to go to the next page.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.PrevPage">
       
        <p>A named action to go to the previous page.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.PrintDialog">
       
        <p>A named action to open a print dialog.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.Bookmarks_ExpanCurrentBookmark">
       
        <p>A named action to find current bookmark.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.Bookmarks_HightlightCurrentBookmark">
       
        <p>A named action to highlight current bookmark.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.Document_AttachFile">
       
        <p>A named action to add file attachment.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.Document_CropPages">
       
        <p>A named action to crop document pages.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.Document_DeletePages">
       
        <p>A named action to delete document pages.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.Document_ExtractPages">
       
        <p>A named action to exctract document pages.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.Document_InsertPages">
       
        <p>A named action to insert pages from a document.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.Document_ReplacePages">
       
        <p>A named action to replace document pages.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.Document_RotatePages">
       
        <p>A named action to rotate document pages.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.Edit_CheckSpelling_InComFieldEdit">
       
        <p>A named action to check spelling in comments.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.Edit_Find">
       
        <p>A named action to find.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.Edit_Preferences">
       
        <p>A named action to edit preferences.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.Edit_Search">
       
        <p>A named action for searching.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.File_AttachToEmail">
       
        <p>A named action for attaching current pdf document into email message.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.File_Close">
       
        <p>A named action to close the document.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.File_CreatePDF_FromScanner">
       
        <p>A named action to create pdf document from scanner.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.File_CreatePDF_FromWebPage">
       
        <p>A named action to create pdf document from web page.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.File_Exit">
       
        <p>A named action to exit pdf reader.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.File_Organizer_OpenOrganizer">
       
        <p>A named action to open organizer.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.File_Print">
       
        <p>A named action to print the document.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.File_Properties">
       
        <p>A named action to open the document properties.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.File_SaveAs">
       
        <p>A named action to save the document with another name.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.Miscellaneous_ZoomIn">
       
        <p>A named action to zoom in the document.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.Miscellaneous_ZoomOut">
       
        <p>A named action to zoom out the document.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.PageImages_PrintPages">
       
        <p>A named action to print the document pages.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_GoTo_NextView">
       
        <p>A named action to go to the next view.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_GoTo_Page">
       
        <p>A named action to go to the certain page.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_GoTo_PreDocument">
       
        <p>A named action to go to the previous document.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_GoTo_PreView">
       
        <p>A named action to go to the previous view.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_NavigationPanels_Articles">
       
        <p>A named action to show/hide articles panel.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_NavigationPanels_Attachments">
       
        <p>A named action to show/hide attachment panel.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_NavigationPanels_Boomarks">
       
        <p>A named action to show/hide bookmark panel.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_NavigationPanels_Comments">
       
        <p>A named action to show/hide comments panel.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_NavigationPanels_Fields">
       
        <p>A named action to show/hide fields panel.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_NavigationPanels_Layers">
       
        <p>A named action to show/hide layers panel.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_NavigationPanels_ModelTree">
       
        <p>A named action to show/hide model tree panel.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_NavigationPanels_Pages">
       
        <p>A named action to show/hide pages panel.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_NavigationPanels_Signatures">
       
        <p>A named action to show/hide signatures panel.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_PageDisplay_SinglePage">
       
        <p>A named action to display single page.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_PageDisplay_SinglePageContinuous">
       
        <p>A named action to display single continious page.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_PageDisplay_TwoUp">
       
        <p>A named action to display pages as Two-Up.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_PageDisplay_TwoUpContinuous">
       
        <p>A named action to display pages as Two-Up continious.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_Toolbars_AdvanceEditing">
       
        <p>A named action to show/hide advanced editing toolbar.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_Toolbars_CommentMarkup">
       
        <p>A named action to show/hide commenting toolbar.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_Toolbars_Edit">
       
        <p>A named action to show/hide edit toolbar.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_Toolbars_File">
       
        <p>A named action to show/hide file toolbar.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_Toolbars_Find">
       
        <p>A named action to show/hide find toolbar.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_Toolbars_Forms">
       
        <p>A named action to show/hide forms toolbar.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_Toolbars_Measuring">
       
        <p>A named action to show/hide measuring toolbar.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_Toolbars_ObjectData">
       
        <p>A named action to show/hide object data toolbar.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_Toolbars_PageDisplay">
       
        <p>A named action to show/hide page display toolbar.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_Toolbars_PageNavigation">
       
        <p>A named action to show/hide navigation toolbar.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_Toolbars_PrintProduction">
       
        <p>A named action to show/hide print production toolbar.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_Toolbars_PropertiesBar">
       
        <p>A named action to show/hide property toolbar.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_Toolbars_Redaction">
       
        <p>A named action to show/hide redaction toolbar.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_Toolbars_SelectZoom">
       
        <p>A named action to show/hide select &amp; zoom toolbar.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_Toolbars_Tasks">
       
        <p>A named action to show/hide tasks toolbar.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_Toolbars_Typewriter">
       
        <p>A named action to show/hide typewriter toolbar.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_Zoom_ActualSize">
       
        <p>A named action to view pages in actual size.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_Zoom_FitHeight">
       
        <p>A named action to fit page on height.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_Zoom_FitPage">
       
        <p>A named action to fit page.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_Zoom_FitVisible">
       
        <p>A named action to fit page visibility.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_Zoom_FitWidth">
       
        <p>A named action to fit page on width.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.View_Zoom_ZoomTo">
       
        <p>A named action to make zoom.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.PredefinedAction.Window_FullScreenMode">
       
        <p>A named action to view the document in the full screen mode.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.RadioButtonField">
       
        <p>Class representing radio button field.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.RadioButtonField.getStyle">
       
        <p>Style of field box.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.RadioButtonField.setStyle(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.RadioButtonField.getSelected">
       
        <p>Gets or sets index of selected item. Numbering of items is started from 1.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.RadioButtonField.setSelected(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.RadioButtonField.getOptions">
       
        <p>Gets collection of options of the radio button.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.RadioButtonField.updateAppearances"/>
    <member name="M:com.aspose.pdf.RadioButtonField.add(RadioButtonOptionField)">
       
        <p>Adds new option field to RadioButton field</p> @param newItem
      
      <param name="RadioButtonOptionField"/>
    </member>
    <member name="M:com.aspose.pdf.RadioButtonField.addOption(String,Rectangle)">
       
        <p>Add to radio button option with specifed rectangle.</p> @param optionName Name of new option. @param rect New item rectangle.
      
      <param name="String"/>
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.RadioButtonField.addOption(String)">
       
        <p>Add option to radion button.</p> @param optionName
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.RadioButtonField.setPosition(Point)">
       
        <p>Move all subitems of radio button to specified positins on the page.</p> @param point
      
      <param name="Point"/>
    </member>
    <member name="M:com.aspose.pdf.RadioButtonField.getPageIndex">
       
        <p>Gets index of page which contains this RadioButton field.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.RadioButtonField.getValue">
       
        <p>Gets or sets value of field.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.RadioButtonField.setValue(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.RadioButtonField.#ctor(Page,Rectangle)">
      <param name="Page"/>
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.RadioButtonField.#ctor(Page)">
       
        <p>Constructor for RadiouttonField</p> @param page
      
      <param name="Page"/>
    </member>
    <member name="T:com.aspose.pdf.RadioButtonOptionField">
       
        <p>Class represents item of RadioButton field.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.RadioButtonOptionField.getOptionName_Rename_Namesake">
       
        <p>Gets or sets name of the option.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.RadioButtonOptionField.setOptionName_Rename_Namesake(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.RadioButtonOptionField.getCaption">
       
        <p>Gets or sets caption.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.RadioButtonOptionField.setCaption(TextFragment)">
      <param name="TextFragment"/>
    </member>
    <member name="M:com.aspose.pdf.RadioButtonOptionField.setOptionName(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.RadioButtonOptionField.#ctor">
       
        <p>Create new RadioButtonOptionField instance.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.Rectangle">
       
        <p>Class represents rectangle.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Rectangle.getWidth">
       
        <p>Width of rectangle.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Rectangle.getHeight">
       
        <p>Height of rectangle.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Rectangle.getLLX">
       
        <p>X-coordinate of lower - left corner.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Rectangle.setLLX(double)">
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Rectangle.getLLY">
       
        <p>Y - coordinate of lower-left corner.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Rectangle.setLLY(double)">
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Rectangle.getURX">
       
        <p>X - coordinate of upper-right corner.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Rectangle.setURX(double)">
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Rectangle.getURY">
       
        <p>Y - coordinate of upper-right corner.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Rectangle.setURY(double)">
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Rectangle.toRect"/>
    <member name="M:com.aspose.pdf.Rectangle.fromRect(java.awt.Rectangle)">
      <param name="java.awt.Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.Rectangle.toArray(ITrailerable)">
      <param name="ITrailerable"/>
    </member>
    <member name="M:com.aspose.pdf.Rectangle.toString">
       
        <p>Gets rectangle string representation.</p> @return String has format llx,lly,urx,ury.
      
    </member>
    <member name="M:com.aspose.pdf.Rectangle.parse(String)">
       
        <p>Try to parse string and extract from it rectangle components llx, lly, urx, ury.</p> @return Rectangle object. @param value String to parse.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Rectangle.getTrivial">
       
        <p>Initializes trivial rectangle i.e. rectangle with zero position and size.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Rectangle.isTrivial">
       
        <p>Checks if rectangle is trivial i.e. has zero size and position.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Rectangle.isEmpty">
      Checks if rectangle is empty. @return
    </member>
    <member name="M:com.aspose.pdf.Rectangle.isPoint">
      Checks if rectangle is point i.e. LLX is equal URX and LLY is equal URY. @return
    </member>
    <member name="M:com.aspose.pdf.Rectangle.equals(Object)">
       
        <p>Check if rectangles are equal i.e. hase same position and sizes.</p> @return True if rectangles are eqals, false otherwise. @param other Rectangle which will be compared.
      
      <param name="Object"/>
    </member>
    <member name="M:com.aspose.pdf.Rectangle.intersect(Rectangle)">
      Intersects rectangles @param otherRect
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.Rectangle.rotate(int)">
       
        <p>Rotate rectangle by the specified angle.</p> @param angle Angle of rotation. Member of Rotation enumeration.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Rectangle.compareTo(Object)">
      <param name="Object"/>
    </member>
    <member name="M:com.aspose.pdf.Rectangle.clone">
      Clones the Rectangle object. @return
    </member>
    <member name="M:com.aspose.pdf.Rectangle.#ctor(double,double,double,double)">
       
        <p>Constructor of Rectangle.</p> @param llx X of lower left corner. @param lly Y of lower left corner. @param urx X of upper right corner. @param ury Y of upper right corner.
      
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="F:com.aspose.pdf.Rectangle.Empty">
      Empty rectangle
    </member>
    <member name="T:com.aspose.pdf.RenderingOptions">
       
        <p>Represents rendering options</p> 
      
    </member>
    <member name="M:com.aspose.pdf.RenderingOptions.getBarcodeOptimization">
       
        <p>Gets or sets barcode optimization mode.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.RenderingOptions.setBarcodeOptimization(boolean)">
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.RenderingOptions.getSystemFontsNativeRendering">
       
        <p>Gets or sets a mode where system fonts are rendered natively</p> 
      
    </member>
    <member name="M:com.aspose.pdf.RenderingOptions.setSystemFontsNativeRendering(boolean)">
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.RenderingOptions.#ctor">
       
        <p>Initializes new instance of the {@code RenderingOptions} object.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.RenditionAction">
       
        <p>A rendition action that controls the playing of multimedia content.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.RenditionAction.#ctor(String,ScreenAnnotation)">
       
        <p>Creates the rendition action.</p> @param mediaFile The path to multimedia file. @param screen The ScreenAnnotation object the RenditionAction will be bound with.
      
      <param name="String"/>
      <param name="ScreenAnnotation"/>
    </member>
    <member name="T:com.aspose.pdf.ReplyType">
       
        <p>Enumerates the kinds of the relationships (the “reply type”) between the annotation and one specified by InReplyTo.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ReplyType.Undefined">
       
        <p>Undefined relationship.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ReplyType.Reply">
       
        <p>The annotation is considered a reply to the annotation specified by InReplyTo. Viewer applications should not display replies to an annotation individually but together in the form of threaded comments.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ReplyType.Group">
       
        <p>The annotation is grouped with the annotation specified by InReplyTo.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.Resources">
       
        <p>Class representing page resources.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Resources.getEngineDict"/>
    <member name="M:com.aspose.pdf.Resources.getForms">
       
        <p>Gets {@code Forms} forms collection</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Resources.getImages">
       
        <p>Gets {@code Images} images collection</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Resources.getFonts">
       
        <p>Gets {@code Fonts} resources collection</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Resources.create(IDocument,IResourceDictionary)">
      <param name="IDocument"/>
      <param name="IResourceDictionary"/>
    </member>
    <member name="M:com.aspose.pdf.Resources.getResourcesFor(Form)">
      <param name="Form"/>
    </member>
    <member name="M:com.aspose.pdf.Resources.isCommonResource">
       
        <p>True if this resources are common i.e. are shared for several pages (placed in pages dictionary or in every page as object reference) Manipulation with common resources must be performed very carefully for example deleting object form common resources in one page may cause errors on other pages if deleted object was used for other pages.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.Resources._ResourceDictionary"/>
    <member name="T:com.aspose.pdf.ReturnAction">
       
        <p>Enum represented a program workflow action in case of invoking the {@code IWarningCallback.Warning(Aspose.Pdf.WarningInfo)} method.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ReturnAction.Continue">
       
        <p>Used for continue flow.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.ReturnAction.Abort">
       
        <p>Used for abort flow.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.RichTextBoxField">
       
        <p>Class describes rich text editor component.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.RichTextBoxField.getStyle">
       
        <p>Gets or sets default style string of the rich text field.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.RichTextBoxField.setStyle(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.RichTextBoxField.getRValue">
       
        <p>Gets rich text value.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.RichTextBoxField.setRValue(String)">
       
        <p>Sets rich text value.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.RichTextBoxField.getFormattedValue">
       
        <p>Gets formatted rich text value with markup.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.RichTextBoxField.setFormattedValue(String)">
       
        <p>Sets formatted rich text value with markup.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.RichTextBoxField.getValue">
       
        <p>Get Value of RichTextField.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.RichTextBoxField.setValue(String)">
       
        <p>Set Value of RichTextField.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.RichTextBoxField.getJustify">
       
        <p>Gets or sets justification of the rich text box.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.RichTextBoxField.setJustify(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.RichTextBoxField.#ctor(Page,java.awt.Rectangle)">
       
        <p>Constructor for Rich Text Box field.</p> @param page @param rect
      
      <param name="Page"/>
      <param name="java.awt.Rectangle"/>
    </member>
    <member name="T:com.aspose.pdf.RootElement">
       
        <p>Root structure element.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.Rotation">
       
        <p>Enumeration of possible rotation values.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.Rotation.None">
       
        <p>Non-rotated.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.Rotation.on90">
       
        <p>Rotated on 90 degrees clockwise.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.Rotation.on180">
       
        <p>Rotated on 180 degrees.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.Rotation.on270">
       
        <p>Rotated on 270 degrees clockwise.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.Row">
       
        <p>Represents a row of the table.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Row.deepClone">
       
        <p>Clone the row.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Row.getBackgroundColor">
       
        <p>Gets or sets the background color.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Row.setBackgroundColor(Color)">
      <param name="Color"/>
    </member>
    <member name="M:com.aspose.pdf.Row.getBorder">
       
        <p>Gets or sets the border.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Row.setBorder(BorderInfo)">
      <param name="BorderInfo"/>
    </member>
    <member name="M:com.aspose.pdf.Row.getCells">
       
        <p>Gets the cells of the row.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Row.setCells(Cells)">
      <param name="Cells"/>
    </member>
    <member name="M:com.aspose.pdf.Row.getDefaultCellBorder">
       
        <p>Gets default cell border;</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Row.setDefaultCellBorder(BorderInfo)">
      <param name="BorderInfo"/>
    </member>
    <member name="M:com.aspose.pdf.Row.getMinRowHeight">
       
        <p>Gets height for row;</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Row.setMinRowHeight(double)">
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Row.getFixedRowHeight">
       
        <p>Gets fixed row height - row may have fixed height;</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Row.setFixedRowHeight(double)">
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Row.isInNewPage">
      / * 
        <p>/ * Gets or sets row pure height - without borders(for internal use) / *</p> /
      
    </member>
    <member name="M:com.aspose.pdf.Row.isInNewPage(boolean)">
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Row.isRowBroken">
       
        <p>Gets is row can be broken between two pages</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Row.isRowBroken(boolean)">
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Row.getDefaultCellTextState">
       
        <p>Gets or sets default text state for row cells</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Row.setDefaultCellTextState(TextState)">
      <param name="TextState"/>
    </member>
    <member name="M:com.aspose.pdf.Row.getDefaultCellPadding">
       
        <p>Gets or sets default margin for row cells</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Row.setDefaultCellPadding(MarginInfo)">
      <param name="MarginInfo"/>
    </member>
    <member name="M:com.aspose.pdf.Row.#ctor">
       
        <p>Initializes a new instance of the Row class.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.Rows">
       
        <p>Represents a rows collection of table.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Rows.add">
       
        <p>Add row to collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Rows.add(Row)">
       
        <p>Add row to cellection.</p> 
      
      <param name="Row"/>
    </member>
    <member name="M:com.aspose.pdf.Rows.indexOf(Row)">
       
        <p>Returns index of row in collection.</p> @param row The row.
      
      <param name="Row"/>
    </member>
    <member name="M:com.aspose.pdf.Rows.remove(Row)">
       
        <p>Remove row from collection.</p> @param row The row.
      
      <param name="Row"/>
    </member>
    <member name="M:com.aspose.pdf.Rows.removeAt(int)">
       
        <p>Remove row at position from collection.</p> @param index The collection index.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Rows.removeRange(int,int)">
       
        <p>Remove row set from collection.</p> @param index The collection index. @param count The rows count.
      
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Rows.iterator"/>
    <member name="M:com.aspose.pdf.Rows.getCount">
       
        <p>The items count.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Rows.get_Item(int)">
       
        <p>Returns row.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Rows.set_Item(int,Row)">
      <param name="int"/>
      <param name="Row"/>
    </member>
    <member name="T:com.aspose.pdf.SaveFormat">
       
        <p>Specifies format</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SaveFormat.None"/>
    <member name="F:com.aspose.pdf.SaveFormat.Doc"/>
    <member name="F:com.aspose.pdf.SaveFormat.Xps"/>
    <member name="F:com.aspose.pdf.SaveFormat.Html"/>
    <member name="F:com.aspose.pdf.SaveFormat.Xml"/>
    <member name="F:com.aspose.pdf.SaveFormat.TeX"/>
    <member name="F:com.aspose.pdf.SaveFormat.DocX"/>
    <member name="F:com.aspose.pdf.SaveFormat.Svg"/>
    <member name="F:com.aspose.pdf.SaveFormat.MobiXml"/>
    <member name="F:com.aspose.pdf.SaveFormat.Excel"/>
    <member name="F:com.aspose.pdf.SaveFormat.Epub"/>
    <member name="T:com.aspose.pdf.SaveOptions">
       
        <p>SaveOptions type hold level of abstraction on individual save options</p> 
      
    </member>
    <member name="M:com.aspose.pdf.SaveOptions.getWarningHandler">
       
        <p>Callback to handle any warnings generated. The WarningHandler returns ReturnAction enum item specifying either Continue or Abort. Continue is the default action and the Save operation continues, however the user may also return Abort in which case the Save operation should cease.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.SaveOptions.setWarningHandler(IWarningCallback)">
      <param name="IWarningCallback"/>
    </member>
    <member name="M:com.aspose.pdf.SaveOptions.getSaveFormat">
       
        <p>Format of data save.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.SaveOptions.getCloseResponse">
       
        <p>Gets or sets boolean value which indicates will Response object be closed after document saved into response.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.SaveOptions.setCloseResponse(boolean)">
      <param name="boolean"/>
    </member>
    <member name="T:com.aspose.pdf.SaveOptions.HtmlBorderLineType">
       
        <p>Represents line types that can be used in result document for drawing borders or another lines</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SaveOptions.HtmlBorderLineType.None">
       
        <p>No line will be shown</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SaveOptions.HtmlBorderLineType.Dotted">
       
        <p>dotted line will be shown</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SaveOptions.HtmlBorderLineType.Dashed">
       
        <p>dashed line will be shown</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SaveOptions.HtmlBorderLineType.Solid">
       
        <p>solid line will be shown</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SaveOptions.HtmlBorderLineType.Double">
       
        <p>double line will be shown</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SaveOptions.HtmlBorderLineType.Groove">
       
        <p>grove line will be shown</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SaveOptions.HtmlBorderLineType.Ridge">
       
        <p>ridhe line will be shown</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SaveOptions.HtmlBorderLineType.Inset">
       
        <p>inset line will be shown</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SaveOptions.HtmlBorderLineType.Outset">
       
        <p>outset line will be shown</p> 
      
    </member>
    <member name="T:com.aspose.pdf.SaveOptions.BorderPartStyle"/>
    <member name="M:com.aspose.pdf.SaveOptions.BorderPartStyle.getWidthInPoints">
       
        <p>Represents border line's width in points. Must be number greater then zero.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.SaveOptions.BorderPartStyle.setWidthInPoints(int)">
      <param name="int"/>
    </member>
    <member name="F:com.aspose.pdf.SaveOptions.BorderPartStyle.Color">
       
        <p>Represents border line's line color</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SaveOptions.BorderPartStyle.LineType">
       
        <p>Represents border line's type - f.e. Dashed or Solid</p> 
      
    </member>
    <member name="T:com.aspose.pdf.SaveOptions.BorderInfo">
       
        <p>Instance of this class represents information about border That can be drown on some result document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.SaveOptions.BorderInfo.#ctor">
       
        <p>Creates instance of BorderInfo class</p> 
      
    </member>
    <member name="M:com.aspose.pdf.SaveOptions.BorderInfo.#ctor(BorderPartStyle)">
       
        <p>Creates instance of BorderInfo class and initializes all elements of border(Top, Left, Right, Bottom) with attributes copied from supplied border style</p> 
      
      <param name="BorderPartStyle"/>
    </member>
    <member name="F:com.aspose.pdf.SaveOptions.BorderInfo.TopStyleIfAny">
       
        <p>Represents top part(if any) of border</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SaveOptions.BorderInfo.LeftStyleIfAny">
       
        <p>Represents left part(if any) of border</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SaveOptions.BorderInfo.RightStyleIfAny">
       
        <p>Represents right part(if any) of border</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SaveOptions.BorderInfo.BottomStyleIfAny">
       
        <p>Represents bottom part(if any) of border</p> 
      
    </member>
    <member name="T:com.aspose.pdf.SaveOptions.NodeLevelResourceType">
       
        <p>enumerates possible types of saved external resources</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SaveOptions.NodeLevelResourceType.Image">
       
        <p>Image</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SaveOptions.NodeLevelResourceType.Font">
       
        <p>Font</p> 
      
    </member>
    <member name="T:com.aspose.pdf.SaveOptions.ResourceSavingInfo">
       
        <p>This class represents set of data that related to external resource file's saving that occures during conversion of PDF to some other format (f.e. HTML)</p> 
      
    </member>
    <member name="M:com.aspose.pdf.SaveOptions.ResourceSavingInfo.getResourceType">
       
        <p>Set by converter. Supposed file name that goes from converter to code of custom method Can be use in custom code to decide how to process or where save that file</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SaveOptions.ResourceSavingInfo.SupposedFileName">
       
        <p>Set by converter. Supposed file name that goes from converter to code of custom method Can be use in custom code to decide how to process or where save that file</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SaveOptions.ResourceSavingInfo.ContentStream">
       
        <p>Set by converter. Represents binary content of saved file.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SaveOptions.ResourceSavingInfo.CustomProcessingCancelled">
       
        <p>this flag must set to "true" in custom code if for some reasons proposed file should be processed not with custom code but with converter's code itself in standard for converter way. So, it' setting set to true means that custom code did not process referenced file and converter must handle it itself (in both sences - for saving somewhere and for naming in referencing file).</p> 
      
    </member>
    <member name="T:com.aspose.pdf.ScreenAnnotation">
       
        <p>A screen annotation that specifies a region of a page upon which media clips may be played.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ScreenAnnotation.accept(AnnotationSelector)">
      <param name="AnnotationSelector"/>
    </member>
    <member name="M:com.aspose.pdf.ScreenAnnotation.getTitle">
       
        <p>Gets the title of the screen annotation.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ScreenAnnotation.setTitle(String)">
       
        <p>Sets the title of the screen annotation.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.ScreenAnnotation.getAction">
       
        <p>Gets an action to be performed when the annotation is activated.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.ScreenAnnotation.setAction(PdfAction)">
       
        <p>Sets an action to be performed when the annotation is activated.</p> 
      
      <param name="PdfAction"/>
    </member>
    <member name="M:com.aspose.pdf.ScreenAnnotation.#ctor(Page,Rectangle,String)">
       
        <p>Creates new Screen annotation on the specified page.</p> @param page The document's page where annotation should be created. @param rect The annotation rectangle, defining the location of the annotation on the page. @param mediaFile The path to multimedia file.
      
      <param name="Page"/>
      <param name="Rectangle"/>
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.Selector">
       
        <p>Base abstract class for selecting routines which are defined in concrete descendants.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Selector.getSelected">
       
        <p>The list of selected objects.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Selector.#ctor">
       
        <p>Initializes new instance of the {@code Selector} class.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.Signature">
       
        <p>An abstract class which represents signature object in the pdf document. Signatures are fields with values of signature objects, the last contain data which is used to verify the document validity.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Signature.getAuthority">
       
        <p>The name of the person or authority signing the document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Signature.setAuthority(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Signature.getDate">
       
        <p>The time of signing.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Signature.setDate(java.util.Date)">
       
        <p>The time of signing.</p> 
      
      <param name="java.util.Date"/>
    </member>
    <member name="M:com.aspose.pdf.Signature.getLocation">
       
        <p>The CPU host name or physical location of the signing.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Signature.setLocation(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Signature.getReason">
       
        <p>The reason for the signing, such as (I agreeРІР‚В¦).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Signature.setReason(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Signature.getContactInfo">
       
        <p>Information provided by the signer to enable a recipient to contact the signer to verify the signature, e.g. a phone number.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Signature.setContactInfo(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Signature.getByteRange">
       
        <p>An array of pairs of integers (starting byte offset, length in bytes) that shall describe the exact byte range for the digest calculation.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Signature.verify">
       
        <p>Verify the document regarding this signature and return true if document is valid or otherwise false.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Signature.getShowProperties">
       
        <p>Force to show/hide signature properties. In case ShowProperties is true signature field has predefined format of appearance (strings to represent): ------------------------------------------- Digitally signed by {certificate subject} Date: {signature.Date} Reason: {signature.Reason} Location: {signature.Location} ------------------------------------------- where {X} is placeholder for X value. Also signature can have image, in this case listed strings are placed over image. ShowProperties is true by default.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Signature.setShowProperties(boolean)">
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Signature.close">
       
        <p>Destructor which closes temporary streams (if necessary).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Signature.setImage(InputStream)">
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.Signature.#ctor">
       
        <p>Inititalizes new instance of the {@code Signature} class.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Signature.#ctor(String,String)">
       
        <p>Inititalizes new instance of the {@code Signature} class.</p> @param pfx Pfx file which contains certificate for signing. @param password Password to get access to the private key in the certificate.
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Signature.#ctor(InputStream,String)">
       
        <p>Inititalizes new instance of the {@code Signature} class.</p> @param pfx Stream with certificate data organized as pfx. @param password Password to get access to the private key in the certificate.
      
      <param name="InputStream"/>
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.SignatureField">
       
        <p>Represents signature form field.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.SignatureField.getSignature">
       
        <p>Gets signature object. This object contains signature data regarding public-key cryptographic standards. Classes {@code PKCS1}, {@code PKCS7} and {@code PKCS7Detached} represent all supported types of signature objects.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.SignatureField.sign(Signature,InputStream,String)">
       
        <p>Signs the document using this signature field.</p> @param signature Signature object, see {@code PKCS1}, {@code PKCS7}, {@code PKCS7Detached}. @param pfx Stream with certificate. @param pass Password to access private in the {@code pfx}.
      
      <param name="Signature"/>
      <param name="InputStream"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.SignatureField.sign(Signature)">
       
        <p>Sign the document using this signature field.</p> @param signature Signature object, see {@code PKCS1}, {@code PKCS7} and {@code PKCS7Detached}.
      
      <param name="Signature"/>
    </member>
    <member name="M:com.aspose.pdf.SignatureField.clear">
       
        <p>Removes signature object from field.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.SignatureField.extractImage">
       
        <p>Extracts signature's image.</p> @return If image was successfully found than returns stream object; otherwise, null.
      
    </member>
    <member name="M:com.aspose.pdf.SignatureField.extractCertificate"/>
    <member name="M:com.aspose.pdf.SignatureField.#ctor(Page,Rectangle)">
       
        <p>Initializes new instance of the {@code SignatureField} class.</p> 
      
      <param name="Page"/>
      <param name="Rectangle"/>
    </member>
    <member name="T:com.aspose.pdf.SoundAnnotation">
       
        <p>Represents a sound annotation that contains sound recorded from the computer�s microphone or imported from a file.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.SoundAnnotation.writeXfdf(XmlWriter)">
      <param name="XmlWriter"/>
    </member>
    <member name="M:com.aspose.pdf.SoundAnnotation.getIcon">
       
        <p>Gets an icon to be used in displaying the annotation.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.SoundAnnotation.setIcon(int)">
       
        <p>Sets an icon to be used in displaying the annotation.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.SoundAnnotation.getSoundData">
       
        <p>Gets a sound object defining the sound to be played when the annotation is activated.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.SoundAnnotation.accept(AnnotationSelector)">
       
        <p>Accepts visitor object to process the annotation.</p> @param visitor Visitor object.
      
      <param name="AnnotationSelector"/>
    </member>
    <member name="M:com.aspose.pdf.SoundAnnotation.#ctor(Page,Rectangle,String)">
       
        <p>Creates new Sound annotation on the specified page.</p> @param page The document's page where annotation should be created. @param rect The annotation rectangle, defining the location of the annotation on the page. @param soundFile A sound file defining the sound to be played when the annotation is activated.
      
      <param name="Page"/>
      <param name="Rectangle"/>
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.SoundData">
       
        <p>Represents a sound data defining the sound to be played when the annotation is activated.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.SoundData.getRate">
       
        <p>Gets or sets the sampling rate, in samples per second.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.SoundData.setRate(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.SoundData.getChannels">
       
        <p>Gets or sets the number of sound channels.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.SoundData.setChannels(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.SoundData.getBits">
       
        <p>Gets or sets the number of bits per sample value per channel.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.SoundData.setBits(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.SoundData.getContents">
       
        <p>Gets stream of the sound to be played when the annotation is activated.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.SoundData.getEncoding">
       
        <p>Gets or sets the encoding format for the sample data.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.SoundData.setEncoding(int)">
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.SoundEncoding">
       
        <p>The encoding format for the sample data.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SoundEncoding.Raw">
       
        <p>Unspecified or unsigned values in the range 0 to 2^bits − 1.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SoundEncoding.Signed">
       
        <p>Twos-complement values.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SoundEncoding.MuLaw">
       
        <p>μ-law–encoded samples.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SoundEncoding.ALaw">
       
        <p>A-law–encoded samples.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.SoundIcon">
       
        <p>Enumerates the icons to be used in displaying the annotation.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SoundIcon.Speaker">
       
        <p>Speaker icon.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SoundIcon.Mic">
       
        <p>Microphone icon.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.SoundIconConverter"/>
    <member name="M:com.aspose.pdf.SoundIconConverter.toString(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.SoundIconConverter.toEnum(String)">
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.SoundSampleData">
       
        <p>Represents additional entries specific to a sound object (Section 9.2 PDF1-7)</p> 
      
    </member>
    <member name="M:com.aspose.pdf.SoundSampleData.getSamplingRate">
       
        <p>Gets or sets the sampling rate.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.SoundSampleData.setSamplingRate(long)">
      <param name="long"/>
    </member>
    <member name="M:com.aspose.pdf.SoundSampleData.getNumberOfSoundChannels">
       
        <p>Gets or sets the number of sound channels.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.SoundSampleData.setNumberOfSoundChannels(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.SoundSampleData.getBitsPerChannel">
       
        <p>Gets or sets the number of bits per sample value per channel.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.SoundSampleData.setBitsPerChannel(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.SoundSampleData.getEncodingFormat_Rename_Namesake">
       
        <p>Gets or sets the encoding format.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.SoundSampleData.setEncodingFormat(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.SoundSampleData.#ctor(long)">
       
        <p>Initializes new sound sample data.</p> @param samplingRate The sampling rate.
      
      <param name="long"/>
    </member>
    <member name="M:com.aspose.pdf.SoundSampleData.#ctor(long,int)">
       
        <p>Initializes new sound sample data.</p> @param samplingRate The sampling rate. @param numberOfSoundChannels The number of sound channels.
      
      <param name="long"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.SoundSampleData.#ctor(long,int,int)">
       
        <p>Initializes new sound sample data.</p> @param samplingRate The sampling rate. @param numberOfSoundChannels The number of sound channels. @param bitsPerChannel The number of bits per sample value per channel.
      
      <param name="long"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.SoundSampleData.#ctor(long,int,int,int)">
       
        <p>Initializes new sound sample data.</p> @param samplingRate The sampling rate. @param numberOfSoundChannels The number of sound channels. @param bitsPerChannel The number of bits per sample value per channel. @param soundSampleDataEncodingFormat The encoding format for the sample data.
      
      <param name="long"/>
      <param name="int"/>
      <param name="int"/>
      <param name="int"/>
    </member>
    <member name="F:com.aspose.pdf.SoundSampleData.DEFAULT_SAMPLING_RATE"/>
    <member name="F:com.aspose.pdf.SoundSampleData.DEFAULT_OF_SOUND_CHANNELS"/>
    <member name="F:com.aspose.pdf.SoundSampleData.DEFAULT_OF_BITS_PER_CHANNEL"/>
    <member name="F:com.aspose.pdf.SoundSampleData.DEFAULT_ENCODING_FORMAT"/>
    <member name="T:com.aspose.pdf.SoundSampleDataEncodingFormat">
       
        <p>The encoding format for the sound sample data.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SoundSampleDataEncodingFormat.Raw">
       
        <p>Unspecified or unsigned values in the range 0 to 2B − 1.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SoundSampleDataEncodingFormat.Signed">
       
        <p>Twos-complement values.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SoundSampleDataEncodingFormat.muLaw">
       
        <p>μ-law–encoded samples.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SoundSampleDataEncodingFormat.ALaw">
       
        <p>A-law–encoded samples.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.SquareAnnotation">
       
        <p>Class representing square annotation.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.SquareAnnotation.writeXfdf(XmlWriter)">
      <param name="XmlWriter"/>
    </member>
    <member name="M:com.aspose.pdf.SquareAnnotation.accept(AnnotationSelector)">
       
        <p>Accepts visitor to process annotation.</p> @param visitor Visitor object.
      
      <param name="AnnotationSelector"/>
    </member>
    <member name="M:com.aspose.pdf.SquareAnnotation.#ctor(Page,Rectangle)">
       
        <p>Creates new Square annotation on the specified page.</p> @param page The document's page where annotation should be created. @param rect The annotation rectangle, defining the location of the annotation on the page.
      
      <param name="Page"/>
      <param name="Rectangle"/>
    </member>
    <member name="T:com.aspose.pdf.SquigglyAnnotation">
       
        <p>Represents the squiggly annotation that appears as a jagged underline in the text of a document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.SquigglyAnnotation.writeXfdf(XmlWriter)">
      <param name="XmlWriter"/>
    </member>
    <member name="M:com.aspose.pdf.SquigglyAnnotation.accept(AnnotationSelector)">
       
        <p>Accepts visitor object to process the annotation.</p> @param visitor Visitor object.
      
      <param name="AnnotationSelector"/>
    </member>
    <member name="M:com.aspose.pdf.SquigglyAnnotation.#ctor(Page,Rectangle)">
       
        <p>Creates new Squiggly annotation on the specified page.</p> @param page The document's page where annotation should be created. @param rect The annotation rectangle, defining the location of the annotation on the page.
      
      <param name="Page"/>
      <param name="Rectangle"/>
    </member>
    <member name="T:com.aspose.pdf.Stamp">
       
        <p>An abstract class for various kinds of stamps which come as descendants.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Stamp.getBackground">
       
        <p>Gets a bool value that indicates the content is stamped as background. If the value is true, the stamp content is layed at the bottom. By defalt, the value is false, the stamp content is layed at the top.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Stamp.setBackground(boolean)">
       
        <p>Sets a bool value that indicates the content is stamped as background. If the value is true, the stamp content is layed at the bottom. By defalt, the value is false, the stamp content is layed at the top.</p> 
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.Stamp.getOpacity">
       
        <p>Gets a value to indicate the stamp opacity. The value is from 0.0 to 1.0. By default the value is 1.0.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Stamp.setOpacity(double)">
       
        <p>Sets a value to indicate the stamp opacity. The value is from 0.0 to 1.0. By default the value is 1.0.</p> 
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Stamp.getRotate">
       
        <p>Sets or gets the rotation of stamp content according {@code Rotation} values. Note. This property is for set angles which are multiples of 90 degrees (0, 90, 180, 270 degrees). To set arbitrary angle use RotateAngle property. If angle set by ArbitraryAngle is not multiple of 90 then Rotate property returns Rotation.None.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Stamp.setRotate(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Stamp.getXIndent">
       
        <p>Get horizontal stamp coordinate, starting from the left.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Stamp.setXIndent(double)">
       
        <p>Set horizontal stamp coordinate, starting from the left.</p> 
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Stamp.getYIndent">
       
        <p>Get vertical stamp coordinate, starting from the bottom.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Stamp.setYIndent(double)">
       
        <p>Set vertical stamp coordinate, starting from the bottom.</p> 
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Stamp.getHorizontalAlignment">
       
        <p>Gets horizontal alignment of stamp on the page.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Stamp.setHorizontalAlignment(int)">
       
        <p>Sets Horizontal alignment of stamp on the page.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Stamp.getVerticalAlignment">
       
        <p>Gets vertical alignment of stamp on page.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Stamp.setVerticalAlignment(int)">
       
        <p>Sets vertical alignment of stamp on page.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Stamp.getLeftMargin">
       
        <p>Gets left margin of stamp.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Stamp.setLeftMargin(double)">
       
        <p>Sets left margin of stamp.</p> 
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Stamp.getRightMargin">
       
        <p>Gets right margin of stamp.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Stamp.setRightMargin(double)">
       
        <p>Sets right margin of stamp.</p> 
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Stamp.getBottomMargin">
       
        <p>Gets bottom margin of stamp.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Stamp.setBottomMargin(double)">
       
        <p>Sets bottom margin of stamp.</p> 
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Stamp.getTopMargin">
       
        <p>Get top margin of stamp.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Stamp.setTopMargin(double)">
       
        <p>Sets top margin of stamp.</p> 
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Stamp.getZoomX">
       
        <p>Horizontal zooming factor of the stamp. Allows to scale stamp horizontally.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Stamp.setZoomX(double)">
       
        <p>Horizontal zooming factor of the stamp. Allows to scale stamp horizontally.</p> 
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Stamp.getWidth">
       
        <p>Desired width of the stamp on the page.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Stamp.setWidth(double)">
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Stamp.getHeight">
       
        <p>Desired height of the stamp on the page.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Stamp.setHeight(double)">
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Stamp.getZoomY">
       
        <p>Vertical zooming factor of the stamp. Allows to scale stamp vertically.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Stamp.setZoomY(double)">
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Stamp.getZoom">
       
        <p>Zooming factor of the stamp. Allows to scale stamp. Please note that pair of properties ZoomX and ZoomY allows to set zoom factor for every axe separately. Setting of this property changes both ZoomX and ZoomY properties. If ZoomX and ZoomY are different then Zoom property returns ZoomX value.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Stamp.setZoom(double)">
       
        <p>Set zooming factor of the stamp. Allows to scale stamp.</p> 
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Stamp.getRotateAngle">
       
        <p>Gets rotate angle of stamp in degrees. This property allows to set arbitrary rotate angle.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Stamp.setRotateAngle(double)">
       
        <p>Sets rotate angle of stamp in degrees. This property allows to set arbitrary rotate angle.</p> 
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Stamp.put(Page)">
       
        <p>Adds stamp on the page.</p> @param page The page to add stamp.
      
      <param name="Page"/>
    </member>
    <member name="M:com.aspose.pdf.Stamp.setStampId(int)">
       
        <p>Sets stamp Id.</p> @param value New value of Stamp ID.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Stamp.getStampId">
       
        <p>Returns stamp ID.</p> @return Stamp ID.
      
    </member>
    <member name="T:com.aspose.pdf.StampAnnotation">
       
        <p>Represents rubber stamp annotation. This type of annotation displays text or graphics intended to look as if they were stamped on the page with a rubber stamp.</p>
        <p>
          <hr>
            <blockquote>
              <pre>Next code snippet demonstrates how to add 2 stamps into the first pdf document page. Input document comes from inFile and changes are saved into the outFile. The first stamp has icon NotForPublicRelease and the second comes with image from rubber.jpg.
                <pre lang="Java">Document document = new Document(inFile); StampAnnotation stamp1 = new StampAnnotation(StampIcon.NotForPublicRelease); stamp1.setRect ( new Rectangle(100, 100, 120, 120)) document.getPages().get(1).getAnnotations().add(stamp1); StampAnnotation stamp2 = new StampAnnotation(new FileStream("rubber.jpg", FileMode.Open)); stamp2.setRect ( new Rectangle(200, 200, 220, 220)) document.getPages().get(1).getAnnotations().add(stamp2); document.save(outFile);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.StampAnnotation.writeXfdf(XmlWriter)">
      <param name="XmlWriter"/>
    </member>
    <member name="M:com.aspose.pdf.StampAnnotation.getIcon">
       
        <p>Gets or sets icon for rubber stamp.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.StampAnnotation.setIcon(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.StampAnnotation.accept(AnnotationSelector)">
       
        <p>Acepts {@code AnnotationSelector} visitor when browsing annotation collection.</p> 
      
      <param name="AnnotationSelector"/>
    </member>
    <member name="M:com.aspose.pdf.StampAnnotation.getImage">
       
        <p>Gets or sets image of the annotation.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.StampAnnotation.setImage(InputStream)">
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.StampAnnotation.#ctor(Page,Rectangle)">
       
        <p>Creates new Stamp annotation on the specified page.</p> @param page The document's page where annotation should be created. @param rect The annotation rectangle, defining the location of the annotation on the page.
      
      <param name="Page"/>
      <param name="Rectangle"/>
    </member>
    <member name="T:com.aspose.pdf.StampIcon">
       
        <p>Enumerates the icons to be used in displaying the annotation.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.StampIcon.Draft">
       
        <p>Draft stamp icon.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.StampIcon.Approved">
       
        <p>Approved stamp icon.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.StampIcon.Experimental">
       
        <p>Experimental stamp icon.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.StampIcon.NotApproved">
       
        <p>Stamp icon is not approved.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.StampIcon.AsIs">
       
        <p>Stamp icon "as is".</p> 
      
    </member>
    <member name="F:com.aspose.pdf.StampIcon.Expired">
       
        <p>Stamp icon is expired.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.StampIcon.NotForPublicRelease">
       
        <p>Not for public release.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.StampIcon.Confidential">
       
        <p>Confidential.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.StampIcon.Final">
       
        <p>Final.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.StampIcon.Sold">
       
        <p>Sold.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.StampIcon.Departmental">
       
        <p>Departamental.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.StampIcon.ForComment">
       
        <p>For comment.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.StampIcon.ForPublicRelease">
       
        <p>For public release.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.StampIcon.TopSecret">
       
        <p>Top secret.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.StampIconConverter"/>
    <member name="M:com.aspose.pdf.StampIconConverter.toString(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.StampIconConverter.toEnum(String)">
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.StrikeOutAnnotation">
       
        <p>Represents a strikeout annotation that appears as a strikeout in the text of the document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.StrikeOutAnnotation.writeXfdf(XmlWriter)">
      <param name="XmlWriter"/>
    </member>
    <member name="M:com.aspose.pdf.StrikeOutAnnotation.accept(AnnotationSelector)">
       
        <p>Accepts visitor object to process the annotation.</p> @param visitor Visitor object.
      
      <param name="AnnotationSelector"/>
    </member>
    <member name="M:com.aspose.pdf.StrikeOutAnnotation.#ctor(Page,Rectangle)">
       
        <p>Creates new StrikeOut annotation on the specified page.</p> @param page The document's page where annotation should be created. @param rect The annotation rectangle, defining the location of the annotation on the page.
      
      <param name="Page"/>
      <param name="Rectangle"/>
    </member>
    <member name="T:com.aspose.pdf.StructElement">
       
        <p>General structure element.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.SubmitFormAction">
       
        <p>Class which describes submit-form action.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.SubmitFormAction.getFlags">
       
        <p>Gets or sets flagas of submit action</p> 
      
    </member>
    <member name="M:com.aspose.pdf.SubmitFormAction.setFlags(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.SubmitFormAction.getUrl"/>
    <member name="M:com.aspose.pdf.SubmitFormAction.setUrl(FileSpecification)">
      <param name="FileSpecification"/>
    </member>
    <member name="M:com.aspose.pdf.SubmitFormAction.#ctor"/>
    <member name="F:com.aspose.pdf.SubmitFormAction.EXCLUDE">
       
        <p>If clear, the Fields array specifies which fields to include in the submission.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SubmitFormAction.INCLUDE_NO_VALUE_FIELDS">
       
        <p>If set, all fields designated by the Fields array and the Include/Exclude flag shall be submitted.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SubmitFormAction.EXPORT_FORMAT">
       
        <p>If set, field names and values shall be submitted in HTML Form format.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SubmitFormAction.GET_METHOD">
       
        <p>If set, field names and values shall be submitted using an HTTP GET request.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SubmitFormAction.SUBMIT_COORDINATES">
       
        <p>If set, the coordinates of the mouse click that caused the submit-form action shall be transmitted as part of the form data.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SubmitFormAction.XFDF">
       
        <p>If set, field names and values shall be submitted as XFDF.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SubmitFormAction.INCLUDE_APPEND_SAVES">
       
        <p>If set, the submitted FDF file shall include the contents of all incremental updates.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SubmitFormAction.INCLUDE_ANNOTATIONS">
       
        <p>If set, the submitted FDF file shall include includes all markup annotations in the underlying PDF document.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SubmitFormAction.SUBMIT_PDF">
       
        <p>If set, the document shall be submitted as PDF, using the MIME content type application/pdf.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SubmitFormAction.CANONICAL_FORMAT">
       
        <p>If set, any submitted field values representing dates shall be converted to the standard format.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SubmitFormAction.EXCL_NON_USER_ANNOTS">
       
        <p>If set, it shall include only those markup annotations whose T entry matches the name of the current user.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SubmitFormAction.EXCL_F_KEY">
       
        <p>If set, the submitted FDF shall exclude the F entry.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SubmitFormAction.EMBED_FORM">
       
        <p>If set, the F entry of the submitted FDF shall be a file specification containing an embedded file stream representing the PDF file from which the FDF is being submitted.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.SvgLoadOptions">
       
        <p>Represents options for loading/importing SVG file into pdf document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.SvgLoadOptions.getAdjustPageSize">
       
        <p>Adust pdf page size to svg size</p> 
      
    </member>
    <member name="M:com.aspose.pdf.SvgLoadOptions.setAdjustPageSize(boolean)">
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.SvgLoadOptions.#ctor">
       
        <p>Creates {@code SvgLoadOptions} object.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.SvgSaveOptions">
       
        <p>Save options for export to SVG format</p> 
      
    </member>
    <member name="M:com.aspose.pdf.SvgSaveOptions.#ctor">
       
        <p>Constructor</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SvgSaveOptions.CustomStrategyOfEmbeddedImagesSaving">
       
        <p>This field can contain saving strategy that must be used (if present) during conversion for customized handling of created referenced external images files (like embedded BMP or JPEG) embedded into saved SVG. That strategy must process resources and return string that represents desirable URI of saved resource in generated SVG. If processing for this or that file for some reason must be done by converter's code itself, not in custom code, please set in custom code flag 'CustomProcessingCancelled' of 'imageSavingInfo' parameter's variable It signals to converter that all the necessary steps for processing of that resource must be done in converter itself as if there was no any external custom code .</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SvgSaveOptions.TreatTargetFileNameAsDirectory">
       
        <p>This options defines whether will be created target directory (if absent yet) with same name as requested output file instead of requested output file itself. It so, that directory will contain all output SVG-images of pages (like described below). If no, output files of pages other then first one will be created exactly in requested directory as main output file, but will contain in file name suffix _[2...n], that is defined by page number, f.e. if You define output file "C:\AsposeTests\output.svg" and output will contain several svg-files of pages, then files of pages will be created also in directory "C:\AsposeTests\" and have names 'output.svg', 'output_2.svg', 'output_3.svg' etc.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SvgSaveOptions.CompressOutputToZipArchive">
       
        <p>Specifies whether output will be created as one zip-archive. Please refer comment to 'TreatTargetFileNameAsDirectory' options to see rules of naming of svg-files of pages for multipage source document, that are also applied to zipped set of output files.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.SvgSaveOptions.EmbeddedImagesSavingStrategy">
       
        <p>To property of such type You can assygn delegate created from custom method that implements processing of external saving of image that was extracted from SVG created from PDF and must be saved as external resource during conversion of PDF to HTML. In such case processing (like self-made saving into stream or on disk) can be done in that custom code and that custom code must return path(or any another string without quotemarks) that will be afterwards incorporated into generated SVG instead of original supposed path to that image resource. In such case all the necessary actions for saving of image must be undertaken in code of supplied method, because saving of result in code of converter will be not in use. If processing for this or that file for some reason must be done by converter's code itself, not in custom code, please set in custom code flag 'CustomProcessingCancelled' of 'imageSavingInfo' parameter's variable It signals to converter that all the necessary steps for processing of that resource must be done in converter itself as if there was no any external custom code .</p> 
      
    </member>
    <member name="T:com.aspose.pdf.SvgSaveOptions.SvgExternalImageType">
       
        <p>enumerates possible types of image files that can be saved as external resources during during Pdf to SVG conversion</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SvgSaveOptions.SvgExternalImageType.Jpeg">
       
        <p>Jpeg</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SvgSaveOptions.SvgExternalImageType.Png">
       
        <p>Png</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SvgSaveOptions.SvgExternalImageType.Bmp">
       
        <p>Bmp</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SvgSaveOptions.SvgExternalImageType.Gif">
       
        <p>Gif</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SvgSaveOptions.SvgExternalImageType.Tiff">
       
        <p>Tiff</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SvgSaveOptions.SvgExternalImageType.Unknown">
       
        <p>Unknown - means that converter cannot detect type of content itself</p> 
      
    </member>
    <member name="T:com.aspose.pdf.SvgSaveOptions.SvgImageSavingInfo">
       
        <p>This class represents set of data that related to external resource image file's saving during PDF to HTML conversion.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.SvgSaveOptions.SvgImageSavingInfo.#ctor">
       
        <p>creates new instance of HtmlImageSavingInfo</p> 
      
    </member>
    <member name="F:com.aspose.pdf.SvgSaveOptions.SvgImageSavingInfo.ImageType">
       
        <p>represent type os saved image referenced in HTML. Set by converter and can be used in custom code to decide what should be done</p> 
      
    </member>
    <member name="T:com.aspose.pdf.Symbology">
       
        <p>A (Barcode) Symbology defines the technical details of a particular type of barcode: the width of the bars, character set, method of encoding, checksum specifications, etc.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.Symbology.PDF417">
       
        <p>A multi-row, variable-length 2D symbology with high data capacity and error-correction capability.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.Symbology.QRCode">
       
        <p>QR code (short for Quick Response) is a specific matrix barcode (2D code), readable by dedicated QR barcode readers and camera phones.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.Symbology.DataMatrix">
       
        <p>A 2D matrix symbology consisting of black and white square modules arranged in either a square or rectangular pattern.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.SystemFontSource">
      Represents all fonts installed to the system.
    </member>
    <member name="M:com.aspose.pdf.SystemFontSource.getFontDefinitions"/>
    <member name="M:com.aspose.pdf.SystemFontSource.equals(Object)">
      <param name="Object"/>
    </member>
    <member name="M:com.aspose.pdf.SystemFontSource.#ctor">
      Initializes a new instance of 
        <see cref="SystemFontSource"/> class.
      
    </member>
    <member name="T:com.aspose.pdf.Table">
       
        <p>Represents a table that can be added to the page.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Table.getColumnWidth(String)">
       
        <p>Get column width</p> @param stringColumnWidth The string representation.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Table.getHeight">
       
        <p>Get height.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Table.setColumnTextState(int,TextState)">
       
        <p>Set height.</p> @param colNumber The column number. @param textState The text state for column.
      
      <param name="int"/>
      <param name="TextState"/>
    </member>
    <member name="M:com.aspose.pdf.Table.deepClone">
      / * 
        <p>/ * Imports one-dimensional array of data into table. Import goes one cell per each array's item and / * starts from row and column defined in parameters. During import, if detected that necessary rows / * are still absent(i.e. target table is too small to absorb all data), necessary rows will be created / *</p> / * @param importedArray imported data, nulls will be imported as empty strings / * @param firstFilledRow define number of first target row in target table from wich import will start. / * If amount of rows in target table less then required, missing rows will be created first. / * @param firstFilledColumn specifies number of first target column in target table , column must be present in target table before start of import / * @param isLeftColumnsFilled If 'isLeftColumnsFilled'=false, then in second and all subsequent filled rows cells that are on the left hand from / * firstFilledColumn will be skipped /
      
    </member>
    <member name="M:com.aspose.pdf.Table.getBackgroundColor">
       
        <p>Gets or sets table background color</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Table.setBackgroundColor(Color)">
      <param name="Color"/>
    </member>
    <member name="M:com.aspose.pdf.Table.getCornerStyle">
       
        <p>Gets the styles of the border corners</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Table.setCornerStyle(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Table.getRepeatingRowsStyle">
       
        <p>Gets the style for repeating rows</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Table.setRepeatingRowsStyle(TextState)">
      <param name="TextState"/>
    </member>
    <member name="M:com.aspose.pdf.Table.getRepeatingRowsCount">
       
        <p>Gets the first rows count repeated for several pages</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Table.setRepeatingRowsCount(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Table.getColumnWidths">
       
        <p>Gets the column widths of the table.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Table.setColumnWidths(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Table.getBroken">
       
        <p>Gets table vertial broken.;</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Table.setBroken(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Table.getDefaultCellBorder">
       
        <p>Gets default cell border;</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Table.setDefaultCellBorder(BorderInfo)">
      <param name="BorderInfo"/>
    </member>
    <member name="M:com.aspose.pdf.Table.getDefaultColumnWidth">
       
        <p>Gets default cell border;</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Table.setDefaultColumnWidth(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.Table.getRows">
       
        <p>Gets the rows of the table.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Table.getBorder">
       
        <p>Gets or sets the border.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Table.setBorder(BorderInfo)">
      <param name="BorderInfo"/>
    </member>
    <member name="M:com.aspose.pdf.Table.getDefaultCellPadding">
       
        <p>Gets or sets the default cell padding.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Table.setDefaultCellPadding(MarginInfo)">
      <param name="MarginInfo"/>
    </member>
    <member name="M:com.aspose.pdf.Table.getDefaultCellTextState">
       
        <p>Gets or sets the default cell text state.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Table.setDefaultCellTextState(TextState)">
      <param name="TextState"/>
    </member>
    <member name="M:com.aspose.pdf.Table.getAlignment">
       
        <p>Gets or sets the table alignment.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Table.setAlignment(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.Table.getLeft">
       
        <p>Gets or sets the table left coordinate.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Table.setLeft(double)">
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Table.getTop">
       
        <p>Gets or sets the table top coordinate.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Table.setTop(double)">
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.Table.isBroken">
       
        <p>Gets or sets the table is broken - will be truncated for next page.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Table.isBroken(boolean)">
      <param name="boolean"/>
    </member>
    <member name="T:com.aspose.pdf.TableBroken">
       
        <p>Enumerates the table broken.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TableBroken.None">
       
        <p>No broken.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TableBroken.Vertical">
       
        <p>Vertical broken.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TableBroken.VerticalInSamePage">
       
        <p>Vertical broken in same page.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.TabOrder"/>
    <member name="F:com.aspose.pdf.TabOrder.None"/>
    <member name="F:com.aspose.pdf.TabOrder.Row"/>
    <member name="F:com.aspose.pdf.TabOrder.Column"/>
    <member name="F:com.aspose.pdf.TabOrder.Default"/>
    <member name="F:com.aspose.pdf.TabOrder.Manual"/>
    <member name="T:com.aspose.pdf.text.CustomFontSubstitutionBase">
       
        <p>Represents a base class for custom font substitution strategy.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.text.CustomFontSubstitutionBase.trySubstitute(OriginalFontSpecification,com.aspose.pdf.Font[])">
       
        <p>Substitutes original font with another font.</p> @return @param originalFontSpecification @param substitutionFont 
        <p>
          <hr>The class CustomFontSubstitutionBase should be inherited to implement custom font substitution logic. TrySubstitute method should be overridden properly: Must return true in case substitution is required. substitutionFont must be set to valid Font object. Must return false in case no substitution is required. substitutionFont may be set to null.</hr>
        </p> 
      
      <param name="OriginalFontSpecification"/>
      <param name="com.aspose.pdf.Font[]"/>
    </member>
    <member name="T:com.aspose.pdf.text.CustomFontSubstitutionBase.OriginalFontSpecification">
       
        <p>Represents original font specification.</p>
        <p>
          <hr>Provides info related to original font such as , flag. Also provides flag that helps to check is the substitution will anyway happen with the font and the user may override the default substitution logic.</hr>
        </p> @see OriginalFontName @see IsEmbedded @see IsSubstitutionUnavoidable
      
    </member>
    <member name="M:com.aspose.pdf.text.CustomFontSubstitutionBase.OriginalFontSpecification.getOriginalFontName">
       
        <p>Gets original font name.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.text.CustomFontSubstitutionBase.OriginalFontSpecification.isEmbedded">
       
        <p>Gets a value that indicates whether the font is embedded.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.text.CustomFontSubstitutionBase.OriginalFontSpecification.isSubstitutionUnavoidable">
       
        <p>Gets a value that indicates that the substitution is unavoidable.</p>
        <p>
          <hr>Returns true in case substitution was requested because of absence of the original font or in case original font cannot be used in context of some task. In case user ignores the flag and doesn't substitute the font - default font substitution procedure is performed. But it provides opportunity for the user to alternate standard font substitution procedure and set better font to the system. Returns false in case original font is present, valid, but it is allowed for the user to substitute it.</hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.text.CustomFontSubstitutionBase.OriginalFontSpecification.#ctor(String,boolean,boolean)">
       
        <p>Initializes new OriginalFontSpecification object.</p> 
      
      <param name="String"/>
      <param name="boolean"/>
      <param name="boolean"/>
    </member>
    <member name="T:com.aspose.pdf.text.FontSourceCollection">
      Represents font sources collection.
    </member>
    <member name="M:com.aspose.pdf.text.FontSourceCollection.size">
      Gets the number of 
        <see cref="Font"/> object elements actually contained in the collection.
      
    </member>
    <member name="M:com.aspose.pdf.text.FontSourceCollection.getSyncRoot">
      Gets an object that can be used to synchronize access to the collection.
    </member>
    <member name="M:com.aspose.pdf.text.FontSourceCollection.isSynchronized">
      Gets a value indicating whether access to the collection is synchronized (thread safe).
    </member>
    <member name="M:com.aspose.pdf.text.FontSourceCollection.iterator">
      Returns an enumerator for the entire collection. @return
    </member>
    <member name="M:com.aspose.pdf.text.FontSourceCollection.copyTo(Array,int)">
      Copies the entire collection to a compatible one-dimensional Array, starting at the specified index of the target array
      <param name="Array"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.text.FontSourceCollection.add(FontSource)">
      Adds new font source object to the collection. @param fontSource Font source.
      <param name="FontSource"/>
    </member>
    <member name="M:com.aspose.pdf.text.FontSourceCollection.clear">
      Clears the font source collection.
    </member>
    <member name="M:com.aspose.pdf.text.FontSourceCollection.delete(FontSource)">
      Deletes the font source element. @param fontSource
      <param name="FontSource"/>
    </member>
    <member name="M:com.aspose.pdf.text.FontSourceCollection.getItem(int)">
      Gets the font element at the specified index. @param index @return
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.text.FontSourceCollection.#ctor">
      Initializes collection object @return
    </member>
    <member name="F:com.aspose.pdf.text.FontSourceCollection.CollectionChanged"/>
    <member name="T:com.aspose.pdf.text.FontSubstitution">
       
        <p>Represents a base class fot font substitution strategies.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.text.FontSubstitution.getSubstitutedUnicode(char)">
       
        <p>Returns unicode substitution</p> @return @param unicode
      
      <param name="char"/>
    </member>
    <member name="M:com.aspose.pdf.text.FontSubstitution.#ctor"/>
    <member name="F:com.aspose.pdf.text.FontSubstitution.substitutionFontDefinition"/>
    <member name="T:com.aspose.pdf.text.FontTypes">
       
        <p>Supported font types enumeration.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.text.FontTypes.TTF">
       
        <p>TTF font type</p> 
      
    </member>
    <member name="F:com.aspose.pdf.text.FontTypes.OTF">
       
        <p>OTF font type</p> 
      
    </member>
    <member name="T:com.aspose.pdf.text.languages.LanguageTransformation">
       
        <p>Represents a language transformation object</p> 
      
    </member>
    <member name="M:com.aspose.pdf.text.languages.LanguageTransformation.getLanguageTransformation(String)">
       
        <p>Gets language transformation object</p> @return @param text
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.text.languages.LanguageTransformation.transform(String,boolean)">
       
        <p>Determines if the string contains chars of current language</p>
        <p>Performs transformation of the string</p> 
      
      <param name="String"/>
      <param name="boolean"/>
    </member>
    <member name="T:com.aspose.pdf.text.SimpleFontSubstitution">
       
        <p>Represents a class for simple font substitution strategy.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.text.SimpleFontSubstitution.getOriginalFontName">
       
        <p>Gets original font name that should be substituted with {@code SubstitutionFontName}</p> 
      
    </member>
    <member name="M:com.aspose.pdf.text.SimpleFontSubstitution.getSubstitutionFontName">
       
        <p>Gets font name that should substitute the {@code OriginalFontName}</p> 
      
    </member>
    <member name="M:com.aspose.pdf.text.SimpleFontSubstitution.getSubstitutedUnicode(char)">
      <param name="char"/>
    </member>
    <member name="M:com.aspose.pdf.text.SimpleFontSubstitution.#ctor(String,String)">
       
        <p>Initializes a new instance of {@code SimpleFontSubstitution} class.</p> @param originalFontName @param substitutionFontName
      
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.text.SubstitutionFontCategories">
       
        <p>Represents font categories that can be substituted.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.text.SubstitutionFontCategories.TheSameNamedEmbeddedFonts">
       
        <p>The fonts that are named the same as system fonts. Those fonts are mostly safe to be substituted with the same named system fonts.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.text.SubstitutionFontCategories.AllEmbeddedFonts">
       
        <p>All embedded fonts are substituted.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.text.SystemFontsSubstitution">
       
        <p>Represents a class for font substitution strategy that substitutes fonts with system fonts.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.text.SystemFontsSubstitution.getFontCategories">
       
        <p>Gets or sets substitution font categories that should be substituted with system fonts.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.text.SystemFontsSubstitution.setFontCategories(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.text.SystemFontsSubstitution.getDefaultFont">
       
        <p>Gets or sets default substitution font. The font is used when no other valid substitution were found but initial font belongs to target substitution category ({@code FontCategories}).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.text.SystemFontsSubstitution.setDefaultFont(Font)">
      <param name="Font"/>
    </member>
    <member name="M:com.aspose.pdf.text.SystemFontsSubstitution.#ctor(int)">
       
        <p>Initializes a new instance of {@code SystemFontsSubstitution} class.</p> @param fontCategories Target font categories to substitute with system fonts
      
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.text.TextProcessingContext">
       
        <p>Represents text processing context</p> 
      
    </member>
    <member name="M:com.aspose.pdf.text.TextProcessingContext.getInstance(IContext)">
      <param name="IContext"/>
    </member>
    <member name="M:com.aspose.pdf.text.TextProcessingContext.beginMassChanges"/>
    <member name="M:com.aspose.pdf.text.TextProcessingContext.endMassChanges"/>
    <member name="M:com.aspose.pdf.text.TextProcessingContext.isMassOperation"/>
    <member name="M:com.aspose.pdf.text.TextProcessingContext.registerFont(IPdfFont)">
      <param name="IPdfFont"/>
    </member>
    <member name="T:com.aspose.pdf.TextAbsorber">
       
        <p>Represents an absorber object of a text. Performs text extraction and provides access to the result via {@code TextAbsorber.Text} object.</p>
        <p>
          <hr>
            <blockquote>
              <pre>The example demonstrates how to extract text on the first PDF document page. 
                <pre lang="Java">// open document Document doc = new Document(inFile); // create TextAbsorber object to extract text TextAbsorber absorber = new TextAbsorber(); // accept the absorber for first page doc.getPages().get(1).accept(absorber); // get the extracted text String extractedText = absorber.getText();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p>
        <p>
          <hr>The {@code TextAbsorber} object is used to extract text from a Pdf document or the document's page.</hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextAbsorber.getText">
       
        <p>Gets extracted text that the {@code TextAbsorber} extracts on the PDF document or page.</p>
        <p>
          <hr>
            <blockquote>
              <pre>The example demonstrates how to extract text from all pages of the PDF document. 
                <pre lang="Java">// open document Document doc = new Document(inFile); // create TextAbsorber object to extract text TextAbsorber absorber = new TextAbsorber(); // accept the absorber for all document's pages doc.getPages().accept(absorber); // get the extracted text String extractedText = absorber.getText();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextAbsorber.visit(Page)">
       
        <p>Extracts text on the specified page</p>
        <p>
          <hr>
            <blockquote>
              <pre>The example demonstrates how to extract text on the first PDF document page. 
                <pre lang="Java">// open document Document doc = new Document(inFile); // create TextAbsorber object to extract text TextAbsorber absorber = new TextAbsorber(); // accept the absorber for all document's pages absorber.visit(doc.getPages(1)); // get the extracted text String extractedText = absorber.getText();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
      <param name="Page"/>
    </member>
    <member name="M:com.aspose.pdf.TextAbsorber.visit(XForm)">Extracts text on the specified XForm. &lt;/p&gt;&lt;p&gt;&lt;hr&gt;&lt;blockquote&gt;&lt;pre&gt; The example demonstrates how to extract text on the first PDF document page. &lt;pre lang="JAva"&gt; // open document Document doc = new Document(inFile); // create TextAbsorber object to extract text TextAbsorber absorber = new TextAbsorber(); // accept the absorber for all document's pages absorber.visit(doc.Pages().get(1).getResources().getForms().get("Xform1")); // get the extracted text String extractedText = absorber.getText(); &lt;/pre&gt; &lt;/pre&gt;&lt;/blockquote&gt;&lt;/hr&gt;&lt;/p&gt; @param form 
      <param name="XForm"/>
    </member>
    <member name="M:com.aspose.pdf.TextAbsorber.visit(IDocument)">
       
        <p>Extracts text on the specified document</p>
        <p>
          <hr>
            <blockquote>
              <pre>The example demonstrates how to extract text on PDF document. 
                <pre lang="Java">// open document Document doc = new Document(inFile); // create TextAbsorber object to extract text TextAbsorber absorber = new TextAbsorber(); // accept the absorber for all document's pages absorber.visit(doc); // get the extracted text String extractedText = absorber.getText();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
      <param name="IDocument"/>
    </member>
    <member name="M:com.aspose.pdf.TextAbsorber.getExtractionOptions">
       
        <p>Gets or sets text extraction options.</p>
        <p>
          <hr>
            <blockquote>
              <pre>The example demonstrates how to set Pure text formatting mode and perform text extraction. 
                <pre lang="Java">// open document Document doc = new Document(inFile); // create TextAbsorber object to extract text with formatting TextAbsorber absorber = new TextAbsorber(); // set pure text formatting mode absorber.setExtractionOptions ( new TextExtractionOptions(TextExtractionOptions.TextFormattingMode.Pure)); // accept the absorber for all document's pages doc.getPages().accept(absorber); // get the extracted text String extractedText = absorber.getText();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p>
        <p>
          <hr>Allows to define text formatting mode {@code TextExtractionOptions} during extraction. The default mode is {@code TextExtractionOptions.TextFormattingMode.Pure}</hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextAbsorber.setExtractionOptions(TextExtractionOptions)">
      <param name="TextExtractionOptions"/>
    </member>
    <member name="M:com.aspose.pdf.TextAbsorber.getTextSearchOptions">
      Gets or sets text search options.
        <remarks>Allows to define rectangle which delimits the extracted text. By default the rectangle is empty. That means page boundaries only defines the text extraction region.</remarks> @return
      
    </member>
    <member name="M:com.aspose.pdf.TextAbsorber.setTextSearchOptions(TextSearchOptions)">
      <param name="TextSearchOptions"/>
    </member>
    <member name="M:com.aspose.pdf.TextAbsorber.#ctor">
       
        <p>Initializes a new instance of the {@code TextAbsorber}.</p>
        <p>
          <hr>
            <blockquote>
              <pre>The example demonstrates how to extract text from all pages of the PDF document. 
                <pre lang="Java">// open document Document doc = new Document(inFile); // create TextAbsorber object to extract text TextAbsorber absorber = new TextAbsorber(); // accept the absorber for all document's pages doc.getPages().accept(absorber); // get the extracted text String extractedText = absorber.getText();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p>
        <p>
          <hr>Performs text extraction and provides access to the extracted text via {@code TextAbsorber.Text} object.</hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextAbsorber.#ctor(TextExtractionOptions)">
       
        <p>Initializes a new instance of the {@code TextAbsorber} with extraction options.</p>
        <p>
          <hr>
            <blockquote>
              <pre>The example demonstrates how to extract text from all pages of the PDF document. 
                <pre lang="Java">// open document Document doc = new Document(inFile); // create TextAbsorber object to extract text with formatting TextAbsorber absorber = new TextAbsorber(new TextExtractionOptions(TextExtractionOptions.TextFormattingMode.Pure)); // accept the absorber for all document's pages doc.getPages().accept(absorber); // get the extracted text String extractedText = absorber.getText();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p>
        <p>
          <hr>Performs text extraction and provides access to the extracted text via {@code TextAbsorber.Text} object.</hr>
        </p> 
      
      <param name="TextExtractionOptions"/>
    </member>
    <member name="T:com.aspose.pdf.TextAlignment">
       
        <p>Alignment of text in annotation.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextAlignment.Left">
       
        <p>Text is aligned to left.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextAlignment.Center">
       
        <p>Text is centered.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextAlignment.Right">
       
        <p>Text is aligned to right.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.TextAnnotation">
       
        <p>Represents a text annotation that is a �sticky note� attached to a point in the PDF document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextAnnotation.writeXfdf(XmlWriter)">
      <param name="XmlWriter"/>
    </member>
    <member name="M:com.aspose.pdf.TextAnnotation.getOpen">
       
        <p>Gets a flag specifying whether the annotation should initially be displayed open.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextAnnotation.setOpen(boolean)">
       
        <p>Sets a flag specifying whether the annotation should initially be displayed open.</p> 
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.TextAnnotation.getIcon">
       
        <p>Gets an icon to be used in displaying the annotation.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextAnnotation.setIcon(int)">
       
        <p>Sets an icon to be used in displaying the annotation.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TextAnnotation.getState">
       
        <p>Gets the state to which the original annotation should be set.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextAnnotation.setState(int)">
       
        <p>Sets the state to which the original annotation should be set.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TextAnnotation.accept(AnnotationSelector)">
       
        <p>Accepts visitor object to process the annotation.</p> @param visitor Visitor object.
      
      <param name="AnnotationSelector"/>
    </member>
    <member name="M:com.aspose.pdf.TextAnnotation.getStateModel"/>
    <member name="M:com.aspose.pdf.TextAnnotation.#ctor(Page,Rectangle)">
       
        <p>Creates new Text annotation on the specified page.</p> @param page The document's page where annotation should be created. @param rect The annotation rectangle, defining the location of the annotation on the page.
      
      <param name="Page"/>
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.TextAnnotation.#ctor"/>
    <member name="T:com.aspose.pdf.TextBoxField">
       
        <p>Class representing text box field.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextBoxField.getMultiline">
       
        <p>Gets multiline flag of the field. If Multiline is true field can contain multiple lines of text.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextBoxField.setMultiline(boolean)">
       
        <p>Sets multiline flag of the field. If Multiline is true field can contain multiple lines of text.</p> 
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.TextBoxField.getSpellCheck">
       
        <p>Gets spellcheck flag for field. If true field shall be spell checked.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextBoxField.setSpellCheck(boolean)">
       
        <p>Sets spellcheck flag for field. If true field shall be spell checked.</p> 
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.TextBoxField.getScrollable">
       
        <p>Gets scrollable flag of field. If true field can be scrolled.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextBoxField.setScrollable(boolean)">
       
        <p>Sets scrollable flag of field. If true field can be scrolled.</p> 
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.TextBoxField.getForceCombs">
       
        <p>Gets flag which indicates is field divided into spaced positions.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextBoxField.setForceCombs(boolean)">
       
        <p>Sets flag which indicates is field divided into spaced positions.</p> 
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.TextBoxField.getMaxLen">
       
        <p>Gets maximum length of text in the field.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextBoxField.setMaxLen(int)">
       
        <p>Sets maximum length of text in the field.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TextBoxField.getValue">
       
        <p>Gets value of the field.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextBoxField.setValue(String)">
       
        <p>Sets value of the field.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.TextBoxField.addImage(BufferedImage)">
       
        <p>Adds image into the field resources an draws it.</p> @param image Image to add into text field.
      
      <param name="BufferedImage"/>
    </member>
    <member name="M:com.aspose.pdf.TextBoxField.addBarcode(String)">
       
        <p>Adds barcode 128 into the field. Field value will be changed onto the code and field become read only.</p> @param code The text to generate barcode 128.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.TextBoxField.setJustification(boolean)">
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.TextBoxField.#ctor">
       
        <p>Create instance of TextBoxField.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextBoxField.#ctor(Page,Rectangle)">
       
        <p>Constructor of TextBox field.</p> @param page Page where text field is placed. @param rect Rectangle where the text field will be placed on the page.
      
      <param name="Page"/>
      <param name="Rectangle"/>
    </member>
    <member name="T:com.aspose.pdf.TextBuilder">
       
        <p>Appends text object to Pdf page.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextBuilder.getSegmenter"/>
    <member name="M:com.aspose.pdf.TextBuilder.appendParagraph(TextParagraph)">
       
        <p>Appends text paragraph to Pdf page.</p>
        <p>
          <hr>
            <blockquote>
              <pre>The example demonstrates how to create text paragraph object and append it to the Pdf page. 
                <pre lang="Java">Document doc = new Document(inFile); Page page = (Page)doc.getPages().get(1); // create text paragraph TextParagraph paragraph = new TextParagraph(); // set the paragraph rectangle paragraph.setRectangle ( new Rectangle(100, 600, 200, 700)); // set word wrapping options paragraph.getFormattingOptions().setWrapMode ( TextFormattingOptions.WordWrapMode.ByWords); // append string lines paragraph.appendLine("the quick brown fox jumps over the lazy dog"); paragraph.appendLine("line2"); paragraph.appendLine("line3"); // append the paragraph to the Pdf page with the TextBuilder TextBuilder textBuilder = new TextBuilder(page); textBuilder.appendParagraph(paragraph); // save Pdf document doc.save(outFile);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param textParagraph Text paragraph object.
      
      <param name="TextParagraph"/>
    </member>
    <member name="M:com.aspose.pdf.TextBuilder.appendText(TextFragment)">
       
        <p>Appends text fragment to Pdf page</p>
        <p>
          <hr>
            <blockquote>
              <pre>The example demonstrates how to create text fragment object, customize it's text segments and append it to the Pdf page. 
                <pre lang="Java">Document doc = new Document(inFile); Page page = (Page)doc.getPages().get(1); // create text fragment TextFragment tf = new TextFragment("main text"); tf.Position = new Position(100, 600); // set it's text properties tf.getTextState().setFontSize ( 5); tf.getTextState().setFont ( FontRepository.FindFont("TimesNewRoman")); tf.getTextState().setBackgroundColor ( Color.GREY); tf.getTextState().setForegroundColor ( Color.Red); // add one more segment to text fragment's Segments collection TextSegment segment2 = new TextSegment(); segment2.setText ( "another segment"); tf.getSegments.add(segment2); // create TextBuilder object TextBuilder builder = new TextBuilder(page); // append the text fragment to the Pdf page builder.appendText(tf); //save document doc.save(outFile);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param textFragment
      
      <param name="TextFragment"/>
    </member>
    <member name="M:com.aspose.pdf.TextBuilder.appendParagraph(TextParagraph,int)">
       
        <p>Appends paragraph with rotation</p> @param textParagraph @param rotation
      
      <param name="TextParagraph"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TextBuilder.#ctor(Page)">
       
        <p>Initializes a new instance of {@code TextBuilder} class for the Pdf page.</p>
        <p>
          <hr>The TextBuilder allows to append text objects to Pdf pages.</hr>
        </p> 
      
      <param name="Page"/>
    </member>
    <member name="M:com.aspose.pdf.TextBuilder.#ctor(Page,OperatorCollection)">Initializes a new instance of {@code TextBuilder} class for the Pdf page. p&gt;&lt;hr&gt; The TextBuilder allows to append text objects to Pdf pages. &lt;/hr&gt;&lt;/p&gt; @param page @param operatorCollection 
      <param name="Page"/>
      <param name="OperatorCollection"/>
    </member>
    <member name="T:com.aspose.pdf.TextEditOptions">
       
        <p>Descubes options of text edit operations.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextEditOptions.getNoCharacterBehavior">
       
        <p>Gets mode that defines behavior in case fonts don't contain requested characters.</p> @see NoCharacterAction
      
    </member>
    <member name="M:com.aspose.pdf.TextEditOptions.setNoCharacterBehavior(int)">
       
        <p>Sets mode that defines behavior in case fonts don't contain requested characters.</p> @see NoCharacterAction
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TextEditOptions.getFontReplaceBehavior">
      Gets mode that defines behavior for fonts replacement scenarios. @return @see FontReplace
    </member>
    <member name="M:com.aspose.pdf.TextEditOptions.setFontReplaceBehavior(int)">
      Sets mode that defines behavior for fonts replacement scenarios. @return @see FontReplace
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TextEditOptions.#ctor(int)">
       
        <p>Initializes new instance of the {@code TextEditOptions} object for the specified no-character behavior mode.</p> @param noCharacterBehavior @see NoCharacterAction
      
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.TextEditOptions.NoCharacterAction">
      / * 
        <p>/ * Initializes new instance of the {@code TextEditOptions} object for the specified text rearrangement mode. / *</p> / * @param rearrangementMode /
      
    </member>
    <member name="F:com.aspose.pdf.TextEditOptions.NoCharacterAction.ThrowException">
       
        <p>Throw exception</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextEditOptions.NoCharacterAction.UseStandardFont">
       
        <p>Repalce font to standard font which contains required character</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextEditOptions.NoCharacterAction.ReplaceAnyway">
       
        <p>Replace text anyway without font substitution</p> 
      
    </member>
    <member name="T:com.aspose.pdf.TextEditOptions.FontReplace">
       
        <p>Font replacement behavior.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextEditOptions.FontReplace.Default">
       
        <p>No additional changes performed during font replacement.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextEditOptions.FontReplace.RemoveUnusedFonts">
       
        <p>Fonts that become unused during font replacement will be removed from resulting document.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.TextElement">
       
        <p>General text element of document logical structure.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextElement.getText">
       
        <p>Gets the value of text structure element.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.TextEncodingInternal"/>
    <member name="M:com.aspose.pdf.TextEncodingInternal.getEncoding(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.TextEncodingInternal.toString(Encoding)">
      <param name="Encoding"/>
    </member>
    <member name="M:com.aspose.pdf.TextEncodingInternal.getNames"/>
    <member name="F:com.aspose.pdf.TextEncodingInternal.ASCII"/>
    <member name="F:com.aspose.pdf.TextEncodingInternal.BigEndianUnicode"/>
    <member name="F:com.aspose.pdf.TextEncodingInternal.Default"/>
    <member name="F:com.aspose.pdf.TextEncodingInternal.Unicode"/>
    <member name="F:com.aspose.pdf.TextEncodingInternal.UTF32"/>
    <member name="F:com.aspose.pdf.TextEncodingInternal.UTF32BE"/>
    <member name="F:com.aspose.pdf.TextEncodingInternal.UTF7"/>
    <member name="F:com.aspose.pdf.TextEncodingInternal.UTF8"/>
    <member name="F:com.aspose.pdf.TextEncodingInternal.UTF8Unmarked"/>
    <member name="T:com.aspose.pdf.TextExtractionOptions">
       
        <p>Represents text extraction options</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextExtractionOptions.getFormattingMode">
       
        <p>Gets formatting mode.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextExtractionOptions.setFormattingMode(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TextExtractionOptions.#ctor(int)">
       
        <p>Initializes new instance of the {@code TextExtractionOptions} object for the specified text formatting mode.</p> 
      
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.TextExtractionOptions.TextFormattingMode">
       
        <p>Defines different modes which can be used while converting pdf document into text. See {@code TextDevice} class.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextExtractionOptions.TextFormattingMode.Pure">
       
        <p>Represent pdf content with a bit of formatting routines.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextExtractionOptions.TextFormattingMode.Raw">
       
        <p>Represent pdf content as is, i.e. without formatting.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.TextFormattingOptions">
       
        <p>Represents text formatting options</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextFormattingOptions.getWrapMode">
       
        <p>Gets word wrap mode. Default value is WordWrapMode.NoWrap</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextFormattingOptions.setWrapMode(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TextFormattingOptions.#ctor(int)">
       
        <p>Initializes new instance of the {@code TextFormattingOptions} object for the specified word wrap mode.</p> 
      
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.TextFormattingOptions.WordWrapMode">
       
        <p>Defines word wrapping strategies</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextFormattingOptions.WordWrapMode.NoWrap">
       
        <p>No wrapping is performed</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextFormattingOptions.WordWrapMode.DiscretionaryHyphenation">
       
        <p>Discretionary hyphenation is performed. Allows breaking words in the middle.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextFormattingOptions.WordWrapMode.ByWords">
       
        <p>Word wrapping only wraps complete words. If the complete word cannot be wrapped, attempts to use discretionary hyphenation</p> 
      
    </member>
    <member name="T:com.aspose.pdf.TextFragment">
       
        <p>Represents fragment of Pdf text.</p>
        <p>
          <hr>
            <blockquote>
              <pre>The example demonstrates how to find text on the first PDF document page and replace the text and it's font. 
                <pre lang="Java">// Open document Document doc = new Document("D:\\Tests\\input.pdf"); // Find font that will be used to change document text font Font font = FontRepository.findFont("Arial"); // Create TextFragmentAbsorber object to find all "hello world" text occurrences TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world"); // Accept the absorber for first page doc.getPages().get(1).accept(absorber); // Change text and font of the first text occurrence absorber.getTextFragments().get_Item(1).setText ( "hi world"); absorber.getTextFragments().get_Item(1).getTextState().setFont ( font); // Save document doc.save("D:\Tests\output.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p>
        <p>
          <hr>In a few words, {@code TextFragment} object contains list of {@code TextSegment} objects. In details: Text of pdf document in {@code Aspose.Pdf} is represented by two basic objects: {@code TextFragment} and {@code TextSegment} The differences between them is mostly context-dependent. Let's consider following scenario. User searches text "hello world" to operate with it, change it's properties, look etc. 
            <pre lang="Java">Document doc = new Document(docFile); TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world"); doc.getPages().get(1).accept(absorber);</pre> Phisycally pdf text's representation is very complex. The text "hello world" may consist of several phisycally independent text segments. The Aspose.Pdf text model basically establishes that {@code TextFragment} object provides single logic operation set over physical {@code TextSegment} objects set that represent user's query. In text search scenario, {@code TextFragment} is logical "hello world" text representation, and {@code TextSegment} object collection represents all physical segments that construct "hello world" text object. So, {@code TextFragment} is close to logical text representation. And {@code TextSegment} is close to physical text representation. Obviously each {@code TextSegment} object may have it's own font, coloring, positioning properties. {@code TextFragment} provides simple way to change text with it's properties: set font, set font size, set font color etc. Meanwhile {@code TextSegment} objects are accessible and users are able to operate with {@code TextSegment} objects independently. Note that changing TextFragment properties may change inner {@code Segments} collection because TextFragment is an aggregate object and it may rearrange internal segments or merge them into single segment. If your requirement is to leave the {@code Segments} collection unchanged, please change inner segments individually.
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextFragment.getText">
       
        <p>Gets or sets {@code string} text object that the {@code TextFragment} object represents.</p>
        <p>
          <hr>
            <blockquote>
              <pre>The example demonstrates how to search a text and replace first occurrence represented with {@code TextFragment} object . 
                <pre lang="Java">// Open document Document doc = new Document("D:\\Tests\\input.pdf"); // Create TextFragmentAbsorber object to find all "hello world" text occurrences TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world"); // Accept the absorber for first page doc.getPages().get(1).accept(absorber); // Change font of the first text occurrence absorber.getTextFragments().get_Item(1).setText ( "hi world"); // Save document doc.save("D:\\Tests\\output.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @see TextFragmentAbsorber @see IDocument
      
    </member>
    <member name="M:com.aspose.pdf.TextFragment.setText(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragment.setVerticalAlignment(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragment.getHorizontalAlignment">
       
        <p>Gets or sets a horizontal alignment of text fragment.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextFragment.setHorizontalAlignment(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragment.getTextState">
       
        <p>Gets or sets text state for the text that {@code TextFragment} object represents.</p>
        <p>
          <hr>
            <blockquote>
              <pre>The example demonstrates how to change text color and font size of the text with {@code TextState} object. 
                <pre lang="Java">// Open document Document doc = new Document("D:\\Tests\\input.pdf"); // Create TextFragmentAbsorber object to find all "hello world" text occurrences TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world"); // Accept the absorber for first page doc.getPages().get(1).accept(absorber); // Change foreground color of the first text occurrence absorber.getTextFragments().get_Item(1).getTextState().setForegroundColor(Color.RED); // Change font size of the first text occurrence absorber.getTextFragments().get_Item(1).getTextState().setFontSize ( 15); // Save document doc.save("D:\\Tests\\output.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p>
        <p>
          <hr>Provides a way to change following properties of the text: Font FontSize FontStyle ForegroundColor BackgroundColor</hr>
        </p> @see TextFragmentAbsorber @see IDocument
      
    </member>
    <member name="M:com.aspose.pdf.TextFragment.getSegments">&lt;p&gt; Gets text segments for current {@code TextFragment}. &lt;/p&gt;&lt;p&gt;&lt;hr&gt;&lt;blockquote&gt;&lt;pre&gt; The example demonstrates how to navigate all {@code TextSegment} objects inside {@code TextFragment}. &lt;pre lang="Java"&gt; // Open document Document doc = new Document("D:\\Tests\\input.pdf"); // Create TextFragmentAbsorber object to find all "hello world" text occurrences TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world"); // Accept the absorber for first page doc.getPages().get(1).accept(absorber); // Navigate all text segments and out their text and placement info for (TextSegment segment : (Iterable&lt;TextSegment&gt;)absorber.getTextFragments().get_Item(1).getSegments()) { System.out.println("segment text: "+ segment.getText())); System.out.println("segment X indent: "+ segment.getPosition().getXIndent())); System.out.println("segment Y indent: "+ segment.getPosition().getYIndent())); } &lt;/pre&gt; &lt;/pre&gt;&lt;/blockquote&gt;&lt;/hr&gt;&lt;/p&gt;&lt;p&gt;&lt;hr&gt; In a few words, {@code TextSegment} objects are children of {@code TextFragment} object. Advanced users may access segments directly to perform more complex text edit scenarios. For details, please look at {@code TextFragment} object description. &lt;/hr&gt;&lt;/p&gt; @see TextFragmentAbsorber @see IDocument @see TextSegment</member>
    <member name="M:com.aspose.pdf.TextFragment.setSegments(TextSegmentCollection)">
      <param name="TextSegmentCollection"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragment.getPosition">
       
        <p>Gets text position for text, represented with {@code TextFragment} object.</p>
        <p>
          <hr>
            <blockquote>
              <pre>The example demonstrates how to view placement of a text, represented by {@code TextFragment} object. 
                <pre lang="Java">// Open document Document doc = new Document("D:\\Tests\\input.pdf"); // Create TextFragmentAbsorber object to find all "hello world" text occurrences TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world"); // Accept the absorber for first page doc.getPages().get(1).accept(absorber); // View text and placement info of first text occurrence TextFragment firstOccurrence = absorber.getTextFragments().get_Item(1); System.out.println("fragment text: " + firstOccurrence.getText())); System.out.println("fragment X indent: "+ firstOccurrence.getPosition().getXIndent())); System.out.println("fragment Y indent: "+ firstOccurrence.getPosition().getYIndent()));</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @see TextFragmentAbsorber @see IDocument @see TextSegment
      
    </member>
    <member name="M:com.aspose.pdf.TextFragment.setPosition(Position)">
      <param name="Position"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragment.getBaselinePosition">
       
        <p>Gets text position for text, represented with {@code TextFragment} object. The YIndent of the Position structure represents baseline coordinate of the text fragment.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextFragment.setBaselinePosition(Position)">
      <param name="Position"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragment.getRectangle">
       
        <p>returns rectangle of the TextFragment</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextFragment.getPage">
      Gets page that contains the TextFragment
        <br/> The value can be null in case the TextFragment object doesn't belong to any page. @return
      
    </member>
    <member name="M:com.aspose.pdf.TextFragment.getForm">
      Gets form object that contains the TextFragment
        <br/> The value can be null in case the TextFragment object doesn't belong to a form. @return
      
    </member>
    <member name="M:com.aspose.pdf.TextFragment.getPlacementInfo">
      Gets placement info @return
    </member>
    <member name="M:com.aspose.pdf.TextFragment.setPlacementInfo(NewParagraphPlacementInfo)">
      Sets placement info @return
      <param name="NewParagraphPlacementInfo"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragment.#ctor">
       
        <p>Initializes new instance of the {@code TextFragment} object.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextFragment.#ctor(String)">
       
        <p>Creates {@code TextFragment} object with single {@code TextSegment} object inside. Specifies text string inside the segment.</p> @param text Text fragment's text.
      
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.TextFragmentAbsorber">
       
        <p>Represents an absorber object of text fragments. Performs text search and provides access to search results via {@code TextFragmentAbsorber.TextFragments} collection.</p>
        <p>
          <hr>
            <blockquote>
              <pre>The example demonstrates how to find text on the first PDF document page and replace the text and it's font. 
                <pre lang="Java">// Open document Document doc = new Document("D:\\Tests\\input.pdf"); // Find font that will be used to change document text font com.aspose.pdf.Font font = FontRepository.findFont("Arial"); // Create TextFragmentAbsorber object to find all "hello world" text occurrences TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world"); // Accept the absorber for first page doc.getPages().get(1).accept(absorber); // Change text and font of the first text occurrence absorber.getTextFragments().get_Item(1).setText ( "hi world"); absorber.getTextFragments().get_Item(1).getTextState().setFont ( font); // Save document doc.save("D:\\Tests\\output.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p>
        <p>
          <hr>The {@code TextFragmentAbsorber} object is basically used in text search scenario. When the search is completed the occurrences are represented with {@code TextFragment} objects that the {@code TextFragmentAbsorber.TextFragments} collection contains. The {@code TextFragment} object provides access to the search occurrence text, text properties, and allows to edit text and change the text state (font, font size, color etc).</hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextFragmentAbsorber.getTextFragments">&lt;p&gt; Gets collection of search occurrences that are presented with {@code TextFragment} objects. &lt;/p&gt;&lt;p&gt;&lt;hr&gt;&lt;blockquote&gt;&lt;pre&gt; The example demonstrates how to find text on the first PDF document page and replace all search occurrences with new text. &lt;pre lang="Java"&gt; // Open document Document doc = new Document("D:\\Tests\\input.pdf"); // Find font that will be used to change document text font Font font = FontRepository.findFont("Arial"); // Create TextFragmentAbsorber object to find all "hello world" text occurrences TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world"); // Accept the absorber for first page doc.getPages().get(1).accept(absorber); // Change text of all search occurrences for (TextFragment textFragment : (Iterable&lt;TextFragment&gt;)absorber.getTextFragments()) { textFragment.setText ( "hi world"); } // Save document doc.save("D:\\Tests\\output.pdf"); &lt;/pre&gt; &lt;/pre&gt;&lt;/blockquote&gt;&lt;/hr&gt;&lt;/p&gt;</member>
    <member name="M:com.aspose.pdf.TextFragmentAbsorber.setTextFragments(TextFragmentCollection)">&lt;p&gt; Sets collection of search occurrences that are presented with {@code TextFragment} objects. 
      <param name="TextFragmentCollection"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentAbsorber.getPhrase">
       
        <p>Gets phrase that the {@code TextFragmentAbsorber} searches on the PDF document or page.</p>
        <p>
          <hr>
            <blockquote>
              <pre>The example demonstrates how to perform search text several times and perform text replacements. 
                <pre lang="JAva">// Open document Document doc = new Document("D:\\Tests\\input.pdf"); // Create TextFragmentAbsorber object to find all "hello" text occurrences TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello"); doc.getPages().get(1).accept(absorber); absorber.getTextFragments().get_Item(1).setText ( "Hi"); // search another word and replace it absorber.setPhrase ( "world"); doc.getPages().get(1).accept(absorber); absorber.getTextFragments().get_Item(1).setText ( "John"); // Save document doc.save("D:\\Tests\\output.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextFragmentAbsorber.setPhrase(String)">
       
        <p>Gets phrase that the {@code TextFragmentAbsorber} searches on the PDF document or page.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentAbsorber.getTextSearchOptions">
       
        <p>Gets search options. The options enable search using regular expressions.</p>
        <p>
          <hr>
            <blockquote>
              <pre>The example demonstrates how to perform search text using regular expression. 
                <pre lang="Java">// Open document Document doc = new Document("D:\\Tests\\input.pdf"); // Create TextFragmentAbsorber object TextFragmentAbsorber absorber = new TextFragmentAbsorber(); // make the absorber to search all words starting 'h' and ending 'o' using regular expression. absorber.setPhrase ( "h\w*?o"); absorber.setTextSearchOptions ( new TextSearchOptions(true)); // we should find "hello" word and replace it with "Hi" doc.getPages().get(1).accept(absorber); absorber.getTextFragments().get_Item(1).setText ( "Hi"); // Save document doc.save("D:\\Tests\\output.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextFragmentAbsorber.setTextSearchOptions(TextSearchOptions)">
       
        <p>Sets search options. The options enable search using regular expressions.</p> 
      
      <param name="TextSearchOptions"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentAbsorber.getTextEditOptions">
       
        <p>Gets text edit options. The options define special behavior when requested symbol cannot be written with font.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextFragmentAbsorber.setTextEditOptions(TextEditOptions)">
       
        <p>Sets text edit options. The options define special behavior when requested symbol cannot be written with font.</p> 
      
      <param name="TextEditOptions"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentAbsorber.visit(Page)">&lt;p&gt; Performs search on the specified page. &lt;/p&gt;&lt;p&gt;&lt;hr&gt;&lt;blockquote&gt;&lt;pre&gt; The example demonstrates how to find text on the first PDF document page and replace the text. &lt;pre lang="Java"&gt; // Open document Document doc = new Document("D:\\Tests\\input.pdf"); // Find font that will be used to change document text font Font font = FontRepository.findFont("Arial"); // Create TextFragmentAbsorber object to find all "hello world" text occurrences TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world"); // Accept the absorber for first page absorber.visit(doc.getPages().get(1)); // Change text of all search occurrences for (TextFragment textFragment : (Iterable&lt;TextFragment&gt;)absorber.getTextFragments()) { textFragment.setText ( "hi world"); } // Save document doc.save("D:\\Tests\\output.pdf"); &lt;/pre&gt; &lt;/pre&gt;&lt;/blockquote&gt;&lt;/hr&gt;&lt;/p&gt; 
      <param name="Page"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentAbsorber.visit(IDocument)">
       
        <p>Performs search on the specified document.</p>
        <p>
          <hr>
            <blockquote>
              <pre>The example demonstrates how to find text on PDF document and replace text of all search occurrences. 
                <pre lang="Java">// Open document Document doc = new Document("D:\\Tests\\input.pdf"); // Find font that will be used to change document text font Font font = FontRepository.findFont("Arial"); // Create TextFragmentAbsorber object to find all "hello world" text occurrences TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world"); // Accept the absorber for first page absorber.visit(doc); // Change text of the first text occurrence absorber.getTextFragments().get_Item(1).setText ( "hi world"); // Save document doc.save("D:\\Tests\\output.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
      <param name="IDocument"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentAbsorber.visit(XForm)">
       
        <p>Performs search on the specified form object.</p> 
      
      <param name="XForm"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentAbsorber.getExtractionOptions">
       
        <p>Gets or sets text extraction options.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextFragmentAbsorber.setExtractionOptions(TextExtractionOptions)">
      <param name="TextExtractionOptions"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentAbsorber.#ctor">
       
        <p>Initializes a new instance of the {@code TextFragmentAbsorber} that performs search of all text segments of the document or page.</p>
        <p>
          <hr>
            <blockquote>
              <pre>The example demonstrates how to find text on the first PDF document page and replace the text. 
                <pre lang="Java">// Open document Document doc = new Document("D:\\Tests\\input.pdf"); // Find font that will be used to change document text font Font font = FontRepository.findFont("Arial"); // Create TextFragmentAbsorber object TextFragmentAbsorber absorber = new TextFragmentAbsorber(); // Make the absorber to search all "hello world" text occurrences absorber.setPhrase ( "hello world"); // Accept the absorber for first page doc.getPages().get(1).accept(absorber); // Change text of the first text occurrence absorber.getTextFragments().get_Item(1).setText ( "hi world"); // Save document doc.save("D:\\Tests\\output.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p>
        <p>
          <hr>Performs text search and provides access to search results via {@code TextFragmentAbsorber.TextFragments} collection.</hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextFragmentAbsorber.#ctor(TextEditOptions)">&lt;p&gt; Initializes a new instance of the {@code TextFragmentAbsorber} with text edit options, that performs search of all text segments of the document or page. &lt;/p&gt;&lt;p&gt;&lt;hr&gt;&lt;blockquote&gt;&lt;pre&gt; The example demonstrates how to find all text fragments on the first PDF document page and replace font for them. &lt;pre lang="Java"&gt; // Open document Document doc = new Document("D:\\Tests\\input.pdf"); // Create TextFragmentAbsorber object TextFragmentAbsorber absorber = new TextFragmentAbsorber(new TextEditOptions(TextEditOptions.FontReplace.RemoveUnusedFonts)); // Accept the absorber for first page doc.getPages()get(1).accept(absorber); // Find Courier font Font font = FontRepository.findFont("Courier"); // Set the font for all the text fragments for (TextFragment textFragment : (Iterable&lt;TextFragment&gt;)absorber.TextFragments) { textFragment.getTextState().setFont ( font); } // Save document doc.save("D:\\Tests\\output.pdf"); &lt;/pre&gt; &lt;/pre&gt;&lt;/blockquote&gt;&lt;/hr&gt;&lt;/p&gt; @param textEditOptions Text edit options (Allows to turn on some edit features). &lt;p&gt;&lt;hr&gt; Performs text search and provides access to search results via {@code TextFragmentAbsorber.TextFragments} collection. &lt;/hr&gt;&lt;/p&gt; 
      <param name="TextEditOptions"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentAbsorber.#ctor(String)">
       
        <p>Initializes a new instance of the {@code TextFragmentAbsorber} class for the specified text phrase.</p>
        <p>
          <hr>
            <blockquote>
              <pre>The example demonstrates how to find text on the first PDF document page and replace the text and it's font. 
                <pre lang="Java">// Open document Document doc = new Document("D:\\Tests\\input.pdf"); // Find font that will be used to change document text font com.aspose.pdf.Font font = FontRepository.findFont("Arial"); // Create TextFragmentAbsorber object to find all "hello world" text occurrences TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world"); // Accept the absorber for first page doc.getPages().get(1).accept(absorber); // Change text and font of the first text occurrence absorber.getTextFragments().get_Item(1).setText ( "hi world"); absorber.getTextFragments().get_Item(1).getTextState().setFont ( font); // Save document doc.save("D:\\Tests\\output.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param phrase Phrase that the {@code TextFragmentAbsorber} searches 
        <p>
          <hr>Performs text search of the specified phrase and provides access to search results via {@code TextFragmentAbsorber.TextFragments} collection.</hr>
        </p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentAbsorber.#ctor(String,TextSearchOptions)">
       
        <p>Initializes a new instance of the {@code TextFragmentAbsorber} class for the specified text phrase and text search options.</p>
        <p>
          <hr>
            <blockquote>
              <pre>The example demonstrates how to find text with regular expression on the first PDF document page and replace the text. 
                <pre lang="Java">// Open document Document doc = new Document("D:\\Tests\\input.pdf"); // Create TextFragmentAbsorber object that seatches all words starting 'h' and ending 'o' using regular expression. TextFragmentAbsorber absorber = new TextFragmentAbsorber("h\w*?o", new TextSearchOptions(true)); // we should find "hello" word and replace it with "Hi" doc.getPages().get(1).accept(absorber); absorber.getTextFragments().get_Item(1).setText ( "Hi"); // Save document doc.save("D:\\Tests\\output.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param phrase Phrase that the {@code TextFragmentAbsorber} searches @param textSearchOptions Text search options (Allows to turn on some search features. For example, search with regular expression)
        <p>
          <hr>Performs text search of the specified phrase and provides access to search results via {@code TextFragmentAbsorber.TextFragments} collection.</hr>
        </p> 
      
      <param name="String"/>
      <param name="TextSearchOptions"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentAbsorber.#ctor(String,TextSearchOptions,TextEditOptions)">
       
        <p>Initializes a new instance of the {@code TextFragmentAbsorber} class for the specified text phrase, text search options and text edit options. The text edit options are not supported yet.</p>
        <p>
          <hr>
            <blockquote>
              <pre>The example demonstrates how to find text with regular expression on the first PDF document page and replace the text. 
                <pre lang="Java">// Open document Document doc = new Document("D:\\Tests\\input.pdf"); // Create TextFragmentAbsorber object that seatches all words starting 'h' and ending 'o' using regular expression. TextFragmentAbsorber absorber = new TextFragmentAbsorber("h\w*?o", new TextSearchOptions(true)); // we should find "hello" word and replace it with "Hi" doc.getPages().get(1).accept(absorber); absorber.getTextFragments().get_Item(1).setText ( "Hi"); // Save document doc.save("D:\\Tests\\output.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param phrase Phrase that the {@code TextFragmentAbsorber} searches @param textSearchOptions Text search options (Allows to turn on some search features. For example, search with regular expression) @param textEditOptions Text edit options (Allows to turn on some edit features. For example, define special behavior when requested symbol cannot be written with font). The parameter is not supported yet.
        <p>
          <hr>Performs text search of the specified phrase and provides access to search results via {@code TextFragmentAbsorber.TextFragments} collection.</hr>
        </p> 
      
      <param name="String"/>
      <param name="TextSearchOptions"/>
      <param name="TextEditOptions"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentAbsorber.#ctor(String,TextEditOptions)">
       
        <p>Initializes a new instance of the {@code TextFragmentAbsorber} class for the specified text phrase and text edit options.</p> @param phrase Phrase that the {@code TextFragmentAbsorber} searches @param textEditOptions Text edit options (Allows to turn on some edit features).
        <p>
          <hr>Performs text search of the specified phrase and provides access to search results via {@code TextFragmentAbsorber.TextFragments} collection.</hr>
        </p> 
      
      <param name="String"/>
      <param name="TextEditOptions"/>
    </member>
    <member name="T:com.aspose.pdf.TextFragmentCollection">
       
        <p>Represents a text fragments collection</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextFragmentCollection.size">
       
        <p>Gets the number of {@code TextFragment} object elements actually contained in the collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextFragmentCollection.getSyncRoot">
       
        <p>Gets an object that can be used to synchronize access to the collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextFragmentCollection.isSynchronized">
       
        <p>Gets a value indicating whether access to the collection is synchronized (thread safe).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextFragmentCollection.iterator">
       
        <p>Returns an enumerator for the entire collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextFragmentCollection.copyTo(Array,int)">
       
        <p>Copies the entire collection to a compatible one-dimensional Array, starting at the specified index of the target array</p> 
      
      <param name="Array"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentCollection.get_Item(int)">
       
        <p>Gets the text fragment element at the specified index.</p> @return @param index
      
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.TextFragmentState">
       
        <p>Represents a text state of a text fragment.</p>
        <p>
          <hr>
            <blockquote>
              <pre>The example demonstrates how to change text color and font size of the text with {@code TextState} object. 
                <pre lang="Java">// Open document Document doc = new Document("D:\\Tests\\input.pdf"); // Create TextFragmentAbsorber object to find all "hello world" text occurrences TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world"); // Accept the absorber for first page doc.getPages().get(1).accept(absorber); // Change foreground color of the first text occurrence absorber.TgetextFragments().get(1).getTextState().setForegroundColor ( java.awt.Color.RED); // Change font size of the first text occurrence absorber.getTextFragments().get(1).getTextState().setFontSize ( 15); // Save document doc.save("D:\\Tests\\output.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p>
        <p>
          <hr>Provides a way to change following properties of the text: font ({@code TextFragmentState.Font} property) font size ({@code TextFragmentState.FontSize} property) font style ({@code TextFragmentState.FontStyle} property) foreground color ({@code TextFragmentState.ForegroundColor} property) background color ({@code TextFragmentState.BackgroundColor} property) Note that changing {@code TextFragmentState} properties may change inner {@code TextFragment.Segments} collection because TextFragment is an aggregate object and it may rearrange internal segments or merge them into single segment. If your requirement is to leave the {@code TextFragment.Segments} collection unchanged, please change inner segments individually.</hr>
        </p> @see TextFragmentAbsorber @see IDocument
      
    </member>
    <member name="M:com.aspose.pdf.TextFragmentState.setCharacterSpacing(float)">
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentState.getHorizontalScaling"/>
    <member name="M:com.aspose.pdf.TextFragmentState.setHorizontalScaling(float)">
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentState.getWordSpacing"/>
    <member name="M:com.aspose.pdf.TextFragmentState.setWordSpacing(float)">
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentState.getLineSpacing">
       
        <p>Gets or sets line spacing of the text.</p>
        <p>
          <hr>Note that the value is not preserved as a text characteristic within the document. The LineSpacing property getter works for an object in case it was explicitly set previously with LineSpacing setter for those object. The property is used by runtime in context of current generation/modification process.</hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextFragmentState.setLineSpacing(float)">
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentState.getForegroundColor">
       
        <p>Gets foreground color of the text, represented by the {@code TextFragment} object</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextFragmentState.setForegroundColor(Color)">
       
        <p>Gets or sets foreground color of the text, represented by the {@code TextFragment} object</p> 
      
      <param name="Color"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentState.setBackgroundColor(com.aspose.pdf.Color)">
       
        <p>Sets background color of the text, represented by the {@code TextFragment} object</p> 
      
      <param name="com.aspose.pdf.Color"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentState.setUnderline(boolean)">
       
        <p>Sets underline for the text, represented by the {@code TextFragment} object</p> 
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentState.setFontStyle(int)">
       
        <p>Sets font style of the text, represented by the {@code TextFragment} object</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentState.getFont">
       
        <p>Gets font of the text, represented by the {@code TextFragment} object</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextFragmentState.setFont(Font)">
       
        <p>Sets font of the text, represented by the {@code TextFragment} object</p> 
      
      <param name="Font"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentState.getFontSize">
       
        <p>Gets font size of the text, represented by the {@code TextFragment} object</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextFragmentState.setFontSize(float)">
       
        <p>Sets font size of the text, represented by the {@code TextFragment} object</p> 
      
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentState.getHorizontalAlignment">
       
        <p>Gets or sets horizontal alignment for the text.</p>
        <p>
          <hr>HorizontalAlignment.None is equal to HorizontalAlignment.Left. Note that TextFragmentState.VerticalAlignment property works in new document deneration generation scenarios only.</hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextFragmentState.setHorizontalAlignment(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentState.applyChangesFrom(TextState)">
       
        <p>Applies settings from another textState</p> @param textState
      
      <param name="TextState"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentState.applyChangesFrom(TextState,boolean)">
       
        <p>Applies settings from another textState</p> @param textState @param groupChangesOnly if true inherit group changes only (without isolating the segments into single segment)
      
      <param name="TextState"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.TextFragmentState.#ctor(TextFragment)">
       
        <p>Initializes new instance of the {@code TextFragmentState} object with specified {@code TextFragment} object. This {@code TextFragmentState} initialization is not supported. TextFragmentState is only available with {@code TextFragment.TextState} property.</p> 
      
      <param name="TextFragment"/>
    </member>
    <member name="T:com.aspose.pdf.TextIcon">
       
        <p>Enumerates the icons to be used in displaying the annotation.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextIcon.Note">
       
        <p>Note icon.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextIcon.Comment">
       
        <p>Comment icon.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextIcon.Key">
       
        <p>Key icon.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextIcon.Help">
       
        <p>Help icon.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextIcon.NewParagraph">
       
        <p>NewParagraph icon.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextIcon.Paragraph">
       
        <p>Paragraph icon.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextIcon.Insert">
       
        <p>Insert icon.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextIcon.Check">
       
        <p>Check icon.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.TextIconConverter"/>
    <member name="M:com.aspose.pdf.TextIconConverter.toString(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TextIconConverter.toEnum(String)">
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.TextMarkupAnnotation">
       
        <p>Abstract base class for text markup annotations.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextMarkupAnnotation.getQuadPoints">
       
        <p>Gets an array of points specifying the coordinates of n quadrilaterals. Each quadrilateral encompasses a word or group of contiguous words in the text underlying the annotation.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextMarkupAnnotation.setQuadPoints(Point[])">
       
        <p>Sets an array of points specifying the coordinates of n quadrilaterals. Each quadrilateral encompasses a word or group of contiguous words in the text underlying the annotation.</p> 
      
      <param name="Point[]"/>
    </member>
    <member name="T:com.aspose.pdf.TextOptions">
       
        <p>Represents text processing options</p> 
      
    </member>
    <member name="T:com.aspose.pdf.TextParagraph">
       
        <p>Represents text paragraphs as multiline text object.</p>
        <p>
          <hr>
            <blockquote>
              <pre>The example demonstrates how to create text paragraph object and append it to the Pdf page. 
                <pre lang="Java">Document doc = new Document(inFile); Page page = (Page)doc.getPages().get(1); // create text paragraph TextParagraph paragraph = new TextParagraph(); // set the paragraph rectangle paragraph.setRectangle ( new Rectangle(100, 600, 200, 700)); // set word wrapping options paragraph.getFormattingOptions().setWrapMode ( TextFormattingOptions.WordWrapMode.ByWords); // append string lines paragraph.apendLine("the quick brown fox jumps over the lazy dog"); paragraph.appendLine("line2"); paragraph.appendLine("line3"); // append the paragraph to the Pdf page with the TextBuilder TextBuilder textBuilder = new TextBuilder(page); textBuilder.appendParagraph(paragraph); // save Pdf document doc.save(outFile);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextParagraph.setBackgroundColor(com.aspose.pdf.Color)">
       
        <p>Sets background color for the text paragraph.</p> 
      
      <param name="com.aspose.pdf.Color"/>
    </member>
    <member name="M:com.aspose.pdf.TextParagraph.setVerticalAlignment(int)">
       
        <p>Sets vertical alignment for the text inside paragrph's {@code Rectangle}.</p>
        <p>
          <hr>VerticalAlignment.None is equal to VerticalAlignment.Bottom.</hr>
        </p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TextParagraph.getSubsequentLinesIndent">
       
        <p>Gets or sets subsequent lines indent value.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextParagraph.setSubsequentLinesIndent(float)">
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.TextParagraph.getJustify">
       
        <p>Gets value whether text is justified.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextParagraph.setJustify(boolean)">
       
        <p>Sets value whether text is justified.</p> 
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.TextParagraph.getHorizontalAlignment">
      Gets or sets horizontal alignment for the text inside paragrph's 
        <see cref="Rectangle"/>. 
        <remarks>HorizontalAlignment.None is equal to HorizontalAlignment.Left.</remarks> @return
      
    </member>
    <member name="M:com.aspose.pdf.TextParagraph.setHorizontalAlignment(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TextParagraph.getFormattingOptions">
       
        <p>Gets formatting options.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextParagraph.setFormattingOptions(TextFormattingOptions)">
       
        <p>Sets formatting options.</p> 
      
      <param name="TextFormattingOptions"/>
    </member>
    <member name="M:com.aspose.pdf.TextParagraph.getPosition">
       
        <p>Gets position of the paragraph.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextParagraph.setPosition(Position)">
       
        <p>Sets position of the paragraph.</p> 
      
      <param name="Position"/>
    </member>
    <member name="M:com.aspose.pdf.TextParagraph.getTextRectangle">
      Gets rectangle of the text placed to the paragraph. @return
    </member>
    <member name="M:com.aspose.pdf.TextParagraph.getRectangle">
       
        <p>Gets rectangle of the paragraph.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextParagraph.setRectangle(Rectangle)">
       
        <p>Sets rectangle of the paragraph.</p> 
      
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.TextParagraph.getMargin">
      Gets or sets the padding. @return
    </member>
    <member name="M:com.aspose.pdf.TextParagraph.setMargin(MarginInfo)">
      <param name="MarginInfo"/>
    </member>
    <member name="M:com.aspose.pdf.TextParagraph.beginEdit">
      Begins the editing of the TextParagraph.
        <remarks>Improves performance of TextParagraph population. Any layout calculation is suspended until EndEdit method is invoked. Note that method invoke can't be nested.</remarks> 
      
    </member>
    <member name="M:com.aspose.pdf.TextParagraph.endEdit">
      Ends the editing of the TextParagraph.
        <remarks>Improves performance of TextParagraph population. Any layout calculation is suspended until EndEdit method is invoked. Note that method invoke can't be nested.</remarks> 
      
    </member>
    <member name="M:com.aspose.pdf.TextParagraph.appendLine(String)">
       
        <p>Appends text line</p> @param line The new line's text.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.TextParagraph.appendLine(String,float)">
       
        <p>Appends text line.</p> @param line The new line's text. @param lineSpacing Additional spacing (0.0 is default and corresponds to default text line height). The spacing value is added to default line spacing for the particular line, so you may specify 12.0 to get empty row AFTER a text line drawn with 12pt font.
      
      <param name="String"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.TextParagraph.appendLine(String,TextState)">
       
        <p>Appends text line with text state parameters.</p> @param line The new line's text. @param textState Text state of the new line.
      
      <param name="String"/>
      <param name="TextState"/>
    </member>
    <member name="M:com.aspose.pdf.TextParagraph.appendLine(String,TextState,float)">
       
        <p>Appends text line with text state parameters</p> @param line The new line's text. @param textState Text state of the new line. @param lineSpacing Additional spacing (0.0 is default and corresponds to default text line height). The spacing value is added to default line spacing for the particular line, so you may specify 12.0 to get empty row AFTER a text line drawn with 12pt font.
      
      <param name="String"/>
      <param name="TextState"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.TextParagraph.appendLine(TextFragment)">
      Appends text line with text state parameters. @param line The new line's text.
      <param name="TextFragment"/>
    </member>
    <member name="M:com.aspose.pdf.TextParagraph.appendLine(TextFragment,TextState)">
      Appends text line with text state parameters. @param line The new line's text. @param textState Text state of the new line.
      <param name="TextFragment"/>
      <param name="TextState"/>
    </member>
    <member name="M:com.aspose.pdf.TextParagraph.appendLine(TextFragment,TextState,float)">
      Appends text line with text state parameters @param line The new line's text. @param textState Text state of the new line. @param lineSpacing Additional spacing (0.0 is default and corresponds to default text line height). The spacing value is added to default line spacing for the particular line, so you may specify 12.0 to get empty row AFTER a text line drawn with 12pt font.
      <param name="TextFragment"/>
      <param name="TextState"/>
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.TextParagraph.setMatrix(Matrix)">
       
        <p>Sets Rotation of the paragraph.</p> 
      
      <param name="Matrix"/>
    </member>
    <member name="M:com.aspose.pdf.TextParagraph.#ctor">
       
        <p>Creates {@code TextParagraph} object.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextParagraph.oldCodeCompatibilityMode"/>
    <member name="F:com.aspose.pdf.TextParagraph.backgroundMode">
       
        <p>background mode for the text paragraph TextBackgroundMode.class</p> 
      
    </member>
    <member name="T:com.aspose.pdf.TextParagraph.TextBackgroundMode">
       
        <p>Background mode for TextParagraph</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextParagraph.TextBackgroundMode.WholeParagraph">
       
        <p>Background is set for the whole paragraph as single solid rectangle.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextParagraph.TextBackgroundMode.LogicalLine">
       
        <p>Each line will have it's own rectangle.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.TextReplaceOptions">
       
        <p>Represents text replace options</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextReplaceOptions.getReplaceScope">
       
        <p>Gets or sets a scope where replace text operation is applied</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextReplaceOptions.setReplaceScope(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TextReplaceOptions.#ctor(int)">
       
        <p>Initializes new instance of the {@code TextReplaceOptions} object for the specified scope.</p> @param scope
      
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.TextReplaceOptions.Scope">
       
        <p>Scope where replace text operation is applied REPLACE_FIRST by default</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextReplaceOptions.Scope.REPLACE_FIRST">
       
        <p>Replace only first occurrence of the text on each of affected pages</p> 
      
    </member>
    <member name="F:com.aspose.pdf.TextReplaceOptions.Scope.REPLACE_ALL">
       
        <p>Replace all text occurrences on all affected pages</p> 
      
    </member>
    <member name="T:com.aspose.pdf.TextSearchOptions">
       
        <p>Represents text search options</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextSearchOptions.isRegularExpressionUsed">
       
        <p>Indicated that regular expression is used or not</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextSearchOptions.isRegularExpressionUsed(boolean)">
       
        <p>Indicated that regular expression is used or not</p> 
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.TextSearchOptions.getLimitToPageBounds">
      Gets indication that text is searched within the page bounds. @return
    </member>
    <member name="M:com.aspose.pdf.TextSearchOptions.setLimitToPageBounds(boolean)">
      Sets indication that text is searched within the page bounds. @return
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.TextSearchOptions.getRectangle">
      Gets rectangle that bounds the searched text. The property may be used in case it is required to delimit text extraction or text replace region. @return
    </member>
    <member name="M:com.aspose.pdf.TextSearchOptions.setRectangle(Rectangle)">
      Sets rectangle that bounds the searched text. The property may be used in case it is required to delimit text extraction or text replace region. @return
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.TextSearchOptions.#ctor(boolean)">
       
        <p>Initializes new instance of the {@code TextSearchOptions} object. Specifies regular expression usage mode.</p> 
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.TextSearchOptions.#ctor(Rectangle)">
      Initializes new instance of the 
        <see cref="TextSearchOptions"/> object. Specifies rectangle that delimits the searched text. @param rectangle
      
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.TextSearchOptions.#ctor(Rectangle,boolean)">
      Initializes new instance of the 
        <see cref="TextSearchOptions"/> object. Specifies rectangle that delimits the searched text and regular expression usage mode. @param rectangle @param isRegularExpressionUsed
      
      <param name="Rectangle"/>
      <param name="boolean"/>
    </member>
    <member name="T:com.aspose.pdf.TextSegment">
       
        <p>Represents segment of Pdf text.</p>
        <p>
          <hr>
            <blockquote>
              <pre>The example demonstrates how to change text color and font size of the text with {@code TextState} object of {@code TextSegment} object. 
                <pre lang="Java">// Open document Document doc = new Document("D:\\Tests\\input.pdf"); // Create TextFragmentAbsorber object to find all "hello world" text occurrences TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world"); // Accept the absorber for first page doc.getPages().get(1).accept(absorber); // Change foreground color of the first text segment of the first text occurrence absorber.getTextFragments().get(1).getSegments().get(1).getTextState().setForegroundColor ( java.awt.Color.RED); // Change font size of the first text segment of the first text occurrence absorber.getTextFragments().get(1).getSegments().get_Item(1).getTextState().setFontSize ( 15); // Save document doc.save("D:\\Tests\\output.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p>
        <p>
          <hr>In a few words, {@code TextSegment} objects are children of {@code TextFragment} object. In details: Text of pdf document in {@code Aspose.Pdf} is represented by two basic objects: {@code TextFragment} and {@code TextSegment} The differences between them is mostly context-dependent. Let's consider following scenario. User searches text "hello world" to operate with it, change it's properties, look etc. 
            <pre lang="Java">Document doc = new Document(docFile); TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world"); doc.getPages().get(1).accept(absorber);</pre> Phisycally pdf text's representation is very complex. The text "hello world" may consist of several phisycally independent text segments. The Aspose.Pdf text model basically establishes that {@code TextFragment} object provides single logic operation set over physical {@code TextSegment} objects set that represent user's query. In text search scenario, {@code TextFragment} is logical "hello world" text representation, and {@code TextSegment} object collection represents all physical segments that construct "hello world" text object. So, {@code TextFragment} is close to logical text representation. And {@code TextSegment} is close to physical text representation. Obviously each {@code TextSegment} object may have it's own font, coloring, positioning properties. {@code TextFragment} provides simple way to change text with it's properties: set font, set font size, set font color etc. Meanwhile {@code TextSegment} objects are accessible and users are able to operate with {@code TextSegment} objects independently.
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextSegment.getText">
       
        <p>Gets or sets {@code string} text object that the {@code TextSegment} object represents.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextSegment.setText(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.TextSegment.getTextState">
       
        <p>Gets or sets text state for the text that {@code TextSegment} object represents.</p>
        <p>
          <hr>Provides a way to change following properties of the text: Font FontSize FontStyle ForegroundColor BackgroundColor</hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextSegment.setTextState(TextState)">
      <param name="TextState"/>
    </member>
    <member name="M:com.aspose.pdf.TextSegment.getPosition">
       
        <p>Gets text position for text, represented with {@code TextSegment} object.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextSegment.setPosition(Position)">
      <param name="Position"/>
    </member>
    <member name="M:com.aspose.pdf.TextSegment.getRectangle">
       
        <p>Gets rectangle of the TextSegment</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextSegment.getBaselinePosition">
       
        <p>Gets text position for text, represented with {@code TextSegment} object. The YIndent of the Position structure represents baseline coordinate of the text segment.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextSegment.setBaselinePosition(Position)">
      <param name="Position"/>
    </member>
    <member name="M:com.aspose.pdf.TextSegment.getTextEditOptions">
       
        <p>Gets or sets text edit options. The options define special behavior when requested symbol cannot be written with font.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextSegment.setTextEditOptions(TextEditOptions)">
      <param name="TextEditOptions"/>
    </member>
    <member name="M:com.aspose.pdf.TextSegment.getCharacters">
       
        <p>Gets collection of CharInfo objects that represent information on characters in the text segment.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextSegment.#ctor">
       
        <p>Creates TextSegment object.</p>
        <p>
          <hr>
            <blockquote>
              <pre>The example demonstrates how to create text fragment object, add a text segment to the text fragment collection and append it to the Pdf page. 
                <pre lang="JAva">Document doc = new Document(inFile); Page page = (Page)doc.getPages().get(1); // create text fragment TextFragment tf = new TextFragment("main text"); tf.setPosition ( new Position(100, 600)); // set it's text properties tf.getTextState().setFontSize ( 5); tf.getTextState().setFont ( FontRepository.FindFont("TimesNewRoman")); tf.getTextState().setBackgroundColor ( Color.GRAY); tf.getTextState().setForegroundColor ( Color.RED); // add one more segment to text fragment's Segments collection TextSegment segment2 = new TextSegment(); segment2.setText ( "another segment"); tf.getSegments().add(segment2); // create TextBuilder object TextBuilder builder = new TextBuilder(page); // append the text fragment to the Pdf page builder.appendText(tf); //save document doc.save(outFile);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextSegment.#ctor(String)">
       
        <p>Creates TextSegment object.</p>
        <p>
          <hr>
            <blockquote>
              <pre>The example demonstrates how to create text fragment object, add a text segment to the text fragment collection and append it to the Pdf page. 
                <pre lang="Java">Document doc = new Document(inFile); Page page = (Page)doc.getPages().get(1); // create text fragment TextFragment tf = new TextFragment("main text"); tf.setPosition ( new Position(100, 600)); // set it's text properties tf.getTextState().setFontSize ( 5); tf.getTextState().setFont ( FontRepository.FindFont("TimesNewRoman")); tf.getTextState().setBackgroundColor ( Color.GRAY); tf.getTextState().setForegroundColor ( Color.RED); // add one more segment to text fragment's Segments collection TextSegment segment2 = new TextSegment("another segment"); tf.getSegments().add(segment2); // create TextBuilder object TextBuilder builder = new TextBuilder(page); // append the text fragment to the Pdf page builder.appendText(tf); //save document doc.save(outFile);</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> @param text Text segment's text.
      
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.TextSegmentCollection">
       
        <p>Represents a text segments collection</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextSegmentCollection.size">
       
        <p>Gets the number of {@code TextSegment} object elements actually contained in the collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextSegmentCollection.getSyncRoot">
       
        <p>Gets an object that can be used to synchronize access to the collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextSegmentCollection.isSynchronized">
       
        <p>Gets a value indicating whether access to the collection is synchronized (thread safe).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextSegmentCollection.add(TextSegment)">
       
        <p>Adds the text segment element at the specified index.</p> 
      
      <param name="TextSegment"/>
    </member>
    <member name="M:com.aspose.pdf.TextSegmentCollection.delete(int)">
       
        <p>Deletes the text segment element at the specified index.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TextSegmentCollection.iterator">
       
        <p>Returns an enumerator for the entire collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextSegmentCollection.copyTo(Array,int)">
       
        <p>Copies the entire collection to a compatible one-dimensional Array, starting at the specified index of the target array</p> 
      
      <param name="Array"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TextSegmentCollection.get_Item(int)">
       
        <p>Gets the text segment element at the specified index.</p> @return @param index
      
      <param name="int"/>
    </member>
    <member name="T:com.aspose.pdf.TextStamp">
       
        <p>Reresents textual stamp.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextStamp.getWordWrap">
       
        <p>Defines word wrap. If this property set to true and Width value specified, text will be broken in the several lines to fit into specified width. Default value: false.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextStamp.setWordWrap(boolean)">
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.TextStamp.getJustify">
       
        <p>Defines text justification. If this property is set to true, both left and right edges of the text are aligned. Default value: false.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextStamp.setJustify(boolean)">
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.TextStamp.getScale">
       
        <p>Defines scaling of the text. If this property is set to true and Width value specified, text will be scaled in order to fit to specified width.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextStamp.setScale(boolean)">
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.TextStamp.getDefaultFont"/>
    <member name="M:com.aspose.pdf.TextStamp.getValue">
       
        <p>Gets string value which is used as stamp on the page.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextStamp.setValue(String)">
       
        <p>Sets string value which is used as stamp on the page.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.TextStamp.getTextState">
       
        <p>Gets text properties of the stamp. See {@code TextState} for details.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextStamp.getTextAlignment">
       
        <p>Alignment of the text inside the stamp.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextStamp.setTextAlignment(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TextStamp.put(Page)">
       
        <p>Adds textual stamp on the page.</p> @param page Page for stamping.
      
      <param name="Page"/>
    </member>
    <member name="M:com.aspose.pdf.TextStamp.getWidth">
       
        <p>Desired width of the stamp on the page.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextStamp.setWidth(double)">
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.TextStamp.getHeight">
       
        <p>Desired height of the stamp on the page.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextStamp.setHeight(double)">
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.TextStamp.#ctor(String)">
       
        <p>Initializes a new instance of the {@code TextStamp} class.</p> @param value Stamp value.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.TextStamp.#ctor(FormattedText)">
       
        <p>Initializes a new instance of the {@code TextStamp} class with formattedText object</p> 
      
      <param name="FormattedText"/>
    </member>
    <member name="F:com.aspose.pdf.TextStamp.DefaultFontSize"/>
    <member name="T:com.aspose.pdf.TextState">
       
        <p>Represents a text state of a text</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextState.applyChangesFrom(TextState)">
       
        <p>Applies settings from another textState</p> @param textState 
        <p>
          <hr>Only those properties will be copied that were changed explicitly.</hr>
        </p> 
      
      <param name="TextState"/>
    </member>
    <member name="M:com.aspose.pdf.TextState.setCharacterSpacing(float)">
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.TextState.getLineSpacing">
       
        <p>Gets or sets line spacing of the text.</p>
        <p>
          <hr>Note that the value is not preserved as a text characteristic within the document. The LineSpacing property getter works for an object in case it was explicitly set previously with LineSpacing setter for those object. The property is used by runtime in context of current generation/modification process.</hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextState.setLineSpacing(float)">
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.TextState.getHorizontalScaling">
       
        <p>Gets or sets horizontal scaling of the text.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextState.setHorizontalScaling(float)">
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.TextState.getWordSpacing">
       
        <p>Gets or sets word spacing of the text.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextState.setWordSpacing(float)">
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.TextState.getFontSize">
       
        <p>Gets or sets font size of the text.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextState.setFontSize(float)">
      <param name="float"/>
    </member>
    <member name="M:com.aspose.pdf.TextState.getFont">
       
        <p>Gets or sets font of the text.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextState.setFont(Font)">
      <param name="Font"/>
    </member>
    <member name="M:com.aspose.pdf.TextState.getForegroundColor">
       
        <p>Gets or sets foreground color of the text.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextState.setForegroundColor(com.aspose.pdf.Color)">
      <param name="com.aspose.pdf.Color"/>
    </member>
    <member name="M:com.aspose.pdf.TextState.getUnderline">
       
        <p>Sets underline for the text, represented by the {@code TextFragment} object</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextState.setUnderline(boolean)">
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.TextState.getBackgroundColor">
       
        <p>Sets background color of the text.</p>
        <p>
          <hr>Note that the value is not preserved as a text characteristic within the document. The BackgroundColor property getter works for an object in case it was explicitly set previously with BackgroundColor setter for those object. The property is used by runtime in context of current generation/modification process.</hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextState.setBackgroundColor(com.aspose.pdf.Color)">
      <param name="com.aspose.pdf.Color"/>
    </member>
    <member name="M:com.aspose.pdf.TextState.setFontStyle(int)">
       
        <p>Sets font style of the text.</p> 
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TextState.getHorizontalAlignment">
       
        <p>Gets or sets horizontal alignment for the text.</p>
        <p>
          <hr>HorizontalAlignment.None is equal to HorizontalAlignment.Left. Note that TextState.HorizontalAlignment property works in new document deneration generation scenarios only.</hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextState.setHorizontalAlignment(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TextState.calculateFontSize(String,Rectangle)">
       
        <p>Calculates the font size for the rectangle.</p> 
      
      <param name="String"/>
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.TextState.#ctor">
       
        <p>Creates text state object.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextState.#ctor(double)">
       
        <p>Creates text state object with font size specification.</p> @param fontSize
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.TextState.#ctor(java.awt.Color)">
       
        <p>Creates text state object with foreground color specification.</p> @param foregroundColor
      
      <param name="java.awt.Color"/>
    </member>
    <member name="M:com.aspose.pdf.TextState.#ctor(java.awt.Color,double)">
       
        <p>Creates text state object with foreground color and font size specification.</p> @param foregroundColor @param fontSize
      
      <param name="java.awt.Color"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.TextState.#ctor(String)">
       
        <p>Creates text state object with font family specification.</p> @param fontFamily
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.TextState.#ctor(String,boolean,boolean)">
       
        <p>Creates text state object with font family and font style specification.</p> @param fontFamily @param bold @param italic
      
      <param name="String"/>
      <param name="boolean"/>
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.TextState.#ctor(String,double)">
       
        <p>Creates text state object with font family and font size specification.</p> @param fontFamily @param fontSize
      
      <param name="String"/>
      <param name="double"/>
    </member>
    <member name="T:com.aspose.pdf.TextStyle">
       
        <p>Class representing checkbox field</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextStyle.getFontName">
       
        <p>Get the Name of the font.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextStyle.setFontName(String)">
       
        <p>Set the Name of the font.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.TextStyle.getFontSize">
       
        <p>Get the Fonts size.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextStyle.setFontSize(double)">
       
        <p>Set the Fonts size.</p> 
      
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.TextStyle.getAlignment"/>
    <member name="M:com.aspose.pdf.TextStyle.setAlignment(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TextStyle.getHorizontalAlignment">
       
        <p>Text alignment. Valid values are: Left, Center, Rigth.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextStyle.setHorizontalAlignment(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TextStyle.getColor">
       
        <p>Get the Color of the text.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.TextStyle.setColor(java.awt.Color)">
       
        <p>Set the Color of the text.</p> 
      
      <param name="java.awt.Color"/>
    </member>
    <member name="M:com.aspose.pdf.TextStyle.toString">
       
        <p>String representation of TextStyle.</p> @return String representation.
      
    </member>
    <member name="T:com.aspose.pdf.TocInfo">
      Represents table of contents info.
    </member>
    <member name="M:com.aspose.pdf.TocInfo.getFormatArray">
      Get format array for table of contents. @return
    </member>
    <member name="M:com.aspose.pdf.TocInfo.setFormatArray(LevelFormat[])">
      <param name="LevelFormat[]"/>
    </member>
    <member name="M:com.aspose.pdf.TocInfo.getFormatArrayLength">
      Get format array length @return
    </member>
    <member name="M:com.aspose.pdf.TocInfo.setFormatArrayLength(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.TocInfo.getTitle">
      Get table of contents title. @return
    </member>
    <member name="M:com.aspose.pdf.TocInfo.setTitle(TextFragment)">
      <param name="TextFragment"/>
    </member>
    <member name="T:com.aspose.pdf.UnderlineAnnotation">
       
        <p>Represents an underline annotation that appears as an underline in the text of the document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.UnderlineAnnotation.writeXfdf(XmlWriter)">
      <param name="XmlWriter"/>
    </member>
    <member name="M:com.aspose.pdf.UnderlineAnnotation.accept(AnnotationSelector)">
       
        <p>Accepts visitor object to process the annotation.</p> @param visitor Visitor object.
      
      <param name="AnnotationSelector"/>
    </member>
    <member name="M:com.aspose.pdf.UnderlineAnnotation.#ctor(Page,Rectangle)">
       
        <p>Creates new Underline annotation on the specified page.</p> @param page The document's page where annotation should be created. @param rect The annotation rectangle, defining the location of the annotation on the page.
      
      <param name="Page"/>
      <param name="Rectangle"/>
    </member>
    <member name="T:com.aspose.pdf.VerticalAlignment">
       
        <p>Enumeration of possible vertical alignment values.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.VerticalAlignment.None">
       
        <p>No alignment (use specified position).</p> 
      
    </member>
    <member name="F:com.aspose.pdf.VerticalAlignment.Top">
       
        <p>Align to top.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.VerticalAlignment.Center">
       
        <p>Center alignment.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.VerticalAlignment.Bottom">
       
        <p>Align to bottom.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.WarningInfo">
       
        <p>Immutable object for encapsulating warning information.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.WarningInfo.getWarningMessage">
       
        <p>Returns string representation of warning message.</p> @return the warning message
      
    </member>
    <member name="M:com.aspose.pdf.WarningInfo.getWarningTypeProperty">
       
        <p>Returns warning type.</p> @return the warning type
      
    </member>
    <member name="M:com.aspose.pdf.WarningInfo.#ctor(WarningType,String)">
       
        <p>Constructs instance for gathering information.</p> @param type the warning type to set @param message the warning message to set
      
      <param name="WarningType"/>
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.WarningType">
       
        <p>Enum represented warning type.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.WarningType.SourceFileCorruption">
       
        <p>The file is corrupted.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.WarningType.DataLoss">
       
        <p>Text/chart/image or other data is completely missing from either the documet tree following load, or the created document following save.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.WarningType.MajorFormattingLoss">
       
        <p>Major formatting losses compared to the original document. This is for occasions when the formatting loss is substantial but the data is still there.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.WarningType.MinorFormattingLoss">
       
        <p>Minor formatting losses compared to the original document. This is for minor losses of fidelity.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.WarningType.CompatibilityIssue">
       
        <p>Known issue that will prevent the document being opened by certain user agents, or previous versions of user agents.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.WarningType.UnexpectedContent">
       
        <p>The file has unexpected content.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.Watermark">
       
        <p>Represents a watermark of the page.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Watermark.getImage">
       
        <p>Gets an image of the watermark.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Watermark.getPosition">
       
        <p>Gets a position of the watermark's image on a page.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Watermark.getAvailable">
       
        <p>Gets a flag the watermark is present.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.Watermark.CloneTo(Watermark)">
      <param name="Watermark"/>
    </member>
    <member name="M:com.aspose.pdf.Watermark.Clone"/>
    <member name="M:com.aspose.pdf.Watermark.clone"/>
    <member name="M:com.aspose.pdf.Watermark.equals(Object)">
      <param name="Object"/>
    </member>
    <member name="M:com.aspose.pdf.Watermark.equals(Watermark,Watermark)">
      <param name="Watermark"/>
      <param name="Watermark"/>
    </member>
    <member name="M:com.aspose.pdf.Watermark.#ctor"/>
    <member name="M:com.aspose.pdf.Watermark.#ctor(com.aspose.ms.System.Drawing.Image,Rectangle)">
       
        <p>Initializes a watermark structure with an image and it's position on a page.</p> @param image @param rect
      
      <param name="com.aspose.ms.System.Drawing.Image"/>
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.Watermark.#ctor(com.aspose.ms.System.Drawing.Image)">
       
        <p>Initializes a watermark structure with an image.</p> @param image
      
      <param name="com.aspose.ms.System.Drawing.Image"/>
    </member>
    <member name="T:com.aspose.pdf.WatermarkArtifact">
      Class describes watermark artifact. This may be used to
    </member>
    <member name="M:com.aspose.pdf.WatermarkArtifact.#ctor">
      Creates instance of Watermark artifact.
    </member>
    <member name="M:com.aspose.pdf.WatermarkArtifact.#ctor(ArtifactCollection,Resources,Matrix,ArrayList,IPdfDictionary)">
      <param name="ArtifactCollection"/>
      <param name="Resources"/>
      <param name="Matrix"/>
      <param name="ArrayList"/>
      <param name="IPdfDictionary"/>
    </member>
    <member name="T:com.aspose.pdf.WebHyperlink"/>
    <member name="M:com.aspose.pdf.WebHyperlink.getUrl">
      Gets the web url. @return
    </member>
    <member name="M:com.aspose.pdf.WebHyperlink.setUrl(String)">
      Sets the web url. @return
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.WidgetAnnotation">
       
        <p>Class representing widget annotation.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.WidgetAnnotation.getOnActivated">
       
        <p>Get an action which shall be performed when the annotation is activated.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.WidgetAnnotation.setOnActivated(PdfAction)">
       
        <p>Set an action which shall be performed when the annotation is activated.</p> 
      
      <param name="PdfAction"/>
    </member>
    <member name="M:com.aspose.pdf.WidgetAnnotation.getActions">
       
        <p>Gets the annotation actions.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.WidgetAnnotation.getHighlighting">
       
        <p>Annotation highlighting mode.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.WidgetAnnotation.setHighlighting(int)">
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.WidgetAnnotation.getParent">
       
        <p>Gets annotation parent.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.WidgetAnnotation.getDefaultAppearance">
       
        <p>Gets default appearance of the field.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.WidgetAnnotation.setDefaultAppearance(DefaultAppearance)">
       
        <p>Sets default appearance of the field.</p> 
      
      <param name="DefaultAppearance"/>
    </member>
    <member name="M:com.aspose.pdf.WidgetAnnotation.getReadOnly">
       
        <p>Gets or sets read only status of the field.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.WidgetAnnotation.setReadOnly(boolean)">
       
        <p>Sets or sets read only status of the field.</p> 
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.WidgetAnnotation.getRequired">
       
        <p>Gets or sets required status of the field.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.WidgetAnnotation.setRequired(boolean)">
       
        <p>Sets or sets read only status of the field.</p> 
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.WidgetAnnotation.getExportable">
       
        <p>Gets or sets exportable flag of the field.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.WidgetAnnotation.setExportable(boolean)">
       
        <p>Sets or sets read only status of the field.</p> 
      
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.WidgetAnnotation.accept(AnnotationSelector)">
       
        <p>Accepts visitor.</p> @param visitor Visitor to be accepted.
      
      <param name="AnnotationSelector"/>
    </member>
    <member name="T:com.aspose.pdf.XFA">
       
        <p>Represents XML form regarding XML Forms Architecture (XFA).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XFA.getTemplate">
       
        <p>XFA Template component of an XFA form.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XFA.getDatasets">
       
        <p>XFA Datasets component of an XFA form.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XFA.getConfig">
       
        <p>XFA Config component of an XFA form.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XFA.getXDP">
       
        <p>XML Data Package (all XFA form components within a surrounding XML container).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XFA.get_Item(String)">
       
        <p>Gets of sets data node value according {@code path}.</p> @return Data node value. @param path Data node path, e.g. form1[0].Subform1[0].Subform2[0].Subform3[0].TextField[0]. Be sure to include indices even if data contains only single occurences of each nodes, i.e. write node1[0].node2[0]... instead of node1.node2...
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.XFA.set_Item(String,String)">
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.XFA.hasNode(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.XFA.getFieldNames">
       
        <p>List of field names in the form template.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XFA.getFieldTemplate(String)">
       
        <p>Returns XML node of XFA field tempalte.</p> @return XL node with field template. @param fieldName Path of the field which template must be found.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.XFA.getFieldTemplates">
       
        <p>Returns list of all field templates on XFA form.</p> @return List of field templates.
      
    </member>
    <member name="M:com.aspose.pdf.XFA.getNamespaceManager">
       
        <p>Returns namespace manager with namespaces used for template and data.</p> @return
      
    </member>
    <member name="M:com.aspose.pdf.XFA.getNamespaceManager_">
       
        <p>Gets the namespace for the XFA form. The following namepsaces are defined: "data" for form data and "tpl" for form template.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XFA.flattenXfaField(XmlNode)">
       
        <p>Flatten field of XFA form.</p> @param field XFA form field node.
      
      <param name="XmlNode"/>
    </member>
    <member name="M:com.aspose.pdf.XFA.beginCachedUpdates">
       
        <p>Start cached updates mode. All changes made to XFA will be cached and saved into document structure at EndCachedUpdates call. This allows to improve preformacne by avoiding redudant operations on saving XML packets into document when a lot of changes to XFA are made.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XFA.endCachedUpdates">
       
        <p>Ends cahced updates and saves all data into document structure.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.XfaMerge">
       
        <p>Internal class for XFA merging operations</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XfaMerge.getRootCreated"/>
    <member name="M:com.aspose.pdf.XfaMerge.append(IDocument,Hashtable)">
       
        <p>Appends XFA form of soruce document to destination docyument</p> @param src @param RenameMap Map of field renamings
      
      <param name="IDocument"/>
      <param name="Hashtable"/>
    </member>
    <member name="M:com.aspose.pdf.XfaMerge.resynAcroForm"/>
    <member name="M:com.aspose.pdf.XfaMerge.#ctor(IDocument)">
      <param name="IDocument"/>
    </member>
    <member name="T:com.aspose.pdf.XfaRenderer"/>
    <member name="M:com.aspose.pdf.XfaRenderer.build(XFA)">
      <param name="XFA"/>
    </member>
    <member name="T:com.aspose.pdf.XfdfReader">
       
        <p>Class which peroformes reading of XFDF format.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">Document doc = new Document("example.pdf"); InputStream xfdfStream = new FileInputStream("filename"); XfdfReader.readAnnotations(xfdfStream, doc); xfdfStream.close(); doc.save("example_out.pdf");</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.XfdfReader.readAnnotations(InputStream,IDocument)">
       
        <p>Import annotations from XFDF file and put them into document.</p> @param stream Source stream containing XFDF file. @param document Document where annotations will be added.
      
      <param name="InputStream"/>
      <param name="IDocument"/>
    </member>
    <member name="M:com.aspose.pdf.XfdfReader.readFields(InputStream,Document)">
       
        <p>Import field values from XFDF file.</p> @param stream Stream containing XFDF data. @param document Document where fields data will be imported.
      
      <param name="InputStream"/>
      <param name="Document"/>
    </member>
    <member name="M:com.aspose.pdf.XfdfReader.readFields(Stream,IDocument,IList,IList)">
       
        <p>Import field values from XFDF file.</p> @param stream Stream containing XFDF data. @param document Document where fields data will be imported.
      
      <param name="Stream"/>
      <param name="IDocument"/>
      <param name="IList"/>
      <param name="IList"/>
    </member>
    <member name="M:com.aspose.pdf.XfdfReader.getElements(XmlReader)">
       
        <p>Parses XFDF file and returns information as hashtable.</p> @return Hashtable with information parsed from XFDF file. @param reader XmlReader for the source file.
      
      <param name="XmlReader"/>
    </member>
    <member name="T:com.aspose.pdf.XfdfWriter">
       
        <p>Aggregates methods of writing annotations and fields to XFDF file format</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XfdfWriter.writeAnnotations(Stream,IDocument)">
       
        <p>Writes annotations from list to XFDF stream.</p> @param stream XFDF stream. @param document The document that holds the annotations.
      
      <param name="Stream"/>
      <param name="IDocument"/>
    </member>
    <member name="M:com.aspose.pdf.XfdfWriter.writeFields(Stream,IDocument)">
      <param name="Stream"/>
      <param name="IDocument"/>
    </member>
    <member name="T:com.aspose.pdf.XForm">
       
        <p>Class represent XForm</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XForm.getEngineObj"/>
    <member name="M:com.aspose.pdf.XForm.getBBox">
       
        <p>Gets or sets form bounding box.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XForm.setBBox(Rectangle)">
      <param name="Rectangle"/>
    </member>
    <member name="M:com.aspose.pdf.XForm.getName">
       
        <p>Gets form name. Form name is name which used to reference form in XObejct ductionary in page resources.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XForm.setName(String)">
       
        <p>Sets form name. Form name is name which used to reference form in XObejct ductionary in page resources.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.XForm.getContents">
       
        <p>Gets operators of the form</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XForm.getMatrix">
       
        <p>Gets matrix of the form.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XForm.setMatrix(Matrix)">
       
        <p>Sets matrix of the form.</p> 
      
      <param name="Matrix"/>
    </member>
    <member name="M:com.aspose.pdf.XForm.getResources">
       
        <p>Gets Form XObject resources.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XForm.createNewForm(ITrailerable)">
       
        <p>Creates new XForm in the document.</p> @return Newly created XForm @param trailerable Describes ITrailerable object
      
      <param name="ITrailerable"/>
    </member>
    <member name="M:com.aspose.pdf.XForm.containsOwnResources"/>
    <member name="M:com.aspose.pdf.XForm.createNewForm(Page,ITrailerable,Copier)">
      <param name="Page"/>
      <param name="ITrailerable"/>
      <param name="Copier"/>
    </member>
    <member name="M:com.aspose.pdf.XForm.createNewForm(Page,IDocument)">
       
        <p>Creates XForm which duplicates contents of the page.</p> @return Newly created XForm. @param source Source page @param document Document where new XForm will be added.
      
      <param name="Page"/>
      <param name="IDocument"/>
    </member>
    <member name="M:com.aspose.pdf.XForm.getRectangle"/>
    <member name="M:com.aspose.pdf.XForm.getRectangle_Rename_Namesake"/>
    <member name="M:com.aspose.pdf.XForm.#ctor(IPdfObject)">
       
        <p>Constructor of XForm.Constructs XForm on base of Pdf.Kit.Engine PDf object.</p> @param xform
      
      <param name="IPdfObject"/>
    </member>
    <member name="T:com.aspose.pdf.XFormCollection">
       
        <p>Class represents collection of XFormCollection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XFormCollection.size">
       
        <p>Gets count of XForms in collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XFormCollection.isSynchronized">
       
        <p>Returns true if object is synchronized.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XFormCollection.getSyncRoot">
       
        <p>Synchronization object.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XFormCollection.add(XForm)">
       
        <p>Adds new XForm into collection.</p> @param xform XForm to add into collection
      
      <param name="XForm"/>
    </member>
    <member name="M:com.aspose.pdf.XFormCollection.delete(int)">
       
        <p>Delete XForm from collectin</p> @param index Index of XForm which must be deleted
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.XFormCollection.delete">
       
        <p>Deletes all XForms from collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XFormCollection.copyTo(Array,int)">
       
        <p>Copies XFormCollection into collection.</p> @param array Array of XForm to be copied @param index Index where XFormCollection will be copied
      
      <param name="Array"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.XFormCollection.iterator">
       
        <p>Retunrs collection enumerator.</p> @return Enumerator for collection
      
    </member>
    <member name="M:com.aspose.pdf.XFormCollection.delete(String)">
       
        <p>Deletes XForm from collection by form name.</p> @param name Name of XForm to be deleted.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.XFormCollection.get_Item(int)">
       
        <p>Returns XForm by index.</p> @return Retreived XForm @param index Index of XFormCollection. XForms numbering is started from 1
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.XFormCollection.get_Item(String)">
       
        <p>Returns XForm by its name. Exception is thrown if XForm with specified name is not found.</p> @return @param name Name of XForm
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.XFormCollection.getFormName(XForm)">
       
        <p>Returns name of the form in this form collection</p> @return Form name in the collection; Null if form is not contained in the colleciton @param form Form which name is searhced
      
      <param name="XForm"/>
    </member>
    <member name="M:com.aspose.pdf.XFormCollection.hasForm(String)">
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.XImage">
       
        <p>Class representing image X-Object.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XImage.getGrayscaled">
       
        <p>Gets grayscaled version of image.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XImage.delete">
       
        <p>Deletes image from the parent collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XImage.replace(InputStream)">
       
        <p>Replaces image onto stream specified in {@code image}.</p> * @param image Stream with image data.
      
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.XImage.getEngineImg"/>
    <member name="M:com.aspose.pdf.XImage.getWidth">
       
        <p>Gets width of the image.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XImage.getHeight">
       
        <p>Gets height of the image.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XImage.getName">
       
        <p>Gets or sets image name.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XImage.setName(String)">
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.XImage.save(OutputStream)">
      <param name="OutputStream"/>
    </member>
    <member name="M:com.aspose.pdf.XImage.save(OutputStream,ImageFormat)">
      <param name="OutputStream"/>
      <param name="ImageFormat"/>
    </member>
    <member name="M:com.aspose.pdf.XImage.getImage"/>
    <member name="M:com.aspose.pdf.XImage.saveInternal(Stream,int)">
       
        <p>Saves image data into stream as JPEG image with specified resolution.</p> @param stream Stream where image data will be saved. @param resolution Image resolution
      
      <param name="Stream"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.XImage.save(OutputStream,int)">
       
        <p>Saves image into stream with requested format with specified resolution.</p> @param stream Stream where image will be saved @param format Format which will be used for image enconding. {@code ImageFormat} @param resolution Image resolution
      
      <param name="OutputStream"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.XImage.saveInternal(Stream,ImageFormat,int)">
      <param name="Stream"/>
      <param name="ImageFormat"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.XImage.save(OutputStream,ImageFormat,int)">
      <param name="OutputStream"/>
      <param name="ImageFormat"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.XImage.isImage(IPdfPrimitive)">
       
        <p>Returns true if the primitive is an image.</p> 
      
      <param name="IPdfPrimitive"/>
    </member>
    <member name="M:com.aspose.pdf.XImage.#ctor(IPdfDataStream)">
      <param name="IPdfDataStream"/>
    </member>
    <member name="T:com.aspose.pdf.XImageCollection">
       
        <p>Class representing XImage collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XImageCollection.size">
       
        <p>Count of images in collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XImageCollection.isSynchronized">
       
        <p>Returns true if object is synchronized.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XImageCollection.getSyncRoot">
       
        <p>Returns synchronization object.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XImageCollection.getNames">
       
        <p>Gets array of image names.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XImageCollection.addInternal(Stream)">
       
        <p>Adds entity to the end of the collection, so entity can be accessed by the last index.</p> 
      
      <param name="Stream"/>
    </member>
    <member name="M:com.aspose.pdf.XImageCollection.add(InputStream)">
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.XImageCollection.delete(int)">
       
        <p>Removes index from collection by index.</p> @param index Image index.
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.XImageCollection.delete(String)">
       
        <p>Removes index from collection by name.</p> @param name Name of image which must to be deleted.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.XImageCollection.delete">
       
        <p>Deletes images from collection.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XImageCollection.iterator">
       
        <p>Returns collection enumerator.</p> @return Enumerator of collection
      
    </member>
    <member name="M:com.aspose.pdf.XImageCollection.copyTo(Array,int)">
       
        <p>Copies array of images into collection.</p> @param array Array to be copied. @param index Index where images will be copied into collection.
      
      <param name="Array"/>
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.XImageCollection.replace(int,InputStream)">
      <param name="int"/>
      <param name="InputStream"/>
    </member>
    <member name="M:com.aspose.pdf.XImageCollection.get_Item(int)">
       
        <p>Gets image from collection by its index.</p> @return Retreived image. @param index Image index
      
      <param name="int"/>
    </member>
    <member name="M:com.aspose.pdf.XImageCollection.get_Item(String)">
       
        <p>Gets image from collection by its name.</p> @return Retreived image. @param name Image name.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.XImageCollection.hasImage(String)">
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.XmlLoadOptions">
       
        <p>Represents options for loading/importing XML file into pdf document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XmlLoadOptions.getXslStream"/>
    <member name="M:com.aspose.pdf.XmlLoadOptions.close"/>
    <member name="M:com.aspose.pdf.XmlLoadOptions.#ctor">
       
        <p>Creates {@code XmlLoadOptions} object without xsl data.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XmlLoadOptions.#ctor(String)">
       
        <p>Creates {@code XmlLoadOptions} object with xsl data.</p> @param xslFile Xsl file to convert xml document into pdf document.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.XmlLoadOptions.#ctor(InputStream)">
      <param name="InputStream"/>
    </member>
    <member name="T:com.aspose.pdf.XmlSaveOptions">
       
        <p>Save options for export to Xml format</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XmlSaveOptions.#ctor">
       
        <p>Constructor</p> 
      
    </member>
    <member name="T:com.aspose.pdf.XmpPdfAExtensionCategoryType">
       
        <p>Property category: internal or external.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.XmpPdfAExtensionCategoryType.Internal">
       
        <p>Internal properties are created automatically from document content.</p> 
      
    </member>
    <member name="F:com.aspose.pdf.XmpPdfAExtensionCategoryType.External">
       
        <p>External properties are based on user input.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.XmpPdfAExtensionField">
       
        <p>This schema describes a field in a structured type. It is very similar to the PDF/A Property Value Type schema, but defines a field in a structure instead of a property. Schema namespace URI: http://www.aiim.org/pdfa/ns/field# Required schema namespace prefix: pdfaField.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionField.getName">
       
        <p>Field name. Field names must be valid XML element names.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionField.getValueType">
       
        <p>Field value type, drawn from XMP Specification 2004, or an embedded PDF/A value type extension schema. Predefined XMP type names or names of custom types.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionField.getXml(XmlDocument)">
       
        <p>Returns the list of xml elements that represent field in xml tree.</p> @return The list of fields. @param xmlDocument The source xml document.
      
      <param name="XmlDocument"/>
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionField.#ctor(String,String,String,String)">
       
        <p>Initializes object.</p> @param name The field name. @param value The field value. @param valueType The field value type. @param description The field description.
      
      <param name="String"/>
      <param name="String"/>
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.XmpPdfAExtensionObject">
       
        <p>Represents the base class for field, property, value type instances.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionObject.getDescription">
       
        <p>Gets the description.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionObject.getValue">
       
        <p>Gets the value.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionObject.setValue(String)">
       
        <p>Sets the value.</p> 
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionObject.getXml(XmlDocument)">
       
        <p>Returns the list of xml elements that represent object in xml tree.</p> @return &gt;The list of xml elements. @param xmlDocument The source xml document.
      
      <param name="XmlDocument"/>
    </member>
    <member name="T:com.aspose.pdf.XmpPdfAExtensionProperty">
       
        <p>Describes a single property. Schema namespace URI: http://www.aiim.org/pdfa/ns/property# Required schema namespace prefix: pdfaProperty</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionProperty.getCategory">
       
        <p>Gets the property category.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionProperty.getXml(XmlDocument)">
       
        <p>Returns the list of xml elements that represent property in xml tree.</p> @return The list of xml elements. @param xmlDocument The source xml document.
      
      <param name="XmlDocument"/>
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionProperty.#ctor(String,String,String,int,String)">
       
        <p>Initializes new object.</p> @param name The property name. @param value The property value. @param valueType The property value type. @param category The property category. @param description The property description.
      
      <param name="String"/>
      <param name="String"/>
      <param name="String"/>
      <param name="int"/>
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.XmpPdfAExtensionSchema">
       
        <p>Describes the XMP extension schema which is provided by PDF/A-1.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionSchema.getDescription">
       
        <p>Gets the schema description.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionSchema.getObjects">
       
        <p>Gets the list of objects (properties, value types).</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionSchema.add(XmpPdfAExtensionObject)">
       
        <p>Adds new object into schema.</p> @param obj The new object.
      
      <param name="XmpPdfAExtensionObject"/>
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionSchema.contains(XmpPdfAExtensionObject)">
       
        <p>Determines whether obj exists in schema.</p> @return True - object exists in schema; otherwise, false. @param obj The obj to find.
      
      <param name="XmpPdfAExtensionObject"/>
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionSchema.remove(XmpPdfAExtensionObject)">
       
        <p>Removes the object from schema.</p> @param obj The object to remove.
      
      <param name="XmpPdfAExtensionObject"/>
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionSchema.getSchemaXml(XmlDocument)">
       
        <p>Returns the xml element (tag - li) that represents schema in xml tree.</p> @return The xml element. @param xmlDocument The source xml document.
      
      <param name="XmlDocument"/>
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionSchema.getValuesXml(XmlDocument,XmlElement)">
       
        <p>Gets the values of properties as xml tree representation.</p> @param xmlDocument The source xml document. @param rootElement The root node of properties values list.
      
      <param name="XmlDocument"/>
      <param name="XmlElement"/>
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionSchema.isPdfAExtensionPrefix(String)">
       
        <p>Determines whether prefix value is a part of pdf-a extension.</p> @return True - prefix is a part of pdf-a extension; otherwise, false. @param localName The prefix value to validate.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionSchema.createSchemasElement(XmlNode)">
       
        <p>Creates the list of schemas elements from xml tree.</p> @return The dictionary of schemas elements in format (key, value): schema_prefix, schema value. @param rootNode The root node for schemas elements.
      
      <param name="XmlNode"/>
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionSchema.initializeSchemaValue(XmlNode,XmpPdfAExtensionSchema)">
       
        <p>Initializes the value of property.</p> @param node The current node that stores property value. @param schema The schema that contains property definition.
      
      <param name="XmlNode"/>
      <param name="XmpPdfAExtensionSchema"/>
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionSchema.createDescriptionValueXml(XmlDocument)">
       
        <p>Creates the description xml element for the block of properties values.</p> @return The description xml element. @param xmlDocument The source xml document.
      
      <param name="XmlDocument"/>
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionSchema.createDescriptionXml(XmlDocument)">
       
        <p>Creates the description xml element for the all schemas.</p> @return The description xml element. @param xmlDocument The source xml document.
      
      <param name="XmlDocument"/>
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionSchema.#ctor(XmpPdfAExtensionSchemaDescription)">
       
        <p>Initializes new object.</p> @param description The schema description.
      
      <param name="XmpPdfAExtensionSchemaDescription"/>
    </member>
    <member name="F:com.aspose.pdf.XmpPdfAExtensionSchema.DEFAULT_EXTENSION_NAMESPACE_PREFIX"/>
    <member name="F:com.aspose.pdf.XmpPdfAExtensionSchema.DEFAULT_EXTENSION_NAMESPACE_URI"/>
    <member name="F:com.aspose.pdf.XmpPdfAExtensionSchema.DEFAULT_SCHEMA_NAMESPACE_PREFIX"/>
    <member name="F:com.aspose.pdf.XmpPdfAExtensionSchema.DEFAULT_SCHEMA_NAMESPACE_URI"/>
    <member name="F:com.aspose.pdf.XmpPdfAExtensionSchema.DEFAULT_PROPERTY_NAMESPACE_PREFIX"/>
    <member name="F:com.aspose.pdf.XmpPdfAExtensionSchema.DEFAULT_PROPERTY_NAMESPACE_URI"/>
    <member name="F:com.aspose.pdf.XmpPdfAExtensionSchema.DEFAULT_VALUE_TYPE_NAMESPACE_PREFIX"/>
    <member name="F:com.aspose.pdf.XmpPdfAExtensionSchema.DEFAULT_VALUE_NAMESPACE_URI"/>
    <member name="F:com.aspose.pdf.XmpPdfAExtensionSchema.DEFAULT_FIELD_NAMESPACE_PREFIX"/>
    <member name="F:com.aspose.pdf.XmpPdfAExtensionSchema.DEFAULT_FIELD_NAMESPACE_URI"/>
    <member name="F:com.aspose.pdf.XmpPdfAExtensionSchema.RDF_PREFIX"/>
    <member name="F:com.aspose.pdf.XmpPdfAExtensionSchema.RDF_NAMESPACE_URI"/>
    <member name="T:com.aspose.pdf.XmpPdfAExtensionSchemaDescription">
       
        <p>Represents the description of XMP extension schema which is provided by PDF/A-1.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionSchemaDescription.getPrefix">
       
        <p>Gets the prefix.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionSchemaDescription.getNamespaceURI">
       
        <p>Gets the namespace URI.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionSchemaDescription.getDescription">
       
        <p>Gets the optional description.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionSchemaDescription.getXml(XmlDocument)">
       
        <p>Returns the list of xml elements that represent schema description in xml tree.</p> @return The list of xml elements. @param xmlDocument The source xml document.
      
      <param name="XmlDocument"/>
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionSchemaDescription.#ctor(String,String,String)">
       
        <p>Initializes new object.</p> @param prefix The prefix. @param namespaceURI The namespace URI. @param description The optional desciption.
      
      <param name="String"/>
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.XmpPdfAExtensionValueType">
       
        <p>The PDF/A ValueType schema is required for all property value types which are not defined in the XMP 2004 specification, i.e. for value types outside of the following list: - Array types (these are container types which may contain one or more fields): Alt, Bag, Seq - Basic value types: Boolean, (open and closed) Choice, Date, Dimensions, Integer, Lang Alt, Locale, MIMEType, ProperName, Real, Text, Thumbnail, URI, URL, XPath - Media Management value types: AgentName, RenditionClass, ResourceEvent, ResourceRef, Version - Basic Job/Workflow value type: Job - EXIF schema value types: Flash, CFAPattern, DeviceSettings, GPSCoordinate, OECF/SFR, Rational Schema namespace URI: http://www.aiim.org/pdfa/ns/type# Required schema namespace prefix: pdfaType</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionValueType.getType">
       
        <p>Gets the value type.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionValueType.getNamespaceUri">
       
        <p>Gets the namespace URI.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionValueType.getPrefix">
       
        <p>Gets the prefix.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionValueType.getFields">
       
        <p>Gets the list of fields.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionValueType.add(XmpPdfAExtensionField)">
       
        <p>Add new field.</p> @param field The field to add.
      
      <param name="XmpPdfAExtensionField"/>
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionValueType.addRange(XmpPdfAExtensionField[])">
       
        <p>Adds the range of fields.</p> @param fields The fields to add.
      
      <param name="XmpPdfAExtensionField[]"/>
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionValueType.remove(XmpPdfAExtensionField)">
       
        <p>Removes the field from the list of fields.</p> @param field The field to remove.
      
      <param name="XmpPdfAExtensionField"/>
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionValueType.clear">
       
        <p>Clears all fields.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionValueType.getXml(XmlDocument)">
       
        <p>Returns the list of xml elements that represent value type in xml tree.</p> @return The list of xml elements. @param xmlDocument The source xml document.
      
      <param name="XmlDocument"/>
    </member>
    <member name="M:com.aspose.pdf.XmpPdfAExtensionValueType.#ctor(String,String,String,String)">
       
        <p>Initializes new object.</p> @param type The value type. @param namespaceUri The namespace URI. @param prefix The prefix. @param description The description.
      
      <param name="String"/>
      <param name="String"/>
      <param name="String"/>
      <param name="String"/>
    </member>
    <member name="T:com.aspose.pdf.XpsLoadOptions">
       
        <p>Represents options for loading/importing xps file into pdf document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XpsLoadOptions.#ctor">
       
        <p>Creates default load options for converting xps file into pdf document.</p> 
      
    </member>
    <member name="T:com.aspose.pdf.XpsSaveOptions">
       
        <p>Save options for export to Xps format</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XpsSaveOptions.#ctor">
       
        <p>Constructor</p> 
      
    </member>
    <member name="T:com.aspose.pdf.XslFoLoadOptions">
       
        <p>Represents options for loading/importing XSL-FO file into pdf document.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XslFoLoadOptions.isUseOldXslFoEngine"/>
    <member name="M:com.aspose.pdf.XslFoLoadOptions.setUseOldXslFoEngine(boolean)">
      This property will be available during migration to new XSL-FO engine. If this property is true, the previous version of XSL-FO engine will be used. @param useOldXslFoEngine
      <param name="boolean"/>
    </member>
    <member name="M:com.aspose.pdf.XslFoLoadOptions.#ctor">
       
        <p>Creates {@code XslFoLoadOptions} object without xsl data.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XslFoLoadOptions.#ctor(String)">
       
        <p>Creates {@code XslFoLoadOptions} object with xsl data.</p> @param xslFile Xsl file to convert XSL-FO document into pdf document.
      
      <param name="String"/>
    </member>
    <member name="M:com.aspose.pdf.XslFoLoadOptions.#ctor(InputStream)">
      <param name="InputStream"/>
    </member>
    <member name="T:com.aspose.pdf.XYZExplicitDestination">
       
        <p>Represents explicit destination that displays the page with the coordinates (left, top) positioned at the upper-left corner of the window and the contents of the page magnified by the factor zoom. A null value for any of the parameters left, top, or zoom specifies that the current value of that parameter is to be retained unchanged. A zoom value of 0 has the same meaning as a null value.</p>
        <p>
          <hr>
            <blockquote>
              <pre> 
                <pre lang="Java">Document doc = new Document("example.pdf"); XYZExplicitDestination dest = (XYZExplicitDestination)doc.getOutlines().get_Item(1).getDestination(); String left = dest.getLeft(); String top = dest.getTop(); String zoom = dest.getZoom();</pre> 
              </pre>
            </blockquote>
          </hr>
        </p> 
      
    </member>
    <member name="M:com.aspose.pdf.XYZExplicitDestination.getLeft">
       
        <p>Gets left horizontal coordinate of the upper-left corner of the window.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XYZExplicitDestination.getTop">
       
        <p>Gets top vertical coordinate of the upper-left corner of the window.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XYZExplicitDestination.getZoom">
       
        <p>Gets zoom factor.</p> 
      
    </member>
    <member name="M:com.aspose.pdf.XYZExplicitDestination.toString">
       
        <p>Converts the object state into string value. Example: "1 XYZ 100 200 3".</p> @return String value representing object state.
      
    </member>
    <member name="M:com.aspose.pdf.XYZExplicitDestination.#ctor(Page,double,double,double)">
       
        <p>Creates the instance and initializes it by DOM page object and visible parameters.</p> @param page DOM page object. @param left Left horizontal coordinate of the upper-left corner of the window. @param top Top vertical coordinate of the upper-left corner of the window. @param zoom Zoom factor.
      
      <param name="Page"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.XYZExplicitDestination.#ctor(IDocument,int,double,double,double)">
       
        <p>Creates remote explicit destination.</p> @param document The parent document that contains this object. @param pageNumber The destination page number of remote document. @param left Left horizontal coordinate of the upper-left corner of the window. @param top Top vertical coordinate of the upper-left corner of the window. @param zoom Zoom factor.
      
      <param name="IDocument"/>
      <param name="int"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
    </member>
    <member name="M:com.aspose.pdf.XYZExplicitDestination.#ctor(int,double,double,double)">
       
        <p>Creates remote explicit destination.</p> @param pageNumber The destination page number of remote document. @param left Left horizontal coordinate of the upper-left corner of the window. @param top Top vertical coordinate of the upper-left corner of the window. @param zoom Zoom factor.
      
      <param name="int"/>
      <param name="double"/>
      <param name="double"/>
      <param name="double"/>
    </member>
  </members>
</doc>
